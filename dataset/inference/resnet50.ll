; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%0 = type { i32*, i32 }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }
%4 = type { i8*, i8* }
%5 = type { i8*, i8* }
%6 = type { i8*, i8* }
%7 = type { i8*, i8*, i8*, i8*, i8* }
%8 = type { i8*, i8*, i8*, i8*, i8*, i8*, i32 }
%9 = type { i8*, i8*, i8*, i8*, i8* }
%10 = type { i8*, i8*, i8*, i8*, i8*, i8*, i32 }
%11 = type { i8*, i8* }
%12 = type { i8*, i8* }
%13 = type { i8*, i8* }
%14 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32 }
%15 = type { i8*, i8* }
%16 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32 }
%17 = type { i8*, i8*, i8* }
%18 = type { i8*, i8*, i8*, i8*, i8*, i8*, i32 }
%19 = type { i8*, i8*, i8* }
%20 = type { i8*, i8* }
%21 = type { i8*, i8* }
%22 = type { i8*, i8* }
%23 = type { i8*, i8*, i8*, i8*, i8* }
%24 = type { i8*, i8* }
%25 = type { i8*, i8*, i8*, i8*, i8*, i8* }
%26 = type { i8*, i8* }
%27 = type { i8*, i8* }
%28 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%29 = type { i8*, i8* }
%30 = type { i8*, i8*, i8* }
%31 = type { i8*, i8*, i8* }
%32 = type { i8*, i8*, i8*, i8*, i8*, i8*, i32 }
%33 = type { i8*, i8*, i8* }
%34 = type { i8*, i8* }
%35 = type { i8*, i8* }
%36 = type { i8*, i8* }
%37 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%38 = type { i8*, i8* }
%39 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%40 = type { i8*, i8* }
%41 = type { i8*, i8*, i8* }
%42 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32 }
%43 = type { i8*, i8* }
%44 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%45 = type { i8*, i8* }
%46 = type { i8*, i8* }
%47 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%48 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%49 = type { i8*, i8* }
%50 = type { i8*, i8* }
%51 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%52 = type { i8*, i8*, i8*, i8*, i8*, i32 }
%53 = type { i8*, i8* }
%54 = type { i8*, i8*, i8*, i8*, i8* }
%55 = type { i8*, i8* }
%56 = type { i8*, i8* }
%57 = type { i8*, i8*, i8*, i8*, i8*, i32 }

@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@__TVMBackendParallelLaunch = linkonce dllexport local_unnamed_addr global i32 (i32 (i32, %0*, i8*)*, i8*, i32)* null, align 8
@.str = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_45: num_args should be 2\00", align 1
@.str.1 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_45: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_45: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [55 x i8] c"Assert fail: (dev_type == 1), device_type need to be 1\00", align 1
@.str.4 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 5\00", align 1
@.str.5 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg0, 0, 5) == (uint8)2) && (tvm_struct_get(arg0, 0, 6) == (uint8)32)) && (tvm_struct_get(arg0, 0, 7) == (uint16)1)), arg0.dtype is expected to be float32\00", align 1
@.str.6 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[0])), Argument arg0.shape[0] has an unsatisfied constraint\00", align 1
@.str.7 = private constant [95 x i8] c"Assert fail: (4 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.8 = private constant [96 x i8] c"Assert fail: (14 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.9 = private constant [96 x i8] c"Assert fail: (14 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.10 = private constant [96 x i8] c"Assert fail: (64 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.11 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (64 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (12544 == int32(arg0.strides[1]))) && (50176 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.12 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg0, 0, 8)), Argument arg0.byte_offset has an unsatisfied constraint\00", align 1
@.str.13 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 5\00", align 1
@.str.14 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg1, 0, 5) == (uint8)2) && (tvm_struct_get(arg1, 0, 6) == (uint8)32)) && (tvm_struct_get(arg1, 0, 7) == (uint16)1)), arg1.dtype is expected to be float32\00", align 1
@.str.15 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.16 = private constant [95 x i8] c"Assert fail: (2 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.17 = private constant [96 x i8] c"Assert fail: (14 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.18 = private constant [96 x i8] c"Assert fail: (14 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.19 = private constant [97 x i8] c"Assert fail: (128 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.20 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (128 == int32(arg1.strides[3]))) && (1792 == int32(arg1.strides[2]))) && (25088 == int32(arg1.strides[1]))) && (50176 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.21 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg1, 0, 8)), Argument arg1.byte_offset has an unsatisfied constraint\00", align 1
@.str.22 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg1, 0, 10)), Argument arg1.device_type has an unsatisfied constraint\00", align 1
@.str.23 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg1, 0, 9)), Argument arg1.device_id has an unsatisfied constraint\00", align 1
@.str.24 = private constant [65 x i8] c"Assert fail: (num_args == 2), fused_nn_pad: num_args should be 2\00", align 1
@.str.25 = private constant [140 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_pad: Expect arg[0] to be pointer\00", align 1
@.str.26 = private constant [140 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_pad: Expect arg[1] to be pointer\00", align 1
@.str.27 = private constant [95 x i8] c"Assert fail: (8 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.28 = private constant [97 x i8] c"Assert fail: (112 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.29 = private constant [97 x i8] c"Assert fail: (112 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.30 = private constant [95 x i8] c"Assert fail: (8 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.31 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (100352 == int32(arg0.strides[1]))) && (802816 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.32 = private constant [95 x i8] c"Assert fail: (8 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.33 = private constant [97 x i8] c"Assert fail: (114 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.34 = private constant [97 x i8] c"Assert fail: (114 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.35 = private constant [95 x i8] c"Assert fail: (8 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.36 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (8 == int32(arg1.strides[3]))) && (912 == int32(arg1.strides[2]))) && (103968 == int32(arg1.strides[1]))) && (831744 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.38 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_6: num_args should be 5\00", align 1
@.str.39 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_6: Expect arg[0] to be pointer\00", align 1
@.str.40 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_6: Expect arg[1] to be pointer\00", align 1
@.str.41 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_6: Expect arg[2] to be pointer\00", align 1
@.str.42 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_6: Expect arg[3] to be pointer\00", align 1
@.str.43 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_6: Expect arg[4] to be pointer\00", align 1
@.str.44 = private constant [95 x i8] c"Assert fail: (2 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.45 = private constant [97 x i8] c"Assert fail: (128 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.46 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (128 == int32(arg0.strides[3]))) && (1792 == int32(arg0.strides[2]))) && (25088 == int32(arg0.strides[1]))) && (50176 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.47 = private constant [81 x i8] c"Assert fail: (6 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 6\00", align 1
@.str.48 = private constant [96 x i8] c"Assert fail: (16 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.49 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.50 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.51 = private constant [96 x i8] c"Assert fail: (16 == int32(arg1.shape[5])), Argument arg1.shape[5] has an unsatisfied constraint\00", align 1
@.str.52 = private constant [277 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (16 == int32(arg1.strides[4]))) && (2048 == int32(arg1.strides[3]))) && (6144 == int32(arg1.strides[2]))) && (18432 == int32(arg1.strides[1]))) && (36864 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.53 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg2, 0, 4)), arg2.ndim is expected to equal 5\00", align 1
@.str.54 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg2, 0, 5) == (uint8)2) && (tvm_struct_get(arg2, 0, 6) == (uint8)32)) && (tvm_struct_get(arg2, 0, 7) == (uint16)1)), arg2.dtype is expected to be float32\00", align 1
@.str.55 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[0])), Argument arg2.shape[0] has an unsatisfied constraint\00", align 1
@.str.56 = private constant [96 x i8] c"Assert fail: (16 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.57 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[2])), Argument arg2.shape[2] has an unsatisfied constraint\00", align 1
@.str.58 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[3])), Argument arg2.shape[3] has an unsatisfied constraint\00", align 1
@.str.59 = private constant [96 x i8] c"Assert fail: (16 == int32(arg2.shape[4])), Argument arg2.shape[4] has an unsatisfied constraint\00", align 1
@.str.60 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (16 == int32(arg2.strides[3]))) && (16 == int32(arg2.strides[2]))) && (16 == int32(arg2.strides[1]))) && (256 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.61 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg2, 0, 8)), Argument arg2.byte_offset has an unsatisfied constraint\00", align 1
@.str.62 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg2, 0, 10)), Argument arg2.device_type has an unsatisfied constraint\00", align 1
@.str.63 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg2, 0, 9)), Argument arg2.device_id has an unsatisfied constraint\00", align 1
@.str.64 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg3, 0, 4)), arg3.ndim is expected to equal 5\00", align 1
@.str.65 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg3, 0, 5) == (uint8)2) && (tvm_struct_get(arg3, 0, 6) == (uint8)32)) && (tvm_struct_get(arg3, 0, 7) == (uint16)1)), arg3.dtype is expected to be float32\00", align 1
@.str.66 = private constant [95 x i8] c"Assert fail: (1 == int32(arg3.shape[0])), Argument arg3.shape[0] has an unsatisfied constraint\00", align 1
@.str.67 = private constant [96 x i8] c"Assert fail: (16 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.68 = private constant [95 x i8] c"Assert fail: (1 == int32(arg3.shape[2])), Argument arg3.shape[2] has an unsatisfied constraint\00", align 1
@.str.69 = private constant [95 x i8] c"Assert fail: (1 == int32(arg3.shape[3])), Argument arg3.shape[3] has an unsatisfied constraint\00", align 1
@.str.70 = private constant [96 x i8] c"Assert fail: (16 == int32(arg3.shape[4])), Argument arg3.shape[4] has an unsatisfied constraint\00", align 1
@.str.71 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (16 == int32(arg3.strides[3]))) && (16 == int32(arg3.strides[2]))) && (16 == int32(arg3.strides[1]))) && (256 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.72 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg3, 0, 8)), Argument arg3.byte_offset has an unsatisfied constraint\00", align 1
@.str.73 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg3, 0, 10)), Argument arg3.device_type has an unsatisfied constraint\00", align 1
@.str.74 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg3, 0, 9)), Argument arg3.device_id has an unsatisfied constraint\00", align 1
@.str.75 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg4, 0, 4)), arg4.ndim is expected to equal 5\00", align 1
@.str.76 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg4, 0, 5) == (uint8)2) && (tvm_struct_get(arg4, 0, 6) == (uint8)32)) && (tvm_struct_get(arg4, 0, 7) == (uint16)1)), arg4.dtype is expected to be float32\00", align 1
@.str.77 = private constant [95 x i8] c"Assert fail: (1 == int32(arg4.shape[0])), Argument arg4.shape[0] has an unsatisfied constraint\00", align 1
@.str.78 = private constant [96 x i8] c"Assert fail: (16 == int32(arg4.shape[1])), Argument arg4.shape[1] has an unsatisfied constraint\00", align 1
@.str.79 = private constant [96 x i8] c"Assert fail: (14 == int32(arg4.shape[2])), Argument arg4.shape[2] has an unsatisfied constraint\00", align 1
@.str.80 = private constant [96 x i8] c"Assert fail: (14 == int32(arg4.shape[3])), Argument arg4.shape[3] has an unsatisfied constraint\00", align 1
@.str.81 = private constant [96 x i8] c"Assert fail: (16 == int32(arg4.shape[4])), Argument arg4.shape[4] has an unsatisfied constraint\00", align 1
@.str.82 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (16 == int32(arg4.strides[3]))) && (224 == int32(arg4.strides[2]))) && (3136 == int32(arg4.strides[1]))) && (50176 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.83 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg4, 0, 8)), Argument arg4.byte_offset has an unsatisfied constraint\00", align 1
@.str.84 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg4, 0, 10)), Argument arg4.device_type has an unsatisfied constraint\00", align 1
@.str.85 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg4, 0, 9)), Argument arg4.device_id has an unsatisfied constraint\00", align 1
@__TVMBackendAllocWorkspace = linkonce dllexport local_unnamed_addr global i8* (i32, i32, i64, i32, i32)* null, align 8
@__TVMBackendFreeWorkspace = linkonce dllexport local_unnamed_addr global i32 (i32, i32, i8*)* null, align 8
@.str.88 = private constant [101 x i8] c"Assert fail: (num_args == 6), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1: num_args should be 6\00", align 1
@.str.89 = private constant [176 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1: Expect arg[0] to be pointer\00", align 1
@.str.90 = private constant [176 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1: Expect arg[1] to be pointer\00", align 1
@.str.91 = private constant [176 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1: Expect arg[2] to be pointer\00", align 1
@.str.92 = private constant [176 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1: Expect arg[3] to be pointer\00", align 1
@.str.93 = private constant [176 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1: Expect arg[4] to be pointer\00", align 1
@.str.94 = private constant [176 x i8] c"Assert fail: ((((arg5.code == 3) || (arg5.code == 13)) || (arg5.code == 7)) || (arg5.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1: Expect arg[5] to be pointer\00", align 1
@.str.95 = private constant [96 x i8] c"Assert fail: (32 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.96 = private constant [96 x i8] c"Assert fail: (28 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.97 = private constant [96 x i8] c"Assert fail: (28 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.98 = private constant [95 x i8] c"Assert fail: (4 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.99 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (4 == int32(arg0.strides[3]))) && (112 == int32(arg0.strides[2]))) && (3136 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.100 = private constant [96 x i8] c"Assert fail: (32 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.101 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.102 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.103 = private constant [95 x i8] c"Assert fail: (4 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.104 = private constant [96 x i8] c"Assert fail: (32 == int32(arg1.shape[5])), Argument arg1.shape[5] has an unsatisfied constraint\00", align 1
@.str.105 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (128 == int32(arg1.strides[3]))) && (128 == int32(arg1.strides[2]))) && (128 == int32(arg1.strides[1]))) && (4096 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.106 = private constant [96 x i8] c"Assert fail: (32 == int32(arg2.shape[4])), Argument arg2.shape[4] has an unsatisfied constraint\00", align 1
@.str.107 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (32 == int32(arg2.strides[2]))) && (32 == int32(arg2.strides[1]))) && (512 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.108 = private constant [96 x i8] c"Assert fail: (32 == int32(arg3.shape[4])), Argument arg3.shape[4] has an unsatisfied constraint\00", align 1
@.str.109 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (32 == int32(arg3.strides[3]))) && (32 == int32(arg3.strides[2]))) && (32 == int32(arg3.strides[1]))) && (512 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.110 = private constant [95 x i8] c"Assert fail: (1 == int32(arg4.shape[2])), Argument arg4.shape[2] has an unsatisfied constraint\00", align 1
@.str.111 = private constant [95 x i8] c"Assert fail: (1 == int32(arg4.shape[3])), Argument arg4.shape[3] has an unsatisfied constraint\00", align 1
@.str.112 = private constant [96 x i8] c"Assert fail: (32 == int32(arg4.shape[4])), Argument arg4.shape[4] has an unsatisfied constraint\00", align 1
@.str.113 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (32 == int32(arg4.strides[3]))) && (32 == int32(arg4.strides[2]))) && (32 == int32(arg4.strides[1]))) && (512 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.114 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg5, 0, 4)), arg5.ndim is expected to equal 5\00", align 1
@.str.115 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg5, 0, 5) == (uint8)2) && (tvm_struct_get(arg5, 0, 6) == (uint8)32)) && (tvm_struct_get(arg5, 0, 7) == (uint16)1)), arg5.dtype is expected to be float32\00", align 1
@.str.116 = private constant [95 x i8] c"Assert fail: (1 == int32(arg5.shape[0])), Argument arg5.shape[0] has an unsatisfied constraint\00", align 1
@.str.117 = private constant [96 x i8] c"Assert fail: (16 == int32(arg5.shape[1])), Argument arg5.shape[1] has an unsatisfied constraint\00", align 1
@.str.118 = private constant [96 x i8] c"Assert fail: (28 == int32(arg5.shape[2])), Argument arg5.shape[2] has an unsatisfied constraint\00", align 1
@.str.119 = private constant [96 x i8] c"Assert fail: (28 == int32(arg5.shape[3])), Argument arg5.shape[3] has an unsatisfied constraint\00", align 1
@.str.120 = private constant [96 x i8] c"Assert fail: (32 == int32(arg5.shape[4])), Argument arg5.shape[4] has an unsatisfied constraint\00", align 1
@.str.121 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg5.strides[4])) && (32 == int32(arg5.strides[3]))) && (896 == int32(arg5.strides[2]))) && (25088 == int32(arg5.strides[1]))) && (401408 == int32(arg5.strides[0]))), arg5.strides: expected to be compact array\00", align 1
@.str.122 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg5, 0, 8)), Argument arg5.byte_offset has an unsatisfied constraint\00", align 1
@.str.123 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg5, 0, 10)), Argument arg5.device_type has an unsatisfied constraint\00", align 1
@.str.124 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg5, 0, 9)), Argument arg5.device_id has an unsatisfied constraint\00", align 1
@.str.126 = private constant [101 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_10: num_args should be 5\00", align 1
@.str.127 = private constant [176 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_10: Expect arg[0] to be pointer\00", align 1
@.str.128 = private constant [176 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_10: Expect arg[1] to be pointer\00", align 1
@.str.129 = private constant [176 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_10: Expect arg[2] to be pointer\00", align 1
@.str.130 = private constant [176 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_10: Expect arg[3] to be pointer\00", align 1
@.str.131 = private constant [176 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_10: Expect arg[4] to be pointer\00", align 1
@.str.132 = private constant [97 x i8] c"Assert fail: (512 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.133 = private constant [242 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (512 == int32(arg0.strides[3]))) && (7168 == int32(arg0.strides[2]))) && (100352 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.134 = private constant [97 x i8] c"Assert fail: (512 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.135 = private constant [279 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (16384 == int32(arg1.strides[3]))) && (16384 == int32(arg1.strides[2]))) && (16384 == int32(arg1.strides[1]))) && (32768 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.136 = private constant [95 x i8] c"Assert fail: (7 == int32(arg4.shape[2])), Argument arg4.shape[2] has an unsatisfied constraint\00", align 1
@.str.137 = private constant [95 x i8] c"Assert fail: (7 == int32(arg4.shape[3])), Argument arg4.shape[3] has an unsatisfied constraint\00", align 1
@.str.138 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (32 == int32(arg4.strides[3]))) && (224 == int32(arg4.strides[2]))) && (1568 == int32(arg4.strides[1]))) && (25088 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.140 = private constant [99 x i8] c"Assert fail: (num_args == 6), fused_nn_contrib_conv2d_NCHWc_add_multiply_add: num_args should be 6\00", align 1
@.str.141 = private constant [174 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add: Expect arg[0] to be pointer\00", align 1
@.str.142 = private constant [174 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add: Expect arg[1] to be pointer\00", align 1
@.str.143 = private constant [174 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add: Expect arg[2] to be pointer\00", align 1
@.str.144 = private constant [174 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add: Expect arg[3] to be pointer\00", align 1
@.str.145 = private constant [174 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add: Expect arg[4] to be pointer\00", align 1
@.str.146 = private constant [174 x i8] c"Assert fail: ((((arg5.code == 3) || (arg5.code == 13)) || (arg5.code == 7)) || (arg5.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add: Expect arg[5] to be pointer\00", align 1
@.str.147 = private constant [96 x i8] c"Assert fail: (16 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.148 = private constant [96 x i8] c"Assert fail: (56 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.149 = private constant [96 x i8] c"Assert fail: (56 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.150 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (4 == int32(arg0.strides[3]))) && (224 == int32(arg0.strides[2]))) && (12544 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.151 = private constant [95 x i8] c"Assert fail: (8 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.152 = private constant [96 x i8] c"Assert fail: (16 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.153 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (128 == int32(arg1.strides[3]))) && (128 == int32(arg1.strides[2]))) && (128 == int32(arg1.strides[1]))) && (2048 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.154 = private constant [95 x i8] c"Assert fail: (8 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.155 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (32 == int32(arg2.strides[2]))) && (32 == int32(arg2.strides[1]))) && (256 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.156 = private constant [95 x i8] c"Assert fail: (8 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.157 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (32 == int32(arg3.strides[3]))) && (32 == int32(arg3.strides[2]))) && (32 == int32(arg3.strides[1]))) && (256 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.158 = private constant [95 x i8] c"Assert fail: (8 == int32(arg4.shape[1])), Argument arg4.shape[1] has an unsatisfied constraint\00", align 1
@.str.159 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (32 == int32(arg4.strides[3]))) && (32 == int32(arg4.strides[2]))) && (32 == int32(arg4.strides[1]))) && (256 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.160 = private constant [95 x i8] c"Assert fail: (8 == int32(arg5.shape[1])), Argument arg5.shape[1] has an unsatisfied constraint\00", align 1
@.str.161 = private constant [96 x i8] c"Assert fail: (56 == int32(arg5.shape[2])), Argument arg5.shape[2] has an unsatisfied constraint\00", align 1
@.str.162 = private constant [96 x i8] c"Assert fail: (56 == int32(arg5.shape[3])), Argument arg5.shape[3] has an unsatisfied constraint\00", align 1
@.str.163 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg5.strides[4])) && (32 == int32(arg5.strides[3]))) && (1792 == int32(arg5.strides[2]))) && (100352 == int32(arg5.strides[1]))) && (802816 == int32(arg5.strides[0]))), arg5.strides: expected to be compact array\00", align 1
@.str.165 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_44: num_args should be 2\00", align 1
@.str.166 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_44: Expect arg[0] to be pointer\00", align 1
@.str.167 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_44: Expect arg[1] to be pointer\00", align 1
@.str.168 = private constant [96 x i8] c"Assert fail: (16 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.169 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (224 == int32(arg0.strides[2]))) && (3136 == int32(arg0.strides[1]))) && (50176 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.170 = private constant [95 x i8] c"Assert fail: (1 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.171 = private constant [97 x i8] c"Assert fail: (256 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.172 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (256 == int32(arg1.strides[3]))) && (3584 == int32(arg1.strides[2]))) && (50176 == int32(arg1.strides[1]))) && (50176 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.174 = private constant [79 x i8] c"Assert fail: (num_args == 2), fused_nn_global_avg_pool2d: num_args should be 2\00", align 1
@.str.175 = private constant [154 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_global_avg_pool2d: Expect arg[0] to be pointer\00", align 1
@.str.176 = private constant [154 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_global_avg_pool2d: Expect arg[1] to be pointer\00", align 1
@.str.177 = private constant [96 x i8] c"Assert fail: (64 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.178 = private constant [95 x i8] c"Assert fail: (7 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.179 = private constant [95 x i8] c"Assert fail: (7 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.180 = private constant [96 x i8] c"Assert fail: (32 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.181 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (224 == int32(arg0.strides[2]))) && (1568 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.182 = private constant [96 x i8] c"Assert fail: (64 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.183 = private constant [96 x i8] c"Assert fail: (32 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.184 = private constant [233 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (32 == int32(arg1.strides[3]))) && (32 == int32(arg1.strides[2]))) && (32 == int32(arg1.strides[1]))) && (2048 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.187 = private constant [113 x i8] c"Assert fail: (num_args == 7), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2: num_args should be 7\00", align 1
@.str.188 = private constant [188 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2: Expect arg[0] to be pointer\00", align 1
@.str.189 = private constant [188 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2: Expect arg[1] to be pointer\00", align 1
@.str.190 = private constant [188 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2: Expect arg[2] to be pointer\00", align 1
@.str.191 = private constant [188 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2: Expect arg[3] to be pointer\00", align 1
@.str.192 = private constant [188 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2: Expect arg[4] to be pointer\00", align 1
@.str.193 = private constant [188 x i8] c"Assert fail: ((((arg5.code == 3) || (arg5.code == 13)) || (arg5.code == 7)) || (arg5.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2: Expect arg[5] to be pointer\00", align 1
@.str.194 = private constant [188 x i8] c"Assert fail: ((((arg6.code == 3) || (arg6.code == 13)) || (arg6.code == 7)) || (arg6.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2: Expect arg[6] to be pointer\00", align 1
@.str.195 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.196 = private constant [97 x i8] c"Assert fail: (256 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.197 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (256 == int32(arg0.strides[3]))) && (14336 == int32(arg0.strides[2]))) && (802816 == int32(arg0.strides[1]))) && (802816 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.198 = private constant [96 x i8] c"Assert fail: (64 == int32(arg1.shape[5])), Argument arg1.shape[5] has an unsatisfied constraint\00", align 1
@.str.199 = private constant [279 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (64 == int32(arg1.strides[4]))) && (16384 == int32(arg1.strides[3]))) && (16384 == int32(arg1.strides[2]))) && (16384 == int32(arg1.strides[1]))) && (16384 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.200 = private constant [96 x i8] c"Assert fail: (64 == int32(arg2.shape[4])), Argument arg2.shape[4] has an unsatisfied constraint\00", align 1
@.str.201 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (64 == int32(arg2.strides[3]))) && (64 == int32(arg2.strides[2]))) && (64 == int32(arg2.strides[1]))) && (512 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.202 = private constant [96 x i8] c"Assert fail: (64 == int32(arg3.shape[4])), Argument arg3.shape[4] has an unsatisfied constraint\00", align 1
@.str.203 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (64 == int32(arg3.strides[3]))) && (64 == int32(arg3.strides[2]))) && (64 == int32(arg3.strides[1]))) && (512 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.204 = private constant [96 x i8] c"Assert fail: (64 == int32(arg4.shape[4])), Argument arg4.shape[4] has an unsatisfied constraint\00", align 1
@.str.205 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (64 == int32(arg4.strides[3]))) && (64 == int32(arg4.strides[2]))) && (64 == int32(arg4.strides[1]))) && (512 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.206 = private constant [96 x i8] c"Assert fail: (64 == int32(arg5.shape[4])), Argument arg5.shape[4] has an unsatisfied constraint\00", align 1
@.str.207 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg5.strides[4])) && (64 == int32(arg5.strides[3]))) && (1792 == int32(arg5.strides[2]))) && (50176 == int32(arg5.strides[1]))) && (401408 == int32(arg5.strides[0]))), arg5.strides: expected to be compact array\00", align 1
@.str.208 = private constant [81 x i8] c"Assert fail: (5 == tvm_struct_get(arg6, 0, 4)), arg6.ndim is expected to equal 5\00", align 1
@.str.209 = private constant [186 x i8] c"Assert fail: (((tvm_struct_get(arg6, 0, 5) == (uint8)2) && (tvm_struct_get(arg6, 0, 6) == (uint8)32)) && (tvm_struct_get(arg6, 0, 7) == (uint16)1)), arg6.dtype is expected to be float32\00", align 1
@.str.210 = private constant [95 x i8] c"Assert fail: (1 == int32(arg6.shape[0])), Argument arg6.shape[0] has an unsatisfied constraint\00", align 1
@.str.211 = private constant [95 x i8] c"Assert fail: (8 == int32(arg6.shape[1])), Argument arg6.shape[1] has an unsatisfied constraint\00", align 1
@.str.212 = private constant [96 x i8] c"Assert fail: (28 == int32(arg6.shape[2])), Argument arg6.shape[2] has an unsatisfied constraint\00", align 1
@.str.213 = private constant [96 x i8] c"Assert fail: (28 == int32(arg6.shape[3])), Argument arg6.shape[3] has an unsatisfied constraint\00", align 1
@.str.214 = private constant [96 x i8] c"Assert fail: (64 == int32(arg6.shape[4])), Argument arg6.shape[4] has an unsatisfied constraint\00", align 1
@.str.215 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg6.strides[4])) && (64 == int32(arg6.strides[3]))) && (1792 == int32(arg6.strides[2]))) && (50176 == int32(arg6.strides[1]))) && (401408 == int32(arg6.strides[0]))), arg6.strides: expected to be compact array\00", align 1
@.str.216 = private constant [112 x i8] c"Assert fail: ((uint64)0 == tvm_struct_get(arg6, 0, 8)), Argument arg6.byte_offset has an unsatisfied constraint\00", align 1
@.str.217 = private constant [105 x i8] c"Assert fail: (1 == tvm_struct_get(arg6, 0, 10)), Argument arg6.device_type has an unsatisfied constraint\00", align 1
@.str.218 = private constant [107 x i8] c"Assert fail: (dev_id == tvm_struct_get(arg6, 0, 9)), Argument arg6.device_id has an unsatisfied constraint\00", align 1
@.str.220 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_32: num_args should be 2\00", align 1
@.str.221 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_32: Expect arg[0] to be pointer\00", align 1
@.str.222 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_32: Expect arg[1] to be pointer\00", align 1
@.str.223 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (64 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (12544 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.224 = private constant [98 x i8] c"Assert fail: (1024 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.225 = private constant [244 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (1024 == int32(arg1.strides[3]))) && (14336 == int32(arg1.strides[2]))) && (200704 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.227 = private constant [113 x i8] c"Assert fail: (num_args == 7), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3: num_args should be 7\00", align 1
@.str.228 = private constant [188 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3: Expect arg[0] to be pointer\00", align 1
@.str.229 = private constant [188 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3: Expect arg[1] to be pointer\00", align 1
@.str.230 = private constant [188 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3: Expect arg[2] to be pointer\00", align 1
@.str.231 = private constant [188 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3: Expect arg[3] to be pointer\00", align 1
@.str.232 = private constant [188 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3: Expect arg[4] to be pointer\00", align 1
@.str.233 = private constant [188 x i8] c"Assert fail: ((((arg5.code == 3) || (arg5.code == 13)) || (arg5.code == 7)) || (arg5.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3: Expect arg[5] to be pointer\00", align 1
@.str.234 = private constant [188 x i8] c"Assert fail: ((((arg6.code == 3) || (arg6.code == 13)) || (arg6.code == 7)) || (arg6.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3: Expect arg[6] to be pointer\00", align 1
@.str.235 = private constant [96 x i8] c"Assert fail: (56 == int32(arg6.shape[2])), Argument arg6.shape[2] has an unsatisfied constraint\00", align 1
@.str.236 = private constant [96 x i8] c"Assert fail: (56 == int32(arg6.shape[3])), Argument arg6.shape[3] has an unsatisfied constraint\00", align 1
@.str.237 = private constant [96 x i8] c"Assert fail: (32 == int32(arg6.shape[4])), Argument arg6.shape[4] has an unsatisfied constraint\00", align 1
@.str.238 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg6.strides[4])) && (32 == int32(arg6.strides[3]))) && (1792 == int32(arg6.strides[2]))) && (100352 == int32(arg6.strides[1]))) && (802816 == int32(arg6.strides[0]))), arg6.strides: expected to be compact array\00", align 1
@.str.240 = private constant [72 x i8] c"Assert fail: (num_args == 3), fused_add_nn_relu_2: num_args should be 3\00", align 1
@.str.241 = private constant [147 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_add_nn_relu_2: Expect arg[0] to be pointer\00", align 1
@.str.242 = private constant [147 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_add_nn_relu_2: Expect arg[1] to be pointer\00", align 1
@.str.243 = private constant [147 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_add_nn_relu_2: Expect arg[2] to be pointer\00", align 1
@.str.244 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (1792 == int32(arg0.strides[2]))) && (100352 == int32(arg0.strides[1]))) && (802816 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.245 = private constant [96 x i8] c"Assert fail: (56 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.246 = private constant [96 x i8] c"Assert fail: (56 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.247 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (32 == int32(arg1.strides[3]))) && (1792 == int32(arg1.strides[2]))) && (100352 == int32(arg1.strides[1]))) && (802816 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.248 = private constant [96 x i8] c"Assert fail: (56 == int32(arg2.shape[2])), Argument arg2.shape[2] has an unsatisfied constraint\00", align 1
@.str.249 = private constant [96 x i8] c"Assert fail: (56 == int32(arg2.shape[3])), Argument arg2.shape[3] has an unsatisfied constraint\00", align 1
@.str.250 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (1792 == int32(arg2.strides[2]))) && (100352 == int32(arg2.strides[1]))) && (802816 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.252 = private constant [101 x i8] c"Assert fail: (num_args == 6), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2: num_args should be 6\00", align 1
@.str.253 = private constant [176 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2: Expect arg[0] to be pointer\00", align 1
@.str.254 = private constant [176 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2: Expect arg[1] to be pointer\00", align 1
@.str.255 = private constant [176 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2: Expect arg[2] to be pointer\00", align 1
@.str.256 = private constant [176 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2: Expect arg[3] to be pointer\00", align 1
@.str.257 = private constant [176 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2: Expect arg[4] to be pointer\00", align 1
@.str.258 = private constant [176 x i8] c"Assert fail: ((((arg5.code == 3) || (arg5.code == 13)) || (arg5.code == 7)) || (arg5.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2: Expect arg[5] to be pointer\00", align 1
@.str.259 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (256 == int32(arg0.strides[3]))) && (3584 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (50176 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.260 = private constant [233 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (64 == int32(arg2.strides[3]))) && (64 == int32(arg2.strides[2]))) && (64 == int32(arg2.strides[1]))) && (1024 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.261 = private constant [233 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (64 == int32(arg3.strides[3]))) && (64 == int32(arg3.strides[2]))) && (64 == int32(arg3.strides[1]))) && (1024 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.262 = private constant [233 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (64 == int32(arg4.strides[3]))) && (64 == int32(arg4.strides[2]))) && (64 == int32(arg4.strides[1]))) && (1024 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.263 = private constant [96 x i8] c"Assert fail: (14 == int32(arg5.shape[2])), Argument arg5.shape[2] has an unsatisfied constraint\00", align 1
@.str.264 = private constant [96 x i8] c"Assert fail: (14 == int32(arg5.shape[3])), Argument arg5.shape[3] has an unsatisfied constraint\00", align 1
@.str.265 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg5.strides[4])) && (64 == int32(arg5.strides[3]))) && (896 == int32(arg5.strides[2]))) && (12544 == int32(arg5.strides[1]))) && (200704 == int32(arg5.strides[0]))), arg5.strides: expected to be compact array\00", align 1
@.str.267 = private constant [87 x i8] c"Assert fail: (num_args == 3), fused_layout_transform_add_nn_relu: num_args should be 3\00", align 1
@.str.268 = private constant [162 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_add_nn_relu: Expect arg[0] to be pointer\00", align 1
@.str.269 = private constant [162 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_add_nn_relu: Expect arg[1] to be pointer\00", align 1
@.str.270 = private constant [162 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_layout_transform_add_nn_relu: Expect arg[2] to be pointer\00", align 1
@.str.271 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (64 == int32(arg0.strides[3]))) && (1792 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (401408 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.272 = private constant [96 x i8] c"Assert fail: (28 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.273 = private constant [96 x i8] c"Assert fail: (28 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.274 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (32 == int32(arg1.strides[3]))) && (896 == int32(arg1.strides[2]))) && (25088 == int32(arg1.strides[1]))) && (401408 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.275 = private constant [96 x i8] c"Assert fail: (28 == int32(arg2.shape[2])), Argument arg2.shape[2] has an unsatisfied constraint\00", align 1
@.str.276 = private constant [96 x i8] c"Assert fail: (28 == int32(arg2.shape[3])), Argument arg2.shape[3] has an unsatisfied constraint\00", align 1
@.str.277 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (64 == int32(arg2.strides[3]))) && (1792 == int32(arg2.strides[2]))) && (50176 == int32(arg2.strides[1]))) && (401408 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.279 = private constant [72 x i8] c"Assert fail: (num_args == 2), fused_nn_max_pool2d: num_args should be 2\00", align 1
@.str.280 = private constant [147 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_max_pool2d: Expect arg[0] to be pointer\00", align 1
@.str.281 = private constant [147 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_max_pool2d: Expect arg[1] to be pointer\00", align 1
@.str.282 = private constant [97 x i8] c"Assert fail: (114 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.283 = private constant [97 x i8] c"Assert fail: (114 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.284 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (912 == int32(arg0.strides[2]))) && (103968 == int32(arg0.strides[1]))) && (831744 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.285 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (8 == int32(arg1.strides[3]))) && (448 == int32(arg1.strides[2]))) && (25088 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.287 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_36: num_args should be 2\00", align 1
@.str.288 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_36: Expect arg[0] to be pointer\00", align 1
@.str.289 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_36: Expect arg[1] to be pointer\00", align 1
@.str.290 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (16 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.291 = private constant [96 x i8] c"Assert fail: (64 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.292 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (64 == int32(arg1.strides[3]))) && (3584 == int32(arg1.strides[2]))) && (200704 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.294 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_41: num_args should be 2\00", align 1
@.str.295 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_41: Expect arg[0] to be pointer\00", align 1
@.str.296 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_41: Expect arg[1] to be pointer\00", align 1
@.str.297 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (25088 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.298 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (4 == int32(arg1.strides[3]))) && (112 == int32(arg1.strides[2]))) && (3136 == int32(arg1.strides[1]))) && (100352 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.300 = private constant [101 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_11: num_args should be 5\00", align 1
@.str.301 = private constant [176 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_11: Expect arg[0] to be pointer\00", align 1
@.str.302 = private constant [176 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_11: Expect arg[1] to be pointer\00", align 1
@.str.303 = private constant [176 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_11: Expect arg[2] to be pointer\00", align 1
@.str.304 = private constant [176 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_11: Expect arg[3] to be pointer\00", align 1
@.str.305 = private constant [176 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_11: Expect arg[4] to be pointer\00", align 1
@.str.306 = private constant [97 x i8] c"Assert fail: (512 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.307 = private constant [235 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (4 == int32(arg0.strides[3]))) && (28 == int32(arg0.strides[2]))) && (196 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.308 = private constant [97 x i8] c"Assert fail: (512 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.309 = private constant [273 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (128 == int32(arg1.strides[3]))) && (128 == int32(arg1.strides[2]))) && (128 == int32(arg1.strides[1]))) && (65536 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.311 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_42: num_args should be 2\00", align 1
@.str.312 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_42: Expect arg[0] to be pointer\00", align 1
@.str.313 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_42: Expect arg[1] to be pointer\00", align 1
@.str.314 = private constant [242 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (128 == int32(arg1.strides[3]))) && (3584 == int32(arg1.strides[2]))) && (100352 == int32(arg1.strides[1]))) && (100352 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.316 = private constant [102 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_transpose_nn_batch_flatten: num_args should be 2\00", align 1
@.str.317 = private constant [177 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_transpose_nn_batch_flatten: Expect arg[0] to be pointer\00", align 1
@.str.318 = private constant [177 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_transpose_nn_batch_flatten: Expect arg[1] to be pointer\00", align 1
@.str.319 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.320 = private constant [95 x i8] c"Assert fail: (1 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.321 = private constant [233 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (32 == int32(arg0.strides[2]))) && (32 == int32(arg0.strides[1]))) && (2048 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.322 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg1, 0, 4)), arg1.ndim is expected to equal 2\00", align 1
@.str.323 = private constant [98 x i8] c"Assert fail: (2048 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.324 = private constant [125 x i8] c"Assert fail: ((1 == int32(arg1.strides[1])) && (2048 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.325 = private constant [101 x i8] c"Assert fail: (num_args == 6), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3: num_args should be 6\00", align 1
@.str.326 = private constant [176 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3: Expect arg[0] to be pointer\00", align 1
@.str.327 = private constant [176 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3: Expect arg[1] to be pointer\00", align 1
@.str.328 = private constant [176 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3: Expect arg[2] to be pointer\00", align 1
@.str.329 = private constant [176 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3: Expect arg[3] to be pointer\00", align 1
@.str.330 = private constant [176 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3: Expect arg[4] to be pointer\00", align 1
@.str.331 = private constant [176 x i8] c"Assert fail: ((((arg5.code == 3) || (arg5.code == 13)) || (arg5.code == 7)) || (arg5.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3: Expect arg[5] to be pointer\00", align 1
@.str.332 = private constant [97 x i8] c"Assert fail: (128 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.333 = private constant [234 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (4 == int32(arg0.strides[3]))) && (28 == int32(arg0.strides[2]))) && (196 == int32(arg0.strides[1]))) && (25088 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.334 = private constant [96 x i8] c"Assert fail: (64 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.335 = private constant [97 x i8] c"Assert fail: (128 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.336 = private constant [273 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (128 == int32(arg1.strides[3]))) && (128 == int32(arg1.strides[2]))) && (128 == int32(arg1.strides[1]))) && (16384 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.337 = private constant [96 x i8] c"Assert fail: (64 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.338 = private constant [233 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (32 == int32(arg2.strides[2]))) && (32 == int32(arg2.strides[1]))) && (2048 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.339 = private constant [96 x i8] c"Assert fail: (64 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.340 = private constant [233 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (32 == int32(arg3.strides[3]))) && (32 == int32(arg3.strides[2]))) && (32 == int32(arg3.strides[1]))) && (2048 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.341 = private constant [96 x i8] c"Assert fail: (64 == int32(arg4.shape[1])), Argument arg4.shape[1] has an unsatisfied constraint\00", align 1
@.str.342 = private constant [233 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (32 == int32(arg4.strides[3]))) && (32 == int32(arg4.strides[2]))) && (32 == int32(arg4.strides[1]))) && (2048 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.343 = private constant [96 x i8] c"Assert fail: (64 == int32(arg5.shape[1])), Argument arg5.shape[1] has an unsatisfied constraint\00", align 1
@.str.344 = private constant [95 x i8] c"Assert fail: (7 == int32(arg5.shape[2])), Argument arg5.shape[2] has an unsatisfied constraint\00", align 1
@.str.345 = private constant [95 x i8] c"Assert fail: (7 == int32(arg5.shape[3])), Argument arg5.shape[3] has an unsatisfied constraint\00", align 1
@.str.346 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg5.strides[4])) && (32 == int32(arg5.strides[3]))) && (224 == int32(arg5.strides[2]))) && (1568 == int32(arg5.strides[1]))) && (100352 == int32(arg5.strides[0]))), arg5.strides: expected to be compact array\00", align 1
@.str.348 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_40: num_args should be 2\00", align 1
@.str.349 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_40: Expect arg[0] to be pointer\00", align 1
@.str.350 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_40: Expect arg[1] to be pointer\00", align 1
@.str.351 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (896 == int32(arg0.strides[2]))) && (25088 == int32(arg0.strides[1]))) && (401408 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.352 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (64 == int32(arg1.strides[3]))) && (1792 == int32(arg1.strides[2]))) && (50176 == int32(arg1.strides[1]))) && (401408 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.354 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_47: num_args should be 2\00", align 1
@.str.355 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_47: Expect arg[0] to be pointer\00", align 1
@.str.356 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_47: Expect arg[1] to be pointer\00", align 1
@.str.357 = private constant [237 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (224 == int32(arg0.strides[2]))) && (1568 == int32(arg0.strides[1]))) && (25088 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.358 = private constant [95 x i8] c"Assert fail: (7 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.359 = private constant [95 x i8] c"Assert fail: (7 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.360 = private constant [234 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (4 == int32(arg1.strides[3]))) && (28 == int32(arg1.strides[2]))) && (196 == int32(arg1.strides[1]))) && (25088 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.362 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_7: num_args should be 5\00", align 1
@.str.363 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_7: Expect arg[0] to be pointer\00", align 1
@.str.364 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_7: Expect arg[1] to be pointer\00", align 1
@.str.365 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_7: Expect arg[2] to be pointer\00", align 1
@.str.366 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_7: Expect arg[3] to be pointer\00", align 1
@.str.367 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_7: Expect arg[4] to be pointer\00", align 1
@.str.368 = private constant [95 x i8] c"Assert fail: (4 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.369 = private constant [276 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (64 == int32(arg1.strides[4]))) && (4096 == int32(arg1.strides[3]))) && (4096 == int32(arg1.strides[2]))) && (4096 == int32(arg1.strides[1]))) && (32768 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.370 = private constant [95 x i8] c"Assert fail: (4 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.371 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (64 == int32(arg2.strides[3]))) && (64 == int32(arg2.strides[2]))) && (64 == int32(arg2.strides[1]))) && (256 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.372 = private constant [95 x i8] c"Assert fail: (4 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.373 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (64 == int32(arg3.strides[3]))) && (64 == int32(arg3.strides[2]))) && (64 == int32(arg3.strides[1]))) && (256 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.374 = private constant [95 x i8] c"Assert fail: (4 == int32(arg4.shape[1])), Argument arg4.shape[1] has an unsatisfied constraint\00", align 1
@.str.375 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (64 == int32(arg4.strides[3]))) && (896 == int32(arg4.strides[2]))) && (12544 == int32(arg4.strides[1]))) && (50176 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.377 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_46: num_args should be 2\00", align 1
@.str.378 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_46: Expect arg[0] to be pointer\00", align 1
@.str.379 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_46: Expect arg[1] to be pointer\00", align 1
@.str.380 = private constant [242 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (512 == int32(arg1.strides[3]))) && (7168 == int32(arg1.strides[2]))) && (100352 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.382 = private constant [69 x i8] c"Assert fail: (num_args == 2), fused_nn_softmax: num_args should be 2\00", align 1
@.str.383 = private constant [144 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_softmax: Expect arg[0] to be pointer\00", align 1
@.str.384 = private constant [144 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_softmax: Expect arg[1] to be pointer\00", align 1
@.str.385 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 2\00", align 1
@.str.386 = private constant [98 x i8] c"Assert fail: (1000 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.387 = private constant [125 x i8] c"Assert fail: ((1 == int32(arg0.strides[1])) && (1000 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.388 = private constant [98 x i8] c"Assert fail: (1000 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.389 = private constant [125 x i8] c"Assert fail: ((1 == int32(arg1.strides[1])) && (1000 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.390 = private constant [70 x i8] c"Assert fail: (num_args == 3), fused_add_nn_relu: num_args should be 3\00", align 1
@.str.391 = private constant [145 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_add_nn_relu: Expect arg[0] to be pointer\00", align 1
@.str.392 = private constant [145 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_add_nn_relu: Expect arg[1] to be pointer\00", align 1
@.str.393 = private constant [145 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_add_nn_relu: Expect arg[2] to be pointer\00", align 1
@.str.394 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (32 == int32(arg1.strides[3]))) && (224 == int32(arg1.strides[2]))) && (1568 == int32(arg1.strides[1]))) && (100352 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.395 = private constant [95 x i8] c"Assert fail: (7 == int32(arg2.shape[2])), Argument arg2.shape[2] has an unsatisfied constraint\00", align 1
@.str.396 = private constant [95 x i8] c"Assert fail: (7 == int32(arg2.shape[3])), Argument arg2.shape[3] has an unsatisfied constraint\00", align 1
@.str.397 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (224 == int32(arg2.strides[2]))) && (1568 == int32(arg2.strides[1]))) && (100352 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.399 = private constant [71 x i8] c"Assert fail: (num_args == 4), fused_nn_dense_add: num_args should be 4\00", align 1
@.str.400 = private constant [146 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_dense_add: Expect arg[0] to be pointer\00", align 1
@.str.401 = private constant [146 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_dense_add: Expect arg[1] to be pointer\00", align 1
@.str.402 = private constant [146 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_dense_add: Expect arg[2] to be pointer\00", align 1
@.str.403 = private constant [146 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_dense_add: Expect arg[3] to be pointer\00", align 1
@.str.404 = private constant [98 x i8] c"Assert fail: (2048 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.405 = private constant [125 x i8] c"Assert fail: ((1 == int32(arg0.strides[1])) && (2048 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.406 = private constant [98 x i8] c"Assert fail: (1000 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.407 = private constant [81 x i8] c"Assert fail: (1 == tvm_struct_get(arg2, 0, 4)), arg2.ndim is expected to equal 1\00", align 1
@.str.408 = private constant [98 x i8] c"Assert fail: (1000 == int32(arg2.shape[0])), Argument arg2.shape[0] has an unsatisfied constraint\00", align 1
@.str.409 = private constant [87 x i8] c"Assert fail: (1 == int32(arg2.strides[0])), arg2.strides: expected to be compact array\00", align 1
@.str.410 = private constant [81 x i8] c"Assert fail: (2 == tvm_struct_get(arg3, 0, 4)), arg3.ndim is expected to equal 2\00", align 1
@.str.411 = private constant [98 x i8] c"Assert fail: (1000 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.412 = private constant [125 x i8] c"Assert fail: ((1 == int32(arg3.strides[1])) && (1000 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.414 = private constant [107 x i8] c"Assert fail: (num_args == 6), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu: num_args should be 6\00", align 1
@.str.415 = private constant [182 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu: Expect arg[0] to be pointer\00", align 1
@.str.416 = private constant [182 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu: Expect arg[1] to be pointer\00", align 1
@.str.417 = private constant [182 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu: Expect arg[2] to be pointer\00", align 1
@.str.418 = private constant [182 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu: Expect arg[3] to be pointer\00", align 1
@.str.419 = private constant [182 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu: Expect arg[4] to be pointer\00", align 1
@.str.420 = private constant [182 x i8] c"Assert fail: ((((arg5.code == 3) || (arg5.code == 13)) || (arg5.code == 7)) || (arg5.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu: Expect arg[5] to be pointer\00", align 1
@.str.421 = private constant [97 x i8] c"Assert fail: (230 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.422 = private constant [97 x i8] c"Assert fail: (230 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.423 = private constant [95 x i8] c"Assert fail: (3 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.424 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (3 == int32(arg0.strides[3]))) && (690 == int32(arg0.strides[2]))) && (158700 == int32(arg0.strides[1]))) && (158700 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.425 = private constant [95 x i8] c"Assert fail: (3 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.426 = private constant [95 x i8] c"Assert fail: (8 == int32(arg1.shape[5])), Argument arg1.shape[5] has an unsatisfied constraint\00", align 1
@.str.427 = private constant [271 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (8 == int32(arg1.strides[4]))) && (24 == int32(arg1.strides[3]))) && (168 == int32(arg1.strides[2]))) && (1176 == int32(arg1.strides[1]))) && (1176 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.428 = private constant [95 x i8] c"Assert fail: (8 == int32(arg2.shape[4])), Argument arg2.shape[4] has an unsatisfied constraint\00", align 1
@.str.429 = private constant [228 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (8 == int32(arg2.strides[3]))) && (8 == int32(arg2.strides[2]))) && (8 == int32(arg2.strides[1]))) && (64 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.430 = private constant [95 x i8] c"Assert fail: (8 == int32(arg3.shape[4])), Argument arg3.shape[4] has an unsatisfied constraint\00", align 1
@.str.431 = private constant [228 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (8 == int32(arg3.strides[3]))) && (8 == int32(arg3.strides[2]))) && (8 == int32(arg3.strides[1]))) && (64 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.432 = private constant [95 x i8] c"Assert fail: (8 == int32(arg4.shape[4])), Argument arg4.shape[4] has an unsatisfied constraint\00", align 1
@.str.433 = private constant [228 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (8 == int32(arg4.strides[3]))) && (8 == int32(arg4.strides[2]))) && (8 == int32(arg4.strides[1]))) && (64 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.434 = private constant [97 x i8] c"Assert fail: (112 == int32(arg5.shape[2])), Argument arg5.shape[2] has an unsatisfied constraint\00", align 1
@.str.435 = private constant [97 x i8] c"Assert fail: (112 == int32(arg5.shape[3])), Argument arg5.shape[3] has an unsatisfied constraint\00", align 1
@.str.436 = private constant [95 x i8] c"Assert fail: (8 == int32(arg5.shape[4])), Argument arg5.shape[4] has an unsatisfied constraint\00", align 1
@.str.437 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg5.strides[4])) && (8 == int32(arg5.strides[3]))) && (896 == int32(arg5.strides[2]))) && (100352 == int32(arg5.strides[1]))) && (802816 == int32(arg5.strides[0]))), arg5.strides: expected to be compact array\00", align 1
@.str.439 = private constant [87 x i8] c"Assert fail: (num_args == 3), fused_add_nn_relu_layout_transform: num_args should be 3\00", align 1
@.str.440 = private constant [162 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_add_nn_relu_layout_transform: Expect arg[0] to be pointer\00", align 1
@.str.441 = private constant [162 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_add_nn_relu_layout_transform: Expect arg[1] to be pointer\00", align 1
@.str.442 = private constant [162 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_add_nn_relu_layout_transform: Expect arg[2] to be pointer\00", align 1
@.str.443 = private constant [95 x i8] c"Assert fail: (1 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.444 = private constant [97 x i8] c"Assert fail: (256 == int32(arg2.shape[4])), Argument arg2.shape[4] has an unsatisfied constraint\00", align 1
@.str.445 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (256 == int32(arg2.strides[3]))) && (14336 == int32(arg2.strides[2]))) && (802816 == int32(arg2.strides[1]))) && (802816 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.447 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_35: num_args should be 2\00", align 1
@.str.448 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_35: Expect arg[0] to be pointer\00", align 1
@.str.449 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_35: Expect arg[1] to be pointer\00", align 1
@.str.450 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (32 == int32(arg0.strides[3]))) && (1792 == int32(arg0.strides[2]))) && (100352 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.451 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (4 == int32(arg1.strides[3]))) && (224 == int32(arg1.strides[2]))) && (12544 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.453 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_48: num_args should be 2\00", align 1
@.str.454 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_48: Expect arg[0] to be pointer\00", align 1
@.str.455 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_48: Expect arg[1] to be pointer\00", align 1
@.str.456 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (512 == int32(arg1.strides[3]))) && (3584 == int32(arg1.strides[2]))) && (25088 == int32(arg1.strides[1]))) && (25088 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.458 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_33: num_args should be 2\00", align 1
@.str.459 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_33: Expect arg[0] to be pointer\00", align 1
@.str.460 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_33: Expect arg[1] to be pointer\00", align 1
@.str.461 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (512 == int32(arg1.strides[3]))) && (14336 == int32(arg1.strides[2]))) && (401408 == int32(arg1.strides[1]))) && (401408 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.463 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_8: num_args should be 5\00", align 1
@.str.464 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_8: Expect arg[0] to be pointer\00", align 1
@.str.465 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_8: Expect arg[1] to be pointer\00", align 1
@.str.466 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_8: Expect arg[2] to be pointer\00", align 1
@.str.467 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_8: Expect arg[3] to be pointer\00", align 1
@.str.468 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_8: Expect arg[4] to be pointer\00", align 1
@.str.469 = private constant [279 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (64 == int32(arg1.strides[4]))) && (32768 == int32(arg1.strides[3]))) && (32768 == int32(arg1.strides[2]))) && (32768 == int32(arg1.strides[1]))) && (65536 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.471 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_49: num_args should be 2\00", align 1
@.str.472 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_49: Expect arg[0] to be pointer\00", align 1
@.str.473 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_49: Expect arg[1] to be pointer\00", align 1
@.str.474 = private constant [235 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (4 == int32(arg1.strides[3]))) && (28 == int32(arg1.strides[2]))) && (196 == int32(arg1.strides[1]))) && (100352 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.476 = private constant [111 x i8] c"Assert fail: (num_args == 7), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu: num_args should be 7\00", align 1
@.str.477 = private constant [186 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu: Expect arg[0] to be pointer\00", align 1
@.str.478 = private constant [186 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu: Expect arg[1] to be pointer\00", align 1
@.str.479 = private constant [186 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu: Expect arg[2] to be pointer\00", align 1
@.str.480 = private constant [186 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu: Expect arg[3] to be pointer\00", align 1
@.str.481 = private constant [186 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu: Expect arg[4] to be pointer\00", align 1
@.str.482 = private constant [186 x i8] c"Assert fail: ((((arg5.code == 3) || (arg5.code == 13)) || (arg5.code == 7)) || (arg5.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu: Expect arg[5] to be pointer\00", align 1
@.str.483 = private constant [186 x i8] c"Assert fail: ((((arg6.code == 3) || (arg6.code == 13)) || (arg6.code == 7)) || (arg6.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu: Expect arg[6] to be pointer\00", align 1
@.str.484 = private constant [98 x i8] c"Assert fail: (1024 == int32(arg0.shape[4])), Argument arg0.shape[4] has an unsatisfied constraint\00", align 1
@.str.485 = private constant [244 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (1024 == int32(arg0.strides[3]))) && (14336 == int32(arg0.strides[2]))) && (200704 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.486 = private constant [279 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (32768 == int32(arg1.strides[3]))) && (32768 == int32(arg1.strides[2]))) && (32768 == int32(arg1.strides[1]))) && (32768 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.487 = private constant [96 x i8] c"Assert fail: (64 == int32(arg6.shape[1])), Argument arg6.shape[1] has an unsatisfied constraint\00", align 1
@.str.488 = private constant [95 x i8] c"Assert fail: (7 == int32(arg6.shape[2])), Argument arg6.shape[2] has an unsatisfied constraint\00", align 1
@.str.489 = private constant [95 x i8] c"Assert fail: (7 == int32(arg6.shape[3])), Argument arg6.shape[3] has an unsatisfied constraint\00", align 1
@.str.490 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg6.strides[4])) && (32 == int32(arg6.strides[3]))) && (224 == int32(arg6.strides[2]))) && (1568 == int32(arg6.strides[1]))) && (100352 == int32(arg6.strides[0]))), arg6.strides: expected to be compact array\00", align 1
@.str.492 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_34: num_args should be 2\00", align 1
@.str.493 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_34: Expect arg[0] to be pointer\00", align 1
@.str.494 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_34: Expect arg[1] to be pointer\00", align 1
@.str.495 = private constant [238 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (8 == int32(arg0.strides[3]))) && (448 == int32(arg0.strides[2]))) && (25088 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.497 = private constant [72 x i8] c"Assert fail: (num_args == 3), fused_add_nn_relu_1: num_args should be 3\00", align 1
@.str.498 = private constant [147 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_add_nn_relu_1: Expect arg[0] to be pointer\00", align 1
@.str.499 = private constant [147 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_add_nn_relu_1: Expect arg[1] to be pointer\00", align 1
@.str.500 = private constant [147 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_add_nn_relu_1: Expect arg[2] to be pointer\00", align 1
@.str.501 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (64 == int32(arg1.strides[3]))) && (896 == int32(arg1.strides[2]))) && (12544 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.502 = private constant [96 x i8] c"Assert fail: (14 == int32(arg2.shape[2])), Argument arg2.shape[2] has an unsatisfied constraint\00", align 1
@.str.503 = private constant [96 x i8] c"Assert fail: (14 == int32(arg2.shape[3])), Argument arg2.shape[3] has an unsatisfied constraint\00", align 1
@.str.504 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (64 == int32(arg2.strides[3]))) && (896 == int32(arg2.strides[2]))) && (12544 == int32(arg2.strides[1]))) && (200704 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.506 = private constant [113 x i8] c"Assert fail: (num_args == 7), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1: num_args should be 7\00", align 1
@.str.507 = private constant [188 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1: Expect arg[0] to be pointer\00", align 1
@.str.508 = private constant [188 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1: Expect arg[1] to be pointer\00", align 1
@.str.509 = private constant [188 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1: Expect arg[2] to be pointer\00", align 1
@.str.510 = private constant [188 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1: Expect arg[3] to be pointer\00", align 1
@.str.511 = private constant [188 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1: Expect arg[4] to be pointer\00", align 1
@.str.512 = private constant [188 x i8] c"Assert fail: ((((arg5.code == 3) || (arg5.code == 13)) || (arg5.code == 7)) || (arg5.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1: Expect arg[5] to be pointer\00", align 1
@.str.513 = private constant [188 x i8] c"Assert fail: ((((arg6.code == 3) || (arg6.code == 13)) || (arg6.code == 7)) || (arg6.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1: Expect arg[6] to be pointer\00", align 1
@.str.514 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (512 == int32(arg0.strides[3]))) && (14336 == int32(arg0.strides[2]))) && (401408 == int32(arg0.strides[1]))) && (401408 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.515 = private constant [279 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (64 == int32(arg1.strides[4]))) && (32768 == int32(arg1.strides[3]))) && (32768 == int32(arg1.strides[2]))) && (32768 == int32(arg1.strides[1]))) && (32768 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.516 = private constant [96 x i8] c"Assert fail: (16 == int32(arg6.shape[1])), Argument arg6.shape[1] has an unsatisfied constraint\00", align 1
@.str.517 = private constant [96 x i8] c"Assert fail: (14 == int32(arg6.shape[2])), Argument arg6.shape[2] has an unsatisfied constraint\00", align 1
@.str.518 = private constant [96 x i8] c"Assert fail: (14 == int32(arg6.shape[3])), Argument arg6.shape[3] has an unsatisfied constraint\00", align 1
@.str.519 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg6.strides[4])) && (64 == int32(arg6.strides[3]))) && (896 == int32(arg6.strides[2]))) && (12544 == int32(arg6.strides[1]))) && (200704 == int32(arg6.strides[0]))), arg6.strides: expected to be compact array\00", align 1
@.str.521 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_43: num_args should be 2\00", align 1
@.str.522 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_43: Expect arg[0] to be pointer\00", align 1
@.str.523 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_43: Expect arg[1] to be pointer\00", align 1
@.str.524 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (64 == int32(arg0.strides[3]))) && (1792 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.526 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_4: num_args should be 5\00", align 1
@.str.527 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_4: Expect arg[0] to be pointer\00", align 1
@.str.528 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_4: Expect arg[1] to be pointer\00", align 1
@.str.529 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_4: Expect arg[2] to be pointer\00", align 1
@.str.530 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_4: Expect arg[3] to be pointer\00", align 1
@.str.531 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_4: Expect arg[4] to be pointer\00", align 1
@.str.532 = private constant [275 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (8192 == int32(arg1.strides[3]))) && (8192 == int32(arg1.strides[2]))) && (8192 == int32(arg1.strides[1]))) && (8192 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.533 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (32 == int32(arg2.strides[2]))) && (32 == int32(arg2.strides[1]))) && (128 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.534 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (32 == int32(arg3.strides[3]))) && (32 == int32(arg3.strides[2]))) && (32 == int32(arg3.strides[1]))) && (128 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.535 = private constant [96 x i8] c"Assert fail: (28 == int32(arg4.shape[2])), Argument arg4.shape[2] has an unsatisfied constraint\00", align 1
@.str.536 = private constant [96 x i8] c"Assert fail: (28 == int32(arg4.shape[3])), Argument arg4.shape[3] has an unsatisfied constraint\00", align 1
@.str.537 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (32 == int32(arg4.strides[3]))) && (896 == int32(arg4.strides[2]))) && (25088 == int32(arg4.strides[1]))) && (100352 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.539 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_39: num_args should be 2\00", align 1
@.str.540 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_39: Expect arg[0] to be pointer\00", align 1
@.str.541 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_39: Expect arg[1] to be pointer\00", align 1
@.str.542 = private constant [243 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (256 == int32(arg1.strides[3]))) && (14336 == int32(arg1.strides[2]))) && (802816 == int32(arg1.strides[1]))) && (802816 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.544 = private constant [98 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: num_args should be 5\00", align 1
@.str.545 = private constant [173 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[0] to be pointer\00", align 1
@.str.546 = private constant [173 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[1] to be pointer\00", align 1
@.str.547 = private constant [173 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[2] to be pointer\00", align 1
@.str.548 = private constant [173 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[3] to be pointer\00", align 1
@.str.549 = private constant [173 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu: Expect arg[4] to be pointer\00", align 1
@.str.550 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (64 == int32(arg0.strides[3]))) && (3584 == int32(arg0.strides[2]))) && (200704 == int32(arg0.strides[1]))) && (200704 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.551 = private constant [95 x i8] c"Assert fail: (2 == int32(arg1.shape[0])), Argument arg1.shape[0] has an unsatisfied constraint\00", align 1
@.str.552 = private constant [277 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (2048 == int32(arg1.strides[3]))) && (6144 == int32(arg1.strides[2]))) && (18432 == int32(arg1.strides[1]))) && (18432 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.553 = private constant [95 x i8] c"Assert fail: (2 == int32(arg2.shape[1])), Argument arg2.shape[1] has an unsatisfied constraint\00", align 1
@.str.554 = private constant [231 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (32 == int32(arg2.strides[3]))) && (32 == int32(arg2.strides[2]))) && (32 == int32(arg2.strides[1]))) && (64 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.555 = private constant [95 x i8] c"Assert fail: (2 == int32(arg3.shape[1])), Argument arg3.shape[1] has an unsatisfied constraint\00", align 1
@.str.556 = private constant [231 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (32 == int32(arg3.strides[3]))) && (32 == int32(arg3.strides[2]))) && (32 == int32(arg3.strides[1]))) && (64 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.557 = private constant [95 x i8] c"Assert fail: (2 == int32(arg4.shape[1])), Argument arg4.shape[1] has an unsatisfied constraint\00", align 1
@.str.558 = private constant [96 x i8] c"Assert fail: (56 == int32(arg4.shape[2])), Argument arg4.shape[2] has an unsatisfied constraint\00", align 1
@.str.559 = private constant [96 x i8] c"Assert fail: (56 == int32(arg4.shape[3])), Argument arg4.shape[3] has an unsatisfied constraint\00", align 1
@.str.560 = private constant [241 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (32 == int32(arg4.strides[3]))) && (1792 == int32(arg4.strides[2]))) && (100352 == int32(arg4.strides[1]))) && (200704 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.563 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: num_args should be 5\00", align 1
@.str.564 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[0] to be pointer\00", align 1
@.str.565 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[1] to be pointer\00", align 1
@.str.566 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[2] to be pointer\00", align 1
@.str.567 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[3] to be pointer\00", align 1
@.str.568 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1: Expect arg[4] to be pointer\00", align 1
@.str.569 = private constant [95 x i8] c"Assert fail: (4 == int32(arg1.shape[1])), Argument arg1.shape[1] has an unsatisfied constraint\00", align 1
@.str.570 = private constant [96 x i8] c"Assert fail: (16 == int32(arg1.shape[4])), Argument arg1.shape[4] has an unsatisfied constraint\00", align 1
@.str.571 = private constant [272 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (16 == int32(arg1.strides[4]))) && (256 == int32(arg1.strides[3]))) && (256 == int32(arg1.strides[2]))) && (256 == int32(arg1.strides[1]))) && (1024 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.572 = private constant [231 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (16 == int32(arg2.strides[3]))) && (16 == int32(arg2.strides[2]))) && (16 == int32(arg2.strides[1]))) && (64 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.573 = private constant [231 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (16 == int32(arg3.strides[3]))) && (16 == int32(arg3.strides[2]))) && (16 == int32(arg3.strides[1]))) && (64 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.574 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (16 == int32(arg4.strides[3]))) && (896 == int32(arg4.strides[2]))) && (50176 == int32(arg4.strides[1]))) && (200704 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.576 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_37: num_args should be 2\00", align 1
@.str.577 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_37: Expect arg[0] to be pointer\00", align 1
@.str.578 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_37: Expect arg[1] to be pointer\00", align 1
@.str.579 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (16 == int32(arg1.strides[3]))) && (896 == int32(arg1.strides[2]))) && (50176 == int32(arg1.strides[1]))) && (200704 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.581 = private constant [78 x i8] c"Assert fail: (num_args == 2), fused_layout_transform_38: num_args should be 2\00", align 1
@.str.582 = private constant [153 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_layout_transform_38: Expect arg[0] to be pointer\00", align 1
@.str.583 = private constant [153 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_layout_transform_38: Expect arg[1] to be pointer\00", align 1
@.str.585 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_5: num_args should be 5\00", align 1
@.str.586 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_5: Expect arg[0] to be pointer\00", align 1
@.str.587 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_5: Expect arg[1] to be pointer\00", align 1
@.str.588 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_5: Expect arg[2] to be pointer\00", align 1
@.str.589 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_5: Expect arg[3] to be pointer\00", align 1
@.str.590 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_5: Expect arg[4] to be pointer\00", align 1
@.str.591 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg2.strides[4])) && (64 == int32(arg2.strides[3]))) && (64 == int32(arg2.strides[2]))) && (64 == int32(arg2.strides[1]))) && (128 == int32(arg2.strides[0]))), arg2.strides: expected to be compact array\00", align 1
@.str.592 = private constant [232 x i8] c"Assert fail: (((((1 == int32(arg3.strides[4])) && (64 == int32(arg3.strides[3]))) && (64 == int32(arg3.strides[2]))) && (64 == int32(arg3.strides[1]))) && (128 == int32(arg3.strides[0]))), arg3.strides: expected to be compact array\00", align 1
@.str.593 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg4.strides[4])) && (64 == int32(arg4.strides[3]))) && (1792 == int32(arg4.strides[2]))) && (50176 == int32(arg4.strides[1]))) && (100352 == int32(arg4.strides[0]))), arg4.strides: expected to be compact array\00", align 1
@.str.595 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: num_args should be 5\00", align 1
@.str.596 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[0] to be pointer\00", align 1
@.str.597 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[1] to be pointer\00", align 1
@.str.598 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[2] to be pointer\00", align 1
@.str.599 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[3] to be pointer\00", align 1
@.str.600 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2: Expect arg[4] to be pointer\00", align 1
@.str.602 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_9: num_args should be 5\00", align 1
@.str.603 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_9: Expect arg[0] to be pointer\00", align 1
@.str.604 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_9: Expect arg[1] to be pointer\00", align 1
@.str.605 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_9: Expect arg[2] to be pointer\00", align 1
@.str.606 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_9: Expect arg[3] to be pointer\00", align 1
@.str.607 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_9: Expect arg[4] to be pointer\00", align 1
@.str.608 = private constant [240 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (512 == int32(arg0.strides[3]))) && (3584 == int32(arg0.strides[2]))) && (25088 == int32(arg0.strides[1]))) && (25088 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.609 = private constant [281 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (16384 == int32(arg1.strides[3]))) && (49152 == int32(arg1.strides[2]))) && (147456 == int32(arg1.strides[1]))) && (147456 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.612 = private constant [82 x i8] c"Assert fail: (num_args == 2), fused_nn_pad_layout_transform: num_args should be 2\00", align 1
@.str.613 = private constant [157 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_pad_layout_transform: Expect arg[0] to be pointer\00", align 1
@.str.614 = private constant [157 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_pad_layout_transform: Expect arg[1] to be pointer\00", align 1
@.str.615 = private constant [81 x i8] c"Assert fail: (4 == tvm_struct_get(arg0, 0, 4)), arg0.ndim is expected to equal 4\00", align 1
@.str.616 = private constant [95 x i8] c"Assert fail: (3 == int32(arg0.shape[1])), Argument arg0.shape[1] has an unsatisfied constraint\00", align 1
@.str.617 = private constant [97 x i8] c"Assert fail: (224 == int32(arg0.shape[2])), Argument arg0.shape[2] has an unsatisfied constraint\00", align 1
@.str.618 = private constant [97 x i8] c"Assert fail: (224 == int32(arg0.shape[3])), Argument arg0.shape[3] has an unsatisfied constraint\00", align 1
@.str.619 = private constant [203 x i8] c"Assert fail: ((((1 == int32(arg0.strides[3])) && (224 == int32(arg0.strides[2]))) && (50176 == int32(arg0.strides[1]))) && (150528 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.620 = private constant [97 x i8] c"Assert fail: (230 == int32(arg1.shape[2])), Argument arg1.shape[2] has an unsatisfied constraint\00", align 1
@.str.621 = private constant [97 x i8] c"Assert fail: (230 == int32(arg1.shape[3])), Argument arg1.shape[3] has an unsatisfied constraint\00", align 1
@.str.622 = private constant [239 x i8] c"Assert fail: (((((1 == int32(arg1.strides[4])) && (3 == int32(arg1.strides[3]))) && (690 == int32(arg1.strides[2]))) && (158700 == int32(arg1.strides[1]))) && (158700 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1
@.str.624 = private constant [100 x i8] c"Assert fail: (num_args == 5), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: num_args should be 5\00", align 1
@.str.625 = private constant [175 x i8] c"Assert fail: ((((arg0.code == 3) || (arg0.code == 13)) || (arg0.code == 7)) || (arg0.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[0] to be pointer\00", align 1
@.str.626 = private constant [175 x i8] c"Assert fail: ((((arg1.code == 3) || (arg1.code == 13)) || (arg1.code == 7)) || (arg1.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[1] to be pointer\00", align 1
@.str.627 = private constant [175 x i8] c"Assert fail: ((((arg2.code == 3) || (arg2.code == 13)) || (arg2.code == 7)) || (arg2.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[2] to be pointer\00", align 1
@.str.628 = private constant [175 x i8] c"Assert fail: ((((arg3.code == 3) || (arg3.code == 13)) || (arg3.code == 7)) || (arg3.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[3] to be pointer\00", align 1
@.str.629 = private constant [175 x i8] c"Assert fail: ((((arg4.code == 3) || (arg4.code == 13)) || (arg4.code == 7)) || (arg4.code == 4)), fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3: Expect arg[4] to be pointer\00", align 1
@.str.630 = private constant [242 x i8] c"Assert fail: (((((1 == int32(arg0.strides[4])) && (128 == int32(arg0.strides[3]))) && (3584 == int32(arg0.strides[2]))) && (100352 == int32(arg0.strides[1]))) && (100352 == int32(arg0.strides[0]))), arg0.strides: expected to be compact array\00", align 1
@.str.631 = private constant [278 x i8] c"Assert fail: ((((((1 == int32(arg1.strides[5])) && (32 == int32(arg1.strides[4]))) && (4096 == int32(arg1.strides[3]))) && (12288 == int32(arg1.strides[2]))) && (36864 == int32(arg1.strides[1]))) && (36864 == int32(arg1.strides[0]))), arg1.strides: expected to be compact array\00", align 1

define dllexport i32 @fused_layout_transform_45(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !9
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.1, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !23
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.2, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !25
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !39
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 4
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !41
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 14
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !44
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 14
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !46
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 64
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !51
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 12544, i32 896, i32 64, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !62
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 50176
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.11, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !66
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !80
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 2
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !82
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 14
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !85
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 14
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !87
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 128
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !91
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 25088, i32 1792, i32 128, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !102
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 50176
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.20, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_45_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_45_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %4, align 8
  %3 = getelementptr inbounds %4, %4* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %4, %4* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %4* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 27
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 28
  %14 = select i1 %13, i32 %12, i32 28
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 28
  %18 = select i1 %17, i32 %16, i32 28
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 1792
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = sdiv i32 %25, 14
  %27 = mul nsw i32 %26, 25088
  %28 = insertelement <16 x i32> undef, i32 %27, i32 0
  %29 = srem i32 %25, 14
  %30 = mul nsw i32 %29, 896
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %28
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %33 = shl i64 %indvars.iv7, 7
  %34 = add nsw i64 %33, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %35 = shl i32 %indvars.iv7.tr, 6
  %36 = insertelement <16 x i32> undef, i32 %35, i32 0
  %37 = add <16 x i32> %32, %36
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %39 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %39, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %40 = shl nsw i64 %indvars.iv, 4
  %41 = add nsw i64 %34, %40
  %42 = trunc i64 %40 to i32
  %43 = insertelement <16 x i32> undef, i32 %42, i32 0
  %44 = trunc i64 %40 to i32
  %45 = or i32 %44, 1
  %46 = insertelement <16 x i32> %43, i32 %45, i32 1
  %47 = trunc i64 %40 to i32
  %48 = or i32 %47, 2
  %49 = insertelement <16 x i32> %46, i32 %48, i32 2
  %50 = trunc i64 %40 to i32
  %51 = or i32 %50, 3
  %52 = insertelement <16 x i32> %49, i32 %51, i32 3
  %53 = trunc i64 %40 to i32
  %54 = or i32 %53, 4
  %55 = insertelement <16 x i32> %52, i32 %54, i32 4
  %56 = trunc i64 %40 to i32
  %57 = or i32 %56, 5
  %58 = insertelement <16 x i32> %55, i32 %57, i32 5
  %59 = trunc i64 %40 to i32
  %60 = or i32 %59, 6
  %61 = insertelement <16 x i32> %58, i32 %60, i32 6
  %62 = trunc i64 %40 to i32
  %63 = or i32 %62, 7
  %64 = insertelement <16 x i32> %61, i32 %63, i32 7
  %65 = trunc i64 %40 to i32
  %66 = or i32 %65, 8
  %67 = insertelement <16 x i32> %64, i32 %66, i32 8
  %68 = trunc i64 %40 to i32
  %69 = or i32 %68, 9
  %70 = insertelement <16 x i32> %67, i32 %69, i32 9
  %71 = trunc i64 %40 to i32
  %72 = or i32 %71, 10
  %73 = insertelement <16 x i32> %70, i32 %72, i32 10
  %74 = trunc i64 %40 to i32
  %75 = or i32 %74, 11
  %76 = insertelement <16 x i32> %73, i32 %75, i32 11
  %77 = trunc i64 %40 to i32
  %78 = or i32 %77, 12
  %79 = insertelement <16 x i32> %76, i32 %78, i32 12
  %80 = trunc i64 %40 to i32
  %81 = or i32 %80, 13
  %82 = insertelement <16 x i32> %79, i32 %81, i32 13
  %83 = trunc i64 %40 to i32
  %84 = or i32 %83, 14
  %85 = insertelement <16 x i32> %82, i32 %84, i32 14
  %86 = trunc i64 %40 to i32
  %87 = or i32 %86, 15
  %88 = insertelement <16 x i32> %85, i32 %87, i32 15
  %89 = sdiv <16 x i32> %88, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %90 = mul <16 x i32> %89, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %91 = sub <16 x i32> %88, %90
  %92 = icmp sgt <16 x i32> %91, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %92, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %93 = sext <16 x i1> %not. to <16 x i32>
  %94 = add nsw <16 x i32> %89, %93
  %95 = mul nsw <16 x i32> %94, <i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544>
  %96 = add nsw <16 x i32> %91, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %97 = select <16 x i1> %92, <16 x i32> %91, <16 x i32> %96
  %98 = add <16 x i32> %38, %97
  %99 = add <16 x i32> %98, %95
  %100 = extractelement <16 x i32> %99, i64 0
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !106
  %104 = insertelement <16 x float> undef, float %103, i32 0
  %105 = extractelement <16 x i32> %99, i64 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !106
  %109 = insertelement <16 x float> %104, float %108, i32 1
  %110 = extractelement <16 x i32> %99, i64 2
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !106
  %114 = insertelement <16 x float> %109, float %113, i32 2
  %115 = extractelement <16 x i32> %99, i64 3
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !106
  %119 = insertelement <16 x float> %114, float %118, i32 3
  %120 = extractelement <16 x i32> %99, i64 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !106
  %124 = insertelement <16 x float> %119, float %123, i32 4
  %125 = extractelement <16 x i32> %99, i64 5
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !106
  %129 = insertelement <16 x float> %124, float %128, i32 5
  %130 = extractelement <16 x i32> %99, i64 6
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !106
  %134 = insertelement <16 x float> %129, float %133, i32 6
  %135 = extractelement <16 x i32> %99, i64 7
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !106
  %139 = insertelement <16 x float> %134, float %138, i32 7
  %140 = extractelement <16 x i32> %99, i64 8
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !106
  %144 = insertelement <16 x float> %139, float %143, i32 8
  %145 = extractelement <16 x i32> %99, i64 9
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !106
  %149 = insertelement <16 x float> %144, float %148, i32 9
  %150 = extractelement <16 x i32> %99, i64 10
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !106
  %154 = insertelement <16 x float> %149, float %153, i32 10
  %155 = extractelement <16 x i32> %99, i64 11
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !106
  %159 = insertelement <16 x float> %154, float %158, i32 11
  %160 = extractelement <16 x i32> %99, i64 12
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !106
  %164 = insertelement <16 x float> %159, float %163, i32 12
  %165 = extractelement <16 x i32> %99, i64 13
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !106
  %169 = insertelement <16 x float> %164, float %168, i32 13
  %170 = extractelement <16 x i32> %99, i64 14
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !106
  %174 = insertelement <16 x float> %169, float %173, i32 14
  %175 = extractelement <16 x i32> %99, i64 15
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, float* %7, i64 %176
  %178 = load float, float* %177, align 4, !tbaa !106
  %179 = insertelement <16 x float> %174, float %178, i32 15
  %180 = getelementptr inbounds float, float* %4, i64 %41
  %181 = bitcast float* %180 to <16 x float>*
  store <16 x float> %179, <16 x float>* %181, align 64, !tbaa !109
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 14
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_pad(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.24, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !112
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.25, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !126
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.26, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !128
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !142
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 8
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !144
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 112
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.28, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !147
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 112
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.29, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !149
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 8
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.30, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !153
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 100352, i32 896, i32 8, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !164
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 802816
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.31, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !168
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !182
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 8
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !184
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 114
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.33, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !187
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 114
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !189
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 8
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !193
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 103968, i32 912, i32 8, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !204
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 831744
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.36, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_nn_pad_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_pad_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %5, align 8
  %3 = getelementptr inbounds %5, %5* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %5, %5* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %5* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.37, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.37(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 911
  %11 = sdiv i32 %10, %9
  %12 = mul i32 %11, %0
  %13 = icmp slt i32 %12, 912
  %14 = select i1 %13, i32 %12, i32 912
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 912
  %18 = select i1 %17, i32 %16, i32 912
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = icmp slt i32 %12, 912
  %21 = select i1 %20, i32 %12, i32 912
  %smax = xor i32 %21, -1
  %22 = mul i32 %smax, -912
  %23 = add i32 %22, -912
  %24 = add i32 %14, 1
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, -1
  %27 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv6 = phi i64 [ %26, %for_begin1.preheader.preheader ], [ %indvars.iv.next7, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %28 = mul nsw i64 %indvars.iv6, 912
  %29 = trunc i64 %indvars.iv6 to i32
  %30 = srem i32 %29, 114
  %.off = add nsw i32 %30, -1
  %31 = icmp ult i32 %.off, 112
  %32 = sdiv i32 %29, 114
  %33 = mul nsw i32 %32, 100352
  %34 = mul nsw i32 %30, 896
  %35 = add nsw i32 %34, -904
  %36 = add i32 %35, %33
  br i1 %31, label %for_body2.us, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %37 = mul i32 %indvar, 912
  %38 = add i32 %23, %37
  %39 = sext i32 %38 to i64
  %scevgep = getelementptr float, float* %4, i64 %39
  %scevgep5 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 32 %scevgep5, i8 0, i64 3648, i1 false)
  br label %for_end3

for_body2.us:                                     ; preds = %for_begin1.preheader, %if_end.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %if_end.us ], [ 0, %for_begin1.preheader ]
  %40 = shl nsw i64 %indvars.iv, 3
  %41 = add nsw i64 %40, %28
  %42 = trunc i64 %indvars.iv to i32
  switch i32 %42, label %if_then.us [
    i32 113, label %if_end.us
    i32 0, label %if_end.us
  ]

if_then.us:                                       ; preds = %for_body2.us
  %43 = trunc i64 %40 to i32
  %44 = add i32 %36, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %7, i64 %45
  %47 = bitcast float* %46 to <8 x float>*
  %48 = load <8 x float>, <8 x float>* %47, align 32, !tbaa !208
  br label %if_end.us

if_end.us:                                        ; preds = %if_then.us, %for_body2.us, %for_body2.us
  %49 = phi <8 x float> [ %48, %if_then.us ], [ zeroinitializer, %for_body2.us ], [ zeroinitializer, %for_body2.us ]
  %50 = getelementptr inbounds float, float* %4, i64 %41
  %51 = bitcast float* %50 to <8 x float>*
  store <8 x float> %49, <8 x float>* %51, align 32, !tbaa !211
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 114
  br i1 %exitcond, label %for_end3, label %for_body2.us, !prof !50

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %if_end.us, %for_body2.preheader
  %indvars.iv.next7 = add nsw i64 %indvars.iv6, 1
  %52 = icmp slt i64 %indvars.iv.next7, %27
  %indvar.next = add nuw i32 %indvar, 1
  br i1 %52, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_6(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.38, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !214
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !228
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !231
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !233
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.39, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !237
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.40, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.41, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !239
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !253
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 2
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !255
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 14
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !258
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 14
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !260
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 128
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.45, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !264
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 25088, i32 1792, i32 128, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !275
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 50176
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.46, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !279
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !293
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 2
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !295
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !298
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !300
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 128
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !304
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !306
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 6144, i32 2048, i32 16, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !317
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 18432
  %187 = load i64, i64* %47, align 8, !tbaa !321
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 36864
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([277 x i8], [277 x i8]* @.str.52, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !323
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !337
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 16
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !339
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !342
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !344
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 16
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !348
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 16, i32 16, i32 16, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !359
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 256
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.60, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !363
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !377
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 16
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !379
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !382
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !384
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 16
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.70, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !388
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 16, i32 16, i32 16, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !399
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 256
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.71, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !403
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !417
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 16
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !419
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 14
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.79, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !422
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 14
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.80, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !424
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 16
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.81, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !428
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 3136, i32 224, i32 16, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !439
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 50176
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.82, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_6_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_6_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %7 = tail call i8* %6(i32 1, i32 %5, i64 262144, i32 2, i32 32)
  %8 = alloca %6, align 8
  %9 = getelementptr inbounds %6, %6* %8, i64 0, i32 0
  store i8* %7, i8** %9, align 8
  %10 = getelementptr inbounds %6, %6* %8, i64 0, i32 1
  store i8* %0, i8** %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %6* %8 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.86, i8* nonnull %12, i32 0)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %13, %entry ], [ 0, %call_end2 ], [ %23, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %15 = alloca %7, align 8
  %16 = getelementptr inbounds %7, %7* %15, i64 0, i32 0
  store i8* %7, i8** %16, align 8
  %17 = getelementptr inbounds %7, %7* %15, i64 0, i32 1
  store i8* %1, i8** %17, align 8
  %18 = getelementptr inbounds %7, %7* %15, i64 0, i32 2
  store i8* %2, i8** %18, align 8
  %19 = getelementptr inbounds %7, %7* %15, i64 0, i32 3
  store i8* %3, i8** %19, align 8
  %20 = getelementptr inbounds %7, %7* %15, i64 0, i32 4
  store i8* %4, i8** %20, align 8
  %21 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %22 = bitcast %7* %15 to i8*
  %23 = call i32 %21(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.87, i8* nonnull %22, i32 0)
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %25 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %26 = call i32 %25(i32 1, i32 %5, i8* %7)
  br label %call_fail
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.86(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 31
  %11 = sdiv i32 %10, %9
  %12 = mul i32 %11, %0
  %13 = icmp slt i32 %12, 32
  %14 = select i1 %13, i32 %12, i32 32
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 32
  %18 = select i1 %17, i32 %16, i32 32
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = icmp slt i32 %12, 32
  %21 = select i1 %20, i32 %12, i32 32
  %smax = shl i32 %21, 11
  %22 = xor i32 %smax, -2048
  %23 = sub i32 -2048, %22
  %24 = add i32 %14, 1
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, -1
  %27 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv = phi i64 [ %26, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %28 = trunc i64 %indvars.iv to i32
  %29 = and i32 %28, 15
  %30 = ashr i32 %28, 4
  %31 = mul nsw i32 %30, 25088
  %32 = mul nuw nsw i32 %29, 1792
  %33 = add nsw i32 %32, -1920
  %34 = add i32 %33, %31
  switch i32 %29, label %if_end.us.15 [
    i32 15, label %for_begin1.preheader.split
    i32 0, label %for_begin1.preheader.split
  ]

for_begin1.preheader.split:                       ; preds = %for_begin1.preheader, %for_begin1.preheader
  %35 = shl i32 %indvar, 11
  %36 = add i32 %23, %35
  %37 = sext i32 %36 to i64
  %scevgep = getelementptr float, float* %4, i64 %37
  %scevgep5 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 64 %scevgep5, i8 0, i64 8192, i1 false)
  br label %for_end3

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %for_begin1.preheader.split, %if_end.us.15
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %38 = icmp slt i64 %indvars.iv.next, %27
  %indvar.next = add nuw i32 %indvar, 1
  br i1 %38, label %for_begin1.preheader, label %for_end, !prof !5

if_end.us.15:                                     ; preds = %for_begin1.preheader
  %39 = shl i32 %28, 11
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds float, float* %4, i64 %40
  %42 = bitcast float* %41 to <128 x float>*
  store <128 x float> zeroinitializer, <128 x float>* %42, align 64, !tbaa !443
  %43 = or i64 %40, 128
  %44 = add i32 %34, 128
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %7, i64 %45
  %47 = bitcast float* %46 to <128 x float>*
  %48 = load <128 x float>, <128 x float>* %47, align 64, !tbaa !446
  %49 = getelementptr inbounds float, float* %4, i64 %43
  %50 = bitcast float* %49 to <128 x float>*
  store <128 x float> %48, <128 x float>* %50, align 64, !tbaa !443
  %51 = or i64 %40, 256
  %52 = add i32 %34, 256
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds float, float* %7, i64 %53
  %55 = bitcast float* %54 to <128 x float>*
  %56 = load <128 x float>, <128 x float>* %55, align 64, !tbaa !446
  %57 = getelementptr inbounds float, float* %4, i64 %51
  %58 = bitcast float* %57 to <128 x float>*
  store <128 x float> %56, <128 x float>* %58, align 64, !tbaa !443
  %59 = or i64 %40, 384
  %60 = add i32 %34, 384
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = bitcast float* %62 to <128 x float>*
  %64 = load <128 x float>, <128 x float>* %63, align 64, !tbaa !446
  %65 = getelementptr inbounds float, float* %4, i64 %59
  %66 = bitcast float* %65 to <128 x float>*
  store <128 x float> %64, <128 x float>* %66, align 64, !tbaa !443
  %67 = or i64 %40, 512
  %68 = add i32 %34, 512
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds float, float* %7, i64 %69
  %71 = bitcast float* %70 to <128 x float>*
  %72 = load <128 x float>, <128 x float>* %71, align 64, !tbaa !446
  %73 = getelementptr inbounds float, float* %4, i64 %67
  %74 = bitcast float* %73 to <128 x float>*
  store <128 x float> %72, <128 x float>* %74, align 64, !tbaa !443
  %75 = or i64 %40, 640
  %76 = add i32 %34, 640
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds float, float* %7, i64 %77
  %79 = bitcast float* %78 to <128 x float>*
  %80 = load <128 x float>, <128 x float>* %79, align 64, !tbaa !446
  %81 = getelementptr inbounds float, float* %4, i64 %75
  %82 = bitcast float* %81 to <128 x float>*
  store <128 x float> %80, <128 x float>* %82, align 64, !tbaa !443
  %83 = or i64 %40, 768
  %84 = add i32 %34, 768
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds float, float* %7, i64 %85
  %87 = bitcast float* %86 to <128 x float>*
  %88 = load <128 x float>, <128 x float>* %87, align 64, !tbaa !446
  %89 = getelementptr inbounds float, float* %4, i64 %83
  %90 = bitcast float* %89 to <128 x float>*
  store <128 x float> %88, <128 x float>* %90, align 64, !tbaa !443
  %91 = or i64 %40, 896
  %92 = add i32 %34, 896
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %7, i64 %93
  %95 = bitcast float* %94 to <128 x float>*
  %96 = load <128 x float>, <128 x float>* %95, align 64, !tbaa !446
  %97 = getelementptr inbounds float, float* %4, i64 %91
  %98 = bitcast float* %97 to <128 x float>*
  store <128 x float> %96, <128 x float>* %98, align 64, !tbaa !443
  %99 = or i64 %40, 1024
  %100 = add i32 %34, 1024
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = bitcast float* %102 to <128 x float>*
  %104 = load <128 x float>, <128 x float>* %103, align 64, !tbaa !446
  %105 = getelementptr inbounds float, float* %4, i64 %99
  %106 = bitcast float* %105 to <128 x float>*
  store <128 x float> %104, <128 x float>* %106, align 64, !tbaa !443
  %107 = or i64 %40, 1152
  %108 = add i32 %34, 1152
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %7, i64 %109
  %111 = bitcast float* %110 to <128 x float>*
  %112 = load <128 x float>, <128 x float>* %111, align 64, !tbaa !446
  %113 = getelementptr inbounds float, float* %4, i64 %107
  %114 = bitcast float* %113 to <128 x float>*
  store <128 x float> %112, <128 x float>* %114, align 64, !tbaa !443
  %115 = or i64 %40, 1280
  %116 = add i32 %34, 1280
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float* %7, i64 %117
  %119 = bitcast float* %118 to <128 x float>*
  %120 = load <128 x float>, <128 x float>* %119, align 64, !tbaa !446
  %121 = getelementptr inbounds float, float* %4, i64 %115
  %122 = bitcast float* %121 to <128 x float>*
  store <128 x float> %120, <128 x float>* %122, align 64, !tbaa !443
  %123 = or i64 %40, 1408
  %124 = add i32 %34, 1408
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds float, float* %7, i64 %125
  %127 = bitcast float* %126 to <128 x float>*
  %128 = load <128 x float>, <128 x float>* %127, align 64, !tbaa !446
  %129 = getelementptr inbounds float, float* %4, i64 %123
  %130 = bitcast float* %129 to <128 x float>*
  store <128 x float> %128, <128 x float>* %130, align 64, !tbaa !443
  %131 = or i64 %40, 1536
  %132 = add i32 %34, 1536
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %7, i64 %133
  %135 = bitcast float* %134 to <128 x float>*
  %136 = load <128 x float>, <128 x float>* %135, align 64, !tbaa !446
  %137 = getelementptr inbounds float, float* %4, i64 %131
  %138 = bitcast float* %137 to <128 x float>*
  store <128 x float> %136, <128 x float>* %138, align 64, !tbaa !443
  %139 = or i64 %40, 1664
  %140 = add i32 %34, 1664
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = bitcast float* %142 to <128 x float>*
  %144 = load <128 x float>, <128 x float>* %143, align 64, !tbaa !446
  %145 = getelementptr inbounds float, float* %4, i64 %139
  %146 = bitcast float* %145 to <128 x float>*
  store <128 x float> %144, <128 x float>* %146, align 64, !tbaa !443
  %147 = or i64 %40, 1792
  %148 = add i32 %34, 1792
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds float, float* %7, i64 %149
  %151 = bitcast float* %150 to <128 x float>*
  %152 = load <128 x float>, <128 x float>* %151, align 64, !tbaa !446
  %153 = getelementptr inbounds float, float* %4, i64 %147
  %154 = bitcast float* %153 to <128 x float>*
  store <128 x float> %152, <128 x float>* %154, align 64, !tbaa !443
  %155 = or i64 %40, 1920
  %156 = getelementptr inbounds float, float* %4, i64 %155
  %157 = bitcast float* %156 to <128 x float>*
  store <128 x float> zeroinitializer, <128 x float>* %157, align 64, !tbaa !443
  br label %for_end3
}

; Function Attrs: nounwind
define private i32 @__tvm_parallel_lambda.87(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = alloca [14 x <16 x float>], align 64
  %.sub = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0
  %4 = bitcast i8* %2 to float**
  %5 = load float*, float** %4, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to float**
  %8 = load float*, float** %7, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 16
  %10 = bitcast i8* %9 to float**
  %11 = load float*, float** %10, align 8
  %12 = getelementptr inbounds i8, i8* %2, i64 24
  %13 = bitcast i8* %12 to float**
  %14 = load float*, float** %13, align 8
  %15 = getelementptr inbounds i8, i8* %2, i64 32
  %16 = bitcast i8* %15 to float**
  %17 = load float*, float** %16, align 8
  %18 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, 223
  %21 = sdiv i32 %20, %19
  %22 = mul nsw i32 %21, %0
  %23 = icmp slt i32 %22, 224
  %24 = select i1 %23, i32 %22, i32 224
  %25 = add nsw i32 %0, 1
  %26 = mul nsw i32 %21, %25
  %27 = icmp slt i32 %26, 224
  %28 = select i1 %27, i32 %26, i32 224
  %29 = icmp slt i32 %24, %28
  br i1 %29, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %30 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 16
  %31 = bitcast float* %30 to <16 x float>*
  %32 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 32
  %33 = bitcast float* %32 to <16 x float>*
  %34 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 48
  %35 = bitcast float* %34 to <16 x float>*
  %36 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 64
  %37 = bitcast float* %36 to <16 x float>*
  %38 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 80
  %39 = bitcast float* %38 to <16 x float>*
  %40 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 96
  %41 = bitcast float* %40 to <16 x float>*
  %42 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 112
  %43 = bitcast float* %42 to <16 x float>*
  %44 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 128
  %45 = bitcast float* %44 to <16 x float>*
  %46 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 144
  %47 = bitcast float* %46 to <16 x float>*
  %48 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 160
  %49 = bitcast float* %48 to <16 x float>*
  %50 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 176
  %51 = bitcast float* %50 to <16 x float>*
  %52 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 192
  %53 = bitcast float* %52 to <16 x float>*
  %54 = getelementptr inbounds [14 x <16 x float>], [14 x <16 x float>]* %3, i64 0, i64 0, i64 208
  %55 = bitcast float* %54 to <16 x float>*
  %56 = add i32 %24, 1
  %57 = sext i32 %56 to i64
  %58 = add nsw i64 %57, -1
  %59 = sext i32 %28 to i64
  %60 = bitcast [14 x <16 x float>]* %3 to i8*
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_end6.1
  %indvars.iv117 = phi i64 [ %58, %for_body.lr.ph ], [ %indvars.iv.next118, %for_end6.1 ]
  %61 = trunc i64 %indvars.iv117 to i32
  %62 = srem i32 %61, 14
  %63 = sdiv i32 %61, 14
  %64 = mul nsw i32 %63, 36864
  %65 = sext i32 %64 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %60, i8 0, i64 896, i1 false)
  br label %for_begin7.preheader

for_end:                                          ; preds = %for_end6.1, %entry
  ret i32 0

for_begin7.preheader:                             ; preds = %for_end9, %for_body
  %indvars.iv106 = phi i64 [ 0, %for_body ], [ %indvars.iv.next107, %for_end9 ]
  %.lcssa3966 = phi <16 x float> [ zeroinitializer, %for_body ], [ %219, %for_end9 ]
  %.lcssa3764 = phi <16 x float> [ zeroinitializer, %for_body ], [ %213, %for_end9 ]
  %.lcssa3562 = phi <16 x float> [ zeroinitializer, %for_body ], [ %212, %for_end9 ]
  %.lcssa3360 = phi <16 x float> [ zeroinitializer, %for_body ], [ %211, %for_end9 ]
  %.lcssa3158 = phi <16 x float> [ zeroinitializer, %for_body ], [ %210, %for_end9 ]
  %.lcssa2956 = phi <16 x float> [ zeroinitializer, %for_body ], [ %209, %for_end9 ]
  %.lcssa2754 = phi <16 x float> [ zeroinitializer, %for_body ], [ %208, %for_end9 ]
  %.lcssa2552 = phi <16 x float> [ zeroinitializer, %for_body ], [ %207, %for_end9 ]
  %.lcssa2350 = phi <16 x float> [ zeroinitializer, %for_body ], [ %206, %for_end9 ]
  %.lcssa2148 = phi <16 x float> [ zeroinitializer, %for_body ], [ %205, %for_end9 ]
  %.lcssa1946 = phi <16 x float> [ zeroinitializer, %for_body ], [ %204, %for_end9 ]
  %.lcssa1744 = phi <16 x float> [ zeroinitializer, %for_body ], [ %203, %for_end9 ]
  %.lcssa1543 = phi <16 x float> [ zeroinitializer, %for_body ], [ %202, %for_end9 ]
  %.lcssa41 = phi <16 x float> [ zeroinitializer, %for_body ], [ %201, %for_end9 ]
  %66 = phi i32 [ 0, %for_body ], [ %220, %for_end9 ]
  %reass.add = add nsw i32 %66, %62
  %reass.mul = shl i32 %reass.add, 11
  %67 = mul nuw nsw i64 %indvars.iv106, 6144
  %68 = add nsw i64 %67, %65
  %69 = sext i32 %reass.mul to i64
  br label %for_body8

for_end6:                                         ; preds = %for_end9
  %70 = add nsw i64 %65, 18432
  br label %for_begin7.preheader.1

for_body8:                                        ; preds = %for_body8, %for_begin7.preheader
  %indvars.iv = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next, %for_body8 ]
  %71 = phi <16 x float> [ %.lcssa3966, %for_begin7.preheader ], [ %219, %for_body8 ]
  %72 = phi <16 x float> [ %.lcssa3764, %for_begin7.preheader ], [ %213, %for_body8 ]
  %73 = phi <16 x float> [ %.lcssa3562, %for_begin7.preheader ], [ %212, %for_body8 ]
  %74 = phi <16 x float> [ %.lcssa3360, %for_begin7.preheader ], [ %211, %for_body8 ]
  %75 = phi <16 x float> [ %.lcssa3158, %for_begin7.preheader ], [ %210, %for_body8 ]
  %76 = phi <16 x float> [ %.lcssa2956, %for_begin7.preheader ], [ %209, %for_body8 ]
  %77 = phi <16 x float> [ %.lcssa2754, %for_begin7.preheader ], [ %208, %for_body8 ]
  %78 = phi <16 x float> [ %.lcssa2552, %for_begin7.preheader ], [ %207, %for_body8 ]
  %79 = phi <16 x float> [ %.lcssa2350, %for_begin7.preheader ], [ %206, %for_body8 ]
  %80 = phi <16 x float> [ %.lcssa2148, %for_begin7.preheader ], [ %205, %for_body8 ]
  %81 = phi <16 x float> [ %.lcssa1946, %for_begin7.preheader ], [ %204, %for_body8 ]
  %82 = phi <16 x float> [ %.lcssa1744, %for_begin7.preheader ], [ %203, %for_body8 ]
  %83 = phi <16 x float> [ %.lcssa1543, %for_begin7.preheader ], [ %202, %for_body8 ]
  %84 = phi <16 x float> [ %.lcssa41, %for_begin7.preheader ], [ %201, %for_body8 ]
  %85 = add nsw i64 %indvars.iv, %69
  %86 = getelementptr inbounds float, float* %5, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !443
  %88 = insertelement <16 x float> undef, float %87, i32 0
  %89 = shufflevector <16 x float> %88, <16 x float> undef, <16 x i32> zeroinitializer
  %90 = shl nsw i64 %indvars.iv, 4
  %91 = add nsw i64 %68, %90
  %92 = getelementptr inbounds float, float* %8, i64 %91
  %93 = bitcast float* %92 to <16 x float>*
  %94 = load <16 x float>, <16 x float>* %93, align 64, !tbaa !449
  %95 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %89, <16 x float> %94, <16 x float> %84)
  %96 = add nsw i64 %85, 128
  %97 = getelementptr inbounds float, float* %5, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !443
  %99 = insertelement <16 x float> undef, float %98, i32 0
  %100 = shufflevector <16 x float> %99, <16 x float> undef, <16 x i32> zeroinitializer
  %101 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %100, <16 x float> %94, <16 x float> %83)
  %102 = add nsw i64 %85, 256
  %103 = getelementptr inbounds float, float* %5, i64 %102
  %104 = load float, float* %103, align 4, !tbaa !443
  %105 = insertelement <16 x float> undef, float %104, i32 0
  %106 = shufflevector <16 x float> %105, <16 x float> undef, <16 x i32> zeroinitializer
  %107 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %106, <16 x float> %94, <16 x float> %82)
  %108 = add nsw i64 %85, 384
  %109 = getelementptr inbounds float, float* %5, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !443
  %111 = insertelement <16 x float> undef, float %110, i32 0
  %112 = shufflevector <16 x float> %111, <16 x float> undef, <16 x i32> zeroinitializer
  %113 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %112, <16 x float> %94, <16 x float> %81)
  %114 = add nsw i64 %85, 512
  %115 = getelementptr inbounds float, float* %5, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !443
  %117 = insertelement <16 x float> undef, float %116, i32 0
  %118 = shufflevector <16 x float> %117, <16 x float> undef, <16 x i32> zeroinitializer
  %119 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %118, <16 x float> %94, <16 x float> %80)
  %120 = add nsw i64 %85, 640
  %121 = getelementptr inbounds float, float* %5, i64 %120
  %122 = load float, float* %121, align 4, !tbaa !443
  %123 = insertelement <16 x float> undef, float %122, i32 0
  %124 = shufflevector <16 x float> %123, <16 x float> undef, <16 x i32> zeroinitializer
  %125 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %124, <16 x float> %94, <16 x float> %79)
  %126 = add nsw i64 %85, 768
  %127 = getelementptr inbounds float, float* %5, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !443
  %129 = insertelement <16 x float> undef, float %128, i32 0
  %130 = shufflevector <16 x float> %129, <16 x float> undef, <16 x i32> zeroinitializer
  %131 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %130, <16 x float> %94, <16 x float> %78)
  %132 = add nsw i64 %85, 896
  %133 = getelementptr inbounds float, float* %5, i64 %132
  %134 = load float, float* %133, align 4, !tbaa !443
  %135 = insertelement <16 x float> undef, float %134, i32 0
  %136 = shufflevector <16 x float> %135, <16 x float> undef, <16 x i32> zeroinitializer
  %137 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %136, <16 x float> %94, <16 x float> %77)
  %138 = add nsw i64 %85, 1024
  %139 = getelementptr inbounds float, float* %5, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !443
  %141 = insertelement <16 x float> undef, float %140, i32 0
  %142 = shufflevector <16 x float> %141, <16 x float> undef, <16 x i32> zeroinitializer
  %143 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %142, <16 x float> %94, <16 x float> %76)
  %144 = add nsw i64 %85, 1152
  %145 = getelementptr inbounds float, float* %5, i64 %144
  %146 = load float, float* %145, align 4, !tbaa !443
  %147 = insertelement <16 x float> undef, float %146, i32 0
  %148 = shufflevector <16 x float> %147, <16 x float> undef, <16 x i32> zeroinitializer
  %149 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %148, <16 x float> %94, <16 x float> %75)
  %150 = add nsw i64 %85, 1280
  %151 = getelementptr inbounds float, float* %5, i64 %150
  %152 = load float, float* %151, align 4, !tbaa !443
  %153 = insertelement <16 x float> undef, float %152, i32 0
  %154 = shufflevector <16 x float> %153, <16 x float> undef, <16 x i32> zeroinitializer
  %155 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %154, <16 x float> %94, <16 x float> %74)
  %156 = add nsw i64 %85, 1408
  %157 = getelementptr inbounds float, float* %5, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !443
  %159 = insertelement <16 x float> undef, float %158, i32 0
  %160 = shufflevector <16 x float> %159, <16 x float> undef, <16 x i32> zeroinitializer
  %161 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %160, <16 x float> %94, <16 x float> %73)
  %162 = add nsw i64 %85, 1536
  %163 = getelementptr inbounds float, float* %5, i64 %162
  %164 = load float, float* %163, align 4, !tbaa !443
  %165 = insertelement <16 x float> undef, float %164, i32 0
  %166 = shufflevector <16 x float> %165, <16 x float> undef, <16 x i32> zeroinitializer
  %167 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %166, <16 x float> %94, <16 x float> %72)
  %168 = add nsw i64 %85, 1664
  %169 = getelementptr inbounds float, float* %5, i64 %168
  %170 = load float, float* %169, align 4, !tbaa !443
  %171 = insertelement <16 x float> undef, float %170, i32 0
  %172 = shufflevector <16 x float> %171, <16 x float> undef, <16 x i32> zeroinitializer
  %173 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %172, <16 x float> %94, <16 x float> %71)
  %174 = add nsw i64 %91, 2048
  %175 = getelementptr inbounds float, float* %8, i64 %174
  %176 = bitcast float* %175 to <16 x float>*
  %177 = load <16 x float>, <16 x float>* %176, align 64, !tbaa !449
  %178 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %100, <16 x float> %177, <16 x float> %95)
  %179 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %106, <16 x float> %177, <16 x float> %101)
  %180 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %112, <16 x float> %177, <16 x float> %107)
  %181 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %118, <16 x float> %177, <16 x float> %113)
  %182 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %124, <16 x float> %177, <16 x float> %119)
  %183 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %130, <16 x float> %177, <16 x float> %125)
  %184 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %136, <16 x float> %177, <16 x float> %131)
  %185 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %142, <16 x float> %177, <16 x float> %137)
  %186 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %148, <16 x float> %177, <16 x float> %143)
  %187 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %154, <16 x float> %177, <16 x float> %149)
  %188 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %160, <16 x float> %177, <16 x float> %155)
  %189 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %166, <16 x float> %177, <16 x float> %161)
  %190 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %172, <16 x float> %177, <16 x float> %167)
  %191 = add nsw i64 %85, 1792
  %192 = getelementptr inbounds float, float* %5, i64 %191
  %193 = load float, float* %192, align 4, !tbaa !443
  %194 = insertelement <16 x float> undef, float %193, i32 0
  %195 = shufflevector <16 x float> %194, <16 x float> undef, <16 x i32> zeroinitializer
  %196 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %195, <16 x float> %177, <16 x float> %173)
  %197 = add nsw i64 %91, 4096
  %198 = getelementptr inbounds float, float* %8, i64 %197
  %199 = bitcast float* %198 to <16 x float>*
  %200 = load <16 x float>, <16 x float>* %199, align 64, !tbaa !449
  %201 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %106, <16 x float> %200, <16 x float> %178)
  %202 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %112, <16 x float> %200, <16 x float> %179)
  %203 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %118, <16 x float> %200, <16 x float> %180)
  %204 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %124, <16 x float> %200, <16 x float> %181)
  %205 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %130, <16 x float> %200, <16 x float> %182)
  %206 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %136, <16 x float> %200, <16 x float> %183)
  %207 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %142, <16 x float> %200, <16 x float> %184)
  %208 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %148, <16 x float> %200, <16 x float> %185)
  %209 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %154, <16 x float> %200, <16 x float> %186)
  %210 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %160, <16 x float> %200, <16 x float> %187)
  %211 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %166, <16 x float> %200, <16 x float> %188)
  %212 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %172, <16 x float> %200, <16 x float> %189)
  %213 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %195, <16 x float> %200, <16 x float> %190)
  %214 = add nsw i64 %85, 1920
  %215 = getelementptr inbounds float, float* %5, i64 %214
  %216 = load float, float* %215, align 4, !tbaa !443
  %217 = insertelement <16 x float> undef, float %216, i32 0
  %218 = shufflevector <16 x float> %217, <16 x float> undef, <16 x i32> zeroinitializer
  %219 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %218, <16 x float> %200, <16 x float> %196)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %indvars.iv.next107 = add nuw nsw i64 %indvars.iv106, 1
  %220 = add nuw nsw i32 %66, 1
  %exitcond110 = icmp eq i64 %indvars.iv.next107, 3
  br i1 %exitcond110, label %for_end6, label %for_begin7.preheader, !prof !50

for_begin7.preheader.1:                           ; preds = %for_end9.1, %for_end6
  %indvars.iv106.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next107.1, %for_end9.1 ]
  %.lcssa3966.1 = phi <16 x float> [ %219, %for_end6 ], [ %374, %for_end9.1 ]
  %.lcssa3764.1 = phi <16 x float> [ %213, %for_end6 ], [ %368, %for_end9.1 ]
  %.lcssa3562.1 = phi <16 x float> [ %212, %for_end6 ], [ %367, %for_end9.1 ]
  %.lcssa3360.1 = phi <16 x float> [ %211, %for_end6 ], [ %366, %for_end9.1 ]
  %.lcssa3158.1 = phi <16 x float> [ %210, %for_end6 ], [ %365, %for_end9.1 ]
  %.lcssa2956.1 = phi <16 x float> [ %209, %for_end6 ], [ %364, %for_end9.1 ]
  %.lcssa2754.1 = phi <16 x float> [ %208, %for_end6 ], [ %363, %for_end9.1 ]
  %.lcssa2552.1 = phi <16 x float> [ %207, %for_end6 ], [ %362, %for_end9.1 ]
  %.lcssa2350.1 = phi <16 x float> [ %206, %for_end6 ], [ %361, %for_end9.1 ]
  %.lcssa2148.1 = phi <16 x float> [ %205, %for_end6 ], [ %360, %for_end9.1 ]
  %.lcssa1946.1 = phi <16 x float> [ %204, %for_end6 ], [ %359, %for_end9.1 ]
  %.lcssa1744.1 = phi <16 x float> [ %203, %for_end6 ], [ %358, %for_end9.1 ]
  %.lcssa1543.1 = phi <16 x float> [ %202, %for_end6 ], [ %357, %for_end9.1 ]
  %.lcssa41.1 = phi <16 x float> [ %201, %for_end6 ], [ %356, %for_end9.1 ]
  %221 = phi i32 [ 0, %for_end6 ], [ %375, %for_end9.1 ]
  %reass.add.1 = add nsw i32 %221, %62
  %reass.mul.1 = shl i32 %reass.add.1, 11
  %222 = add nsw i32 %reass.mul.1, 32768
  %223 = mul nuw nsw i64 %indvars.iv106.1, 6144
  %224 = add nsw i64 %70, %223
  %225 = sext i32 %222 to i64
  br label %for_body8.1

for_body8.1:                                      ; preds = %for_body8.1, %for_begin7.preheader.1
  %indvars.iv.1 = phi i64 [ 0, %for_begin7.preheader.1 ], [ %indvars.iv.next.1, %for_body8.1 ]
  %226 = phi <16 x float> [ %.lcssa3966.1, %for_begin7.preheader.1 ], [ %374, %for_body8.1 ]
  %227 = phi <16 x float> [ %.lcssa3764.1, %for_begin7.preheader.1 ], [ %368, %for_body8.1 ]
  %228 = phi <16 x float> [ %.lcssa3562.1, %for_begin7.preheader.1 ], [ %367, %for_body8.1 ]
  %229 = phi <16 x float> [ %.lcssa3360.1, %for_begin7.preheader.1 ], [ %366, %for_body8.1 ]
  %230 = phi <16 x float> [ %.lcssa3158.1, %for_begin7.preheader.1 ], [ %365, %for_body8.1 ]
  %231 = phi <16 x float> [ %.lcssa2956.1, %for_begin7.preheader.1 ], [ %364, %for_body8.1 ]
  %232 = phi <16 x float> [ %.lcssa2754.1, %for_begin7.preheader.1 ], [ %363, %for_body8.1 ]
  %233 = phi <16 x float> [ %.lcssa2552.1, %for_begin7.preheader.1 ], [ %362, %for_body8.1 ]
  %234 = phi <16 x float> [ %.lcssa2350.1, %for_begin7.preheader.1 ], [ %361, %for_body8.1 ]
  %235 = phi <16 x float> [ %.lcssa2148.1, %for_begin7.preheader.1 ], [ %360, %for_body8.1 ]
  %236 = phi <16 x float> [ %.lcssa1946.1, %for_begin7.preheader.1 ], [ %359, %for_body8.1 ]
  %237 = phi <16 x float> [ %.lcssa1744.1, %for_begin7.preheader.1 ], [ %358, %for_body8.1 ]
  %238 = phi <16 x float> [ %.lcssa1543.1, %for_begin7.preheader.1 ], [ %357, %for_body8.1 ]
  %239 = phi <16 x float> [ %.lcssa41.1, %for_begin7.preheader.1 ], [ %356, %for_body8.1 ]
  %240 = add nsw i64 %indvars.iv.1, %225
  %241 = getelementptr inbounds float, float* %5, i64 %240
  %242 = load float, float* %241, align 4, !tbaa !443
  %243 = insertelement <16 x float> undef, float %242, i32 0
  %244 = shufflevector <16 x float> %243, <16 x float> undef, <16 x i32> zeroinitializer
  %245 = shl nsw i64 %indvars.iv.1, 4
  %246 = add nsw i64 %224, %245
  %247 = getelementptr inbounds float, float* %8, i64 %246
  %248 = bitcast float* %247 to <16 x float>*
  %249 = load <16 x float>, <16 x float>* %248, align 64, !tbaa !449
  %250 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %244, <16 x float> %249, <16 x float> %239)
  %251 = add nsw i64 %240, 128
  %252 = getelementptr inbounds float, float* %5, i64 %251
  %253 = load float, float* %252, align 4, !tbaa !443
  %254 = insertelement <16 x float> undef, float %253, i32 0
  %255 = shufflevector <16 x float> %254, <16 x float> undef, <16 x i32> zeroinitializer
  %256 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %255, <16 x float> %249, <16 x float> %238)
  %257 = add nsw i64 %240, 256
  %258 = getelementptr inbounds float, float* %5, i64 %257
  %259 = load float, float* %258, align 4, !tbaa !443
  %260 = insertelement <16 x float> undef, float %259, i32 0
  %261 = shufflevector <16 x float> %260, <16 x float> undef, <16 x i32> zeroinitializer
  %262 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %261, <16 x float> %249, <16 x float> %237)
  %263 = add nsw i64 %240, 384
  %264 = getelementptr inbounds float, float* %5, i64 %263
  %265 = load float, float* %264, align 4, !tbaa !443
  %266 = insertelement <16 x float> undef, float %265, i32 0
  %267 = shufflevector <16 x float> %266, <16 x float> undef, <16 x i32> zeroinitializer
  %268 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %267, <16 x float> %249, <16 x float> %236)
  %269 = add nsw i64 %240, 512
  %270 = getelementptr inbounds float, float* %5, i64 %269
  %271 = load float, float* %270, align 4, !tbaa !443
  %272 = insertelement <16 x float> undef, float %271, i32 0
  %273 = shufflevector <16 x float> %272, <16 x float> undef, <16 x i32> zeroinitializer
  %274 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %273, <16 x float> %249, <16 x float> %235)
  %275 = add nsw i64 %240, 640
  %276 = getelementptr inbounds float, float* %5, i64 %275
  %277 = load float, float* %276, align 4, !tbaa !443
  %278 = insertelement <16 x float> undef, float %277, i32 0
  %279 = shufflevector <16 x float> %278, <16 x float> undef, <16 x i32> zeroinitializer
  %280 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %279, <16 x float> %249, <16 x float> %234)
  %281 = add nsw i64 %240, 768
  %282 = getelementptr inbounds float, float* %5, i64 %281
  %283 = load float, float* %282, align 4, !tbaa !443
  %284 = insertelement <16 x float> undef, float %283, i32 0
  %285 = shufflevector <16 x float> %284, <16 x float> undef, <16 x i32> zeroinitializer
  %286 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %285, <16 x float> %249, <16 x float> %233)
  %287 = add nsw i64 %240, 896
  %288 = getelementptr inbounds float, float* %5, i64 %287
  %289 = load float, float* %288, align 4, !tbaa !443
  %290 = insertelement <16 x float> undef, float %289, i32 0
  %291 = shufflevector <16 x float> %290, <16 x float> undef, <16 x i32> zeroinitializer
  %292 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %291, <16 x float> %249, <16 x float> %232)
  %293 = add nsw i64 %240, 1024
  %294 = getelementptr inbounds float, float* %5, i64 %293
  %295 = load float, float* %294, align 4, !tbaa !443
  %296 = insertelement <16 x float> undef, float %295, i32 0
  %297 = shufflevector <16 x float> %296, <16 x float> undef, <16 x i32> zeroinitializer
  %298 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %297, <16 x float> %249, <16 x float> %231)
  %299 = add nsw i64 %240, 1152
  %300 = getelementptr inbounds float, float* %5, i64 %299
  %301 = load float, float* %300, align 4, !tbaa !443
  %302 = insertelement <16 x float> undef, float %301, i32 0
  %303 = shufflevector <16 x float> %302, <16 x float> undef, <16 x i32> zeroinitializer
  %304 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %303, <16 x float> %249, <16 x float> %230)
  %305 = add nsw i64 %240, 1280
  %306 = getelementptr inbounds float, float* %5, i64 %305
  %307 = load float, float* %306, align 4, !tbaa !443
  %308 = insertelement <16 x float> undef, float %307, i32 0
  %309 = shufflevector <16 x float> %308, <16 x float> undef, <16 x i32> zeroinitializer
  %310 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %309, <16 x float> %249, <16 x float> %229)
  %311 = add nsw i64 %240, 1408
  %312 = getelementptr inbounds float, float* %5, i64 %311
  %313 = load float, float* %312, align 4, !tbaa !443
  %314 = insertelement <16 x float> undef, float %313, i32 0
  %315 = shufflevector <16 x float> %314, <16 x float> undef, <16 x i32> zeroinitializer
  %316 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %315, <16 x float> %249, <16 x float> %228)
  %317 = add nsw i64 %240, 1536
  %318 = getelementptr inbounds float, float* %5, i64 %317
  %319 = load float, float* %318, align 4, !tbaa !443
  %320 = insertelement <16 x float> undef, float %319, i32 0
  %321 = shufflevector <16 x float> %320, <16 x float> undef, <16 x i32> zeroinitializer
  %322 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %321, <16 x float> %249, <16 x float> %227)
  %323 = add nsw i64 %240, 1664
  %324 = getelementptr inbounds float, float* %5, i64 %323
  %325 = load float, float* %324, align 4, !tbaa !443
  %326 = insertelement <16 x float> undef, float %325, i32 0
  %327 = shufflevector <16 x float> %326, <16 x float> undef, <16 x i32> zeroinitializer
  %328 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %327, <16 x float> %249, <16 x float> %226)
  %329 = add nsw i64 %246, 2048
  %330 = getelementptr inbounds float, float* %8, i64 %329
  %331 = bitcast float* %330 to <16 x float>*
  %332 = load <16 x float>, <16 x float>* %331, align 64, !tbaa !449
  %333 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %255, <16 x float> %332, <16 x float> %250)
  %334 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %261, <16 x float> %332, <16 x float> %256)
  %335 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %267, <16 x float> %332, <16 x float> %262)
  %336 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %273, <16 x float> %332, <16 x float> %268)
  %337 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %279, <16 x float> %332, <16 x float> %274)
  %338 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %285, <16 x float> %332, <16 x float> %280)
  %339 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %291, <16 x float> %332, <16 x float> %286)
  %340 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %297, <16 x float> %332, <16 x float> %292)
  %341 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %303, <16 x float> %332, <16 x float> %298)
  %342 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %309, <16 x float> %332, <16 x float> %304)
  %343 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %315, <16 x float> %332, <16 x float> %310)
  %344 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %321, <16 x float> %332, <16 x float> %316)
  %345 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %327, <16 x float> %332, <16 x float> %322)
  %346 = add nsw i64 %240, 1792
  %347 = getelementptr inbounds float, float* %5, i64 %346
  %348 = load float, float* %347, align 4, !tbaa !443
  %349 = insertelement <16 x float> undef, float %348, i32 0
  %350 = shufflevector <16 x float> %349, <16 x float> undef, <16 x i32> zeroinitializer
  %351 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %350, <16 x float> %332, <16 x float> %328)
  %352 = add nsw i64 %246, 4096
  %353 = getelementptr inbounds float, float* %8, i64 %352
  %354 = bitcast float* %353 to <16 x float>*
  %355 = load <16 x float>, <16 x float>* %354, align 64, !tbaa !449
  %356 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %261, <16 x float> %355, <16 x float> %333)
  %357 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %267, <16 x float> %355, <16 x float> %334)
  %358 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %273, <16 x float> %355, <16 x float> %335)
  %359 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %279, <16 x float> %355, <16 x float> %336)
  %360 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %285, <16 x float> %355, <16 x float> %337)
  %361 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %291, <16 x float> %355, <16 x float> %338)
  %362 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %297, <16 x float> %355, <16 x float> %339)
  %363 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %303, <16 x float> %355, <16 x float> %340)
  %364 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %309, <16 x float> %355, <16 x float> %341)
  %365 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %315, <16 x float> %355, <16 x float> %342)
  %366 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %321, <16 x float> %355, <16 x float> %343)
  %367 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %327, <16 x float> %355, <16 x float> %344)
  %368 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %350, <16 x float> %355, <16 x float> %345)
  %369 = add nsw i64 %240, 1920
  %370 = getelementptr inbounds float, float* %5, i64 %369
  %371 = load float, float* %370, align 4, !tbaa !443
  %372 = insertelement <16 x float> undef, float %371, i32 0
  %373 = shufflevector <16 x float> %372, <16 x float> undef, <16 x i32> zeroinitializer
  %374 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %373, <16 x float> %355, <16 x float> %351)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 128
  br i1 %exitcond.1, label %for_end9.1, label %for_body8.1, !prof !50

for_end9.1:                                       ; preds = %for_body8.1
  %indvars.iv.next107.1 = add nuw nsw i64 %indvars.iv106.1, 1
  %375 = add nuw nsw i32 %221, 1
  %exitcond110.1 = icmp eq i64 %indvars.iv.next107.1, 3
  br i1 %exitcond110.1, label %for_end6.1, label %for_begin7.preheader.1, !prof !50

for_end6.1:                                       ; preds = %for_end9.1
  store <16 x float> %356, <16 x float>* %.sub, align 64, !tbaa !452
  store <16 x float> %357, <16 x float>* %31, align 64, !tbaa !452
  store <16 x float> %358, <16 x float>* %33, align 64, !tbaa !452
  store <16 x float> %359, <16 x float>* %35, align 64, !tbaa !452
  store <16 x float> %360, <16 x float>* %37, align 64, !tbaa !452
  store <16 x float> %361, <16 x float>* %39, align 64, !tbaa !452
  store <16 x float> %362, <16 x float>* %41, align 64, !tbaa !452
  store <16 x float> %363, <16 x float>* %43, align 64, !tbaa !452
  store <16 x float> %364, <16 x float>* %45, align 64, !tbaa !452
  store <16 x float> %365, <16 x float>* %47, align 64, !tbaa !452
  store <16 x float> %366, <16 x float>* %49, align 64, !tbaa !452
  store <16 x float> %367, <16 x float>* %51, align 64, !tbaa !452
  store <16 x float> %368, <16 x float>* %53, align 64, !tbaa !452
  store <16 x float> %374, <16 x float>* %55, align 64, !tbaa !452
  %376 = mul nsw i64 %indvars.iv117, 224
  %377 = shl nsw i32 %63, 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds float, float* %14, i64 %378
  %380 = bitcast float* %379 to <16 x float>*
  %381 = load <16 x float>, <16 x float>* %380, align 64, !tbaa !462
  %382 = getelementptr inbounds float, float* %17, i64 %378
  %383 = bitcast float* %382 to <16 x float>*
  %384 = load <16 x float>, <16 x float>* %383, align 64, !tbaa !465
  %385 = fadd <16 x float> %356, %381
  %386 = fadd <16 x float> %385, %384
  %387 = fcmp ogt <16 x float> %386, zeroinitializer
  %388 = select <16 x i1> %387, <16 x float> %386, <16 x float> zeroinitializer
  %389 = getelementptr inbounds float, float* %11, i64 %376
  %390 = bitcast float* %389 to <16 x float>*
  store <16 x float> %388, <16 x float>* %390, align 64, !tbaa !468
  %391 = or i64 %376, 16
  %392 = fadd <16 x float> %357, %381
  %393 = fadd <16 x float> %392, %384
  %394 = fcmp ogt <16 x float> %393, zeroinitializer
  %395 = select <16 x i1> %394, <16 x float> %393, <16 x float> zeroinitializer
  %396 = getelementptr inbounds float, float* %11, i64 %391
  %397 = bitcast float* %396 to <16 x float>*
  store <16 x float> %395, <16 x float>* %397, align 64, !tbaa !468
  %398 = add nsw i64 %376, 32
  %399 = fadd <16 x float> %358, %381
  %400 = fadd <16 x float> %399, %384
  %401 = fcmp ogt <16 x float> %400, zeroinitializer
  %402 = select <16 x i1> %401, <16 x float> %400, <16 x float> zeroinitializer
  %403 = getelementptr inbounds float, float* %11, i64 %398
  %404 = bitcast float* %403 to <16 x float>*
  store <16 x float> %402, <16 x float>* %404, align 64, !tbaa !468
  %405 = add nsw i64 %376, 48
  %406 = fadd <16 x float> %359, %381
  %407 = fadd <16 x float> %406, %384
  %408 = fcmp ogt <16 x float> %407, zeroinitializer
  %409 = select <16 x i1> %408, <16 x float> %407, <16 x float> zeroinitializer
  %410 = getelementptr inbounds float, float* %11, i64 %405
  %411 = bitcast float* %410 to <16 x float>*
  store <16 x float> %409, <16 x float>* %411, align 64, !tbaa !468
  %412 = add nsw i64 %376, 64
  %413 = fadd <16 x float> %360, %381
  %414 = fadd <16 x float> %413, %384
  %415 = fcmp ogt <16 x float> %414, zeroinitializer
  %416 = select <16 x i1> %415, <16 x float> %414, <16 x float> zeroinitializer
  %417 = getelementptr inbounds float, float* %11, i64 %412
  %418 = bitcast float* %417 to <16 x float>*
  store <16 x float> %416, <16 x float>* %418, align 64, !tbaa !468
  %419 = add nsw i64 %376, 80
  %420 = fadd <16 x float> %361, %381
  %421 = fadd <16 x float> %420, %384
  %422 = fcmp ogt <16 x float> %421, zeroinitializer
  %423 = select <16 x i1> %422, <16 x float> %421, <16 x float> zeroinitializer
  %424 = getelementptr inbounds float, float* %11, i64 %419
  %425 = bitcast float* %424 to <16 x float>*
  store <16 x float> %423, <16 x float>* %425, align 64, !tbaa !468
  %426 = add nsw i64 %376, 96
  %427 = fadd <16 x float> %362, %381
  %428 = fadd <16 x float> %427, %384
  %429 = fcmp ogt <16 x float> %428, zeroinitializer
  %430 = select <16 x i1> %429, <16 x float> %428, <16 x float> zeroinitializer
  %431 = getelementptr inbounds float, float* %11, i64 %426
  %432 = bitcast float* %431 to <16 x float>*
  store <16 x float> %430, <16 x float>* %432, align 64, !tbaa !468
  %433 = add nsw i64 %376, 112
  %434 = fadd <16 x float> %363, %381
  %435 = fadd <16 x float> %434, %384
  %436 = fcmp ogt <16 x float> %435, zeroinitializer
  %437 = select <16 x i1> %436, <16 x float> %435, <16 x float> zeroinitializer
  %438 = getelementptr inbounds float, float* %11, i64 %433
  %439 = bitcast float* %438 to <16 x float>*
  store <16 x float> %437, <16 x float>* %439, align 64, !tbaa !468
  %440 = add nsw i64 %376, 128
  %441 = fadd <16 x float> %364, %381
  %442 = fadd <16 x float> %441, %384
  %443 = fcmp ogt <16 x float> %442, zeroinitializer
  %444 = select <16 x i1> %443, <16 x float> %442, <16 x float> zeroinitializer
  %445 = getelementptr inbounds float, float* %11, i64 %440
  %446 = bitcast float* %445 to <16 x float>*
  store <16 x float> %444, <16 x float>* %446, align 64, !tbaa !468
  %447 = add nsw i64 %376, 144
  %448 = fadd <16 x float> %365, %381
  %449 = fadd <16 x float> %448, %384
  %450 = fcmp ogt <16 x float> %449, zeroinitializer
  %451 = select <16 x i1> %450, <16 x float> %449, <16 x float> zeroinitializer
  %452 = getelementptr inbounds float, float* %11, i64 %447
  %453 = bitcast float* %452 to <16 x float>*
  store <16 x float> %451, <16 x float>* %453, align 64, !tbaa !468
  %454 = add nsw i64 %376, 160
  %455 = fadd <16 x float> %366, %381
  %456 = fadd <16 x float> %455, %384
  %457 = fcmp ogt <16 x float> %456, zeroinitializer
  %458 = select <16 x i1> %457, <16 x float> %456, <16 x float> zeroinitializer
  %459 = getelementptr inbounds float, float* %11, i64 %454
  %460 = bitcast float* %459 to <16 x float>*
  store <16 x float> %458, <16 x float>* %460, align 64, !tbaa !468
  %461 = add nsw i64 %376, 176
  %462 = load <16 x float>, <16 x float>* %51, align 64, !tbaa !471
  %463 = fadd <16 x float> %462, %381
  %464 = fadd <16 x float> %463, %384
  %465 = fcmp ogt <16 x float> %464, zeroinitializer
  %466 = select <16 x i1> %465, <16 x float> %464, <16 x float> zeroinitializer
  %467 = getelementptr inbounds float, float* %11, i64 %461
  %468 = bitcast float* %467 to <16 x float>*
  store <16 x float> %466, <16 x float>* %468, align 64, !tbaa !468
  %469 = add nsw i64 %376, 192
  %470 = load <16 x float>, <16 x float>* %53, align 64, !tbaa !471
  %471 = fadd <16 x float> %470, %381
  %472 = fadd <16 x float> %471, %384
  %473 = fcmp ogt <16 x float> %472, zeroinitializer
  %474 = select <16 x i1> %473, <16 x float> %472, <16 x float> zeroinitializer
  %475 = getelementptr inbounds float, float* %11, i64 %469
  %476 = bitcast float* %475 to <16 x float>*
  store <16 x float> %474, <16 x float>* %476, align 64, !tbaa !468
  %477 = add nsw i64 %376, 208
  %478 = load <16 x float>, <16 x float>* %55, align 64, !tbaa !471
  %479 = fadd <16 x float> %478, %381
  %480 = fadd <16 x float> %479, %384
  %481 = fcmp ogt <16 x float> %480, zeroinitializer
  %482 = select <16 x i1> %481, <16 x float> %480, <16 x float> zeroinitializer
  %483 = getelementptr inbounds float, float* %11, i64 %477
  %484 = bitcast float* %483 to <16 x float>*
  store <16 x float> %482, <16 x float>* %484, align 64, !tbaa !468
  %indvars.iv.next118 = add nsw i64 %indvars.iv117, 1
  %485 = icmp slt i64 %indvars.iv.next118, %59
  br i1 %485, label %for_body, label %for_end, !prof !5
}

; Function Attrs: nounwind readnone speculatable
declare <16 x float> @llvm.fmuladd.v16f32(<16 x float>, <16 x float>, <16 x float>) #3

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 6
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.88, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !472
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !486
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !489
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !491
  %32 = getelementptr inbounds i8, i8* %0, i64 40
  %33 = bitcast i8* %32 to %1**
  %34 = load %1*, %1** %33, align 8
  %35 = getelementptr inbounds i8, i8* %1, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4, !tbaa !495
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  %66 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %1, %1* %34, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %1, %1* %34, i64 0, i32 4
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %1, %1* %34, i64 0, i32 5
  %77 = load i64*, i64** %76, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.89, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %79 = getelementptr inbounds i8, i8* %1, i64 4
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 4, !tbaa !497
  switch i32 %81, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.90, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.91, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.92, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %85 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %85(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.93, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %37, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ]

assert_fail11:                                    ; preds = %assert_end10
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %86(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.94, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  %87 = icmp eq i32 %45, 1
  br i1 %87, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %89 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 5
  br i1 %91, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %93 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 2
  %96 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %97 = load i8, i8* %96, align 1
  %98 = icmp eq i8 %97, 32
  %99 = and i1 %95, %98
  %100 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %101, 1
  %103 = and i1 %99, %102
  br i1 %103, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %105 = load i64, i64* %41, align 8, !tbaa !499
  %106 = trunc i64 %105 to i32
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %109 = getelementptr inbounds i64, i64* %41, i64 1
  %110 = load i64, i64* %109, align 8, !tbaa !513
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %111, 32
  br i1 %112, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.95, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %114 = getelementptr inbounds i64, i64* %41, i64 2
  %115 = load i64, i64* %114, align 8, !tbaa !515
  %116 = trunc i64 %115 to i32
  %117 = icmp eq i32 %116, 28
  br i1 %117, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %119 = getelementptr inbounds i64, i64* %41, i64 3
  %120 = load i64, i64* %119, align 8, !tbaa !518
  %121 = trunc i64 %120 to i32
  %122 = icmp eq i32 %121, 28
  br i1 %122, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %123 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %123(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %124 = getelementptr inbounds i64, i64* %41, i64 4
  %125 = load i64, i64* %124, align 8, !tbaa !520
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 4
  br i1 %127, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %128 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %128(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.98, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %129 = icmp eq i64* %43, null
  br i1 %129, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end28
  %130 = getelementptr inbounds i64, i64* %43, i64 1
  %131 = bitcast i64* %130 to <4 x i64>*
  %132 = load <4 x i64>, <4 x i64>* %131, align 8, !tbaa !524
  %133 = trunc <4 x i64> %132 to <4 x i32>
  %134 = icmp eq <4 x i32> %133, <i32 3136, i32 112, i32 4, i32 1>
  %135 = load i64, i64* %43, align 8, !tbaa !535
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %136, 100352
  %rdx.shuf173 = shufflevector <4 x i1> %134, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx174 = and <4 x i1> %134, %rdx.shuf173
  %rdx.shuf175 = shufflevector <4 x i1> %bin.rdx174, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx176 = and <4 x i1> %bin.rdx174, %rdx.shuf175
  %138 = extractelement <4 x i1> %bin.rdx176, i32 0
  %139 = and i1 %138, %137
  br i1 %139, label %if_end, label %assert_fail29, !prof !5

if_end:                                           ; preds = %assert_end28, %if_then
  %140 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %141 = load i64, i64* %140, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %143(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.99, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 6
  br i1 %147, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 2
  %152 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 32
  %155 = and i1 %151, %154
  %156 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %157 = load i16, i16* %156, align 2
  %158 = icmp eq i16 %157, 1
  %159 = and i1 %155, %158
  br i1 %159, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %161 = load i64, i64* %51, align 8, !tbaa !539
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i32 %162, 16
  br i1 %163, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %165 = getelementptr inbounds i64, i64* %51, i64 1
  %166 = load i64, i64* %165, align 8, !tbaa !553
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 32
  br i1 %168, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %170 = getelementptr inbounds i64, i64* %51, i64 2
  %171 = load i64, i64* %170, align 8, !tbaa !555
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %175 = getelementptr inbounds i64, i64* %51, i64 3
  %176 = load i64, i64* %175, align 8, !tbaa !558
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %179(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %180 = getelementptr inbounds i64, i64* %51, i64 4
  %181 = load i64, i64* %180, align 8, !tbaa !560
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %185 = getelementptr inbounds i64, i64* %51, i64 5
  %186 = load i64, i64* %185, align 8, !tbaa !564
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 32
  br i1 %188, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %190 = icmp eq i64* %53, null
  br i1 %190, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %191 = getelementptr inbounds i64, i64* %53, i64 2
  %192 = bitcast i64* %191 to <4 x i64>*
  %193 = load <4 x i64>, <4 x i64>* %192, align 8, !tbaa !566
  %194 = trunc <4 x i64> %193 to <4 x i32>
  %195 = icmp eq <4 x i32> %194, <i32 128, i32 128, i32 32, i32 1>
  %196 = getelementptr inbounds i64, i64* %53, i64 1
  %197 = load i64, i64* %196, align 8, !tbaa !577
  %198 = trunc i64 %197 to i32
  %199 = icmp eq i32 %198, 128
  %200 = load i64, i64* %53, align 8, !tbaa !581
  %201 = trunc i64 %200 to i32
  %202 = icmp eq i32 %201, 4096
  %rdx.shuf169 = shufflevector <4 x i1> %195, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx170 = and <4 x i1> %195, %rdx.shuf169
  %rdx.shuf171 = shufflevector <4 x i1> %bin.rdx170, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx172 = and <4 x i1> %bin.rdx170, %rdx.shuf171
  %203 = extractelement <4 x i1> %bin.rdx172, i32 0
  %204 = and i1 %203, %199
  %205 = and i1 %204, %202
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.105, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %47, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 2
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = and i1 %225, %228
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %231 = load i16, i16* %230, align 2
  %232 = icmp eq i16 %231, 1
  %233 = and i1 %229, %232
  br i1 %233, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %235 = load i64, i64* %57, align 8, !tbaa !583
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %239 = getelementptr inbounds i64, i64* %57, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !597
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 16
  br i1 %242, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %244 = getelementptr inbounds i64, i64* %57, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !599
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %249 = getelementptr inbounds i64, i64* %57, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !602
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %254 = getelementptr inbounds i64, i64* %57, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !604
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 32
  br i1 %257, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %259 = icmp eq i64* %59, null
  br i1 %259, label %if_end74, label %if_then73, !prof !50

if_then73:                                        ; preds = %assert_end72
  %260 = getelementptr inbounds i64, i64* %59, i64 1
  %261 = bitcast i64* %260 to <4 x i64>*
  %262 = load <4 x i64>, <4 x i64>* %261, align 8, !tbaa !608
  %263 = trunc <4 x i64> %262 to <4 x i32>
  %264 = icmp eq <4 x i32> %263, <i32 32, i32 32, i32 32, i32 1>
  %265 = load i64, i64* %59, align 8, !tbaa !619
  %266 = trunc i64 %265 to i32
  %267 = icmp eq i32 %266, 512
  %rdx.shuf165 = shufflevector <4 x i1> %264, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx166 = and <4 x i1> %264, %rdx.shuf165
  %rdx.shuf167 = shufflevector <4 x i1> %bin.rdx166, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx168 = and <4 x i1> %bin.rdx166, %rdx.shuf167
  %268 = extractelement <4 x i1> %bin.rdx168, i32 0
  %269 = and i1 %268, %267
  br i1 %269, label %if_end74, label %assert_fail75, !prof !5

if_end74:                                         ; preds = %assert_end72, %if_then73
  %270 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %271 = load i64, i64* %270, align 8
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %assert_end78, label %assert_fail77, !prof !5

assert_fail75:                                    ; preds = %if_then73
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.107, i64 0, i64 0))
  ret i32 -1

assert_fail77:                                    ; preds = %if_end74
  %274 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %274(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %if_end74
  %275 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %276 = load i32, i32* %275, align 4
  %277 = icmp eq i32 %276, 1
  br i1 %277, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %278 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %278(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %279 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %280 = load i32, i32* %279, align 4
  %281 = icmp eq i32 %47, %280
  br i1 %281, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %282(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %283 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %284 = load i32, i32* %283, align 4
  %285 = icmp eq i32 %284, 5
  br i1 %285, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %287 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %288 = load i8, i8* %287, align 1
  %289 = icmp eq i8 %288, 2
  %290 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %291, 32
  %293 = and i1 %289, %292
  %294 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %295 = load i16, i16* %294, align 2
  %296 = icmp eq i16 %295, 1
  %297 = and i1 %293, %296
  br i1 %297, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %298 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %298(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %299 = load i64, i64* %63, align 8, !tbaa !623
  %300 = trunc i64 %299 to i32
  %301 = icmp eq i32 %300, 1
  br i1 %301, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %302(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %303 = getelementptr inbounds i64, i64* %63, i64 1
  %304 = load i64, i64* %303, align 8, !tbaa !637
  %305 = trunc i64 %304 to i32
  %306 = icmp eq i32 %305, 16
  br i1 %306, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %307 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %307(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %308 = getelementptr inbounds i64, i64* %63, i64 2
  %309 = load i64, i64* %308, align 8, !tbaa !639
  %310 = trunc i64 %309 to i32
  %311 = icmp eq i32 %310, 1
  br i1 %311, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %313 = getelementptr inbounds i64, i64* %63, i64 3
  %314 = load i64, i64* %313, align 8, !tbaa !642
  %315 = trunc i64 %314 to i32
  %316 = icmp eq i32 %315, 1
  br i1 %316, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %317 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %317(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %318 = getelementptr inbounds i64, i64* %63, i64 4
  %319 = load i64, i64* %318, align 8, !tbaa !644
  %320 = trunc i64 %319 to i32
  %321 = icmp eq i32 %320, 32
  br i1 %321, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %322 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %322(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %323 = icmp eq i64* %65, null
  br i1 %323, label %if_end98, label %if_then97, !prof !50

if_then97:                                        ; preds = %assert_end96
  %324 = getelementptr inbounds i64, i64* %65, i64 1
  %325 = bitcast i64* %324 to <4 x i64>*
  %326 = load <4 x i64>, <4 x i64>* %325, align 8, !tbaa !648
  %327 = trunc <4 x i64> %326 to <4 x i32>
  %328 = icmp eq <4 x i32> %327, <i32 32, i32 32, i32 32, i32 1>
  %329 = load i64, i64* %65, align 8, !tbaa !659
  %330 = trunc i64 %329 to i32
  %331 = icmp eq i32 %330, 512
  %rdx.shuf161 = shufflevector <4 x i1> %328, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx162 = and <4 x i1> %328, %rdx.shuf161
  %rdx.shuf163 = shufflevector <4 x i1> %bin.rdx162, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx164 = and <4 x i1> %bin.rdx162, %rdx.shuf163
  %332 = extractelement <4 x i1> %bin.rdx164, i32 0
  %333 = and i1 %332, %331
  br i1 %333, label %if_end98, label %assert_fail99, !prof !5

if_end98:                                         ; preds = %assert_end96, %if_then97
  %334 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %335 = load i64, i64* %334, align 8
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %assert_end102, label %assert_fail101, !prof !5

assert_fail99:                                    ; preds = %if_then97
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_fail101:                                   ; preds = %if_end98
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %338(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %if_end98
  %339 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %340 = load i32, i32* %339, align 4
  %341 = icmp eq i32 %340, 1
  br i1 %341, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %342 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %342(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %343 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %344 = load i32, i32* %343, align 4
  %345 = icmp eq i32 %47, %344
  br i1 %345, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %346 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %346(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %347 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %348 = load i32, i32* %347, align 4
  %349 = icmp eq i32 %348, 5
  br i1 %349, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %350(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %351 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %352 = load i8, i8* %351, align 1
  %353 = icmp eq i8 %352, 2
  %354 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %355 = load i8, i8* %354, align 1
  %356 = icmp eq i8 %355, 32
  %357 = and i1 %353, %356
  %358 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %359 = load i16, i16* %358, align 2
  %360 = icmp eq i16 %359, 1
  %361 = and i1 %357, %360
  br i1 %361, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %362 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %362(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %363 = load i64, i64* %69, align 8, !tbaa !663
  %364 = trunc i64 %363 to i32
  %365 = icmp eq i32 %364, 1
  br i1 %365, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %366 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %366(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %367 = getelementptr inbounds i64, i64* %69, i64 1
  %368 = load i64, i64* %367, align 8, !tbaa !677
  %369 = trunc i64 %368 to i32
  %370 = icmp eq i32 %369, 16
  br i1 %370, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %371 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %371(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %372 = getelementptr inbounds i64, i64* %69, i64 2
  %373 = load i64, i64* %372, align 8, !tbaa !679
  %374 = trunc i64 %373 to i32
  %375 = icmp eq i32 %374, 1
  br i1 %375, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %376(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %377 = getelementptr inbounds i64, i64* %69, i64 3
  %378 = load i64, i64* %377, align 8, !tbaa !682
  %379 = trunc i64 %378 to i32
  %380 = icmp eq i32 %379, 1
  br i1 %380, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %381 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %381(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %382 = getelementptr inbounds i64, i64* %69, i64 4
  %383 = load i64, i64* %382, align 8, !tbaa !684
  %384 = trunc i64 %383 to i32
  %385 = icmp eq i32 %384, 32
  br i1 %385, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %386 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %386(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %387 = icmp eq i64* %71, null
  br i1 %387, label %if_end122, label %if_then121, !prof !50

if_then121:                                       ; preds = %assert_end120
  %388 = getelementptr inbounds i64, i64* %71, i64 1
  %389 = bitcast i64* %388 to <4 x i64>*
  %390 = load <4 x i64>, <4 x i64>* %389, align 8, !tbaa !688
  %391 = trunc <4 x i64> %390 to <4 x i32>
  %392 = icmp eq <4 x i32> %391, <i32 32, i32 32, i32 32, i32 1>
  %393 = load i64, i64* %71, align 8, !tbaa !699
  %394 = trunc i64 %393 to i32
  %395 = icmp eq i32 %394, 512
  %rdx.shuf157 = shufflevector <4 x i1> %392, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx158 = and <4 x i1> %392, %rdx.shuf157
  %rdx.shuf159 = shufflevector <4 x i1> %bin.rdx158, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx160 = and <4 x i1> %bin.rdx158, %rdx.shuf159
  %396 = extractelement <4 x i1> %bin.rdx160, i32 0
  %397 = and i1 %396, %395
  br i1 %397, label %if_end122, label %assert_fail123, !prof !5

if_end122:                                        ; preds = %assert_end120, %if_then121
  %398 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %399 = load i64, i64* %398, align 8
  %400 = icmp eq i64 %399, 0
  br i1 %400, label %assert_end126, label %assert_fail125, !prof !5

assert_fail123:                                   ; preds = %if_then121
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %401(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.113, i64 0, i64 0))
  ret i32 -1

assert_fail125:                                   ; preds = %if_end122
  %402 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %402(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %if_end122
  %403 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %404 = load i32, i32* %403, align 4
  %405 = icmp eq i32 %404, 1
  br i1 %405, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %406 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %406(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %407 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %408 = load i32, i32* %407, align 4
  %409 = icmp eq i32 %47, %408
  br i1 %409, label %assert_end130, label %assert_fail129, !prof !5

assert_fail129:                                   ; preds = %assert_end128
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %410(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end130:                                    ; preds = %assert_end128
  %411 = getelementptr inbounds %1, %1* %34, i64 0, i32 2
  %412 = load i32, i32* %411, align 4
  %413 = icmp eq i32 %412, 5
  br i1 %413, label %assert_end132, label %assert_fail131, !prof !5

assert_fail131:                                   ; preds = %assert_end130
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %414(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end132:                                    ; preds = %assert_end130
  %415 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 0
  %416 = load i8, i8* %415, align 1
  %417 = icmp eq i8 %416, 2
  %418 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 1
  %419 = load i8, i8* %418, align 1
  %420 = icmp eq i8 %419, 32
  %421 = and i1 %417, %420
  %422 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 2
  %423 = load i16, i16* %422, align 2
  %424 = icmp eq i16 %423, 1
  %425 = and i1 %421, %424
  br i1 %425, label %assert_end134, label %assert_fail133, !prof !5

assert_fail133:                                   ; preds = %assert_end132
  %426 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %426(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %assert_end132
  %427 = load i64, i64* %75, align 8, !tbaa !703
  %428 = trunc i64 %427 to i32
  %429 = icmp eq i32 %428, 1
  br i1 %429, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %430 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %430(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.116, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %431 = getelementptr inbounds i64, i64* %75, i64 1
  %432 = load i64, i64* %431, align 8, !tbaa !717
  %433 = trunc i64 %432 to i32
  %434 = icmp eq i32 %433, 16
  br i1 %434, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %435 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %435(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.117, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %436 = getelementptr inbounds i64, i64* %75, i64 2
  %437 = load i64, i64* %436, align 8, !tbaa !719
  %438 = trunc i64 %437 to i32
  %439 = icmp eq i32 %438, 28
  br i1 %439, label %assert_end140, label %assert_fail139, !prof !5

assert_fail139:                                   ; preds = %assert_end138
  %440 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %440(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.118, i64 0, i64 0))
  ret i32 -1

assert_end140:                                    ; preds = %assert_end138
  %441 = getelementptr inbounds i64, i64* %75, i64 3
  %442 = load i64, i64* %441, align 8, !tbaa !722
  %443 = trunc i64 %442 to i32
  %444 = icmp eq i32 %443, 28
  br i1 %444, label %assert_end142, label %assert_fail141, !prof !5

assert_fail141:                                   ; preds = %assert_end140
  %445 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %445(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.119, i64 0, i64 0))
  ret i32 -1

assert_end142:                                    ; preds = %assert_end140
  %446 = getelementptr inbounds i64, i64* %75, i64 4
  %447 = load i64, i64* %446, align 8, !tbaa !724
  %448 = trunc i64 %447 to i32
  %449 = icmp eq i32 %448, 32
  br i1 %449, label %assert_end144, label %assert_fail143, !prof !5

assert_fail143:                                   ; preds = %assert_end142
  %450 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %450(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.120, i64 0, i64 0))
  ret i32 -1

assert_end144:                                    ; preds = %assert_end142
  %451 = icmp eq i64* %77, null
  br i1 %451, label %if_end146, label %if_then145, !prof !50

if_then145:                                       ; preds = %assert_end144
  %452 = getelementptr inbounds i64, i64* %77, i64 1
  %453 = bitcast i64* %452 to <4 x i64>*
  %454 = load <4 x i64>, <4 x i64>* %453, align 8, !tbaa !728
  %455 = trunc <4 x i64> %454 to <4 x i32>
  %456 = icmp eq <4 x i32> %455, <i32 25088, i32 896, i32 32, i32 1>
  %457 = load i64, i64* %77, align 8, !tbaa !739
  %458 = trunc i64 %457 to i32
  %459 = icmp eq i32 %458, 401408
  %rdx.shuf = shufflevector <4 x i1> %456, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %456, %rdx.shuf
  %rdx.shuf155 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx156 = and <4 x i1> %bin.rdx, %rdx.shuf155
  %460 = extractelement <4 x i1> %bin.rdx156, i32 0
  %461 = and i1 %460, %459
  br i1 %461, label %if_end146, label %assert_fail147, !prof !5

if_end146:                                        ; preds = %assert_end144, %if_then145
  %462 = getelementptr inbounds %1, %1* %34, i64 0, i32 6
  %463 = load i64, i64* %462, align 8
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %assert_end150, label %assert_fail149, !prof !5

assert_fail147:                                   ; preds = %if_then145
  %465 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %465(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.121, i64 0, i64 0))
  ret i32 -1

assert_fail149:                                   ; preds = %if_end146
  %466 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %466(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end150:                                    ; preds = %if_end146
  %467 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 0
  %468 = load i32, i32* %467, align 4
  %469 = icmp eq i32 %468, 1
  br i1 %469, label %assert_end152, label %assert_fail151, !prof !5

assert_fail151:                                   ; preds = %assert_end150
  %470 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %470(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end152:                                    ; preds = %assert_end150
  %471 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 1
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %47, %472
  br i1 %473, label %assert_end154, label %assert_fail153, !prof !5

assert_fail153:                                   ; preds = %assert_end152
  %474 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %474(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end154:                                    ; preds = %assert_end152
  %475 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1_compute_(i8* %39, i8* %49, i8* %73, i8* %55, i8* %61, i8* %67, i32 %47)
  ret i32 %475
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_1_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %7 = alloca %8, align 8
  %8 = getelementptr inbounds %8, %8* %7, i64 0, i32 0
  store i8* %0, i8** %8, align 8
  %9 = getelementptr inbounds %8, %8* %7, i64 0, i32 1
  store i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %8, %8* %7, i64 0, i32 2
  store i8* %2, i8** %10, align 8
  %11 = getelementptr inbounds %8, %8* %7, i64 0, i32 3
  store i8* %3, i8** %11, align 8
  %12 = getelementptr inbounds %8, %8* %7, i64 0, i32 4
  store i8* %4, i8** %12, align 8
  %13 = getelementptr inbounds %8, %8* %7, i64 0, i32 5
  store i8* %5, i8** %13, align 8
  %14 = getelementptr inbounds %8, %8* %7, i64 0, i32 6
  store i32 %6, i32* %14, align 8
  %15 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %16 = bitcast %8* %7 to i8*
  %17 = call i32 %15(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.125, i8* nonnull %16, i32 0)
  ret i32 %17
}

define private i32 @__tvm_parallel_lambda.125(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %2, i64 48
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, 447
  %26 = sdiv i32 %25, %24
  %27 = mul nsw i32 %26, %0
  %28 = icmp slt i32 %27, 448
  %29 = select i1 %28, i32 %27, i32 448
  %30 = add nsw i32 %0, 1
  %31 = mul nsw i32 %26, %30
  %32 = icmp slt i32 %31, 448
  %33 = select i1 %32, i32 %31, i32 448
  %34 = icmp slt i32 %29, %33
  br i1 %34, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %35 = add i32 %29, 1
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %36, -1
  %38 = sext i32 %33 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_begin10.preheader
  %indvars.iv61 = phi i64 [ %37, %for_body.preheader ], [ %indvars.iv.next62, %for_begin10.preheader ]
  %39 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %40 = tail call i8* %39(i32 1, i32 %22, i64 3584, i32 2, i32 32)
  %41 = bitcast i8* %40 to float*
  %42 = trunc i64 %indvars.iv61 to i32
  %43 = srem i32 %42, 28
  %44 = mul nsw i32 %43, 112
  %45 = sdiv i32 %42, 28
  %46 = shl i32 %45, 12
  %47 = sext i32 %46 to i64
  %48 = sext i32 %44 to i64
  br label %for_body2

for_end:                                          ; preds = %for_begin10.preheader, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %49 = mul nsw i64 %indvars.iv61, 896
  %50 = shl nsw i32 %45, 5
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %13, i64 %51
  %53 = bitcast float* %52 to <32 x float>*
  %54 = load <32 x float>, <32 x float>* %53, align 64, !tbaa !743
  %55 = getelementptr inbounds float, float* %16, i64 %51
  %56 = bitcast float* %55 to <32 x float>*
  %57 = load <32 x float>, <32 x float>* %56, align 64, !tbaa !746
  %58 = getelementptr inbounds float, float* %19, i64 %51
  %59 = bitcast float* %58 to <32 x float>*
  %60 = load <32 x float>, <32 x float>* %59, align 64, !tbaa !749
  %61 = bitcast i8* %40 to <32 x float>*
  %62 = load <32 x float>, <32 x float>* %61, align 64, !tbaa !752
  %63 = fadd <32 x float> %62, %54
  %64 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %63, <32 x float> %57, <32 x float> %60)
  %65 = getelementptr inbounds float, float* %10, i64 %49
  %66 = bitcast float* %65 to <32 x float>*
  store <32 x float> %64, <32 x float>* %66, align 64, !tbaa !755
  %67 = getelementptr inbounds i8, i8* %40, i64 128
  %68 = bitcast i8* %67 to <32 x float>*
  %69 = load <32 x float>, <32 x float>* %68, align 64, !tbaa !752
  %70 = fadd <32 x float> %69, %54
  %71 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %70, <32 x float> %57, <32 x float> %60)
  %72 = mul i64 %indvars.iv61, 3848290697216
  %sext = ashr exact i64 %72, 32
  %73 = or i64 %sext, 32
  %74 = getelementptr inbounds float, float* %10, i64 %73
  %75 = bitcast float* %74 to <32 x float>*
  store <32 x float> %71, <32 x float>* %75, align 64, !tbaa !755
  %76 = getelementptr inbounds i8, i8* %40, i64 256
  %77 = bitcast i8* %76 to <32 x float>*
  %78 = load <32 x float>, <32 x float>* %77, align 64, !tbaa !752
  %79 = fadd <32 x float> %78, %54
  %80 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %79, <32 x float> %57, <32 x float> %60)
  %81 = mul i64 %indvars.iv61, 3848290697216
  %sext63 = ashr exact i64 %81, 32
  %82 = or i64 %sext63, 64
  %83 = getelementptr inbounds float, float* %10, i64 %82
  %84 = bitcast float* %83 to <32 x float>*
  store <32 x float> %80, <32 x float>* %84, align 64, !tbaa !755
  %85 = getelementptr inbounds i8, i8* %40, i64 384
  %86 = bitcast i8* %85 to <32 x float>*
  %87 = load <32 x float>, <32 x float>* %86, align 64, !tbaa !752
  %88 = fadd <32 x float> %87, %54
  %89 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %88, <32 x float> %57, <32 x float> %60)
  %90 = mul i64 %indvars.iv61, 3848290697216
  %sext64 = ashr exact i64 %90, 32
  %91 = or i64 %sext64, 96
  %92 = getelementptr inbounds float, float* %10, i64 %91
  %93 = bitcast float* %92 to <32 x float>*
  store <32 x float> %89, <32 x float>* %93, align 64, !tbaa !755
  %94 = getelementptr inbounds i8, i8* %40, i64 512
  %95 = bitcast i8* %94 to <32 x float>*
  %96 = load <32 x float>, <32 x float>* %95, align 64, !tbaa !752
  %97 = fadd <32 x float> %96, %54
  %98 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %97, <32 x float> %57, <32 x float> %60)
  %99 = mul i64 %indvars.iv61, 3848290697216
  %sext65 = add i64 %99, 549755813888
  %100 = ashr exact i64 %sext65, 32
  %101 = getelementptr inbounds float, float* %10, i64 %100
  %102 = bitcast float* %101 to <32 x float>*
  store <32 x float> %98, <32 x float>* %102, align 64, !tbaa !755
  %103 = getelementptr inbounds i8, i8* %40, i64 640
  %104 = bitcast i8* %103 to <32 x float>*
  %105 = load <32 x float>, <32 x float>* %104, align 64, !tbaa !752
  %106 = fadd <32 x float> %105, %54
  %107 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %106, <32 x float> %57, <32 x float> %60)
  %108 = mul i64 %indvars.iv61, 3848290697216
  %sext66 = add i64 %108, 687194767360
  %109 = ashr exact i64 %sext66, 32
  %110 = getelementptr inbounds float, float* %10, i64 %109
  %111 = bitcast float* %110 to <32 x float>*
  store <32 x float> %107, <32 x float>* %111, align 64, !tbaa !755
  %112 = getelementptr inbounds i8, i8* %40, i64 768
  %113 = bitcast i8* %112 to <32 x float>*
  %114 = load <32 x float>, <32 x float>* %113, align 64, !tbaa !752
  %115 = fadd <32 x float> %114, %54
  %116 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %115, <32 x float> %57, <32 x float> %60)
  %117 = mul i64 %indvars.iv61, 3848290697216
  %sext67 = add i64 %117, 824633720832
  %118 = ashr exact i64 %sext67, 32
  %119 = getelementptr inbounds float, float* %10, i64 %118
  %120 = bitcast float* %119 to <32 x float>*
  store <32 x float> %116, <32 x float>* %120, align 64, !tbaa !755
  %121 = getelementptr inbounds i8, i8* %40, i64 896
  %122 = bitcast i8* %121 to <32 x float>*
  %123 = load <32 x float>, <32 x float>* %122, align 64, !tbaa !752
  %124 = fadd <32 x float> %123, %54
  %125 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %124, <32 x float> %57, <32 x float> %60)
  %126 = mul i64 %indvars.iv61, 3848290697216
  %sext68 = add i64 %126, 962072674304
  %127 = ashr exact i64 %sext68, 32
  %128 = getelementptr inbounds float, float* %10, i64 %127
  %129 = bitcast float* %128 to <32 x float>*
  store <32 x float> %125, <32 x float>* %129, align 64, !tbaa !755
  %130 = getelementptr inbounds i8, i8* %40, i64 1024
  %131 = bitcast i8* %130 to <32 x float>*
  %132 = load <32 x float>, <32 x float>* %131, align 64, !tbaa !752
  %133 = fadd <32 x float> %132, %54
  %134 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %133, <32 x float> %57, <32 x float> %60)
  %135 = mul i64 %indvars.iv61, 3848290697216
  %sext69 = add i64 %135, 1099511627776
  %136 = ashr exact i64 %sext69, 32
  %137 = getelementptr inbounds float, float* %10, i64 %136
  %138 = bitcast float* %137 to <32 x float>*
  store <32 x float> %134, <32 x float>* %138, align 64, !tbaa !755
  %139 = getelementptr inbounds i8, i8* %40, i64 1152
  %140 = bitcast i8* %139 to <32 x float>*
  %141 = load <32 x float>, <32 x float>* %140, align 64, !tbaa !752
  %142 = fadd <32 x float> %141, %54
  %143 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %142, <32 x float> %57, <32 x float> %60)
  %144 = mul i64 %indvars.iv61, 3848290697216
  %sext70 = add i64 %144, 1236950581248
  %145 = ashr exact i64 %sext70, 32
  %146 = getelementptr inbounds float, float* %10, i64 %145
  %147 = bitcast float* %146 to <32 x float>*
  store <32 x float> %143, <32 x float>* %147, align 64, !tbaa !755
  %148 = getelementptr inbounds i8, i8* %40, i64 1280
  %149 = bitcast i8* %148 to <32 x float>*
  %150 = load <32 x float>, <32 x float>* %149, align 64, !tbaa !752
  %151 = fadd <32 x float> %150, %54
  %152 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %151, <32 x float> %57, <32 x float> %60)
  %153 = mul i64 %indvars.iv61, 3848290697216
  %sext71 = add i64 %153, 1374389534720
  %154 = ashr exact i64 %sext71, 32
  %155 = getelementptr inbounds float, float* %10, i64 %154
  %156 = bitcast float* %155 to <32 x float>*
  store <32 x float> %152, <32 x float>* %156, align 64, !tbaa !755
  %157 = getelementptr inbounds i8, i8* %40, i64 1408
  %158 = bitcast i8* %157 to <32 x float>*
  %159 = load <32 x float>, <32 x float>* %158, align 64, !tbaa !752
  %160 = fadd <32 x float> %159, %54
  %161 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %160, <32 x float> %57, <32 x float> %60)
  %162 = mul i64 %indvars.iv61, 3848290697216
  %sext72 = add i64 %162, 1511828488192
  %163 = ashr exact i64 %sext72, 32
  %164 = getelementptr inbounds float, float* %10, i64 %163
  %165 = bitcast float* %164 to <32 x float>*
  store <32 x float> %161, <32 x float>* %165, align 64, !tbaa !755
  %166 = getelementptr inbounds i8, i8* %40, i64 1536
  %167 = bitcast i8* %166 to <32 x float>*
  %168 = load <32 x float>, <32 x float>* %167, align 64, !tbaa !752
  %169 = fadd <32 x float> %168, %54
  %170 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %169, <32 x float> %57, <32 x float> %60)
  %171 = mul i64 %indvars.iv61, 3848290697216
  %sext73 = add i64 %171, 1649267441664
  %172 = ashr exact i64 %sext73, 32
  %173 = getelementptr inbounds float, float* %10, i64 %172
  %174 = bitcast float* %173 to <32 x float>*
  store <32 x float> %170, <32 x float>* %174, align 64, !tbaa !755
  %175 = getelementptr inbounds i8, i8* %40, i64 1664
  %176 = bitcast i8* %175 to <32 x float>*
  %177 = load <32 x float>, <32 x float>* %176, align 64, !tbaa !752
  %178 = fadd <32 x float> %177, %54
  %179 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %178, <32 x float> %57, <32 x float> %60)
  %180 = mul i64 %indvars.iv61, 3848290697216
  %sext74 = add i64 %180, 1786706395136
  %181 = ashr exact i64 %sext74, 32
  %182 = getelementptr inbounds float, float* %10, i64 %181
  %183 = bitcast float* %182 to <32 x float>*
  store <32 x float> %179, <32 x float>* %183, align 64, !tbaa !755
  %184 = getelementptr inbounds i8, i8* %40, i64 1792
  %185 = bitcast i8* %184 to <32 x float>*
  %186 = load <32 x float>, <32 x float>* %185, align 64, !tbaa !752
  %187 = fadd <32 x float> %186, %54
  %188 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %187, <32 x float> %57, <32 x float> %60)
  %189 = mul i64 %indvars.iv61, 3848290697216
  %sext75 = add i64 %189, 1924145348608
  %190 = ashr exact i64 %sext75, 32
  %191 = getelementptr inbounds float, float* %10, i64 %190
  %192 = bitcast float* %191 to <32 x float>*
  store <32 x float> %188, <32 x float>* %192, align 64, !tbaa !755
  %193 = getelementptr inbounds i8, i8* %40, i64 1920
  %194 = bitcast i8* %193 to <32 x float>*
  %195 = load <32 x float>, <32 x float>* %194, align 64, !tbaa !752
  %196 = fadd <32 x float> %195, %54
  %197 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %196, <32 x float> %57, <32 x float> %60)
  %198 = mul i64 %indvars.iv61, 3848290697216
  %sext76 = add i64 %198, 2061584302080
  %199 = ashr exact i64 %sext76, 32
  %200 = getelementptr inbounds float, float* %10, i64 %199
  %201 = bitcast float* %200 to <32 x float>*
  store <32 x float> %197, <32 x float>* %201, align 64, !tbaa !755
  %202 = getelementptr inbounds i8, i8* %40, i64 2048
  %203 = bitcast i8* %202 to <32 x float>*
  %204 = load <32 x float>, <32 x float>* %203, align 64, !tbaa !752
  %205 = fadd <32 x float> %204, %54
  %206 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %205, <32 x float> %57, <32 x float> %60)
  %207 = mul i64 %indvars.iv61, 3848290697216
  %sext77 = add i64 %207, 2199023255552
  %208 = ashr exact i64 %sext77, 32
  %209 = getelementptr inbounds float, float* %10, i64 %208
  %210 = bitcast float* %209 to <32 x float>*
  store <32 x float> %206, <32 x float>* %210, align 64, !tbaa !755
  %211 = getelementptr inbounds i8, i8* %40, i64 2176
  %212 = bitcast i8* %211 to <32 x float>*
  %213 = load <32 x float>, <32 x float>* %212, align 64, !tbaa !752
  %214 = fadd <32 x float> %213, %54
  %215 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %214, <32 x float> %57, <32 x float> %60)
  %216 = mul i64 %indvars.iv61, 3848290697216
  %sext78 = add i64 %216, 2336462209024
  %217 = ashr exact i64 %sext78, 32
  %218 = getelementptr inbounds float, float* %10, i64 %217
  %219 = bitcast float* %218 to <32 x float>*
  store <32 x float> %215, <32 x float>* %219, align 64, !tbaa !755
  %220 = getelementptr inbounds i8, i8* %40, i64 2304
  %221 = bitcast i8* %220 to <32 x float>*
  %222 = load <32 x float>, <32 x float>* %221, align 64, !tbaa !752
  %223 = fadd <32 x float> %222, %54
  %224 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %223, <32 x float> %57, <32 x float> %60)
  %225 = mul i64 %indvars.iv61, 3848290697216
  %sext79 = add i64 %225, 2473901162496
  %226 = ashr exact i64 %sext79, 32
  %227 = getelementptr inbounds float, float* %10, i64 %226
  %228 = bitcast float* %227 to <32 x float>*
  store <32 x float> %224, <32 x float>* %228, align 64, !tbaa !755
  %229 = getelementptr inbounds i8, i8* %40, i64 2432
  %230 = bitcast i8* %229 to <32 x float>*
  %231 = load <32 x float>, <32 x float>* %230, align 64, !tbaa !752
  %232 = fadd <32 x float> %231, %54
  %233 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %232, <32 x float> %57, <32 x float> %60)
  %234 = mul i64 %indvars.iv61, 3848290697216
  %sext80 = add i64 %234, 2611340115968
  %235 = ashr exact i64 %sext80, 32
  %236 = getelementptr inbounds float, float* %10, i64 %235
  %237 = bitcast float* %236 to <32 x float>*
  store <32 x float> %233, <32 x float>* %237, align 64, !tbaa !755
  %238 = getelementptr inbounds i8, i8* %40, i64 2560
  %239 = bitcast i8* %238 to <32 x float>*
  %240 = load <32 x float>, <32 x float>* %239, align 64, !tbaa !752
  %241 = fadd <32 x float> %240, %54
  %242 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %241, <32 x float> %57, <32 x float> %60)
  %243 = mul i64 %indvars.iv61, 3848290697216
  %sext81 = add i64 %243, 2748779069440
  %244 = ashr exact i64 %sext81, 32
  %245 = getelementptr inbounds float, float* %10, i64 %244
  %246 = bitcast float* %245 to <32 x float>*
  store <32 x float> %242, <32 x float>* %246, align 64, !tbaa !755
  %247 = getelementptr inbounds i8, i8* %40, i64 2688
  %248 = bitcast i8* %247 to <32 x float>*
  %249 = load <32 x float>, <32 x float>* %248, align 64, !tbaa !752
  %250 = fadd <32 x float> %249, %54
  %251 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %250, <32 x float> %57, <32 x float> %60)
  %252 = mul i64 %indvars.iv61, 3848290697216
  %sext82 = add i64 %252, 2886218022912
  %253 = ashr exact i64 %sext82, 32
  %254 = getelementptr inbounds float, float* %10, i64 %253
  %255 = bitcast float* %254 to <32 x float>*
  store <32 x float> %251, <32 x float>* %255, align 64, !tbaa !755
  %256 = getelementptr inbounds i8, i8* %40, i64 2816
  %257 = bitcast i8* %256 to <32 x float>*
  %258 = load <32 x float>, <32 x float>* %257, align 64, !tbaa !752
  %259 = fadd <32 x float> %258, %54
  %260 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %259, <32 x float> %57, <32 x float> %60)
  %261 = mul i64 %indvars.iv61, 3848290697216
  %sext83 = add i64 %261, 3023656976384
  %262 = ashr exact i64 %sext83, 32
  %263 = getelementptr inbounds float, float* %10, i64 %262
  %264 = bitcast float* %263 to <32 x float>*
  store <32 x float> %260, <32 x float>* %264, align 64, !tbaa !755
  %265 = getelementptr inbounds i8, i8* %40, i64 2944
  %266 = bitcast i8* %265 to <32 x float>*
  %267 = load <32 x float>, <32 x float>* %266, align 64, !tbaa !752
  %268 = fadd <32 x float> %267, %54
  %269 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %268, <32 x float> %57, <32 x float> %60)
  %270 = mul i64 %indvars.iv61, 3848290697216
  %sext84 = add i64 %270, 3161095929856
  %271 = ashr exact i64 %sext84, 32
  %272 = getelementptr inbounds float, float* %10, i64 %271
  %273 = bitcast float* %272 to <32 x float>*
  store <32 x float> %269, <32 x float>* %273, align 64, !tbaa !755
  %274 = getelementptr inbounds i8, i8* %40, i64 3072
  %275 = bitcast i8* %274 to <32 x float>*
  %276 = load <32 x float>, <32 x float>* %275, align 64, !tbaa !752
  %277 = fadd <32 x float> %276, %54
  %278 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %277, <32 x float> %57, <32 x float> %60)
  %279 = mul i64 %indvars.iv61, 3848290697216
  %sext85 = add i64 %279, 3298534883328
  %280 = ashr exact i64 %sext85, 32
  %281 = getelementptr inbounds float, float* %10, i64 %280
  %282 = bitcast float* %281 to <32 x float>*
  store <32 x float> %278, <32 x float>* %282, align 64, !tbaa !755
  %283 = getelementptr inbounds i8, i8* %40, i64 3200
  %284 = bitcast i8* %283 to <32 x float>*
  %285 = load <32 x float>, <32 x float>* %284, align 64, !tbaa !752
  %286 = fadd <32 x float> %285, %54
  %287 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %286, <32 x float> %57, <32 x float> %60)
  %288 = mul i64 %indvars.iv61, 3848290697216
  %sext86 = add i64 %288, 3435973836800
  %289 = ashr exact i64 %sext86, 32
  %290 = getelementptr inbounds float, float* %10, i64 %289
  %291 = bitcast float* %290 to <32 x float>*
  store <32 x float> %287, <32 x float>* %291, align 64, !tbaa !755
  %292 = getelementptr inbounds i8, i8* %40, i64 3328
  %293 = bitcast i8* %292 to <32 x float>*
  %294 = load <32 x float>, <32 x float>* %293, align 64, !tbaa !752
  %295 = fadd <32 x float> %294, %54
  %296 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %295, <32 x float> %57, <32 x float> %60)
  %297 = mul i64 %indvars.iv61, 3848290697216
  %sext87 = add i64 %297, 3573412790272
  %298 = ashr exact i64 %sext87, 32
  %299 = getelementptr inbounds float, float* %10, i64 %298
  %300 = bitcast float* %299 to <32 x float>*
  store <32 x float> %296, <32 x float>* %300, align 64, !tbaa !755
  %301 = getelementptr inbounds i8, i8* %40, i64 3456
  %302 = bitcast i8* %301 to <32 x float>*
  %303 = load <32 x float>, <32 x float>* %302, align 64, !tbaa !752
  %304 = fadd <32 x float> %303, %54
  %305 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %304, <32 x float> %57, <32 x float> %60)
  %306 = mul i64 %indvars.iv61, 3848290697216
  %sext88 = add i64 %306, 3710851743744
  %307 = ashr exact i64 %sext88, 32
  %308 = getelementptr inbounds float, float* %10, i64 %307
  %309 = bitcast float* %308 to <32 x float>*
  store <32 x float> %305, <32 x float>* %309, align 64, !tbaa !755
  %310 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %311 = tail call i32 %310(i32 1, i32 %22, i8* nonnull %40)
  %indvars.iv.next62 = add nsw i64 %indvars.iv61, 1
  %312 = icmp slt i64 %indvars.iv.next62, %38
  br i1 %312, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv52 = phi i64 [ 0, %for_body ], [ %indvars.iv.next53, %for_end6 ]
  %313 = mul nuw nsw i64 %indvars.iv52, 224
  %314 = getelementptr inbounds float, float* %41, i64 %313
  %315 = bitcast float* %314 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %315, align 64, !tbaa !752
  %316 = add nuw nsw i64 %313, 32
  %317 = getelementptr inbounds float, float* %41, i64 %316
  %318 = bitcast float* %317 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %318, align 64, !tbaa !752
  %319 = add nuw nsw i64 %313, 64
  %320 = getelementptr inbounds float, float* %41, i64 %319
  %321 = bitcast float* %320 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %321, align 64, !tbaa !752
  %322 = add nuw nsw i64 %313, 96
  %323 = getelementptr inbounds float, float* %41, i64 %322
  %324 = bitcast float* %323 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %324, align 64, !tbaa !752
  %325 = add nuw nsw i64 %313, 128
  %326 = getelementptr inbounds float, float* %41, i64 %325
  %327 = bitcast float* %326 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %327, align 64, !tbaa !752
  %328 = add nuw nsw i64 %313, 160
  %329 = getelementptr inbounds float, float* %41, i64 %328
  %330 = bitcast float* %329 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %330, align 64, !tbaa !752
  %331 = add nuw nsw i64 %313, 192
  %332 = getelementptr inbounds float, float* %41, i64 %331
  %333 = bitcast float* %332 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %333, align 64, !tbaa !752
  %334 = mul nuw nsw i64 %indvars.iv52, 28
  %335 = add nsw i64 %334, %48
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa3245 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %521, %for_begin7.preheader ]
  %.lcssa3043 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %515, %for_begin7.preheader ]
  %.lcssa2841 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %509, %for_begin7.preheader ]
  %.lcssa2639 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %503, %for_begin7.preheader ]
  %.lcssa2437 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %497, %for_begin7.preheader ]
  %.lcssa2235 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %491, %for_begin7.preheader ]
  %.lcssa34 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %485, %for_begin7.preheader ]
  %336 = mul nuw nsw i64 %indvars.iv, 3136
  %337 = add nsw i64 %335, %336
  %338 = shl i64 %indvars.iv, 7
  %339 = add nuw nsw i64 %338, %47
  %340 = getelementptr inbounds float, float* %4, i64 %337
  %341 = load float, float* %340, align 4, !tbaa !758
  %342 = insertelement <32 x float> undef, float %341, i32 0
  %343 = shufflevector <32 x float> %342, <32 x float> undef, <32 x i32> zeroinitializer
  %344 = getelementptr inbounds float, float* %7, i64 %339
  %345 = bitcast float* %344 to <32 x float>*
  %346 = load <32 x float>, <32 x float>* %345, align 64, !tbaa !761
  %347 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %343, <32 x float> %346, <32 x float> %.lcssa34)
  %348 = add nsw i64 %337, 4
  %349 = getelementptr inbounds float, float* %4, i64 %348
  %350 = load float, float* %349, align 4, !tbaa !758
  %351 = insertelement <32 x float> undef, float %350, i32 0
  %352 = shufflevector <32 x float> %351, <32 x float> undef, <32 x i32> zeroinitializer
  %353 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %352, <32 x float> %346, <32 x float> %.lcssa2235)
  %354 = add nsw i64 %337, 8
  %355 = getelementptr inbounds float, float* %4, i64 %354
  %356 = load float, float* %355, align 4, !tbaa !758
  %357 = insertelement <32 x float> undef, float %356, i32 0
  %358 = shufflevector <32 x float> %357, <32 x float> undef, <32 x i32> zeroinitializer
  %359 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %358, <32 x float> %346, <32 x float> %.lcssa2437)
  %360 = add nsw i64 %337, 12
  %361 = getelementptr inbounds float, float* %4, i64 %360
  %362 = load float, float* %361, align 4, !tbaa !758
  %363 = insertelement <32 x float> undef, float %362, i32 0
  %364 = shufflevector <32 x float> %363, <32 x float> undef, <32 x i32> zeroinitializer
  %365 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %364, <32 x float> %346, <32 x float> %.lcssa2639)
  %366 = add nsw i64 %337, 16
  %367 = getelementptr inbounds float, float* %4, i64 %366
  %368 = load float, float* %367, align 4, !tbaa !758
  %369 = insertelement <32 x float> undef, float %368, i32 0
  %370 = shufflevector <32 x float> %369, <32 x float> undef, <32 x i32> zeroinitializer
  %371 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %370, <32 x float> %346, <32 x float> %.lcssa2841)
  %372 = add nsw i64 %337, 20
  %373 = getelementptr inbounds float, float* %4, i64 %372
  %374 = load float, float* %373, align 4, !tbaa !758
  %375 = insertelement <32 x float> undef, float %374, i32 0
  %376 = shufflevector <32 x float> %375, <32 x float> undef, <32 x i32> zeroinitializer
  %377 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %376, <32 x float> %346, <32 x float> %.lcssa3043)
  %378 = add nsw i64 %337, 24
  %379 = getelementptr inbounds float, float* %4, i64 %378
  %380 = load float, float* %379, align 4, !tbaa !758
  %381 = insertelement <32 x float> undef, float %380, i32 0
  %382 = shufflevector <32 x float> %381, <32 x float> undef, <32 x i32> zeroinitializer
  %383 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %382, <32 x float> %346, <32 x float> %.lcssa3245)
  %384 = or i64 %337, 1
  %385 = getelementptr inbounds float, float* %4, i64 %384
  %386 = load float, float* %385, align 4, !tbaa !758
  %387 = insertelement <32 x float> undef, float %386, i32 0
  %388 = shufflevector <32 x float> %387, <32 x float> undef, <32 x i32> zeroinitializer
  %389 = or i64 %339, 32
  %390 = getelementptr inbounds float, float* %7, i64 %389
  %391 = bitcast float* %390 to <32 x float>*
  %392 = load <32 x float>, <32 x float>* %391, align 64, !tbaa !761
  %393 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %388, <32 x float> %392, <32 x float> %347)
  %394 = add nsw i64 %384, 4
  %395 = getelementptr inbounds float, float* %4, i64 %394
  %396 = load float, float* %395, align 4, !tbaa !758
  %397 = insertelement <32 x float> undef, float %396, i32 0
  %398 = shufflevector <32 x float> %397, <32 x float> undef, <32 x i32> zeroinitializer
  %399 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %398, <32 x float> %392, <32 x float> %353)
  %400 = add nsw i64 %384, 8
  %401 = getelementptr inbounds float, float* %4, i64 %400
  %402 = load float, float* %401, align 4, !tbaa !758
  %403 = insertelement <32 x float> undef, float %402, i32 0
  %404 = shufflevector <32 x float> %403, <32 x float> undef, <32 x i32> zeroinitializer
  %405 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %404, <32 x float> %392, <32 x float> %359)
  %406 = add nsw i64 %384, 12
  %407 = getelementptr inbounds float, float* %4, i64 %406
  %408 = load float, float* %407, align 4, !tbaa !758
  %409 = insertelement <32 x float> undef, float %408, i32 0
  %410 = shufflevector <32 x float> %409, <32 x float> undef, <32 x i32> zeroinitializer
  %411 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %410, <32 x float> %392, <32 x float> %365)
  %412 = add nsw i64 %384, 16
  %413 = getelementptr inbounds float, float* %4, i64 %412
  %414 = load float, float* %413, align 4, !tbaa !758
  %415 = insertelement <32 x float> undef, float %414, i32 0
  %416 = shufflevector <32 x float> %415, <32 x float> undef, <32 x i32> zeroinitializer
  %417 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %416, <32 x float> %392, <32 x float> %371)
  %418 = add nsw i64 %384, 20
  %419 = getelementptr inbounds float, float* %4, i64 %418
  %420 = load float, float* %419, align 4, !tbaa !758
  %421 = insertelement <32 x float> undef, float %420, i32 0
  %422 = shufflevector <32 x float> %421, <32 x float> undef, <32 x i32> zeroinitializer
  %423 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %422, <32 x float> %392, <32 x float> %377)
  %424 = add nsw i64 %384, 24
  %425 = getelementptr inbounds float, float* %4, i64 %424
  %426 = load float, float* %425, align 4, !tbaa !758
  %427 = insertelement <32 x float> undef, float %426, i32 0
  %428 = shufflevector <32 x float> %427, <32 x float> undef, <32 x i32> zeroinitializer
  %429 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %428, <32 x float> %392, <32 x float> %383)
  %430 = or i64 %337, 2
  %431 = getelementptr inbounds float, float* %4, i64 %430
  %432 = load float, float* %431, align 4, !tbaa !758
  %433 = insertelement <32 x float> undef, float %432, i32 0
  %434 = shufflevector <32 x float> %433, <32 x float> undef, <32 x i32> zeroinitializer
  %435 = or i64 %339, 64
  %436 = getelementptr inbounds float, float* %7, i64 %435
  %437 = bitcast float* %436 to <32 x float>*
  %438 = load <32 x float>, <32 x float>* %437, align 64, !tbaa !761
  %439 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %434, <32 x float> %438, <32 x float> %393)
  %440 = add nsw i64 %430, 4
  %441 = getelementptr inbounds float, float* %4, i64 %440
  %442 = load float, float* %441, align 4, !tbaa !758
  %443 = insertelement <32 x float> undef, float %442, i32 0
  %444 = shufflevector <32 x float> %443, <32 x float> undef, <32 x i32> zeroinitializer
  %445 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %444, <32 x float> %438, <32 x float> %399)
  %446 = add nsw i64 %430, 8
  %447 = getelementptr inbounds float, float* %4, i64 %446
  %448 = load float, float* %447, align 4, !tbaa !758
  %449 = insertelement <32 x float> undef, float %448, i32 0
  %450 = shufflevector <32 x float> %449, <32 x float> undef, <32 x i32> zeroinitializer
  %451 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %450, <32 x float> %438, <32 x float> %405)
  %452 = add nsw i64 %430, 12
  %453 = getelementptr inbounds float, float* %4, i64 %452
  %454 = load float, float* %453, align 4, !tbaa !758
  %455 = insertelement <32 x float> undef, float %454, i32 0
  %456 = shufflevector <32 x float> %455, <32 x float> undef, <32 x i32> zeroinitializer
  %457 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %456, <32 x float> %438, <32 x float> %411)
  %458 = add nsw i64 %430, 16
  %459 = getelementptr inbounds float, float* %4, i64 %458
  %460 = load float, float* %459, align 4, !tbaa !758
  %461 = insertelement <32 x float> undef, float %460, i32 0
  %462 = shufflevector <32 x float> %461, <32 x float> undef, <32 x i32> zeroinitializer
  %463 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %462, <32 x float> %438, <32 x float> %417)
  %464 = add nsw i64 %430, 20
  %465 = getelementptr inbounds float, float* %4, i64 %464
  %466 = load float, float* %465, align 4, !tbaa !758
  %467 = insertelement <32 x float> undef, float %466, i32 0
  %468 = shufflevector <32 x float> %467, <32 x float> undef, <32 x i32> zeroinitializer
  %469 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %468, <32 x float> %438, <32 x float> %423)
  %470 = add nsw i64 %430, 24
  %471 = getelementptr inbounds float, float* %4, i64 %470
  %472 = load float, float* %471, align 4, !tbaa !758
  %473 = insertelement <32 x float> undef, float %472, i32 0
  %474 = shufflevector <32 x float> %473, <32 x float> undef, <32 x i32> zeroinitializer
  %475 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %474, <32 x float> %438, <32 x float> %429)
  %476 = or i64 %337, 3
  %477 = getelementptr inbounds float, float* %4, i64 %476
  %478 = load float, float* %477, align 4, !tbaa !758
  %479 = insertelement <32 x float> undef, float %478, i32 0
  %480 = shufflevector <32 x float> %479, <32 x float> undef, <32 x i32> zeroinitializer
  %481 = or i64 %339, 96
  %482 = getelementptr inbounds float, float* %7, i64 %481
  %483 = bitcast float* %482 to <32 x float>*
  %484 = load <32 x float>, <32 x float>* %483, align 64, !tbaa !761
  %485 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %480, <32 x float> %484, <32 x float> %439)
  %486 = add nsw i64 %476, 4
  %487 = getelementptr inbounds float, float* %4, i64 %486
  %488 = load float, float* %487, align 4, !tbaa !758
  %489 = insertelement <32 x float> undef, float %488, i32 0
  %490 = shufflevector <32 x float> %489, <32 x float> undef, <32 x i32> zeroinitializer
  %491 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %490, <32 x float> %484, <32 x float> %445)
  %492 = add nsw i64 %476, 8
  %493 = getelementptr inbounds float, float* %4, i64 %492
  %494 = load float, float* %493, align 4, !tbaa !758
  %495 = insertelement <32 x float> undef, float %494, i32 0
  %496 = shufflevector <32 x float> %495, <32 x float> undef, <32 x i32> zeroinitializer
  %497 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %496, <32 x float> %484, <32 x float> %451)
  %498 = add nsw i64 %476, 12
  %499 = getelementptr inbounds float, float* %4, i64 %498
  %500 = load float, float* %499, align 4, !tbaa !758
  %501 = insertelement <32 x float> undef, float %500, i32 0
  %502 = shufflevector <32 x float> %501, <32 x float> undef, <32 x i32> zeroinitializer
  %503 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %502, <32 x float> %484, <32 x float> %457)
  %504 = add nsw i64 %476, 16
  %505 = getelementptr inbounds float, float* %4, i64 %504
  %506 = load float, float* %505, align 4, !tbaa !758
  %507 = insertelement <32 x float> undef, float %506, i32 0
  %508 = shufflevector <32 x float> %507, <32 x float> undef, <32 x i32> zeroinitializer
  %509 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %508, <32 x float> %484, <32 x float> %463)
  %510 = add nsw i64 %476, 20
  %511 = getelementptr inbounds float, float* %4, i64 %510
  %512 = load float, float* %511, align 4, !tbaa !758
  %513 = insertelement <32 x float> undef, float %512, i32 0
  %514 = shufflevector <32 x float> %513, <32 x float> undef, <32 x i32> zeroinitializer
  %515 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %514, <32 x float> %484, <32 x float> %469)
  %516 = add nsw i64 %476, 24
  %517 = getelementptr inbounds float, float* %4, i64 %516
  %518 = load float, float* %517, align 4, !tbaa !758
  %519 = insertelement <32 x float> undef, float %518, i32 0
  %520 = shufflevector <32 x float> %519, <32 x float> undef, <32 x i32> zeroinitializer
  %521 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %520, <32 x float> %484, <32 x float> %475)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for_end6, label %for_begin7.preheader, !prof !50

for_end6:                                         ; preds = %for_begin7.preheader
  store <32 x float> %485, <32 x float>* %315, align 64, !tbaa !752
  store <32 x float> %491, <32 x float>* %318, align 64, !tbaa !752
  store <32 x float> %497, <32 x float>* %321, align 64, !tbaa !752
  store <32 x float> %503, <32 x float>* %324, align 64, !tbaa !752
  store <32 x float> %509, <32 x float>* %327, align 64, !tbaa !752
  store <32 x float> %515, <32 x float>* %330, align 64, !tbaa !752
  store <32 x float> %521, <32 x float>* %333, align 64, !tbaa !752
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %exitcond54 = icmp eq i64 %indvars.iv.next53, 4
  br i1 %exitcond54, label %for_begin10.preheader, label %for_body2, !prof !50
}

; Function Attrs: nounwind readnone speculatable
declare <32 x float> @llvm.fmuladd.v32f32(<32 x float>, <32 x float>, <32 x float>) #3

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_10(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.126, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !764
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !778
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !781
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !783
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.127, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !787
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.128, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.129, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.130, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.131, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !789
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !803
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 2
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !805
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 14
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !808
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 14
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !810
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 512
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.132, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !814
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 100352, i32 7168, i32 512, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !825
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 200704
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.133, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !829
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !843
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 2
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !845
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !848
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !850
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 512
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !854
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !856
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 16384, i32 16384, i32 32, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !867
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 16384
  %187 = load i64, i64* %47, align 8, !tbaa !871
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 32768
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([279 x i8], [279 x i8]* @.str.135, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !873
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !887
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 16
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !889
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !892
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !894
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !898
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 32, i32 32, i32 32, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !909
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 512
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.107, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !913
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !927
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 16
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !929
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !932
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !934
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 32
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !938
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 32, i32 32, i32 32, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !949
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 512
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !953
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !967
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 16
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !969
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 7
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.136, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !972
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 7
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.137, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !974
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 32
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !978
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 1568, i32 224, i32 32, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !989
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 25088
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.138, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_10_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_10_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %5 = alloca %9, align 8
  %6 = getelementptr inbounds %9, %9* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %9, %9* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %9, %9* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %9, %9* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %9, %9* %5, i64 0, i32 4
  store i8* %4, i8** %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %9* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.139, i8* nonnull %12, i32 0)
  ret i32 %13
}

; Function Attrs: nounwind
define private i32 @__tvm_parallel_lambda.139(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 111
  %20 = sdiv i32 %19, %18
  %21 = mul nsw i32 %20, %0
  %22 = icmp slt i32 %21, 112
  %23 = select i1 %22, i32 %21, i32 112
  %24 = add nsw i32 %0, 1
  %25 = mul nsw i32 %20, %24
  %26 = icmp slt i32 %25, 112
  %27 = select i1 %26, i32 %25, i32 112
  %28 = icmp slt i32 %23, %27
  br i1 %28, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %29 = add i32 %23, 1
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, -1
  %32 = sext i32 %27 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_end6.1
  %indvars.iv48 = phi i64 [ %31, %for_body.lr.ph ], [ %indvars.iv.next49, %for_end6.1 ]
  %33 = trunc i64 %indvars.iv48 to i32
  %34 = srem i32 %33, 7
  %35 = mul nsw i32 %34, 14336
  %36 = sdiv i32 %33, 7
  %37 = shl i32 %36, 15
  %38 = sext i32 %35 to i64
  %39 = sext i32 %37 to i64
  br label %for_body5

for_end:                                          ; preds = %for_end6.1, %entry
  ret i32 0

for_body5:                                        ; preds = %for_body5, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_body5 ]
  %40 = phi <32 x float> [ zeroinitializer, %for_body ], [ %93, %for_body5 ]
  %41 = phi <32 x float> [ zeroinitializer, %for_body ], [ %87, %for_body5 ]
  %42 = phi <32 x float> [ zeroinitializer, %for_body ], [ %81, %for_body5 ]
  %43 = phi <32 x float> [ zeroinitializer, %for_body ], [ %75, %for_body5 ]
  %44 = phi <32 x float> [ zeroinitializer, %for_body ], [ %69, %for_body5 ]
  %45 = phi <32 x float> [ zeroinitializer, %for_body ], [ %63, %for_body5 ]
  %46 = phi <32 x float> [ zeroinitializer, %for_body ], [ %57, %for_body5 ]
  %47 = add nsw i64 %indvars.iv, %38
  %48 = getelementptr inbounds float, float* %4, i64 %47
  %49 = load float, float* %48, align 4, !tbaa !993
  %50 = insertelement <32 x float> undef, float %49, i32 0
  %51 = shufflevector <32 x float> %50, <32 x float> undef, <32 x i32> zeroinitializer
  %52 = shl i64 %indvars.iv, 5
  %53 = add nuw nsw i64 %52, %39
  %54 = getelementptr inbounds float, float* %7, i64 %53
  %55 = bitcast float* %54 to <32 x float>*
  %56 = load <32 x float>, <32 x float>* %55, align 64, !tbaa !996
  %57 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %51, <32 x float> %56, <32 x float> %46)
  %58 = add nsw i64 %47, 1024
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !993
  %61 = insertelement <32 x float> undef, float %60, i32 0
  %62 = shufflevector <32 x float> %61, <32 x float> undef, <32 x i32> zeroinitializer
  %63 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %62, <32 x float> %56, <32 x float> %45)
  %64 = add nsw i64 %47, 2048
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !993
  %67 = insertelement <32 x float> undef, float %66, i32 0
  %68 = shufflevector <32 x float> %67, <32 x float> undef, <32 x i32> zeroinitializer
  %69 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %68, <32 x float> %56, <32 x float> %44)
  %70 = add nsw i64 %47, 3072
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !993
  %73 = insertelement <32 x float> undef, float %72, i32 0
  %74 = shufflevector <32 x float> %73, <32 x float> undef, <32 x i32> zeroinitializer
  %75 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %74, <32 x float> %56, <32 x float> %43)
  %76 = add nsw i64 %47, 4096
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !993
  %79 = insertelement <32 x float> undef, float %78, i32 0
  %80 = shufflevector <32 x float> %79, <32 x float> undef, <32 x i32> zeroinitializer
  %81 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %80, <32 x float> %56, <32 x float> %42)
  %82 = add nsw i64 %47, 5120
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = load float, float* %83, align 4, !tbaa !993
  %85 = insertelement <32 x float> undef, float %84, i32 0
  %86 = shufflevector <32 x float> %85, <32 x float> undef, <32 x i32> zeroinitializer
  %87 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %86, <32 x float> %56, <32 x float> %41)
  %88 = add nsw i64 %47, 6144
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !993
  %91 = insertelement <32 x float> undef, float %90, i32 0
  %92 = shufflevector <32 x float> %91, <32 x float> undef, <32 x i32> zeroinitializer
  %93 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %92, <32 x float> %56, <32 x float> %40)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %94 = add nsw i64 %38, 100352
  %95 = or i64 %39, 16384
  br label %for_body5.1

for_body5.1:                                      ; preds = %for_body5.1, %for_end6
  %indvars.iv.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next.1, %for_body5.1 ]
  %96 = phi <32 x float> [ %93, %for_end6 ], [ %149, %for_body5.1 ]
  %97 = phi <32 x float> [ %87, %for_end6 ], [ %143, %for_body5.1 ]
  %98 = phi <32 x float> [ %81, %for_end6 ], [ %137, %for_body5.1 ]
  %99 = phi <32 x float> [ %75, %for_end6 ], [ %131, %for_body5.1 ]
  %100 = phi <32 x float> [ %69, %for_end6 ], [ %125, %for_body5.1 ]
  %101 = phi <32 x float> [ %63, %for_end6 ], [ %119, %for_body5.1 ]
  %102 = phi <32 x float> [ %57, %for_end6 ], [ %113, %for_body5.1 ]
  %103 = add nsw i64 %94, %indvars.iv.1
  %104 = getelementptr inbounds float, float* %4, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !993
  %106 = insertelement <32 x float> undef, float %105, i32 0
  %107 = shufflevector <32 x float> %106, <32 x float> undef, <32 x i32> zeroinitializer
  %108 = shl i64 %indvars.iv.1, 5
  %109 = add nuw nsw i64 %95, %108
  %110 = getelementptr inbounds float, float* %7, i64 %109
  %111 = bitcast float* %110 to <32 x float>*
  %112 = load <32 x float>, <32 x float>* %111, align 64, !tbaa !996
  %113 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %107, <32 x float> %112, <32 x float> %102)
  %114 = add nsw i64 %103, 1024
  %115 = getelementptr inbounds float, float* %4, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !993
  %117 = insertelement <32 x float> undef, float %116, i32 0
  %118 = shufflevector <32 x float> %117, <32 x float> undef, <32 x i32> zeroinitializer
  %119 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %118, <32 x float> %112, <32 x float> %101)
  %120 = add nsw i64 %103, 2048
  %121 = getelementptr inbounds float, float* %4, i64 %120
  %122 = load float, float* %121, align 4, !tbaa !993
  %123 = insertelement <32 x float> undef, float %122, i32 0
  %124 = shufflevector <32 x float> %123, <32 x float> undef, <32 x i32> zeroinitializer
  %125 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %124, <32 x float> %112, <32 x float> %100)
  %126 = add nsw i64 %103, 3072
  %127 = getelementptr inbounds float, float* %4, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !993
  %129 = insertelement <32 x float> undef, float %128, i32 0
  %130 = shufflevector <32 x float> %129, <32 x float> undef, <32 x i32> zeroinitializer
  %131 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %130, <32 x float> %112, <32 x float> %99)
  %132 = add nsw i64 %103, 4096
  %133 = getelementptr inbounds float, float* %4, i64 %132
  %134 = load float, float* %133, align 4, !tbaa !993
  %135 = insertelement <32 x float> undef, float %134, i32 0
  %136 = shufflevector <32 x float> %135, <32 x float> undef, <32 x i32> zeroinitializer
  %137 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %136, <32 x float> %112, <32 x float> %98)
  %138 = add nsw i64 %103, 5120
  %139 = getelementptr inbounds float, float* %4, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !993
  %141 = insertelement <32 x float> undef, float %140, i32 0
  %142 = shufflevector <32 x float> %141, <32 x float> undef, <32 x i32> zeroinitializer
  %143 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %142, <32 x float> %112, <32 x float> %97)
  %144 = add nsw i64 %103, 6144
  %145 = getelementptr inbounds float, float* %4, i64 %144
  %146 = load float, float* %145, align 4, !tbaa !993
  %147 = insertelement <32 x float> undef, float %146, i32 0
  %148 = shufflevector <32 x float> %147, <32 x float> undef, <32 x i32> zeroinitializer
  %149 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %148, <32 x float> %112, <32 x float> %96)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 512
  br i1 %exitcond.1, label %for_end6.1, label %for_body5.1, !prof !50

for_end6.1:                                       ; preds = %for_body5.1
  %150 = mul nsw i64 %indvars.iv48, 224
  %151 = shl nsw i32 %36, 5
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %13, i64 %152
  %154 = bitcast float* %153 to <32 x float>*
  %155 = load <32 x float>, <32 x float>* %154, align 64, !tbaa !999
  %156 = getelementptr inbounds float, float* %16, i64 %152
  %157 = bitcast float* %156 to <32 x float>*
  %158 = load <32 x float>, <32 x float>* %157, align 64, !tbaa !1002
  %159 = fadd <32 x float> %113, %155
  %160 = fadd <32 x float> %159, %158
  %161 = fcmp ogt <32 x float> %160, zeroinitializer
  %162 = select <32 x i1> %161, <32 x float> %160, <32 x float> zeroinitializer
  %163 = getelementptr inbounds float, float* %10, i64 %150
  %164 = bitcast float* %163 to <32 x float>*
  store <32 x float> %162, <32 x float>* %164, align 64, !tbaa !1005
  %165 = add nsw i64 %150, 32
  %166 = fadd <32 x float> %119, %155
  %167 = fadd <32 x float> %166, %158
  %168 = fcmp ogt <32 x float> %167, zeroinitializer
  %169 = select <32 x i1> %168, <32 x float> %167, <32 x float> zeroinitializer
  %170 = getelementptr inbounds float, float* %10, i64 %165
  %171 = bitcast float* %170 to <32 x float>*
  store <32 x float> %169, <32 x float>* %171, align 64, !tbaa !1005
  %172 = add nsw i64 %150, 64
  %173 = fadd <32 x float> %125, %155
  %174 = fadd <32 x float> %173, %158
  %175 = fcmp ogt <32 x float> %174, zeroinitializer
  %176 = select <32 x i1> %175, <32 x float> %174, <32 x float> zeroinitializer
  %177 = getelementptr inbounds float, float* %10, i64 %172
  %178 = bitcast float* %177 to <32 x float>*
  store <32 x float> %176, <32 x float>* %178, align 64, !tbaa !1005
  %179 = add nsw i64 %150, 96
  %180 = fadd <32 x float> %131, %155
  %181 = fadd <32 x float> %180, %158
  %182 = fcmp ogt <32 x float> %181, zeroinitializer
  %183 = select <32 x i1> %182, <32 x float> %181, <32 x float> zeroinitializer
  %184 = getelementptr inbounds float, float* %10, i64 %179
  %185 = bitcast float* %184 to <32 x float>*
  store <32 x float> %183, <32 x float>* %185, align 64, !tbaa !1005
  %186 = add nsw i64 %150, 128
  %187 = fadd <32 x float> %137, %155
  %188 = fadd <32 x float> %187, %158
  %189 = fcmp ogt <32 x float> %188, zeroinitializer
  %190 = select <32 x i1> %189, <32 x float> %188, <32 x float> zeroinitializer
  %191 = getelementptr inbounds float, float* %10, i64 %186
  %192 = bitcast float* %191 to <32 x float>*
  store <32 x float> %190, <32 x float>* %192, align 64, !tbaa !1005
  %193 = add nsw i64 %150, 160
  %194 = fadd <32 x float> %143, %155
  %195 = fadd <32 x float> %194, %158
  %196 = fcmp ogt <32 x float> %195, zeroinitializer
  %197 = select <32 x i1> %196, <32 x float> %195, <32 x float> zeroinitializer
  %198 = getelementptr inbounds float, float* %10, i64 %193
  %199 = bitcast float* %198 to <32 x float>*
  store <32 x float> %197, <32 x float>* %199, align 64, !tbaa !1005
  %200 = add nsw i64 %150, 192
  %201 = fadd <32 x float> %149, %155
  %202 = fadd <32 x float> %201, %158
  %203 = fcmp ogt <32 x float> %202, zeroinitializer
  %204 = select <32 x i1> %203, <32 x float> %202, <32 x float> zeroinitializer
  %205 = getelementptr inbounds float, float* %10, i64 %200
  %206 = bitcast float* %205 to <32 x float>*
  store <32 x float> %204, <32 x float>* %206, align 64, !tbaa !1005
  %indvars.iv.next49 = add nsw i64 %indvars.iv48, 1
  %207 = icmp slt i64 %indvars.iv.next49, %32
  br i1 %207, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 6
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.140, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1008
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !1022
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !1025
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !1027
  %32 = getelementptr inbounds i8, i8* %0, i64 40
  %33 = bitcast i8* %32 to %1**
  %34 = load %1*, %1** %33, align 8
  %35 = getelementptr inbounds i8, i8* %1, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4, !tbaa !1031
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  %66 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %1, %1* %34, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %1, %1* %34, i64 0, i32 4
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %1, %1* %34, i64 0, i32 5
  %77 = load i64*, i64** %76, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([174 x i8], [174 x i8]* @.str.141, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %79 = getelementptr inbounds i8, i8* %1, i64 4
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 4, !tbaa !1033
  switch i32 %81, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([174 x i8], [174 x i8]* @.str.142, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([174 x i8], [174 x i8]* @.str.143, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([174 x i8], [174 x i8]* @.str.144, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %85 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %85(i8* getelementptr inbounds ([174 x i8], [174 x i8]* @.str.145, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %37, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ]

assert_fail11:                                    ; preds = %assert_end10
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %86(i8* getelementptr inbounds ([174 x i8], [174 x i8]* @.str.146, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  %87 = icmp eq i32 %45, 1
  br i1 %87, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %89 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 5
  br i1 %91, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %93 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 2
  %96 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %97 = load i8, i8* %96, align 1
  %98 = icmp eq i8 %97, 32
  %99 = and i1 %95, %98
  %100 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %101, 1
  %103 = and i1 %99, %102
  br i1 %103, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %105 = load i64, i64* %41, align 8, !tbaa !1035
  %106 = trunc i64 %105 to i32
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %109 = getelementptr inbounds i64, i64* %41, i64 1
  %110 = load i64, i64* %109, align 8, !tbaa !1049
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %111, 16
  br i1 %112, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %114 = getelementptr inbounds i64, i64* %41, i64 2
  %115 = load i64, i64* %114, align 8, !tbaa !1051
  %116 = trunc i64 %115 to i32
  %117 = icmp eq i32 %116, 56
  br i1 %117, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %119 = getelementptr inbounds i64, i64* %41, i64 3
  %120 = load i64, i64* %119, align 8, !tbaa !1054
  %121 = trunc i64 %120 to i32
  %122 = icmp eq i32 %121, 56
  br i1 %122, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %123 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %123(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %124 = getelementptr inbounds i64, i64* %41, i64 4
  %125 = load i64, i64* %124, align 8, !tbaa !1056
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 4
  br i1 %127, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %128 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %128(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.98, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %129 = icmp eq i64* %43, null
  br i1 %129, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end28
  %130 = getelementptr inbounds i64, i64* %43, i64 1
  %131 = bitcast i64* %130 to <4 x i64>*
  %132 = load <4 x i64>, <4 x i64>* %131, align 8, !tbaa !1060
  %133 = trunc <4 x i64> %132 to <4 x i32>
  %134 = icmp eq <4 x i32> %133, <i32 12544, i32 224, i32 4, i32 1>
  %135 = load i64, i64* %43, align 8, !tbaa !1071
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %136, 200704
  %rdx.shuf173 = shufflevector <4 x i1> %134, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx174 = and <4 x i1> %134, %rdx.shuf173
  %rdx.shuf175 = shufflevector <4 x i1> %bin.rdx174, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx176 = and <4 x i1> %bin.rdx174, %rdx.shuf175
  %138 = extractelement <4 x i1> %bin.rdx176, i32 0
  %139 = and i1 %138, %137
  br i1 %139, label %if_end, label %assert_fail29, !prof !5

if_end:                                           ; preds = %assert_end28, %if_then
  %140 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %141 = load i64, i64* %140, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %143(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.150, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 6
  br i1 %147, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 2
  %152 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 32
  %155 = and i1 %151, %154
  %156 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %157 = load i16, i16* %156, align 2
  %158 = icmp eq i16 %157, 1
  %159 = and i1 %155, %158
  br i1 %159, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %161 = load i64, i64* %51, align 8, !tbaa !1075
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i32 %162, 8
  br i1 %163, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.151, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %165 = getelementptr inbounds i64, i64* %51, i64 1
  %166 = load i64, i64* %165, align 8, !tbaa !1089
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 16
  br i1 %168, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.152, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %170 = getelementptr inbounds i64, i64* %51, i64 2
  %171 = load i64, i64* %170, align 8, !tbaa !1091
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %175 = getelementptr inbounds i64, i64* %51, i64 3
  %176 = load i64, i64* %175, align 8, !tbaa !1094
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %179(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %180 = getelementptr inbounds i64, i64* %51, i64 4
  %181 = load i64, i64* %180, align 8, !tbaa !1096
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %185 = getelementptr inbounds i64, i64* %51, i64 5
  %186 = load i64, i64* %185, align 8, !tbaa !1100
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 32
  br i1 %188, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %190 = icmp eq i64* %53, null
  br i1 %190, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %191 = getelementptr inbounds i64, i64* %53, i64 2
  %192 = bitcast i64* %191 to <4 x i64>*
  %193 = load <4 x i64>, <4 x i64>* %192, align 8, !tbaa !1102
  %194 = trunc <4 x i64> %193 to <4 x i32>
  %195 = icmp eq <4 x i32> %194, <i32 128, i32 128, i32 32, i32 1>
  %196 = getelementptr inbounds i64, i64* %53, i64 1
  %197 = load i64, i64* %196, align 8, !tbaa !1113
  %198 = trunc i64 %197 to i32
  %199 = icmp eq i32 %198, 128
  %200 = load i64, i64* %53, align 8, !tbaa !1117
  %201 = trunc i64 %200 to i32
  %202 = icmp eq i32 %201, 2048
  %rdx.shuf169 = shufflevector <4 x i1> %195, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx170 = and <4 x i1> %195, %rdx.shuf169
  %rdx.shuf171 = shufflevector <4 x i1> %bin.rdx170, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx172 = and <4 x i1> %bin.rdx170, %rdx.shuf171
  %203 = extractelement <4 x i1> %bin.rdx172, i32 0
  %204 = and i1 %203, %199
  %205 = and i1 %204, %202
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.153, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %47, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 2
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = and i1 %225, %228
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %231 = load i16, i16* %230, align 2
  %232 = icmp eq i16 %231, 1
  %233 = and i1 %229, %232
  br i1 %233, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %235 = load i64, i64* %57, align 8, !tbaa !1119
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %239 = getelementptr inbounds i64, i64* %57, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !1133
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 8
  br i1 %242, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.154, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %244 = getelementptr inbounds i64, i64* %57, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !1135
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %249 = getelementptr inbounds i64, i64* %57, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !1138
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %254 = getelementptr inbounds i64, i64* %57, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !1140
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 32
  br i1 %257, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %259 = icmp eq i64* %59, null
  br i1 %259, label %if_end74, label %if_then73, !prof !50

if_then73:                                        ; preds = %assert_end72
  %260 = getelementptr inbounds i64, i64* %59, i64 1
  %261 = bitcast i64* %260 to <4 x i64>*
  %262 = load <4 x i64>, <4 x i64>* %261, align 8, !tbaa !1144
  %263 = trunc <4 x i64> %262 to <4 x i32>
  %264 = icmp eq <4 x i32> %263, <i32 32, i32 32, i32 32, i32 1>
  %265 = load i64, i64* %59, align 8, !tbaa !1155
  %266 = trunc i64 %265 to i32
  %267 = icmp eq i32 %266, 256
  %rdx.shuf165 = shufflevector <4 x i1> %264, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx166 = and <4 x i1> %264, %rdx.shuf165
  %rdx.shuf167 = shufflevector <4 x i1> %bin.rdx166, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx168 = and <4 x i1> %bin.rdx166, %rdx.shuf167
  %268 = extractelement <4 x i1> %bin.rdx168, i32 0
  %269 = and i1 %268, %267
  br i1 %269, label %if_end74, label %assert_fail75, !prof !5

if_end74:                                         ; preds = %assert_end72, %if_then73
  %270 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %271 = load i64, i64* %270, align 8
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %assert_end78, label %assert_fail77, !prof !5

assert_fail75:                                    ; preds = %if_then73
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.155, i64 0, i64 0))
  ret i32 -1

assert_fail77:                                    ; preds = %if_end74
  %274 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %274(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %if_end74
  %275 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %276 = load i32, i32* %275, align 4
  %277 = icmp eq i32 %276, 1
  br i1 %277, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %278 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %278(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %279 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %280 = load i32, i32* %279, align 4
  %281 = icmp eq i32 %47, %280
  br i1 %281, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %282(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %283 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %284 = load i32, i32* %283, align 4
  %285 = icmp eq i32 %284, 5
  br i1 %285, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %287 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %288 = load i8, i8* %287, align 1
  %289 = icmp eq i8 %288, 2
  %290 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %291, 32
  %293 = and i1 %289, %292
  %294 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %295 = load i16, i16* %294, align 2
  %296 = icmp eq i16 %295, 1
  %297 = and i1 %293, %296
  br i1 %297, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %298 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %298(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %299 = load i64, i64* %63, align 8, !tbaa !1159
  %300 = trunc i64 %299 to i32
  %301 = icmp eq i32 %300, 1
  br i1 %301, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %302(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %303 = getelementptr inbounds i64, i64* %63, i64 1
  %304 = load i64, i64* %303, align 8, !tbaa !1173
  %305 = trunc i64 %304 to i32
  %306 = icmp eq i32 %305, 8
  br i1 %306, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %307 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %307(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.156, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %308 = getelementptr inbounds i64, i64* %63, i64 2
  %309 = load i64, i64* %308, align 8, !tbaa !1175
  %310 = trunc i64 %309 to i32
  %311 = icmp eq i32 %310, 1
  br i1 %311, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %313 = getelementptr inbounds i64, i64* %63, i64 3
  %314 = load i64, i64* %313, align 8, !tbaa !1178
  %315 = trunc i64 %314 to i32
  %316 = icmp eq i32 %315, 1
  br i1 %316, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %317 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %317(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %318 = getelementptr inbounds i64, i64* %63, i64 4
  %319 = load i64, i64* %318, align 8, !tbaa !1180
  %320 = trunc i64 %319 to i32
  %321 = icmp eq i32 %320, 32
  br i1 %321, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %322 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %322(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %323 = icmp eq i64* %65, null
  br i1 %323, label %if_end98, label %if_then97, !prof !50

if_then97:                                        ; preds = %assert_end96
  %324 = getelementptr inbounds i64, i64* %65, i64 1
  %325 = bitcast i64* %324 to <4 x i64>*
  %326 = load <4 x i64>, <4 x i64>* %325, align 8, !tbaa !1184
  %327 = trunc <4 x i64> %326 to <4 x i32>
  %328 = icmp eq <4 x i32> %327, <i32 32, i32 32, i32 32, i32 1>
  %329 = load i64, i64* %65, align 8, !tbaa !1195
  %330 = trunc i64 %329 to i32
  %331 = icmp eq i32 %330, 256
  %rdx.shuf161 = shufflevector <4 x i1> %328, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx162 = and <4 x i1> %328, %rdx.shuf161
  %rdx.shuf163 = shufflevector <4 x i1> %bin.rdx162, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx164 = and <4 x i1> %bin.rdx162, %rdx.shuf163
  %332 = extractelement <4 x i1> %bin.rdx164, i32 0
  %333 = and i1 %332, %331
  br i1 %333, label %if_end98, label %assert_fail99, !prof !5

if_end98:                                         ; preds = %assert_end96, %if_then97
  %334 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %335 = load i64, i64* %334, align 8
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %assert_end102, label %assert_fail101, !prof !5

assert_fail99:                                    ; preds = %if_then97
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.157, i64 0, i64 0))
  ret i32 -1

assert_fail101:                                   ; preds = %if_end98
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %338(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %if_end98
  %339 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %340 = load i32, i32* %339, align 4
  %341 = icmp eq i32 %340, 1
  br i1 %341, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %342 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %342(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %343 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %344 = load i32, i32* %343, align 4
  %345 = icmp eq i32 %47, %344
  br i1 %345, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %346 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %346(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %347 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %348 = load i32, i32* %347, align 4
  %349 = icmp eq i32 %348, 5
  br i1 %349, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %350(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %351 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %352 = load i8, i8* %351, align 1
  %353 = icmp eq i8 %352, 2
  %354 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %355 = load i8, i8* %354, align 1
  %356 = icmp eq i8 %355, 32
  %357 = and i1 %353, %356
  %358 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %359 = load i16, i16* %358, align 2
  %360 = icmp eq i16 %359, 1
  %361 = and i1 %357, %360
  br i1 %361, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %362 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %362(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %363 = load i64, i64* %69, align 8, !tbaa !1199
  %364 = trunc i64 %363 to i32
  %365 = icmp eq i32 %364, 1
  br i1 %365, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %366 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %366(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %367 = getelementptr inbounds i64, i64* %69, i64 1
  %368 = load i64, i64* %367, align 8, !tbaa !1213
  %369 = trunc i64 %368 to i32
  %370 = icmp eq i32 %369, 8
  br i1 %370, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %371 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %371(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.158, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %372 = getelementptr inbounds i64, i64* %69, i64 2
  %373 = load i64, i64* %372, align 8, !tbaa !1215
  %374 = trunc i64 %373 to i32
  %375 = icmp eq i32 %374, 1
  br i1 %375, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %376(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %377 = getelementptr inbounds i64, i64* %69, i64 3
  %378 = load i64, i64* %377, align 8, !tbaa !1218
  %379 = trunc i64 %378 to i32
  %380 = icmp eq i32 %379, 1
  br i1 %380, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %381 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %381(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %382 = getelementptr inbounds i64, i64* %69, i64 4
  %383 = load i64, i64* %382, align 8, !tbaa !1220
  %384 = trunc i64 %383 to i32
  %385 = icmp eq i32 %384, 32
  br i1 %385, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %386 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %386(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %387 = icmp eq i64* %71, null
  br i1 %387, label %if_end122, label %if_then121, !prof !50

if_then121:                                       ; preds = %assert_end120
  %388 = getelementptr inbounds i64, i64* %71, i64 1
  %389 = bitcast i64* %388 to <4 x i64>*
  %390 = load <4 x i64>, <4 x i64>* %389, align 8, !tbaa !1224
  %391 = trunc <4 x i64> %390 to <4 x i32>
  %392 = icmp eq <4 x i32> %391, <i32 32, i32 32, i32 32, i32 1>
  %393 = load i64, i64* %71, align 8, !tbaa !1235
  %394 = trunc i64 %393 to i32
  %395 = icmp eq i32 %394, 256
  %rdx.shuf157 = shufflevector <4 x i1> %392, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx158 = and <4 x i1> %392, %rdx.shuf157
  %rdx.shuf159 = shufflevector <4 x i1> %bin.rdx158, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx160 = and <4 x i1> %bin.rdx158, %rdx.shuf159
  %396 = extractelement <4 x i1> %bin.rdx160, i32 0
  %397 = and i1 %396, %395
  br i1 %397, label %if_end122, label %assert_fail123, !prof !5

if_end122:                                        ; preds = %assert_end120, %if_then121
  %398 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %399 = load i64, i64* %398, align 8
  %400 = icmp eq i64 %399, 0
  br i1 %400, label %assert_end126, label %assert_fail125, !prof !5

assert_fail123:                                   ; preds = %if_then121
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %401(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.159, i64 0, i64 0))
  ret i32 -1

assert_fail125:                                   ; preds = %if_end122
  %402 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %402(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %if_end122
  %403 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %404 = load i32, i32* %403, align 4
  %405 = icmp eq i32 %404, 1
  br i1 %405, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %406 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %406(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %407 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %408 = load i32, i32* %407, align 4
  %409 = icmp eq i32 %47, %408
  br i1 %409, label %assert_end130, label %assert_fail129, !prof !5

assert_fail129:                                   ; preds = %assert_end128
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %410(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end130:                                    ; preds = %assert_end128
  %411 = getelementptr inbounds %1, %1* %34, i64 0, i32 2
  %412 = load i32, i32* %411, align 4
  %413 = icmp eq i32 %412, 5
  br i1 %413, label %assert_end132, label %assert_fail131, !prof !5

assert_fail131:                                   ; preds = %assert_end130
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %414(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end132:                                    ; preds = %assert_end130
  %415 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 0
  %416 = load i8, i8* %415, align 1
  %417 = icmp eq i8 %416, 2
  %418 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 1
  %419 = load i8, i8* %418, align 1
  %420 = icmp eq i8 %419, 32
  %421 = and i1 %417, %420
  %422 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 2
  %423 = load i16, i16* %422, align 2
  %424 = icmp eq i16 %423, 1
  %425 = and i1 %421, %424
  br i1 %425, label %assert_end134, label %assert_fail133, !prof !5

assert_fail133:                                   ; preds = %assert_end132
  %426 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %426(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %assert_end132
  %427 = load i64, i64* %75, align 8, !tbaa !1239
  %428 = trunc i64 %427 to i32
  %429 = icmp eq i32 %428, 1
  br i1 %429, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %430 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %430(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.116, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %431 = getelementptr inbounds i64, i64* %75, i64 1
  %432 = load i64, i64* %431, align 8, !tbaa !1253
  %433 = trunc i64 %432 to i32
  %434 = icmp eq i32 %433, 8
  br i1 %434, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %435 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %435(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.160, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %436 = getelementptr inbounds i64, i64* %75, i64 2
  %437 = load i64, i64* %436, align 8, !tbaa !1255
  %438 = trunc i64 %437 to i32
  %439 = icmp eq i32 %438, 56
  br i1 %439, label %assert_end140, label %assert_fail139, !prof !5

assert_fail139:                                   ; preds = %assert_end138
  %440 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %440(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.161, i64 0, i64 0))
  ret i32 -1

assert_end140:                                    ; preds = %assert_end138
  %441 = getelementptr inbounds i64, i64* %75, i64 3
  %442 = load i64, i64* %441, align 8, !tbaa !1258
  %443 = trunc i64 %442 to i32
  %444 = icmp eq i32 %443, 56
  br i1 %444, label %assert_end142, label %assert_fail141, !prof !5

assert_fail141:                                   ; preds = %assert_end140
  %445 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %445(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.162, i64 0, i64 0))
  ret i32 -1

assert_end142:                                    ; preds = %assert_end140
  %446 = getelementptr inbounds i64, i64* %75, i64 4
  %447 = load i64, i64* %446, align 8, !tbaa !1260
  %448 = trunc i64 %447 to i32
  %449 = icmp eq i32 %448, 32
  br i1 %449, label %assert_end144, label %assert_fail143, !prof !5

assert_fail143:                                   ; preds = %assert_end142
  %450 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %450(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.120, i64 0, i64 0))
  ret i32 -1

assert_end144:                                    ; preds = %assert_end142
  %451 = icmp eq i64* %77, null
  br i1 %451, label %if_end146, label %if_then145, !prof !50

if_then145:                                       ; preds = %assert_end144
  %452 = getelementptr inbounds i64, i64* %77, i64 1
  %453 = bitcast i64* %452 to <4 x i64>*
  %454 = load <4 x i64>, <4 x i64>* %453, align 8, !tbaa !1264
  %455 = trunc <4 x i64> %454 to <4 x i32>
  %456 = icmp eq <4 x i32> %455, <i32 100352, i32 1792, i32 32, i32 1>
  %457 = load i64, i64* %77, align 8, !tbaa !1275
  %458 = trunc i64 %457 to i32
  %459 = icmp eq i32 %458, 802816
  %rdx.shuf = shufflevector <4 x i1> %456, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %456, %rdx.shuf
  %rdx.shuf155 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx156 = and <4 x i1> %bin.rdx, %rdx.shuf155
  %460 = extractelement <4 x i1> %bin.rdx156, i32 0
  %461 = and i1 %460, %459
  br i1 %461, label %if_end146, label %assert_fail147, !prof !5

if_end146:                                        ; preds = %assert_end144, %if_then145
  %462 = getelementptr inbounds %1, %1* %34, i64 0, i32 6
  %463 = load i64, i64* %462, align 8
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %assert_end150, label %assert_fail149, !prof !5

assert_fail147:                                   ; preds = %if_then145
  %465 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %465(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.163, i64 0, i64 0))
  ret i32 -1

assert_fail149:                                   ; preds = %if_end146
  %466 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %466(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end150:                                    ; preds = %if_end146
  %467 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 0
  %468 = load i32, i32* %467, align 4
  %469 = icmp eq i32 %468, 1
  br i1 %469, label %assert_end152, label %assert_fail151, !prof !5

assert_fail151:                                   ; preds = %assert_end150
  %470 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %470(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end152:                                    ; preds = %assert_end150
  %471 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 1
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %47, %472
  br i1 %473, label %assert_end154, label %assert_fail153, !prof !5

assert_fail153:                                   ; preds = %assert_end152
  %474 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %474(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end154:                                    ; preds = %assert_end152
  %475 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_compute_(i8* %39, i8* %49, i8* %73, i8* %55, i8* %61, i8* %67, i32 %47)
  ret i32 %475
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %7 = alloca %10, align 8
  %8 = getelementptr inbounds %10, %10* %7, i64 0, i32 0
  store i8* %0, i8** %8, align 8
  %9 = getelementptr inbounds %10, %10* %7, i64 0, i32 1
  store i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %10, %10* %7, i64 0, i32 2
  store i8* %2, i8** %10, align 8
  %11 = getelementptr inbounds %10, %10* %7, i64 0, i32 3
  store i8* %3, i8** %11, align 8
  %12 = getelementptr inbounds %10, %10* %7, i64 0, i32 4
  store i8* %4, i8** %12, align 8
  %13 = getelementptr inbounds %10, %10* %7, i64 0, i32 5
  store i8* %5, i8** %13, align 8
  %14 = getelementptr inbounds %10, %10* %7, i64 0, i32 6
  store i32 %6, i32* %14, align 8
  %15 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %16 = bitcast %10* %7 to i8*
  %17 = call i32 %15(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.164, i8* nonnull %16, i32 0)
  ret i32 %17
}

define private i32 @__tvm_parallel_lambda.164(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %2, i64 48
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, 447
  %26 = sdiv i32 %25, %24
  %27 = mul nsw i32 %26, %0
  %28 = icmp slt i32 %27, 448
  %29 = select i1 %28, i32 %27, i32 448
  %30 = add nsw i32 %0, 1
  %31 = mul nsw i32 %26, %30
  %32 = icmp slt i32 %31, 448
  %33 = select i1 %32, i32 %31, i32 448
  %34 = icmp slt i32 %29, %33
  br i1 %34, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %35 = add i32 %29, 1
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %36, -1
  %38 = sext i32 %33 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_begin10.preheader
  %indvars.iv61 = phi i64 [ %37, %for_body.preheader ], [ %indvars.iv.next62, %for_begin10.preheader ]
  %39 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %40 = tail call i8* %39(i32 1, i32 %22, i64 7168, i32 2, i32 32)
  %41 = bitcast i8* %40 to float*
  %42 = trunc i64 %indvars.iv61 to i32
  %43 = srem i32 %42, 56
  %44 = mul nsw i32 %43, 224
  %45 = sdiv i32 %42, 56
  %46 = shl i32 %45, 11
  %47 = sext i32 %46 to i64
  %48 = sext i32 %44 to i64
  br label %for_body2

for_end:                                          ; preds = %for_begin10.preheader, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %49 = mul nsw i64 %indvars.iv61, 1792
  %50 = shl nsw i32 %45, 5
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %13, i64 %51
  %53 = bitcast float* %52 to <32 x float>*
  %54 = load <32 x float>, <32 x float>* %53, align 64, !tbaa !1279
  %55 = getelementptr inbounds float, float* %16, i64 %51
  %56 = bitcast float* %55 to <32 x float>*
  %57 = load <32 x float>, <32 x float>* %56, align 64, !tbaa !1282
  %58 = getelementptr inbounds float, float* %19, i64 %51
  %59 = bitcast float* %58 to <32 x float>*
  %60 = load <32 x float>, <32 x float>* %59, align 64, !tbaa !1285
  %61 = bitcast i8* %40 to <32 x float>*
  %62 = load <32 x float>, <32 x float>* %61, align 64, !tbaa !1288
  %63 = fadd <32 x float> %62, %54
  %64 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %63, <32 x float> %57, <32 x float> %60)
  %65 = getelementptr inbounds float, float* %10, i64 %49
  %66 = bitcast float* %65 to <32 x float>*
  store <32 x float> %64, <32 x float>* %66, align 64, !tbaa !1291
  %67 = getelementptr inbounds i8, i8* %40, i64 128
  %68 = bitcast i8* %67 to <32 x float>*
  %69 = load <32 x float>, <32 x float>* %68, align 64, !tbaa !1288
  %70 = fadd <32 x float> %69, %54
  %71 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %70, <32 x float> %57, <32 x float> %60)
  %72 = mul i64 %indvars.iv61, 7696581394432
  %sext = ashr exact i64 %72, 32
  %73 = or i64 %sext, 32
  %74 = getelementptr inbounds float, float* %10, i64 %73
  %75 = bitcast float* %74 to <32 x float>*
  store <32 x float> %71, <32 x float>* %75, align 64, !tbaa !1291
  %76 = getelementptr inbounds i8, i8* %40, i64 256
  %77 = bitcast i8* %76 to <32 x float>*
  %78 = load <32 x float>, <32 x float>* %77, align 64, !tbaa !1288
  %79 = fadd <32 x float> %78, %54
  %80 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %79, <32 x float> %57, <32 x float> %60)
  %81 = mul i64 %indvars.iv61, 7696581394432
  %sext63 = ashr exact i64 %81, 32
  %82 = or i64 %sext63, 64
  %83 = getelementptr inbounds float, float* %10, i64 %82
  %84 = bitcast float* %83 to <32 x float>*
  store <32 x float> %80, <32 x float>* %84, align 64, !tbaa !1291
  %85 = getelementptr inbounds i8, i8* %40, i64 384
  %86 = bitcast i8* %85 to <32 x float>*
  %87 = load <32 x float>, <32 x float>* %86, align 64, !tbaa !1288
  %88 = fadd <32 x float> %87, %54
  %89 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %88, <32 x float> %57, <32 x float> %60)
  %90 = mul i64 %indvars.iv61, 7696581394432
  %sext64 = ashr exact i64 %90, 32
  %91 = or i64 %sext64, 96
  %92 = getelementptr inbounds float, float* %10, i64 %91
  %93 = bitcast float* %92 to <32 x float>*
  store <32 x float> %89, <32 x float>* %93, align 64, !tbaa !1291
  %94 = getelementptr inbounds i8, i8* %40, i64 512
  %95 = bitcast i8* %94 to <32 x float>*
  %96 = load <32 x float>, <32 x float>* %95, align 64, !tbaa !1288
  %97 = fadd <32 x float> %96, %54
  %98 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %97, <32 x float> %57, <32 x float> %60)
  %99 = mul i64 %indvars.iv61, 7696581394432
  %sext65 = ashr exact i64 %99, 32
  %100 = or i64 %sext65, 128
  %101 = getelementptr inbounds float, float* %10, i64 %100
  %102 = bitcast float* %101 to <32 x float>*
  store <32 x float> %98, <32 x float>* %102, align 64, !tbaa !1291
  %103 = getelementptr inbounds i8, i8* %40, i64 640
  %104 = bitcast i8* %103 to <32 x float>*
  %105 = load <32 x float>, <32 x float>* %104, align 64, !tbaa !1288
  %106 = fadd <32 x float> %105, %54
  %107 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %106, <32 x float> %57, <32 x float> %60)
  %108 = mul i64 %indvars.iv61, 7696581394432
  %sext66 = ashr exact i64 %108, 32
  %109 = or i64 %sext66, 160
  %110 = getelementptr inbounds float, float* %10, i64 %109
  %111 = bitcast float* %110 to <32 x float>*
  store <32 x float> %107, <32 x float>* %111, align 64, !tbaa !1291
  %112 = getelementptr inbounds i8, i8* %40, i64 768
  %113 = bitcast i8* %112 to <32 x float>*
  %114 = load <32 x float>, <32 x float>* %113, align 64, !tbaa !1288
  %115 = fadd <32 x float> %114, %54
  %116 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %115, <32 x float> %57, <32 x float> %60)
  %117 = mul i64 %indvars.iv61, 7696581394432
  %sext67 = ashr exact i64 %117, 32
  %118 = or i64 %sext67, 192
  %119 = getelementptr inbounds float, float* %10, i64 %118
  %120 = bitcast float* %119 to <32 x float>*
  store <32 x float> %116, <32 x float>* %120, align 64, !tbaa !1291
  %121 = getelementptr inbounds i8, i8* %40, i64 896
  %122 = bitcast i8* %121 to <32 x float>*
  %123 = load <32 x float>, <32 x float>* %122, align 64, !tbaa !1288
  %124 = fadd <32 x float> %123, %54
  %125 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %124, <32 x float> %57, <32 x float> %60)
  %126 = mul i64 %indvars.iv61, 7696581394432
  %sext68 = ashr exact i64 %126, 32
  %127 = or i64 %sext68, 224
  %128 = getelementptr inbounds float, float* %10, i64 %127
  %129 = bitcast float* %128 to <32 x float>*
  store <32 x float> %125, <32 x float>* %129, align 64, !tbaa !1291
  %130 = getelementptr inbounds i8, i8* %40, i64 1024
  %131 = bitcast i8* %130 to <32 x float>*
  %132 = load <32 x float>, <32 x float>* %131, align 64, !tbaa !1288
  %133 = fadd <32 x float> %132, %54
  %134 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %133, <32 x float> %57, <32 x float> %60)
  %135 = mul i64 %indvars.iv61, 7696581394432
  %sext69 = add i64 %135, 1099511627776
  %136 = ashr exact i64 %sext69, 32
  %137 = getelementptr inbounds float, float* %10, i64 %136
  %138 = bitcast float* %137 to <32 x float>*
  store <32 x float> %134, <32 x float>* %138, align 64, !tbaa !1291
  %139 = getelementptr inbounds i8, i8* %40, i64 1152
  %140 = bitcast i8* %139 to <32 x float>*
  %141 = load <32 x float>, <32 x float>* %140, align 64, !tbaa !1288
  %142 = fadd <32 x float> %141, %54
  %143 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %142, <32 x float> %57, <32 x float> %60)
  %144 = mul i64 %indvars.iv61, 7696581394432
  %sext70 = add i64 %144, 1236950581248
  %145 = ashr exact i64 %sext70, 32
  %146 = getelementptr inbounds float, float* %10, i64 %145
  %147 = bitcast float* %146 to <32 x float>*
  store <32 x float> %143, <32 x float>* %147, align 64, !tbaa !1291
  %148 = getelementptr inbounds i8, i8* %40, i64 1280
  %149 = bitcast i8* %148 to <32 x float>*
  %150 = load <32 x float>, <32 x float>* %149, align 64, !tbaa !1288
  %151 = fadd <32 x float> %150, %54
  %152 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %151, <32 x float> %57, <32 x float> %60)
  %153 = mul i64 %indvars.iv61, 7696581394432
  %sext71 = add i64 %153, 1374389534720
  %154 = ashr exact i64 %sext71, 32
  %155 = getelementptr inbounds float, float* %10, i64 %154
  %156 = bitcast float* %155 to <32 x float>*
  store <32 x float> %152, <32 x float>* %156, align 64, !tbaa !1291
  %157 = getelementptr inbounds i8, i8* %40, i64 1408
  %158 = bitcast i8* %157 to <32 x float>*
  %159 = load <32 x float>, <32 x float>* %158, align 64, !tbaa !1288
  %160 = fadd <32 x float> %159, %54
  %161 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %160, <32 x float> %57, <32 x float> %60)
  %162 = mul i64 %indvars.iv61, 7696581394432
  %sext72 = add i64 %162, 1511828488192
  %163 = ashr exact i64 %sext72, 32
  %164 = getelementptr inbounds float, float* %10, i64 %163
  %165 = bitcast float* %164 to <32 x float>*
  store <32 x float> %161, <32 x float>* %165, align 64, !tbaa !1291
  %166 = getelementptr inbounds i8, i8* %40, i64 1536
  %167 = bitcast i8* %166 to <32 x float>*
  %168 = load <32 x float>, <32 x float>* %167, align 64, !tbaa !1288
  %169 = fadd <32 x float> %168, %54
  %170 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %169, <32 x float> %57, <32 x float> %60)
  %171 = mul i64 %indvars.iv61, 7696581394432
  %sext73 = add i64 %171, 1649267441664
  %172 = ashr exact i64 %sext73, 32
  %173 = getelementptr inbounds float, float* %10, i64 %172
  %174 = bitcast float* %173 to <32 x float>*
  store <32 x float> %170, <32 x float>* %174, align 64, !tbaa !1291
  %175 = getelementptr inbounds i8, i8* %40, i64 1664
  %176 = bitcast i8* %175 to <32 x float>*
  %177 = load <32 x float>, <32 x float>* %176, align 64, !tbaa !1288
  %178 = fadd <32 x float> %177, %54
  %179 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %178, <32 x float> %57, <32 x float> %60)
  %180 = mul i64 %indvars.iv61, 7696581394432
  %sext74 = add i64 %180, 1786706395136
  %181 = ashr exact i64 %sext74, 32
  %182 = getelementptr inbounds float, float* %10, i64 %181
  %183 = bitcast float* %182 to <32 x float>*
  store <32 x float> %179, <32 x float>* %183, align 64, !tbaa !1291
  %184 = getelementptr inbounds i8, i8* %40, i64 1792
  %185 = bitcast i8* %184 to <32 x float>*
  %186 = load <32 x float>, <32 x float>* %185, align 64, !tbaa !1288
  %187 = fadd <32 x float> %186, %54
  %188 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %187, <32 x float> %57, <32 x float> %60)
  %189 = mul i64 %indvars.iv61, 7696581394432
  %sext75 = add i64 %189, 1924145348608
  %190 = ashr exact i64 %sext75, 32
  %191 = getelementptr inbounds float, float* %10, i64 %190
  %192 = bitcast float* %191 to <32 x float>*
  store <32 x float> %188, <32 x float>* %192, align 64, !tbaa !1291
  %193 = getelementptr inbounds i8, i8* %40, i64 1920
  %194 = bitcast i8* %193 to <32 x float>*
  %195 = load <32 x float>, <32 x float>* %194, align 64, !tbaa !1288
  %196 = fadd <32 x float> %195, %54
  %197 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %196, <32 x float> %57, <32 x float> %60)
  %198 = mul i64 %indvars.iv61, 7696581394432
  %sext76 = add i64 %198, 2061584302080
  %199 = ashr exact i64 %sext76, 32
  %200 = getelementptr inbounds float, float* %10, i64 %199
  %201 = bitcast float* %200 to <32 x float>*
  store <32 x float> %197, <32 x float>* %201, align 64, !tbaa !1291
  %202 = getelementptr inbounds i8, i8* %40, i64 2048
  %203 = bitcast i8* %202 to <32 x float>*
  %204 = load <32 x float>, <32 x float>* %203, align 64, !tbaa !1288
  %205 = fadd <32 x float> %204, %54
  %206 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %205, <32 x float> %57, <32 x float> %60)
  %207 = mul i64 %indvars.iv61, 7696581394432
  %sext77 = add i64 %207, 2199023255552
  %208 = ashr exact i64 %sext77, 32
  %209 = getelementptr inbounds float, float* %10, i64 %208
  %210 = bitcast float* %209 to <32 x float>*
  store <32 x float> %206, <32 x float>* %210, align 64, !tbaa !1291
  %211 = getelementptr inbounds i8, i8* %40, i64 2176
  %212 = bitcast i8* %211 to <32 x float>*
  %213 = load <32 x float>, <32 x float>* %212, align 64, !tbaa !1288
  %214 = fadd <32 x float> %213, %54
  %215 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %214, <32 x float> %57, <32 x float> %60)
  %216 = mul i64 %indvars.iv61, 7696581394432
  %sext78 = add i64 %216, 2336462209024
  %217 = ashr exact i64 %sext78, 32
  %218 = getelementptr inbounds float, float* %10, i64 %217
  %219 = bitcast float* %218 to <32 x float>*
  store <32 x float> %215, <32 x float>* %219, align 64, !tbaa !1291
  %220 = getelementptr inbounds i8, i8* %40, i64 2304
  %221 = bitcast i8* %220 to <32 x float>*
  %222 = load <32 x float>, <32 x float>* %221, align 64, !tbaa !1288
  %223 = fadd <32 x float> %222, %54
  %224 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %223, <32 x float> %57, <32 x float> %60)
  %225 = mul i64 %indvars.iv61, 7696581394432
  %sext79 = add i64 %225, 2473901162496
  %226 = ashr exact i64 %sext79, 32
  %227 = getelementptr inbounds float, float* %10, i64 %226
  %228 = bitcast float* %227 to <32 x float>*
  store <32 x float> %224, <32 x float>* %228, align 64, !tbaa !1291
  %229 = getelementptr inbounds i8, i8* %40, i64 2432
  %230 = bitcast i8* %229 to <32 x float>*
  %231 = load <32 x float>, <32 x float>* %230, align 64, !tbaa !1288
  %232 = fadd <32 x float> %231, %54
  %233 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %232, <32 x float> %57, <32 x float> %60)
  %234 = mul i64 %indvars.iv61, 7696581394432
  %sext80 = add i64 %234, 2611340115968
  %235 = ashr exact i64 %sext80, 32
  %236 = getelementptr inbounds float, float* %10, i64 %235
  %237 = bitcast float* %236 to <32 x float>*
  store <32 x float> %233, <32 x float>* %237, align 64, !tbaa !1291
  %238 = getelementptr inbounds i8, i8* %40, i64 2560
  %239 = bitcast i8* %238 to <32 x float>*
  %240 = load <32 x float>, <32 x float>* %239, align 64, !tbaa !1288
  %241 = fadd <32 x float> %240, %54
  %242 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %241, <32 x float> %57, <32 x float> %60)
  %243 = mul i64 %indvars.iv61, 7696581394432
  %sext81 = add i64 %243, 2748779069440
  %244 = ashr exact i64 %sext81, 32
  %245 = getelementptr inbounds float, float* %10, i64 %244
  %246 = bitcast float* %245 to <32 x float>*
  store <32 x float> %242, <32 x float>* %246, align 64, !tbaa !1291
  %247 = getelementptr inbounds i8, i8* %40, i64 2688
  %248 = bitcast i8* %247 to <32 x float>*
  %249 = load <32 x float>, <32 x float>* %248, align 64, !tbaa !1288
  %250 = fadd <32 x float> %249, %54
  %251 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %250, <32 x float> %57, <32 x float> %60)
  %252 = mul i64 %indvars.iv61, 7696581394432
  %sext82 = add i64 %252, 2886218022912
  %253 = ashr exact i64 %sext82, 32
  %254 = getelementptr inbounds float, float* %10, i64 %253
  %255 = bitcast float* %254 to <32 x float>*
  store <32 x float> %251, <32 x float>* %255, align 64, !tbaa !1291
  %256 = getelementptr inbounds i8, i8* %40, i64 2816
  %257 = bitcast i8* %256 to <32 x float>*
  %258 = load <32 x float>, <32 x float>* %257, align 64, !tbaa !1288
  %259 = fadd <32 x float> %258, %54
  %260 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %259, <32 x float> %57, <32 x float> %60)
  %261 = mul i64 %indvars.iv61, 7696581394432
  %sext83 = add i64 %261, 3023656976384
  %262 = ashr exact i64 %sext83, 32
  %263 = getelementptr inbounds float, float* %10, i64 %262
  %264 = bitcast float* %263 to <32 x float>*
  store <32 x float> %260, <32 x float>* %264, align 64, !tbaa !1291
  %265 = getelementptr inbounds i8, i8* %40, i64 2944
  %266 = bitcast i8* %265 to <32 x float>*
  %267 = load <32 x float>, <32 x float>* %266, align 64, !tbaa !1288
  %268 = fadd <32 x float> %267, %54
  %269 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %268, <32 x float> %57, <32 x float> %60)
  %270 = mul i64 %indvars.iv61, 7696581394432
  %sext84 = add i64 %270, 3161095929856
  %271 = ashr exact i64 %sext84, 32
  %272 = getelementptr inbounds float, float* %10, i64 %271
  %273 = bitcast float* %272 to <32 x float>*
  store <32 x float> %269, <32 x float>* %273, align 64, !tbaa !1291
  %274 = getelementptr inbounds i8, i8* %40, i64 3072
  %275 = bitcast i8* %274 to <32 x float>*
  %276 = load <32 x float>, <32 x float>* %275, align 64, !tbaa !1288
  %277 = fadd <32 x float> %276, %54
  %278 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %277, <32 x float> %57, <32 x float> %60)
  %279 = mul i64 %indvars.iv61, 7696581394432
  %sext85 = add i64 %279, 3298534883328
  %280 = ashr exact i64 %sext85, 32
  %281 = getelementptr inbounds float, float* %10, i64 %280
  %282 = bitcast float* %281 to <32 x float>*
  store <32 x float> %278, <32 x float>* %282, align 64, !tbaa !1291
  %283 = getelementptr inbounds i8, i8* %40, i64 3200
  %284 = bitcast i8* %283 to <32 x float>*
  %285 = load <32 x float>, <32 x float>* %284, align 64, !tbaa !1288
  %286 = fadd <32 x float> %285, %54
  %287 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %286, <32 x float> %57, <32 x float> %60)
  %288 = mul i64 %indvars.iv61, 7696581394432
  %sext86 = add i64 %288, 3435973836800
  %289 = ashr exact i64 %sext86, 32
  %290 = getelementptr inbounds float, float* %10, i64 %289
  %291 = bitcast float* %290 to <32 x float>*
  store <32 x float> %287, <32 x float>* %291, align 64, !tbaa !1291
  %292 = getelementptr inbounds i8, i8* %40, i64 3328
  %293 = bitcast i8* %292 to <32 x float>*
  %294 = load <32 x float>, <32 x float>* %293, align 64, !tbaa !1288
  %295 = fadd <32 x float> %294, %54
  %296 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %295, <32 x float> %57, <32 x float> %60)
  %297 = mul i64 %indvars.iv61, 7696581394432
  %sext87 = add i64 %297, 3573412790272
  %298 = ashr exact i64 %sext87, 32
  %299 = getelementptr inbounds float, float* %10, i64 %298
  %300 = bitcast float* %299 to <32 x float>*
  store <32 x float> %296, <32 x float>* %300, align 64, !tbaa !1291
  %301 = getelementptr inbounds i8, i8* %40, i64 3456
  %302 = bitcast i8* %301 to <32 x float>*
  %303 = load <32 x float>, <32 x float>* %302, align 64, !tbaa !1288
  %304 = fadd <32 x float> %303, %54
  %305 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %304, <32 x float> %57, <32 x float> %60)
  %306 = mul i64 %indvars.iv61, 7696581394432
  %sext88 = add i64 %306, 3710851743744
  %307 = ashr exact i64 %sext88, 32
  %308 = getelementptr inbounds float, float* %10, i64 %307
  %309 = bitcast float* %308 to <32 x float>*
  store <32 x float> %305, <32 x float>* %309, align 64, !tbaa !1291
  %310 = getelementptr inbounds i8, i8* %40, i64 3584
  %311 = bitcast i8* %310 to <32 x float>*
  %312 = load <32 x float>, <32 x float>* %311, align 64, !tbaa !1288
  %313 = fadd <32 x float> %312, %54
  %314 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %313, <32 x float> %57, <32 x float> %60)
  %315 = mul i64 %indvars.iv61, 7696581394432
  %sext89 = add i64 %315, 3848290697216
  %316 = ashr exact i64 %sext89, 32
  %317 = getelementptr inbounds float, float* %10, i64 %316
  %318 = bitcast float* %317 to <32 x float>*
  store <32 x float> %314, <32 x float>* %318, align 64, !tbaa !1291
  %319 = getelementptr inbounds i8, i8* %40, i64 3712
  %320 = bitcast i8* %319 to <32 x float>*
  %321 = load <32 x float>, <32 x float>* %320, align 64, !tbaa !1288
  %322 = fadd <32 x float> %321, %54
  %323 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %322, <32 x float> %57, <32 x float> %60)
  %324 = mul i64 %indvars.iv61, 7696581394432
  %sext90 = add i64 %324, 3985729650688
  %325 = ashr exact i64 %sext90, 32
  %326 = getelementptr inbounds float, float* %10, i64 %325
  %327 = bitcast float* %326 to <32 x float>*
  store <32 x float> %323, <32 x float>* %327, align 64, !tbaa !1291
  %328 = getelementptr inbounds i8, i8* %40, i64 3840
  %329 = bitcast i8* %328 to <32 x float>*
  %330 = load <32 x float>, <32 x float>* %329, align 64, !tbaa !1288
  %331 = fadd <32 x float> %330, %54
  %332 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %331, <32 x float> %57, <32 x float> %60)
  %333 = mul i64 %indvars.iv61, 7696581394432
  %sext91 = add i64 %333, 4123168604160
  %334 = ashr exact i64 %sext91, 32
  %335 = getelementptr inbounds float, float* %10, i64 %334
  %336 = bitcast float* %335 to <32 x float>*
  store <32 x float> %332, <32 x float>* %336, align 64, !tbaa !1291
  %337 = getelementptr inbounds i8, i8* %40, i64 3968
  %338 = bitcast i8* %337 to <32 x float>*
  %339 = load <32 x float>, <32 x float>* %338, align 64, !tbaa !1288
  %340 = fadd <32 x float> %339, %54
  %341 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %340, <32 x float> %57, <32 x float> %60)
  %342 = mul i64 %indvars.iv61, 7696581394432
  %sext92 = add i64 %342, 4260607557632
  %343 = ashr exact i64 %sext92, 32
  %344 = getelementptr inbounds float, float* %10, i64 %343
  %345 = bitcast float* %344 to <32 x float>*
  store <32 x float> %341, <32 x float>* %345, align 64, !tbaa !1291
  %346 = getelementptr inbounds i8, i8* %40, i64 4096
  %347 = bitcast i8* %346 to <32 x float>*
  %348 = load <32 x float>, <32 x float>* %347, align 64, !tbaa !1288
  %349 = fadd <32 x float> %348, %54
  %350 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %349, <32 x float> %57, <32 x float> %60)
  %351 = mul i64 %indvars.iv61, 7696581394432
  %sext93 = add i64 %351, 4398046511104
  %352 = ashr exact i64 %sext93, 32
  %353 = getelementptr inbounds float, float* %10, i64 %352
  %354 = bitcast float* %353 to <32 x float>*
  store <32 x float> %350, <32 x float>* %354, align 64, !tbaa !1291
  %355 = getelementptr inbounds i8, i8* %40, i64 4224
  %356 = bitcast i8* %355 to <32 x float>*
  %357 = load <32 x float>, <32 x float>* %356, align 64, !tbaa !1288
  %358 = fadd <32 x float> %357, %54
  %359 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %358, <32 x float> %57, <32 x float> %60)
  %360 = mul i64 %indvars.iv61, 7696581394432
  %sext94 = add i64 %360, 4535485464576
  %361 = ashr exact i64 %sext94, 32
  %362 = getelementptr inbounds float, float* %10, i64 %361
  %363 = bitcast float* %362 to <32 x float>*
  store <32 x float> %359, <32 x float>* %363, align 64, !tbaa !1291
  %364 = getelementptr inbounds i8, i8* %40, i64 4352
  %365 = bitcast i8* %364 to <32 x float>*
  %366 = load <32 x float>, <32 x float>* %365, align 64, !tbaa !1288
  %367 = fadd <32 x float> %366, %54
  %368 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %367, <32 x float> %57, <32 x float> %60)
  %369 = mul i64 %indvars.iv61, 7696581394432
  %sext95 = add i64 %369, 4672924418048
  %370 = ashr exact i64 %sext95, 32
  %371 = getelementptr inbounds float, float* %10, i64 %370
  %372 = bitcast float* %371 to <32 x float>*
  store <32 x float> %368, <32 x float>* %372, align 64, !tbaa !1291
  %373 = getelementptr inbounds i8, i8* %40, i64 4480
  %374 = bitcast i8* %373 to <32 x float>*
  %375 = load <32 x float>, <32 x float>* %374, align 64, !tbaa !1288
  %376 = fadd <32 x float> %375, %54
  %377 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %376, <32 x float> %57, <32 x float> %60)
  %378 = mul i64 %indvars.iv61, 7696581394432
  %sext96 = add i64 %378, 4810363371520
  %379 = ashr exact i64 %sext96, 32
  %380 = getelementptr inbounds float, float* %10, i64 %379
  %381 = bitcast float* %380 to <32 x float>*
  store <32 x float> %377, <32 x float>* %381, align 64, !tbaa !1291
  %382 = getelementptr inbounds i8, i8* %40, i64 4608
  %383 = bitcast i8* %382 to <32 x float>*
  %384 = load <32 x float>, <32 x float>* %383, align 64, !tbaa !1288
  %385 = fadd <32 x float> %384, %54
  %386 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %385, <32 x float> %57, <32 x float> %60)
  %387 = mul i64 %indvars.iv61, 7696581394432
  %sext97 = add i64 %387, 4947802324992
  %388 = ashr exact i64 %sext97, 32
  %389 = getelementptr inbounds float, float* %10, i64 %388
  %390 = bitcast float* %389 to <32 x float>*
  store <32 x float> %386, <32 x float>* %390, align 64, !tbaa !1291
  %391 = getelementptr inbounds i8, i8* %40, i64 4736
  %392 = bitcast i8* %391 to <32 x float>*
  %393 = load <32 x float>, <32 x float>* %392, align 64, !tbaa !1288
  %394 = fadd <32 x float> %393, %54
  %395 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %394, <32 x float> %57, <32 x float> %60)
  %396 = mul i64 %indvars.iv61, 7696581394432
  %sext98 = add i64 %396, 5085241278464
  %397 = ashr exact i64 %sext98, 32
  %398 = getelementptr inbounds float, float* %10, i64 %397
  %399 = bitcast float* %398 to <32 x float>*
  store <32 x float> %395, <32 x float>* %399, align 64, !tbaa !1291
  %400 = getelementptr inbounds i8, i8* %40, i64 4864
  %401 = bitcast i8* %400 to <32 x float>*
  %402 = load <32 x float>, <32 x float>* %401, align 64, !tbaa !1288
  %403 = fadd <32 x float> %402, %54
  %404 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %403, <32 x float> %57, <32 x float> %60)
  %405 = mul i64 %indvars.iv61, 7696581394432
  %sext99 = add i64 %405, 5222680231936
  %406 = ashr exact i64 %sext99, 32
  %407 = getelementptr inbounds float, float* %10, i64 %406
  %408 = bitcast float* %407 to <32 x float>*
  store <32 x float> %404, <32 x float>* %408, align 64, !tbaa !1291
  %409 = getelementptr inbounds i8, i8* %40, i64 4992
  %410 = bitcast i8* %409 to <32 x float>*
  %411 = load <32 x float>, <32 x float>* %410, align 64, !tbaa !1288
  %412 = fadd <32 x float> %411, %54
  %413 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %412, <32 x float> %57, <32 x float> %60)
  %414 = mul i64 %indvars.iv61, 7696581394432
  %sext100 = add i64 %414, 5360119185408
  %415 = ashr exact i64 %sext100, 32
  %416 = getelementptr inbounds float, float* %10, i64 %415
  %417 = bitcast float* %416 to <32 x float>*
  store <32 x float> %413, <32 x float>* %417, align 64, !tbaa !1291
  %418 = getelementptr inbounds i8, i8* %40, i64 5120
  %419 = bitcast i8* %418 to <32 x float>*
  %420 = load <32 x float>, <32 x float>* %419, align 64, !tbaa !1288
  %421 = fadd <32 x float> %420, %54
  %422 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %421, <32 x float> %57, <32 x float> %60)
  %423 = mul i64 %indvars.iv61, 7696581394432
  %sext101 = add i64 %423, 5497558138880
  %424 = ashr exact i64 %sext101, 32
  %425 = getelementptr inbounds float, float* %10, i64 %424
  %426 = bitcast float* %425 to <32 x float>*
  store <32 x float> %422, <32 x float>* %426, align 64, !tbaa !1291
  %427 = getelementptr inbounds i8, i8* %40, i64 5248
  %428 = bitcast i8* %427 to <32 x float>*
  %429 = load <32 x float>, <32 x float>* %428, align 64, !tbaa !1288
  %430 = fadd <32 x float> %429, %54
  %431 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %430, <32 x float> %57, <32 x float> %60)
  %432 = mul i64 %indvars.iv61, 7696581394432
  %sext102 = add i64 %432, 5634997092352
  %433 = ashr exact i64 %sext102, 32
  %434 = getelementptr inbounds float, float* %10, i64 %433
  %435 = bitcast float* %434 to <32 x float>*
  store <32 x float> %431, <32 x float>* %435, align 64, !tbaa !1291
  %436 = getelementptr inbounds i8, i8* %40, i64 5376
  %437 = bitcast i8* %436 to <32 x float>*
  %438 = load <32 x float>, <32 x float>* %437, align 64, !tbaa !1288
  %439 = fadd <32 x float> %438, %54
  %440 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %439, <32 x float> %57, <32 x float> %60)
  %441 = mul i64 %indvars.iv61, 7696581394432
  %sext103 = add i64 %441, 5772436045824
  %442 = ashr exact i64 %sext103, 32
  %443 = getelementptr inbounds float, float* %10, i64 %442
  %444 = bitcast float* %443 to <32 x float>*
  store <32 x float> %440, <32 x float>* %444, align 64, !tbaa !1291
  %445 = getelementptr inbounds i8, i8* %40, i64 5504
  %446 = bitcast i8* %445 to <32 x float>*
  %447 = load <32 x float>, <32 x float>* %446, align 64, !tbaa !1288
  %448 = fadd <32 x float> %447, %54
  %449 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %448, <32 x float> %57, <32 x float> %60)
  %450 = mul i64 %indvars.iv61, 7696581394432
  %sext104 = add i64 %450, 5909874999296
  %451 = ashr exact i64 %sext104, 32
  %452 = getelementptr inbounds float, float* %10, i64 %451
  %453 = bitcast float* %452 to <32 x float>*
  store <32 x float> %449, <32 x float>* %453, align 64, !tbaa !1291
  %454 = getelementptr inbounds i8, i8* %40, i64 5632
  %455 = bitcast i8* %454 to <32 x float>*
  %456 = load <32 x float>, <32 x float>* %455, align 64, !tbaa !1288
  %457 = fadd <32 x float> %456, %54
  %458 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %457, <32 x float> %57, <32 x float> %60)
  %459 = mul i64 %indvars.iv61, 7696581394432
  %sext105 = add i64 %459, 6047313952768
  %460 = ashr exact i64 %sext105, 32
  %461 = getelementptr inbounds float, float* %10, i64 %460
  %462 = bitcast float* %461 to <32 x float>*
  store <32 x float> %458, <32 x float>* %462, align 64, !tbaa !1291
  %463 = getelementptr inbounds i8, i8* %40, i64 5760
  %464 = bitcast i8* %463 to <32 x float>*
  %465 = load <32 x float>, <32 x float>* %464, align 64, !tbaa !1288
  %466 = fadd <32 x float> %465, %54
  %467 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %466, <32 x float> %57, <32 x float> %60)
  %468 = mul i64 %indvars.iv61, 7696581394432
  %sext106 = add i64 %468, 6184752906240
  %469 = ashr exact i64 %sext106, 32
  %470 = getelementptr inbounds float, float* %10, i64 %469
  %471 = bitcast float* %470 to <32 x float>*
  store <32 x float> %467, <32 x float>* %471, align 64, !tbaa !1291
  %472 = getelementptr inbounds i8, i8* %40, i64 5888
  %473 = bitcast i8* %472 to <32 x float>*
  %474 = load <32 x float>, <32 x float>* %473, align 64, !tbaa !1288
  %475 = fadd <32 x float> %474, %54
  %476 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %475, <32 x float> %57, <32 x float> %60)
  %477 = mul i64 %indvars.iv61, 7696581394432
  %sext107 = add i64 %477, 6322191859712
  %478 = ashr exact i64 %sext107, 32
  %479 = getelementptr inbounds float, float* %10, i64 %478
  %480 = bitcast float* %479 to <32 x float>*
  store <32 x float> %476, <32 x float>* %480, align 64, !tbaa !1291
  %481 = getelementptr inbounds i8, i8* %40, i64 6016
  %482 = bitcast i8* %481 to <32 x float>*
  %483 = load <32 x float>, <32 x float>* %482, align 64, !tbaa !1288
  %484 = fadd <32 x float> %483, %54
  %485 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %484, <32 x float> %57, <32 x float> %60)
  %486 = mul i64 %indvars.iv61, 7696581394432
  %sext108 = add i64 %486, 6459630813184
  %487 = ashr exact i64 %sext108, 32
  %488 = getelementptr inbounds float, float* %10, i64 %487
  %489 = bitcast float* %488 to <32 x float>*
  store <32 x float> %485, <32 x float>* %489, align 64, !tbaa !1291
  %490 = getelementptr inbounds i8, i8* %40, i64 6144
  %491 = bitcast i8* %490 to <32 x float>*
  %492 = load <32 x float>, <32 x float>* %491, align 64, !tbaa !1288
  %493 = fadd <32 x float> %492, %54
  %494 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %493, <32 x float> %57, <32 x float> %60)
  %495 = mul i64 %indvars.iv61, 7696581394432
  %sext109 = add i64 %495, 6597069766656
  %496 = ashr exact i64 %sext109, 32
  %497 = getelementptr inbounds float, float* %10, i64 %496
  %498 = bitcast float* %497 to <32 x float>*
  store <32 x float> %494, <32 x float>* %498, align 64, !tbaa !1291
  %499 = getelementptr inbounds i8, i8* %40, i64 6272
  %500 = bitcast i8* %499 to <32 x float>*
  %501 = load <32 x float>, <32 x float>* %500, align 64, !tbaa !1288
  %502 = fadd <32 x float> %501, %54
  %503 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %502, <32 x float> %57, <32 x float> %60)
  %504 = mul i64 %indvars.iv61, 7696581394432
  %sext110 = add i64 %504, 6734508720128
  %505 = ashr exact i64 %sext110, 32
  %506 = getelementptr inbounds float, float* %10, i64 %505
  %507 = bitcast float* %506 to <32 x float>*
  store <32 x float> %503, <32 x float>* %507, align 64, !tbaa !1291
  %508 = getelementptr inbounds i8, i8* %40, i64 6400
  %509 = bitcast i8* %508 to <32 x float>*
  %510 = load <32 x float>, <32 x float>* %509, align 64, !tbaa !1288
  %511 = fadd <32 x float> %510, %54
  %512 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %511, <32 x float> %57, <32 x float> %60)
  %513 = mul i64 %indvars.iv61, 7696581394432
  %sext111 = add i64 %513, 6871947673600
  %514 = ashr exact i64 %sext111, 32
  %515 = getelementptr inbounds float, float* %10, i64 %514
  %516 = bitcast float* %515 to <32 x float>*
  store <32 x float> %512, <32 x float>* %516, align 64, !tbaa !1291
  %517 = getelementptr inbounds i8, i8* %40, i64 6528
  %518 = bitcast i8* %517 to <32 x float>*
  %519 = load <32 x float>, <32 x float>* %518, align 64, !tbaa !1288
  %520 = fadd <32 x float> %519, %54
  %521 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %520, <32 x float> %57, <32 x float> %60)
  %522 = mul i64 %indvars.iv61, 7696581394432
  %sext112 = add i64 %522, 7009386627072
  %523 = ashr exact i64 %sext112, 32
  %524 = getelementptr inbounds float, float* %10, i64 %523
  %525 = bitcast float* %524 to <32 x float>*
  store <32 x float> %521, <32 x float>* %525, align 64, !tbaa !1291
  %526 = getelementptr inbounds i8, i8* %40, i64 6656
  %527 = bitcast i8* %526 to <32 x float>*
  %528 = load <32 x float>, <32 x float>* %527, align 64, !tbaa !1288
  %529 = fadd <32 x float> %528, %54
  %530 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %529, <32 x float> %57, <32 x float> %60)
  %531 = mul i64 %indvars.iv61, 7696581394432
  %sext113 = add i64 %531, 7146825580544
  %532 = ashr exact i64 %sext113, 32
  %533 = getelementptr inbounds float, float* %10, i64 %532
  %534 = bitcast float* %533 to <32 x float>*
  store <32 x float> %530, <32 x float>* %534, align 64, !tbaa !1291
  %535 = getelementptr inbounds i8, i8* %40, i64 6784
  %536 = bitcast i8* %535 to <32 x float>*
  %537 = load <32 x float>, <32 x float>* %536, align 64, !tbaa !1288
  %538 = fadd <32 x float> %537, %54
  %539 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %538, <32 x float> %57, <32 x float> %60)
  %540 = mul i64 %indvars.iv61, 7696581394432
  %sext114 = add i64 %540, 7284264534016
  %541 = ashr exact i64 %sext114, 32
  %542 = getelementptr inbounds float, float* %10, i64 %541
  %543 = bitcast float* %542 to <32 x float>*
  store <32 x float> %539, <32 x float>* %543, align 64, !tbaa !1291
  %544 = getelementptr inbounds i8, i8* %40, i64 6912
  %545 = bitcast i8* %544 to <32 x float>*
  %546 = load <32 x float>, <32 x float>* %545, align 64, !tbaa !1288
  %547 = fadd <32 x float> %546, %54
  %548 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %547, <32 x float> %57, <32 x float> %60)
  %549 = mul i64 %indvars.iv61, 7696581394432
  %sext115 = add i64 %549, 7421703487488
  %550 = ashr exact i64 %sext115, 32
  %551 = getelementptr inbounds float, float* %10, i64 %550
  %552 = bitcast float* %551 to <32 x float>*
  store <32 x float> %548, <32 x float>* %552, align 64, !tbaa !1291
  %553 = getelementptr inbounds i8, i8* %40, i64 7040
  %554 = bitcast i8* %553 to <32 x float>*
  %555 = load <32 x float>, <32 x float>* %554, align 64, !tbaa !1288
  %556 = fadd <32 x float> %555, %54
  %557 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %556, <32 x float> %57, <32 x float> %60)
  %558 = mul i64 %indvars.iv61, 7696581394432
  %sext116 = add i64 %558, 7559142440960
  %559 = ashr exact i64 %sext116, 32
  %560 = getelementptr inbounds float, float* %10, i64 %559
  %561 = bitcast float* %560 to <32 x float>*
  store <32 x float> %557, <32 x float>* %561, align 64, !tbaa !1291
  %562 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %563 = tail call i32 %562(i32 1, i32 %22, i8* nonnull %40)
  %indvars.iv.next62 = add nsw i64 %indvars.iv61, 1
  %564 = icmp slt i64 %indvars.iv.next62, %38
  br i1 %564, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv52 = phi i64 [ 0, %for_body ], [ %indvars.iv.next53, %for_end6 ]
  %565 = mul nuw nsw i64 %indvars.iv52, 224
  %566 = getelementptr inbounds float, float* %41, i64 %565
  %567 = bitcast float* %566 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %567, align 64, !tbaa !1288
  %568 = add nuw nsw i64 %565, 32
  %569 = getelementptr inbounds float, float* %41, i64 %568
  %570 = bitcast float* %569 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %570, align 64, !tbaa !1288
  %571 = add nuw nsw i64 %565, 64
  %572 = getelementptr inbounds float, float* %41, i64 %571
  %573 = bitcast float* %572 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %573, align 64, !tbaa !1288
  %574 = add nuw nsw i64 %565, 96
  %575 = getelementptr inbounds float, float* %41, i64 %574
  %576 = bitcast float* %575 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %576, align 64, !tbaa !1288
  %577 = add nuw nsw i64 %565, 128
  %578 = getelementptr inbounds float, float* %41, i64 %577
  %579 = bitcast float* %578 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %579, align 64, !tbaa !1288
  %580 = add nuw nsw i64 %565, 160
  %581 = getelementptr inbounds float, float* %41, i64 %580
  %582 = bitcast float* %581 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %582, align 64, !tbaa !1288
  %583 = add nuw nsw i64 %565, 192
  %584 = getelementptr inbounds float, float* %41, i64 %583
  %585 = bitcast float* %584 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %585, align 64, !tbaa !1288
  %586 = mul nuw nsw i64 %indvars.iv52, 28
  %587 = add nsw i64 %586, %48
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa3245 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %773, %for_begin7.preheader ]
  %.lcssa3043 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %767, %for_begin7.preheader ]
  %.lcssa2841 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %761, %for_begin7.preheader ]
  %.lcssa2639 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %755, %for_begin7.preheader ]
  %.lcssa2437 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %749, %for_begin7.preheader ]
  %.lcssa2235 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %743, %for_begin7.preheader ]
  %.lcssa34 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %737, %for_begin7.preheader ]
  %588 = mul nuw nsw i64 %indvars.iv, 12544
  %589 = add nsw i64 %587, %588
  %590 = shl i64 %indvars.iv, 7
  %591 = add nuw nsw i64 %590, %47
  %592 = getelementptr inbounds float, float* %4, i64 %589
  %593 = load float, float* %592, align 4, !tbaa !1294
  %594 = insertelement <32 x float> undef, float %593, i32 0
  %595 = shufflevector <32 x float> %594, <32 x float> undef, <32 x i32> zeroinitializer
  %596 = getelementptr inbounds float, float* %7, i64 %591
  %597 = bitcast float* %596 to <32 x float>*
  %598 = load <32 x float>, <32 x float>* %597, align 64, !tbaa !1297
  %599 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %595, <32 x float> %598, <32 x float> %.lcssa34)
  %600 = add nsw i64 %589, 4
  %601 = getelementptr inbounds float, float* %4, i64 %600
  %602 = load float, float* %601, align 4, !tbaa !1294
  %603 = insertelement <32 x float> undef, float %602, i32 0
  %604 = shufflevector <32 x float> %603, <32 x float> undef, <32 x i32> zeroinitializer
  %605 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %604, <32 x float> %598, <32 x float> %.lcssa2235)
  %606 = add nsw i64 %589, 8
  %607 = getelementptr inbounds float, float* %4, i64 %606
  %608 = load float, float* %607, align 4, !tbaa !1294
  %609 = insertelement <32 x float> undef, float %608, i32 0
  %610 = shufflevector <32 x float> %609, <32 x float> undef, <32 x i32> zeroinitializer
  %611 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %610, <32 x float> %598, <32 x float> %.lcssa2437)
  %612 = add nsw i64 %589, 12
  %613 = getelementptr inbounds float, float* %4, i64 %612
  %614 = load float, float* %613, align 4, !tbaa !1294
  %615 = insertelement <32 x float> undef, float %614, i32 0
  %616 = shufflevector <32 x float> %615, <32 x float> undef, <32 x i32> zeroinitializer
  %617 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %616, <32 x float> %598, <32 x float> %.lcssa2639)
  %618 = add nsw i64 %589, 16
  %619 = getelementptr inbounds float, float* %4, i64 %618
  %620 = load float, float* %619, align 4, !tbaa !1294
  %621 = insertelement <32 x float> undef, float %620, i32 0
  %622 = shufflevector <32 x float> %621, <32 x float> undef, <32 x i32> zeroinitializer
  %623 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %622, <32 x float> %598, <32 x float> %.lcssa2841)
  %624 = add nsw i64 %589, 20
  %625 = getelementptr inbounds float, float* %4, i64 %624
  %626 = load float, float* %625, align 4, !tbaa !1294
  %627 = insertelement <32 x float> undef, float %626, i32 0
  %628 = shufflevector <32 x float> %627, <32 x float> undef, <32 x i32> zeroinitializer
  %629 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %628, <32 x float> %598, <32 x float> %.lcssa3043)
  %630 = add nsw i64 %589, 24
  %631 = getelementptr inbounds float, float* %4, i64 %630
  %632 = load float, float* %631, align 4, !tbaa !1294
  %633 = insertelement <32 x float> undef, float %632, i32 0
  %634 = shufflevector <32 x float> %633, <32 x float> undef, <32 x i32> zeroinitializer
  %635 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %634, <32 x float> %598, <32 x float> %.lcssa3245)
  %636 = or i64 %589, 1
  %637 = getelementptr inbounds float, float* %4, i64 %636
  %638 = load float, float* %637, align 4, !tbaa !1294
  %639 = insertelement <32 x float> undef, float %638, i32 0
  %640 = shufflevector <32 x float> %639, <32 x float> undef, <32 x i32> zeroinitializer
  %641 = or i64 %591, 32
  %642 = getelementptr inbounds float, float* %7, i64 %641
  %643 = bitcast float* %642 to <32 x float>*
  %644 = load <32 x float>, <32 x float>* %643, align 64, !tbaa !1297
  %645 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %640, <32 x float> %644, <32 x float> %599)
  %646 = add nsw i64 %636, 4
  %647 = getelementptr inbounds float, float* %4, i64 %646
  %648 = load float, float* %647, align 4, !tbaa !1294
  %649 = insertelement <32 x float> undef, float %648, i32 0
  %650 = shufflevector <32 x float> %649, <32 x float> undef, <32 x i32> zeroinitializer
  %651 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %650, <32 x float> %644, <32 x float> %605)
  %652 = add nsw i64 %636, 8
  %653 = getelementptr inbounds float, float* %4, i64 %652
  %654 = load float, float* %653, align 4, !tbaa !1294
  %655 = insertelement <32 x float> undef, float %654, i32 0
  %656 = shufflevector <32 x float> %655, <32 x float> undef, <32 x i32> zeroinitializer
  %657 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %656, <32 x float> %644, <32 x float> %611)
  %658 = add nsw i64 %636, 12
  %659 = getelementptr inbounds float, float* %4, i64 %658
  %660 = load float, float* %659, align 4, !tbaa !1294
  %661 = insertelement <32 x float> undef, float %660, i32 0
  %662 = shufflevector <32 x float> %661, <32 x float> undef, <32 x i32> zeroinitializer
  %663 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %662, <32 x float> %644, <32 x float> %617)
  %664 = add nsw i64 %636, 16
  %665 = getelementptr inbounds float, float* %4, i64 %664
  %666 = load float, float* %665, align 4, !tbaa !1294
  %667 = insertelement <32 x float> undef, float %666, i32 0
  %668 = shufflevector <32 x float> %667, <32 x float> undef, <32 x i32> zeroinitializer
  %669 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %668, <32 x float> %644, <32 x float> %623)
  %670 = add nsw i64 %636, 20
  %671 = getelementptr inbounds float, float* %4, i64 %670
  %672 = load float, float* %671, align 4, !tbaa !1294
  %673 = insertelement <32 x float> undef, float %672, i32 0
  %674 = shufflevector <32 x float> %673, <32 x float> undef, <32 x i32> zeroinitializer
  %675 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %674, <32 x float> %644, <32 x float> %629)
  %676 = add nsw i64 %636, 24
  %677 = getelementptr inbounds float, float* %4, i64 %676
  %678 = load float, float* %677, align 4, !tbaa !1294
  %679 = insertelement <32 x float> undef, float %678, i32 0
  %680 = shufflevector <32 x float> %679, <32 x float> undef, <32 x i32> zeroinitializer
  %681 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %680, <32 x float> %644, <32 x float> %635)
  %682 = or i64 %589, 2
  %683 = getelementptr inbounds float, float* %4, i64 %682
  %684 = load float, float* %683, align 4, !tbaa !1294
  %685 = insertelement <32 x float> undef, float %684, i32 0
  %686 = shufflevector <32 x float> %685, <32 x float> undef, <32 x i32> zeroinitializer
  %687 = or i64 %591, 64
  %688 = getelementptr inbounds float, float* %7, i64 %687
  %689 = bitcast float* %688 to <32 x float>*
  %690 = load <32 x float>, <32 x float>* %689, align 64, !tbaa !1297
  %691 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %686, <32 x float> %690, <32 x float> %645)
  %692 = add nsw i64 %682, 4
  %693 = getelementptr inbounds float, float* %4, i64 %692
  %694 = load float, float* %693, align 4, !tbaa !1294
  %695 = insertelement <32 x float> undef, float %694, i32 0
  %696 = shufflevector <32 x float> %695, <32 x float> undef, <32 x i32> zeroinitializer
  %697 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %696, <32 x float> %690, <32 x float> %651)
  %698 = add nsw i64 %682, 8
  %699 = getelementptr inbounds float, float* %4, i64 %698
  %700 = load float, float* %699, align 4, !tbaa !1294
  %701 = insertelement <32 x float> undef, float %700, i32 0
  %702 = shufflevector <32 x float> %701, <32 x float> undef, <32 x i32> zeroinitializer
  %703 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %702, <32 x float> %690, <32 x float> %657)
  %704 = add nsw i64 %682, 12
  %705 = getelementptr inbounds float, float* %4, i64 %704
  %706 = load float, float* %705, align 4, !tbaa !1294
  %707 = insertelement <32 x float> undef, float %706, i32 0
  %708 = shufflevector <32 x float> %707, <32 x float> undef, <32 x i32> zeroinitializer
  %709 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %708, <32 x float> %690, <32 x float> %663)
  %710 = add nsw i64 %682, 16
  %711 = getelementptr inbounds float, float* %4, i64 %710
  %712 = load float, float* %711, align 4, !tbaa !1294
  %713 = insertelement <32 x float> undef, float %712, i32 0
  %714 = shufflevector <32 x float> %713, <32 x float> undef, <32 x i32> zeroinitializer
  %715 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %714, <32 x float> %690, <32 x float> %669)
  %716 = add nsw i64 %682, 20
  %717 = getelementptr inbounds float, float* %4, i64 %716
  %718 = load float, float* %717, align 4, !tbaa !1294
  %719 = insertelement <32 x float> undef, float %718, i32 0
  %720 = shufflevector <32 x float> %719, <32 x float> undef, <32 x i32> zeroinitializer
  %721 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %720, <32 x float> %690, <32 x float> %675)
  %722 = add nsw i64 %682, 24
  %723 = getelementptr inbounds float, float* %4, i64 %722
  %724 = load float, float* %723, align 4, !tbaa !1294
  %725 = insertelement <32 x float> undef, float %724, i32 0
  %726 = shufflevector <32 x float> %725, <32 x float> undef, <32 x i32> zeroinitializer
  %727 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %726, <32 x float> %690, <32 x float> %681)
  %728 = or i64 %589, 3
  %729 = getelementptr inbounds float, float* %4, i64 %728
  %730 = load float, float* %729, align 4, !tbaa !1294
  %731 = insertelement <32 x float> undef, float %730, i32 0
  %732 = shufflevector <32 x float> %731, <32 x float> undef, <32 x i32> zeroinitializer
  %733 = or i64 %591, 96
  %734 = getelementptr inbounds float, float* %7, i64 %733
  %735 = bitcast float* %734 to <32 x float>*
  %736 = load <32 x float>, <32 x float>* %735, align 64, !tbaa !1297
  %737 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %732, <32 x float> %736, <32 x float> %691)
  %738 = add nsw i64 %728, 4
  %739 = getelementptr inbounds float, float* %4, i64 %738
  %740 = load float, float* %739, align 4, !tbaa !1294
  %741 = insertelement <32 x float> undef, float %740, i32 0
  %742 = shufflevector <32 x float> %741, <32 x float> undef, <32 x i32> zeroinitializer
  %743 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %742, <32 x float> %736, <32 x float> %697)
  %744 = add nsw i64 %728, 8
  %745 = getelementptr inbounds float, float* %4, i64 %744
  %746 = load float, float* %745, align 4, !tbaa !1294
  %747 = insertelement <32 x float> undef, float %746, i32 0
  %748 = shufflevector <32 x float> %747, <32 x float> undef, <32 x i32> zeroinitializer
  %749 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %748, <32 x float> %736, <32 x float> %703)
  %750 = add nsw i64 %728, 12
  %751 = getelementptr inbounds float, float* %4, i64 %750
  %752 = load float, float* %751, align 4, !tbaa !1294
  %753 = insertelement <32 x float> undef, float %752, i32 0
  %754 = shufflevector <32 x float> %753, <32 x float> undef, <32 x i32> zeroinitializer
  %755 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %754, <32 x float> %736, <32 x float> %709)
  %756 = add nsw i64 %728, 16
  %757 = getelementptr inbounds float, float* %4, i64 %756
  %758 = load float, float* %757, align 4, !tbaa !1294
  %759 = insertelement <32 x float> undef, float %758, i32 0
  %760 = shufflevector <32 x float> %759, <32 x float> undef, <32 x i32> zeroinitializer
  %761 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %760, <32 x float> %736, <32 x float> %715)
  %762 = add nsw i64 %728, 20
  %763 = getelementptr inbounds float, float* %4, i64 %762
  %764 = load float, float* %763, align 4, !tbaa !1294
  %765 = insertelement <32 x float> undef, float %764, i32 0
  %766 = shufflevector <32 x float> %765, <32 x float> undef, <32 x i32> zeroinitializer
  %767 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %766, <32 x float> %736, <32 x float> %721)
  %768 = add nsw i64 %728, 24
  %769 = getelementptr inbounds float, float* %4, i64 %768
  %770 = load float, float* %769, align 4, !tbaa !1294
  %771 = insertelement <32 x float> undef, float %770, i32 0
  %772 = shufflevector <32 x float> %771, <32 x float> undef, <32 x i32> zeroinitializer
  %773 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %772, <32 x float> %736, <32 x float> %727)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end6, label %for_begin7.preheader, !prof !50

for_end6:                                         ; preds = %for_begin7.preheader
  store <32 x float> %737, <32 x float>* %567, align 64, !tbaa !1288
  store <32 x float> %743, <32 x float>* %570, align 64, !tbaa !1288
  store <32 x float> %749, <32 x float>* %573, align 64, !tbaa !1288
  store <32 x float> %755, <32 x float>* %576, align 64, !tbaa !1288
  store <32 x float> %761, <32 x float>* %579, align 64, !tbaa !1288
  store <32 x float> %767, <32 x float>* %582, align 64, !tbaa !1288
  store <32 x float> %773, <32 x float>* %585, align 64, !tbaa !1288
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %exitcond54 = icmp eq i64 %indvars.iv.next53, 8
  br i1 %exitcond54, label %for_begin10.preheader, label %for_body2, !prof !50
}

define dllexport i32 @fused_layout_transform_44(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.165, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1300
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.166, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !1314
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.167, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !1316
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !1330
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 16
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !1332
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 14
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !1335
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 14
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !1337
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 16
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.168, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !1341
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 3136, i32 224, i32 16, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !1352
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 50176
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.169, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !1356
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !1370
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !1372
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 14
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !1375
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 14
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !1377
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 256
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.171, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !1381
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 50176, i32 3584, i32 256, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !1392
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 50176
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.172, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_44_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_44_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %11, align 8
  %3 = getelementptr inbounds %11, %11* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %11, %11* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %11* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.173, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.173(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 13
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 14
  %14 = select i1 %13, i32 %12, i32 14
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 14
  %18 = select i1 %17, i32 %16, i32 14
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv7, 3584
  %25 = trunc i64 %indvars.iv7 to i32
  %26 = mul i32 %25, 224
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %27 = shl i64 %indvars.iv, 8
  %28 = add nsw i64 %27, %24
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %29 = shl i32 %indvars.iv.tr, 4
  %30 = add i32 %29, %26
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %7, i64 %31
  %33 = bitcast float* %32 to <16 x float>*
  %34 = load <16 x float>, <16 x float>* %33, align 64, !tbaa !1396
  %35 = getelementptr inbounds float, float* %4, i64 %28
  %36 = bitcast float* %35 to <16 x float>*
  store <16 x float> %34, <16 x float>* %36, align 64, !tbaa !1399
  %37 = or i64 %28, 16
  %38 = add i32 %30, 3136
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds float, float* %7, i64 %39
  %41 = bitcast float* %40 to <16 x float>*
  %42 = load <16 x float>, <16 x float>* %41, align 64, !tbaa !1396
  %43 = getelementptr inbounds float, float* %4, i64 %37
  %44 = bitcast float* %43 to <16 x float>*
  store <16 x float> %42, <16 x float>* %44, align 64, !tbaa !1399
  %45 = or i64 %28, 32
  %46 = add i32 %30, 6272
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %7, i64 %47
  %49 = bitcast float* %48 to <16 x float>*
  %50 = load <16 x float>, <16 x float>* %49, align 64, !tbaa !1396
  %51 = getelementptr inbounds float, float* %4, i64 %45
  %52 = bitcast float* %51 to <16 x float>*
  store <16 x float> %50, <16 x float>* %52, align 64, !tbaa !1399
  %53 = or i64 %28, 48
  %54 = add i32 %30, 9408
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %7, i64 %55
  %57 = bitcast float* %56 to <16 x float>*
  %58 = load <16 x float>, <16 x float>* %57, align 64, !tbaa !1396
  %59 = getelementptr inbounds float, float* %4, i64 %53
  %60 = bitcast float* %59 to <16 x float>*
  store <16 x float> %58, <16 x float>* %60, align 64, !tbaa !1399
  %61 = or i64 %28, 64
  %62 = add i32 %30, 12544
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = bitcast float* %64 to <16 x float>*
  %66 = load <16 x float>, <16 x float>* %65, align 64, !tbaa !1396
  %67 = getelementptr inbounds float, float* %4, i64 %61
  %68 = bitcast float* %67 to <16 x float>*
  store <16 x float> %66, <16 x float>* %68, align 64, !tbaa !1399
  %69 = or i64 %28, 80
  %70 = add i32 %30, 15680
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = bitcast float* %72 to <16 x float>*
  %74 = load <16 x float>, <16 x float>* %73, align 64, !tbaa !1396
  %75 = getelementptr inbounds float, float* %4, i64 %69
  %76 = bitcast float* %75 to <16 x float>*
  store <16 x float> %74, <16 x float>* %76, align 64, !tbaa !1399
  %77 = or i64 %28, 96
  %78 = add i32 %30, 18816
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %7, i64 %79
  %81 = bitcast float* %80 to <16 x float>*
  %82 = load <16 x float>, <16 x float>* %81, align 64, !tbaa !1396
  %83 = getelementptr inbounds float, float* %4, i64 %77
  %84 = bitcast float* %83 to <16 x float>*
  store <16 x float> %82, <16 x float>* %84, align 64, !tbaa !1399
  %85 = or i64 %28, 112
  %86 = add i32 %30, 21952
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = bitcast float* %88 to <16 x float>*
  %90 = load <16 x float>, <16 x float>* %89, align 64, !tbaa !1396
  %91 = getelementptr inbounds float, float* %4, i64 %85
  %92 = bitcast float* %91 to <16 x float>*
  store <16 x float> %90, <16 x float>* %92, align 64, !tbaa !1399
  %93 = or i64 %28, 128
  %94 = add i32 %30, 25088
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds float, float* %7, i64 %95
  %97 = bitcast float* %96 to <16 x float>*
  %98 = load <16 x float>, <16 x float>* %97, align 64, !tbaa !1396
  %99 = getelementptr inbounds float, float* %4, i64 %93
  %100 = bitcast float* %99 to <16 x float>*
  store <16 x float> %98, <16 x float>* %100, align 64, !tbaa !1399
  %101 = or i64 %28, 144
  %102 = add i32 %30, 28224
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = bitcast float* %104 to <16 x float>*
  %106 = load <16 x float>, <16 x float>* %105, align 64, !tbaa !1396
  %107 = getelementptr inbounds float, float* %4, i64 %101
  %108 = bitcast float* %107 to <16 x float>*
  store <16 x float> %106, <16 x float>* %108, align 64, !tbaa !1399
  %109 = or i64 %28, 160
  %110 = add i32 %30, 31360
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = bitcast float* %112 to <16 x float>*
  %114 = load <16 x float>, <16 x float>* %113, align 64, !tbaa !1396
  %115 = getelementptr inbounds float, float* %4, i64 %109
  %116 = bitcast float* %115 to <16 x float>*
  store <16 x float> %114, <16 x float>* %116, align 64, !tbaa !1399
  %117 = or i64 %28, 176
  %118 = add i32 %30, 34496
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds float, float* %7, i64 %119
  %121 = bitcast float* %120 to <16 x float>*
  %122 = load <16 x float>, <16 x float>* %121, align 64, !tbaa !1396
  %123 = getelementptr inbounds float, float* %4, i64 %117
  %124 = bitcast float* %123 to <16 x float>*
  store <16 x float> %122, <16 x float>* %124, align 64, !tbaa !1399
  %125 = or i64 %28, 192
  %126 = add i32 %30, 37632
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %7, i64 %127
  %129 = bitcast float* %128 to <16 x float>*
  %130 = load <16 x float>, <16 x float>* %129, align 64, !tbaa !1396
  %131 = getelementptr inbounds float, float* %4, i64 %125
  %132 = bitcast float* %131 to <16 x float>*
  store <16 x float> %130, <16 x float>* %132, align 64, !tbaa !1399
  %133 = or i64 %28, 208
  %134 = add i32 %30, 40768
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds float, float* %7, i64 %135
  %137 = bitcast float* %136 to <16 x float>*
  %138 = load <16 x float>, <16 x float>* %137, align 64, !tbaa !1396
  %139 = getelementptr inbounds float, float* %4, i64 %133
  %140 = bitcast float* %139 to <16 x float>*
  store <16 x float> %138, <16 x float>* %140, align 64, !tbaa !1399
  %141 = or i64 %28, 224
  %142 = add i32 %30, 43904
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = bitcast float* %144 to <16 x float>*
  %146 = load <16 x float>, <16 x float>* %145, align 64, !tbaa !1396
  %147 = getelementptr inbounds float, float* %4, i64 %141
  %148 = bitcast float* %147 to <16 x float>*
  store <16 x float> %146, <16 x float>* %148, align 64, !tbaa !1399
  %149 = or i64 %28, 240
  %150 = add i32 %30, 47040
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = bitcast float* %152 to <16 x float>*
  %154 = load <16 x float>, <16 x float>* %153, align 64, !tbaa !1396
  %155 = getelementptr inbounds float, float* %4, i64 %149
  %156 = bitcast float* %155 to <16 x float>*
  store <16 x float> %154, <16 x float>* %156, align 64, !tbaa !1399
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !50

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %157 = icmp slt i64 %indvars.iv.next8, %23
  br i1 %157, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_global_avg_pool2d(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.174, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1402
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.175, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !1416
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.176, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !1418
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !1432
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 64
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.177, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !1434
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 7
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.178, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !1437
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 7
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !1439
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !1443
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 1568, i32 224, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !1454
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 100352
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.181, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !1458
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !1472
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 64
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.182, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !1474
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 1
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !1477
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 1
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !1479
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 32
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.183, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !1483
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 32, i32 32, i32 32, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !1494
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 2048
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.184, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_nn_global_avg_pool2d_compute_(i8* %15, i8* %25, i32 %23)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_global_avg_pool2d_compute_(i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %3 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %4 = tail call i8* %3(i32 1, i32 %2, i64 8192, i32 2, i32 32)
  %5 = alloca %12, align 8
  %6 = getelementptr inbounds %12, %12* %5, i64 0, i32 0
  store i8* %4, i8** %6, align 8
  %7 = getelementptr inbounds %12, %12* %5, i64 0, i32 1
  store i8* %0, i8** %7, align 8
  %8 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %9 = bitcast %12* %5 to i8*
  %10 = call i32 %8(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.185, i8* nonnull %9, i32 0)
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %10, %entry ], [ 0, %call_end2 ], [ %17, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %12 = alloca %13, align 8
  %13 = getelementptr inbounds %13, %13* %12, i64 0, i32 0
  store i8* %1, i8** %13, align 8
  %14 = getelementptr inbounds %13, %13* %12, i64 0, i32 1
  store i8* %4, i8** %14, align 8
  %15 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %16 = bitcast %13* %12 to i8*
  %17 = call i32 %15(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.186, i8* nonnull %16, i32 0)
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %19 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %20 = call i32 %19(i32 1, i32 %2, i8* %4)
  br label %call_fail
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.185(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 63
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 64
  %14 = select i1 %13, i32 %12, i32 64
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 64
  %18 = select i1 %17, i32 %16, i32 64
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv14 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next15, %for_end3 ]
  %24 = trunc i64 %indvars.iv14 to i32
  %25 = shl i32 %24, 5
  %26 = mul nsw i64 %indvars.iv14, 1568
  %27 = sext i32 %25 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %28 = add nuw nsw i64 %indvars.iv, %27
  %29 = getelementptr inbounds float, float* %4, i64 %28
  store float 0.000000e+00, float* %29, align 4, !tbaa !1498
  %30 = add nsw i64 %indvars.iv, %26
  %31 = getelementptr inbounds float, float* %7, i64 %30
  %32 = load float, float* %31, align 4, !tbaa !1501
  %33 = fadd float %32, 0.000000e+00
  %34 = shl i64 %30, 32
  %sext = add i64 %34, 137438953472
  %35 = ashr exact i64 %sext, 32
  %36 = getelementptr inbounds float, float* %7, i64 %35
  %37 = load float, float* %36, align 4, !tbaa !1501
  %38 = fadd float %33, %37
  %39 = shl i64 %30, 32
  %sext16 = add i64 %39, 274877906944
  %40 = ashr exact i64 %sext16, 32
  %41 = getelementptr inbounds float, float* %7, i64 %40
  %42 = load float, float* %41, align 4, !tbaa !1501
  %43 = fadd float %38, %42
  %44 = shl i64 %30, 32
  %sext17 = add i64 %44, 412316860416
  %45 = ashr exact i64 %sext17, 32
  %46 = getelementptr inbounds float, float* %7, i64 %45
  %47 = load float, float* %46, align 4, !tbaa !1501
  %48 = fadd float %43, %47
  %49 = shl i64 %30, 32
  %sext18 = add i64 %49, 549755813888
  %50 = ashr exact i64 %sext18, 32
  %51 = getelementptr inbounds float, float* %7, i64 %50
  %52 = load float, float* %51, align 4, !tbaa !1501
  %53 = fadd float %48, %52
  %54 = shl i64 %30, 32
  %sext19 = add i64 %54, 687194767360
  %55 = ashr exact i64 %sext19, 32
  %56 = getelementptr inbounds float, float* %7, i64 %55
  %57 = load float, float* %56, align 4, !tbaa !1501
  %58 = fadd float %53, %57
  %59 = shl i64 %30, 32
  %sext20 = add i64 %59, 824633720832
  %60 = ashr exact i64 %sext20, 32
  %61 = getelementptr inbounds float, float* %7, i64 %60
  %62 = load float, float* %61, align 4, !tbaa !1501
  %63 = fadd float %58, %62
  %64 = shl i64 %30, 32
  %sext57 = add i64 %64, 962072674304
  %65 = ashr exact i64 %sext57, 32
  %66 = getelementptr inbounds float, float* %7, i64 %65
  %67 = load float, float* %66, align 4, !tbaa !1501
  %68 = fadd float %63, %67
  %69 = shl i64 %30, 32
  %sext21 = add i64 %69, 1099511627776
  %70 = ashr exact i64 %sext21, 32
  %71 = getelementptr inbounds float, float* %7, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !1501
  %73 = fadd float %68, %72
  %74 = shl i64 %30, 32
  %sext22 = add i64 %74, 1236950581248
  %75 = ashr exact i64 %sext22, 32
  %76 = getelementptr inbounds float, float* %7, i64 %75
  %77 = load float, float* %76, align 4, !tbaa !1501
  %78 = fadd float %73, %77
  %79 = shl i64 %30, 32
  %sext23 = add i64 %79, 1374389534720
  %80 = ashr exact i64 %sext23, 32
  %81 = getelementptr inbounds float, float* %7, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !1501
  %83 = fadd float %78, %82
  %84 = shl i64 %30, 32
  %sext24 = add i64 %84, 1511828488192
  %85 = ashr exact i64 %sext24, 32
  %86 = getelementptr inbounds float, float* %7, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !1501
  %88 = fadd float %83, %87
  %89 = shl i64 %30, 32
  %sext25 = add i64 %89, 1649267441664
  %90 = ashr exact i64 %sext25, 32
  %91 = getelementptr inbounds float, float* %7, i64 %90
  %92 = load float, float* %91, align 4, !tbaa !1501
  %93 = fadd float %88, %92
  %94 = shl i64 %30, 32
  %sext26 = add i64 %94, 1786706395136
  %95 = ashr exact i64 %sext26, 32
  %96 = getelementptr inbounds float, float* %7, i64 %95
  %97 = load float, float* %96, align 4, !tbaa !1501
  %98 = fadd float %93, %97
  %99 = shl i64 %30, 32
  %sext58 = add i64 %99, 1924145348608
  %100 = ashr exact i64 %sext58, 32
  %101 = getelementptr inbounds float, float* %7, i64 %100
  %102 = load float, float* %101, align 4, !tbaa !1501
  %103 = fadd float %98, %102
  %104 = shl i64 %30, 32
  %sext27 = add i64 %104, 2061584302080
  %105 = ashr exact i64 %sext27, 32
  %106 = getelementptr inbounds float, float* %7, i64 %105
  %107 = load float, float* %106, align 4, !tbaa !1501
  %108 = fadd float %103, %107
  %109 = shl i64 %30, 32
  %sext28 = add i64 %109, 2199023255552
  %110 = ashr exact i64 %sext28, 32
  %111 = getelementptr inbounds float, float* %7, i64 %110
  %112 = load float, float* %111, align 4, !tbaa !1501
  %113 = fadd float %108, %112
  %114 = shl i64 %30, 32
  %sext29 = add i64 %114, 2336462209024
  %115 = ashr exact i64 %sext29, 32
  %116 = getelementptr inbounds float, float* %7, i64 %115
  %117 = load float, float* %116, align 4, !tbaa !1501
  %118 = fadd float %113, %117
  %119 = shl i64 %30, 32
  %sext30 = add i64 %119, 2473901162496
  %120 = ashr exact i64 %sext30, 32
  %121 = getelementptr inbounds float, float* %7, i64 %120
  %122 = load float, float* %121, align 4, !tbaa !1501
  %123 = fadd float %118, %122
  %124 = shl i64 %30, 32
  %sext31 = add i64 %124, 2611340115968
  %125 = ashr exact i64 %sext31, 32
  %126 = getelementptr inbounds float, float* %7, i64 %125
  %127 = load float, float* %126, align 4, !tbaa !1501
  %128 = fadd float %123, %127
  %129 = shl i64 %30, 32
  %sext32 = add i64 %129, 2748779069440
  %130 = ashr exact i64 %sext32, 32
  %131 = getelementptr inbounds float, float* %7, i64 %130
  %132 = load float, float* %131, align 4, !tbaa !1501
  %133 = fadd float %128, %132
  %134 = shl i64 %30, 32
  %sext59 = add i64 %134, 2886218022912
  %135 = ashr exact i64 %sext59, 32
  %136 = getelementptr inbounds float, float* %7, i64 %135
  %137 = load float, float* %136, align 4, !tbaa !1501
  %138 = fadd float %133, %137
  %139 = shl i64 %30, 32
  %sext33 = add i64 %139, 3023656976384
  %140 = ashr exact i64 %sext33, 32
  %141 = getelementptr inbounds float, float* %7, i64 %140
  %142 = load float, float* %141, align 4, !tbaa !1501
  %143 = fadd float %138, %142
  %144 = shl i64 %30, 32
  %sext34 = add i64 %144, 3161095929856
  %145 = ashr exact i64 %sext34, 32
  %146 = getelementptr inbounds float, float* %7, i64 %145
  %147 = load float, float* %146, align 4, !tbaa !1501
  %148 = fadd float %143, %147
  %149 = shl i64 %30, 32
  %sext35 = add i64 %149, 3298534883328
  %150 = ashr exact i64 %sext35, 32
  %151 = getelementptr inbounds float, float* %7, i64 %150
  %152 = load float, float* %151, align 4, !tbaa !1501
  %153 = fadd float %148, %152
  %154 = shl i64 %30, 32
  %sext36 = add i64 %154, 3435973836800
  %155 = ashr exact i64 %sext36, 32
  %156 = getelementptr inbounds float, float* %7, i64 %155
  %157 = load float, float* %156, align 4, !tbaa !1501
  %158 = fadd float %153, %157
  %159 = shl i64 %30, 32
  %sext37 = add i64 %159, 3573412790272
  %160 = ashr exact i64 %sext37, 32
  %161 = getelementptr inbounds float, float* %7, i64 %160
  %162 = load float, float* %161, align 4, !tbaa !1501
  %163 = fadd float %158, %162
  %164 = shl i64 %30, 32
  %sext38 = add i64 %164, 3710851743744
  %165 = ashr exact i64 %sext38, 32
  %166 = getelementptr inbounds float, float* %7, i64 %165
  %167 = load float, float* %166, align 4, !tbaa !1501
  %168 = fadd float %163, %167
  %169 = shl i64 %30, 32
  %sext60 = add i64 %169, 3848290697216
  %170 = ashr exact i64 %sext60, 32
  %171 = getelementptr inbounds float, float* %7, i64 %170
  %172 = load float, float* %171, align 4, !tbaa !1501
  %173 = fadd float %168, %172
  %174 = shl i64 %30, 32
  %sext39 = add i64 %174, 3985729650688
  %175 = ashr exact i64 %sext39, 32
  %176 = getelementptr inbounds float, float* %7, i64 %175
  %177 = load float, float* %176, align 4, !tbaa !1501
  %178 = fadd float %173, %177
  %179 = shl i64 %30, 32
  %sext40 = add i64 %179, 4123168604160
  %180 = ashr exact i64 %sext40, 32
  %181 = getelementptr inbounds float, float* %7, i64 %180
  %182 = load float, float* %181, align 4, !tbaa !1501
  %183 = fadd float %178, %182
  %184 = shl i64 %30, 32
  %sext41 = add i64 %184, 4260607557632
  %185 = ashr exact i64 %sext41, 32
  %186 = getelementptr inbounds float, float* %7, i64 %185
  %187 = load float, float* %186, align 4, !tbaa !1501
  %188 = fadd float %183, %187
  %189 = shl i64 %30, 32
  %sext42 = add i64 %189, 4398046511104
  %190 = ashr exact i64 %sext42, 32
  %191 = getelementptr inbounds float, float* %7, i64 %190
  %192 = load float, float* %191, align 4, !tbaa !1501
  %193 = fadd float %188, %192
  %194 = shl i64 %30, 32
  %sext43 = add i64 %194, 4535485464576
  %195 = ashr exact i64 %sext43, 32
  %196 = getelementptr inbounds float, float* %7, i64 %195
  %197 = load float, float* %196, align 4, !tbaa !1501
  %198 = fadd float %193, %197
  %199 = shl i64 %30, 32
  %sext44 = add i64 %199, 4672924418048
  %200 = ashr exact i64 %sext44, 32
  %201 = getelementptr inbounds float, float* %7, i64 %200
  %202 = load float, float* %201, align 4, !tbaa !1501
  %203 = fadd float %198, %202
  %204 = shl i64 %30, 32
  %sext61 = add i64 %204, 4810363371520
  %205 = ashr exact i64 %sext61, 32
  %206 = getelementptr inbounds float, float* %7, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !1501
  %208 = fadd float %203, %207
  %209 = shl i64 %30, 32
  %sext45 = add i64 %209, 4947802324992
  %210 = ashr exact i64 %sext45, 32
  %211 = getelementptr inbounds float, float* %7, i64 %210
  %212 = load float, float* %211, align 4, !tbaa !1501
  %213 = fadd float %208, %212
  %214 = shl i64 %30, 32
  %sext46 = add i64 %214, 5085241278464
  %215 = ashr exact i64 %sext46, 32
  %216 = getelementptr inbounds float, float* %7, i64 %215
  %217 = load float, float* %216, align 4, !tbaa !1501
  %218 = fadd float %213, %217
  %219 = shl i64 %30, 32
  %sext47 = add i64 %219, 5222680231936
  %220 = ashr exact i64 %sext47, 32
  %221 = getelementptr inbounds float, float* %7, i64 %220
  %222 = load float, float* %221, align 4, !tbaa !1501
  %223 = fadd float %218, %222
  %224 = shl i64 %30, 32
  %sext48 = add i64 %224, 5360119185408
  %225 = ashr exact i64 %sext48, 32
  %226 = getelementptr inbounds float, float* %7, i64 %225
  %227 = load float, float* %226, align 4, !tbaa !1501
  %228 = fadd float %223, %227
  %229 = shl i64 %30, 32
  %sext49 = add i64 %229, 5497558138880
  %230 = ashr exact i64 %sext49, 32
  %231 = getelementptr inbounds float, float* %7, i64 %230
  %232 = load float, float* %231, align 4, !tbaa !1501
  %233 = fadd float %228, %232
  %234 = shl i64 %30, 32
  %sext50 = add i64 %234, 5634997092352
  %235 = ashr exact i64 %sext50, 32
  %236 = getelementptr inbounds float, float* %7, i64 %235
  %237 = load float, float* %236, align 4, !tbaa !1501
  %238 = fadd float %233, %237
  %239 = shl i64 %30, 32
  %sext62 = add i64 %239, 5772436045824
  %240 = ashr exact i64 %sext62, 32
  %241 = getelementptr inbounds float, float* %7, i64 %240
  %242 = load float, float* %241, align 4, !tbaa !1501
  %243 = fadd float %238, %242
  %244 = shl i64 %30, 32
  %sext51 = add i64 %244, 5909874999296
  %245 = ashr exact i64 %sext51, 32
  %246 = getelementptr inbounds float, float* %7, i64 %245
  %247 = load float, float* %246, align 4, !tbaa !1501
  %248 = fadd float %243, %247
  %249 = shl i64 %30, 32
  %sext52 = add i64 %249, 6047313952768
  %250 = ashr exact i64 %sext52, 32
  %251 = getelementptr inbounds float, float* %7, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !1501
  %253 = fadd float %248, %252
  %254 = shl i64 %30, 32
  %sext53 = add i64 %254, 6184752906240
  %255 = ashr exact i64 %sext53, 32
  %256 = getelementptr inbounds float, float* %7, i64 %255
  %257 = load float, float* %256, align 4, !tbaa !1501
  %258 = fadd float %253, %257
  %259 = shl i64 %30, 32
  %sext54 = add i64 %259, 6322191859712
  %260 = ashr exact i64 %sext54, 32
  %261 = getelementptr inbounds float, float* %7, i64 %260
  %262 = load float, float* %261, align 4, !tbaa !1501
  %263 = fadd float %258, %262
  %264 = shl i64 %30, 32
  %sext55 = add i64 %264, 6459630813184
  %265 = ashr exact i64 %sext55, 32
  %266 = getelementptr inbounds float, float* %7, i64 %265
  %267 = load float, float* %266, align 4, !tbaa !1501
  %268 = fadd float %263, %267
  %269 = shl i64 %30, 32
  %sext56 = add i64 %269, 6597069766656
  %270 = ashr exact i64 %sext56, 32
  %271 = getelementptr inbounds float, float* %7, i64 %270
  %272 = load float, float* %271, align 4, !tbaa !1501
  %273 = fadd float %268, %272
  store float %273, float* %29, align 4, !tbaa !1498
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next15 = add nsw i64 %indvars.iv14, 1
  %274 = icmp slt i64 %indvars.iv.next15, %23
  br i1 %274, label %for_begin1.preheader, label %for_end, !prof !5
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.186(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 63
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 64
  %14 = select i1 %13, i32 %12, i32 64
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 64
  %18 = select i1 %17, i32 %16, i32 64
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_begin1.preheader ]
  %24 = trunc i64 %indvars.iv to i32
  %25 = shl i32 %24, 5
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %7, i64 %26
  %28 = getelementptr inbounds float, float* %4, i64 %26
  %29 = bitcast float* %27 to <4 x float>*
  %30 = load <4 x float>, <4 x float>* %29, align 4, !tbaa !1498
  %31 = fmul <4 x float> %30, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %32 = bitcast float* %28 to <4 x float>*
  store <4 x float> %31, <4 x float>* %32, align 4, !tbaa !1504
  %33 = or i64 %26, 4
  %34 = getelementptr inbounds float, float* %7, i64 %33
  %35 = getelementptr inbounds float, float* %4, i64 %33
  %36 = bitcast float* %34 to <4 x float>*
  %37 = load <4 x float>, <4 x float>* %36, align 4, !tbaa !1498
  %38 = fmul <4 x float> %37, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %39 = bitcast float* %35 to <4 x float>*
  store <4 x float> %38, <4 x float>* %39, align 4, !tbaa !1504
  %40 = or i64 %26, 8
  %41 = getelementptr inbounds float, float* %7, i64 %40
  %42 = getelementptr inbounds float, float* %4, i64 %40
  %43 = bitcast float* %41 to <4 x float>*
  %44 = load <4 x float>, <4 x float>* %43, align 4, !tbaa !1498
  %45 = fmul <4 x float> %44, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %46 = bitcast float* %42 to <4 x float>*
  store <4 x float> %45, <4 x float>* %46, align 4, !tbaa !1504
  %47 = or i64 %26, 12
  %48 = getelementptr inbounds float, float* %7, i64 %47
  %49 = getelementptr inbounds float, float* %4, i64 %47
  %50 = bitcast float* %48 to <4 x float>*
  %51 = load <4 x float>, <4 x float>* %50, align 4, !tbaa !1498
  %52 = fmul <4 x float> %51, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %53 = bitcast float* %49 to <4 x float>*
  store <4 x float> %52, <4 x float>* %53, align 4, !tbaa !1504
  %54 = or i64 %26, 16
  %55 = getelementptr inbounds float, float* %7, i64 %54
  %56 = getelementptr inbounds float, float* %4, i64 %54
  %57 = bitcast float* %55 to <4 x float>*
  %58 = load <4 x float>, <4 x float>* %57, align 4, !tbaa !1498
  %59 = fmul <4 x float> %58, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %60 = bitcast float* %56 to <4 x float>*
  store <4 x float> %59, <4 x float>* %60, align 4, !tbaa !1504
  %61 = or i64 %26, 20
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = getelementptr inbounds float, float* %4, i64 %61
  %64 = bitcast float* %62 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 4, !tbaa !1498
  %66 = fmul <4 x float> %65, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %67 = bitcast float* %63 to <4 x float>*
  store <4 x float> %66, <4 x float>* %67, align 4, !tbaa !1504
  %68 = or i64 %26, 24
  %69 = getelementptr inbounds float, float* %7, i64 %68
  %70 = getelementptr inbounds float, float* %4, i64 %68
  %71 = bitcast float* %69 to <4 x float>*
  %72 = load <4 x float>, <4 x float>* %71, align 4, !tbaa !1498
  %73 = fmul <4 x float> %72, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %74 = bitcast float* %70 to <4 x float>*
  store <4 x float> %73, <4 x float>* %74, align 4, !tbaa !1504
  %75 = or i64 %26, 28
  %76 = getelementptr inbounds float, float* %7, i64 %75
  %77 = getelementptr inbounds float, float* %4, i64 %75
  %78 = bitcast float* %76 to <4 x float>*
  %79 = load <4 x float>, <4 x float>* %78, align 4, !tbaa !1498
  %80 = fmul <4 x float> %79, <float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000, float 0x3F94E5E0A0000000>
  %81 = bitcast float* %77 to <4 x float>*
  store <4 x float> %80, <4 x float>* %81, align 4, !tbaa !1504
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %82 = icmp slt i64 %indvars.iv.next, %23
  br i1 %82, label %for_begin1.preheader, label %for_end, !prof !5

for_end:                                          ; preds = %for_begin1.preheader, %entry
  ret i32 0
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 7
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.187, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1507
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !1521
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !1524
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !1526
  %32 = getelementptr inbounds i8, i8* %0, i64 40
  %33 = bitcast i8* %32 to %1**
  %34 = load %1*, %1** %33, align 8
  %35 = getelementptr inbounds i8, i8* %1, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4, !tbaa !1530
  %38 = getelementptr inbounds i8, i8* %0, i64 48
  %39 = bitcast i8* %38 to %1**
  %40 = load %1*, %1** %39, align 8
  %41 = getelementptr inbounds i8, i8* %1, i64 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 4, !tbaa !1532
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  %66 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %77 = load i64*, i64** %76, align 8
  %78 = getelementptr inbounds %1, %1* %34, i64 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds %1, %1* %34, i64 0, i32 4
  %81 = load i64*, i64** %80, align 8
  %82 = getelementptr inbounds %1, %1* %34, i64 0, i32 5
  %83 = load i64*, i64** %82, align 8
  %84 = getelementptr inbounds %1, %1* %40, i64 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %1, %1* %40, i64 0, i32 4
  %87 = load i64*, i64** %86, align 8
  %88 = getelementptr inbounds %1, %1* %40, i64 0, i32 5
  %89 = load i64*, i64** %88, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %90(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.188, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %91 = getelementptr inbounds i8, i8* %1, i64 4
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 4, !tbaa !1535
  switch i32 %93, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %94 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %94(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.189, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.190, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.191, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %97(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.192, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %37, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ]

assert_fail11:                                    ; preds = %assert_end10
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.193, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  switch i32 %43, label %assert_fail13 [
    i32 13, label %assert_end14
    i32 7, label %assert_end14
    i32 4, label %assert_end14
    i32 3, label %assert_end14
  ]

assert_fail13:                                    ; preds = %assert_end12
  %99 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %99(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.194, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12, %assert_end12, %assert_end12, %assert_end12
  %100 = icmp eq i32 %51, 1
  br i1 %100, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 5
  br i1 %104, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %106 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 2
  %109 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 32
  %112 = and i1 %108, %111
  %113 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %114 = load i16, i16* %113, align 2
  %115 = icmp eq i16 %114, 1
  %116 = and i1 %112, %115
  br i1 %116, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %118 = load i64, i64* %47, align 8, !tbaa !1537
  %119 = trunc i64 %118 to i32
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %122 = getelementptr inbounds i64, i64* %47, i64 1
  %123 = load i64, i64* %122, align 8, !tbaa !1551
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %127 = getelementptr inbounds i64, i64* %47, i64 2
  %128 = load i64, i64* %127, align 8, !tbaa !1553
  %129 = trunc i64 %128 to i32
  %130 = icmp eq i32 %129, 56
  br i1 %130, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %132 = getelementptr inbounds i64, i64* %47, i64 3
  %133 = load i64, i64* %132, align 8, !tbaa !1556
  %134 = trunc i64 %133 to i32
  %135 = icmp eq i32 %134, 56
  br i1 %135, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %136 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %136(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %137 = getelementptr inbounds i64, i64* %47, i64 4
  %138 = load i64, i64* %137, align 8, !tbaa !1558
  %139 = trunc i64 %138 to i32
  %140 = icmp eq i32 %139, 256
  br i1 %140, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %141 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %141(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.196, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %142 = icmp eq i64* %49, null
  br i1 %142, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end30
  %143 = getelementptr inbounds i64, i64* %49, i64 1
  %144 = bitcast i64* %143 to <4 x i64>*
  %145 = load <4 x i64>, <4 x i64>* %144, align 8, !tbaa !1562
  %146 = trunc <4 x i64> %145 to <4 x i32>
  %147 = icmp eq <4 x i32> %146, <i32 802816, i32 14336, i32 256, i32 1>
  %148 = load i64, i64* %49, align 8, !tbaa !1573
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 802816
  %rdx.shuf203 = shufflevector <4 x i1> %147, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx204 = and <4 x i1> %147, %rdx.shuf203
  %rdx.shuf205 = shufflevector <4 x i1> %bin.rdx204, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx206 = and <4 x i1> %bin.rdx204, %rdx.shuf205
  %151 = extractelement <4 x i1> %bin.rdx206, i32 0
  %152 = and i1 %151, %150
  br i1 %152, label %if_end, label %assert_fail31, !prof !5

if_end:                                           ; preds = %assert_end30, %if_then
  %153 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %154 = load i64, i64* %153, align 8
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %assert_end34, label %assert_fail33, !prof !5

assert_fail31:                                    ; preds = %if_then
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.197, i64 0, i64 0))
  ret i32 -1

assert_fail33:                                    ; preds = %if_end
  %157 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %157(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %if_end
  %158 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 6
  br i1 %160, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %162 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 2
  %165 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %166 = load i8, i8* %165, align 1
  %167 = icmp eq i8 %166, 32
  %168 = and i1 %164, %167
  %169 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %170 = load i16, i16* %169, align 2
  %171 = icmp eq i16 %170, 1
  %172 = and i1 %168, %171
  br i1 %172, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %174 = load i64, i64* %57, align 8, !tbaa !1577
  %175 = trunc i64 %174 to i32
  %176 = icmp eq i32 %175, 8
  br i1 %176, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %177(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.151, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %178 = getelementptr inbounds i64, i64* %57, i64 1
  %179 = load i64, i64* %178, align 8, !tbaa !1591
  %180 = trunc i64 %179 to i32
  %181 = icmp eq i32 %180, 1
  br i1 %181, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %183 = getelementptr inbounds i64, i64* %57, i64 2
  %184 = load i64, i64* %183, align 8, !tbaa !1593
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 1
  br i1 %186, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %187 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %187(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %188 = getelementptr inbounds i64, i64* %57, i64 3
  %189 = load i64, i64* %188, align 8, !tbaa !1596
  %190 = trunc i64 %189 to i32
  %191 = icmp eq i32 %190, 1
  br i1 %191, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %192 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %192(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %193 = getelementptr inbounds i64, i64* %57, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !1598
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 256
  br i1 %196, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.171, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %198 = getelementptr inbounds i64, i64* %57, i64 5
  %199 = load i64, i64* %198, align 8, !tbaa !1602
  %200 = trunc i64 %199 to i32
  %201 = icmp eq i32 %200, 64
  br i1 %201, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %202 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %202(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.198, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %203 = icmp eq i64* %59, null
  br i1 %203, label %if_end52, label %if_then51, !prof !50

if_then51:                                        ; preds = %assert_end50
  %204 = getelementptr inbounds i64, i64* %59, i64 2
  %205 = bitcast i64* %204 to <4 x i64>*
  %206 = load <4 x i64>, <4 x i64>* %205, align 8, !tbaa !1604
  %207 = trunc <4 x i64> %206 to <4 x i32>
  %208 = icmp eq <4 x i32> %207, <i32 16384, i32 16384, i32 64, i32 1>
  %209 = getelementptr inbounds i64, i64* %59, i64 1
  %210 = load i64, i64* %209, align 8, !tbaa !1615
  %211 = trunc i64 %210 to i32
  %212 = icmp eq i32 %211, 16384
  %213 = load i64, i64* %59, align 8, !tbaa !1619
  %214 = trunc i64 %213 to i32
  %215 = icmp eq i32 %214, 16384
  %rdx.shuf199 = shufflevector <4 x i1> %208, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx200 = and <4 x i1> %208, %rdx.shuf199
  %rdx.shuf201 = shufflevector <4 x i1> %bin.rdx200, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx202 = and <4 x i1> %bin.rdx200, %rdx.shuf201
  %216 = extractelement <4 x i1> %bin.rdx202, i32 0
  %217 = and i1 %216, %212
  %218 = and i1 %217, %215
  br i1 %218, label %if_end52, label %assert_fail53, !prof !5

if_end52:                                         ; preds = %assert_end50, %if_then51
  %219 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %220 = load i64, i64* %219, align 8
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %assert_end56, label %assert_fail55, !prof !5

assert_fail53:                                    ; preds = %if_then51
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([279 x i8], [279 x i8]* @.str.199, i64 0, i64 0))
  ret i32 -1

assert_fail55:                                    ; preds = %if_end52
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %if_end52
  %224 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 1
  br i1 %226, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %227(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %228 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %53, %229
  br i1 %230, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %231(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %232 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, 5
  br i1 %234, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %236 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %237 = load i8, i8* %236, align 1
  %238 = icmp eq i8 %237, 2
  %239 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 32
  %242 = and i1 %238, %241
  %243 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %244 = load i16, i16* %243, align 2
  %245 = icmp eq i16 %244, 1
  %246 = and i1 %242, %245
  br i1 %246, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %247(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %248 = load i64, i64* %63, align 8, !tbaa !1621
  %249 = trunc i64 %248 to i32
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %251(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %252 = getelementptr inbounds i64, i64* %63, i64 1
  %253 = load i64, i64* %252, align 8, !tbaa !1635
  %254 = trunc i64 %253 to i32
  %255 = icmp eq i32 %254, 8
  br i1 %255, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %256(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.154, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %257 = getelementptr inbounds i64, i64* %63, i64 2
  %258 = load i64, i64* %257, align 8, !tbaa !1637
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %262 = getelementptr inbounds i64, i64* %63, i64 3
  %263 = load i64, i64* %262, align 8, !tbaa !1640
  %264 = trunc i64 %263 to i32
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %266(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %267 = getelementptr inbounds i64, i64* %63, i64 4
  %268 = load i64, i64* %267, align 8, !tbaa !1642
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 64
  br i1 %270, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %271(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.200, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %272 = icmp eq i64* %65, null
  br i1 %272, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %273 = getelementptr inbounds i64, i64* %65, i64 1
  %274 = bitcast i64* %273 to <4 x i64>*
  %275 = load <4 x i64>, <4 x i64>* %274, align 8, !tbaa !1646
  %276 = trunc <4 x i64> %275 to <4 x i32>
  %277 = icmp eq <4 x i32> %276, <i32 64, i32 64, i32 64, i32 1>
  %278 = load i64, i64* %65, align 8, !tbaa !1657
  %279 = trunc i64 %278 to i32
  %280 = icmp eq i32 %279, 512
  %rdx.shuf195 = shufflevector <4 x i1> %277, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx196 = and <4 x i1> %277, %rdx.shuf195
  %rdx.shuf197 = shufflevector <4 x i1> %bin.rdx196, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx198 = and <4 x i1> %bin.rdx196, %rdx.shuf197
  %281 = extractelement <4 x i1> %bin.rdx198, i32 0
  %282 = and i1 %281, %280
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.201, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %53, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %301 = load i8, i8* %300, align 1
  %302 = icmp eq i8 %301, 2
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = and i1 %302, %305
  %307 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %308 = load i16, i16* %307, align 2
  %309 = icmp eq i16 %308, 1
  %310 = and i1 %306, %309
  br i1 %310, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %312 = load i64, i64* %69, align 8, !tbaa !1661
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %316 = getelementptr inbounds i64, i64* %69, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !1675
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 8
  br i1 %319, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.156, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %321 = getelementptr inbounds i64, i64* %69, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !1677
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 1
  br i1 %324, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %326 = getelementptr inbounds i64, i64* %69, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !1680
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 1
  br i1 %329, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %331 = getelementptr inbounds i64, i64* %69, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !1682
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 64
  br i1 %334, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.202, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %336 = icmp eq i64* %71, null
  br i1 %336, label %if_end100, label %if_then99, !prof !50

if_then99:                                        ; preds = %assert_end98
  %337 = getelementptr inbounds i64, i64* %71, i64 1
  %338 = bitcast i64* %337 to <4 x i64>*
  %339 = load <4 x i64>, <4 x i64>* %338, align 8, !tbaa !1686
  %340 = trunc <4 x i64> %339 to <4 x i32>
  %341 = icmp eq <4 x i32> %340, <i32 64, i32 64, i32 64, i32 1>
  %342 = load i64, i64* %71, align 8, !tbaa !1697
  %343 = trunc i64 %342 to i32
  %344 = icmp eq i32 %343, 512
  %rdx.shuf191 = shufflevector <4 x i1> %341, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx192 = and <4 x i1> %341, %rdx.shuf191
  %rdx.shuf193 = shufflevector <4 x i1> %bin.rdx192, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx194 = and <4 x i1> %bin.rdx192, %rdx.shuf193
  %345 = extractelement <4 x i1> %bin.rdx194, i32 0
  %346 = and i1 %345, %344
  br i1 %346, label %if_end100, label %assert_fail101, !prof !5

if_end100:                                        ; preds = %assert_end98, %if_then99
  %347 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %348 = load i64, i64* %347, align 8
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %assert_end104, label %assert_fail103, !prof !5

assert_fail101:                                   ; preds = %if_then99
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %350(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.203, i64 0, i64 0))
  ret i32 -1

assert_fail103:                                   ; preds = %if_end100
  %351 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %351(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %if_end100
  %352 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %353 = load i32, i32* %352, align 4
  %354 = icmp eq i32 %353, 1
  br i1 %354, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %355 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %355(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %356 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %357 = load i32, i32* %356, align 4
  %358 = icmp eq i32 %53, %357
  br i1 %358, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %359 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %359(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %360 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %361 = load i32, i32* %360, align 4
  %362 = icmp eq i32 %361, 5
  br i1 %362, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %364 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %365 = load i8, i8* %364, align 1
  %366 = icmp eq i8 %365, 2
  %367 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %368 = load i8, i8* %367, align 1
  %369 = icmp eq i8 %368, 32
  %370 = and i1 %366, %369
  %371 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %372 = load i16, i16* %371, align 2
  %373 = icmp eq i16 %372, 1
  %374 = and i1 %370, %373
  br i1 %374, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %375 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %375(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %376 = load i64, i64* %75, align 8, !tbaa !1701
  %377 = trunc i64 %376 to i32
  %378 = icmp eq i32 %377, 1
  br i1 %378, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %379 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %379(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %380 = getelementptr inbounds i64, i64* %75, i64 1
  %381 = load i64, i64* %380, align 8, !tbaa !1715
  %382 = trunc i64 %381 to i32
  %383 = icmp eq i32 %382, 8
  br i1 %383, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %384 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %384(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.158, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %385 = getelementptr inbounds i64, i64* %75, i64 2
  %386 = load i64, i64* %385, align 8, !tbaa !1717
  %387 = trunc i64 %386 to i32
  %388 = icmp eq i32 %387, 1
  br i1 %388, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %390 = getelementptr inbounds i64, i64* %75, i64 3
  %391 = load i64, i64* %390, align 8, !tbaa !1720
  %392 = trunc i64 %391 to i32
  %393 = icmp eq i32 %392, 1
  br i1 %393, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %394 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %394(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %395 = getelementptr inbounds i64, i64* %75, i64 4
  %396 = load i64, i64* %395, align 8, !tbaa !1722
  %397 = trunc i64 %396 to i32
  %398 = icmp eq i32 %397, 64
  br i1 %398, label %assert_end122, label %assert_fail121, !prof !5

assert_fail121:                                   ; preds = %assert_end120
  %399 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %399(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.204, i64 0, i64 0))
  ret i32 -1

assert_end122:                                    ; preds = %assert_end120
  %400 = icmp eq i64* %77, null
  br i1 %400, label %if_end124, label %if_then123, !prof !50

if_then123:                                       ; preds = %assert_end122
  %401 = getelementptr inbounds i64, i64* %77, i64 1
  %402 = bitcast i64* %401 to <4 x i64>*
  %403 = load <4 x i64>, <4 x i64>* %402, align 8, !tbaa !1726
  %404 = trunc <4 x i64> %403 to <4 x i32>
  %405 = icmp eq <4 x i32> %404, <i32 64, i32 64, i32 64, i32 1>
  %406 = load i64, i64* %77, align 8, !tbaa !1737
  %407 = trunc i64 %406 to i32
  %408 = icmp eq i32 %407, 512
  %rdx.shuf187 = shufflevector <4 x i1> %405, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx188 = and <4 x i1> %405, %rdx.shuf187
  %rdx.shuf189 = shufflevector <4 x i1> %bin.rdx188, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx190 = and <4 x i1> %bin.rdx188, %rdx.shuf189
  %409 = extractelement <4 x i1> %bin.rdx190, i32 0
  %410 = and i1 %409, %408
  br i1 %410, label %if_end124, label %assert_fail125, !prof !5

if_end124:                                        ; preds = %assert_end122, %if_then123
  %411 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %412 = load i64, i64* %411, align 8
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %assert_end128, label %assert_fail127, !prof !5

assert_fail125:                                   ; preds = %if_then123
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %414(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.205, i64 0, i64 0))
  ret i32 -1

assert_fail127:                                   ; preds = %if_end124
  %415 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %415(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %if_end124
  %416 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %417 = load i32, i32* %416, align 4
  %418 = icmp eq i32 %417, 1
  br i1 %418, label %assert_end130, label %assert_fail129, !prof !5

assert_fail129:                                   ; preds = %assert_end128
  %419 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %419(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end130:                                    ; preds = %assert_end128
  %420 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %421 = load i32, i32* %420, align 4
  %422 = icmp eq i32 %53, %421
  br i1 %422, label %assert_end132, label %assert_fail131, !prof !5

assert_fail131:                                   ; preds = %assert_end130
  %423 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %423(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end132:                                    ; preds = %assert_end130
  %424 = getelementptr inbounds %1, %1* %34, i64 0, i32 2
  %425 = load i32, i32* %424, align 4
  %426 = icmp eq i32 %425, 5
  br i1 %426, label %assert_end134, label %assert_fail133, !prof !5

assert_fail133:                                   ; preds = %assert_end132
  %427 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %427(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %assert_end132
  %428 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 0
  %429 = load i8, i8* %428, align 1
  %430 = icmp eq i8 %429, 2
  %431 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 1
  %432 = load i8, i8* %431, align 1
  %433 = icmp eq i8 %432, 32
  %434 = and i1 %430, %433
  %435 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 2
  %436 = load i16, i16* %435, align 2
  %437 = icmp eq i16 %436, 1
  %438 = and i1 %434, %437
  br i1 %438, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %439 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %439(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %440 = load i64, i64* %81, align 8, !tbaa !1741
  %441 = trunc i64 %440 to i32
  %442 = icmp eq i32 %441, 1
  br i1 %442, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %443 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %443(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.116, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %444 = getelementptr inbounds i64, i64* %81, i64 1
  %445 = load i64, i64* %444, align 8, !tbaa !1755
  %446 = trunc i64 %445 to i32
  %447 = icmp eq i32 %446, 8
  br i1 %447, label %assert_end140, label %assert_fail139, !prof !5

assert_fail139:                                   ; preds = %assert_end138
  %448 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %448(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.160, i64 0, i64 0))
  ret i32 -1

assert_end140:                                    ; preds = %assert_end138
  %449 = getelementptr inbounds i64, i64* %81, i64 2
  %450 = load i64, i64* %449, align 8, !tbaa !1757
  %451 = trunc i64 %450 to i32
  %452 = icmp eq i32 %451, 28
  br i1 %452, label %assert_end142, label %assert_fail141, !prof !5

assert_fail141:                                   ; preds = %assert_end140
  %453 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %453(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.118, i64 0, i64 0))
  ret i32 -1

assert_end142:                                    ; preds = %assert_end140
  %454 = getelementptr inbounds i64, i64* %81, i64 3
  %455 = load i64, i64* %454, align 8, !tbaa !1760
  %456 = trunc i64 %455 to i32
  %457 = icmp eq i32 %456, 28
  br i1 %457, label %assert_end144, label %assert_fail143, !prof !5

assert_fail143:                                   ; preds = %assert_end142
  %458 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %458(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.119, i64 0, i64 0))
  ret i32 -1

assert_end144:                                    ; preds = %assert_end142
  %459 = getelementptr inbounds i64, i64* %81, i64 4
  %460 = load i64, i64* %459, align 8, !tbaa !1762
  %461 = trunc i64 %460 to i32
  %462 = icmp eq i32 %461, 64
  br i1 %462, label %assert_end146, label %assert_fail145, !prof !5

assert_fail145:                                   ; preds = %assert_end144
  %463 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %463(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.206, i64 0, i64 0))
  ret i32 -1

assert_end146:                                    ; preds = %assert_end144
  %464 = icmp eq i64* %83, null
  br i1 %464, label %if_end148, label %if_then147, !prof !50

if_then147:                                       ; preds = %assert_end146
  %465 = getelementptr inbounds i64, i64* %83, i64 1
  %466 = bitcast i64* %465 to <4 x i64>*
  %467 = load <4 x i64>, <4 x i64>* %466, align 8, !tbaa !1766
  %468 = trunc <4 x i64> %467 to <4 x i32>
  %469 = icmp eq <4 x i32> %468, <i32 50176, i32 1792, i32 64, i32 1>
  %470 = load i64, i64* %83, align 8, !tbaa !1777
  %471 = trunc i64 %470 to i32
  %472 = icmp eq i32 %471, 401408
  %rdx.shuf183 = shufflevector <4 x i1> %469, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx184 = and <4 x i1> %469, %rdx.shuf183
  %rdx.shuf185 = shufflevector <4 x i1> %bin.rdx184, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx186 = and <4 x i1> %bin.rdx184, %rdx.shuf185
  %473 = extractelement <4 x i1> %bin.rdx186, i32 0
  %474 = and i1 %473, %472
  br i1 %474, label %if_end148, label %assert_fail149, !prof !5

if_end148:                                        ; preds = %assert_end146, %if_then147
  %475 = getelementptr inbounds %1, %1* %34, i64 0, i32 6
  %476 = load i64, i64* %475, align 8
  %477 = icmp eq i64 %476, 0
  br i1 %477, label %assert_end152, label %assert_fail151, !prof !5

assert_fail149:                                   ; preds = %if_then147
  %478 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %478(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.207, i64 0, i64 0))
  ret i32 -1

assert_fail151:                                   ; preds = %if_end148
  %479 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %479(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end152:                                    ; preds = %if_end148
  %480 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 0
  %481 = load i32, i32* %480, align 4
  %482 = icmp eq i32 %481, 1
  br i1 %482, label %assert_end154, label %assert_fail153, !prof !5

assert_fail153:                                   ; preds = %assert_end152
  %483 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %483(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end154:                                    ; preds = %assert_end152
  %484 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 1
  %485 = load i32, i32* %484, align 4
  %486 = icmp eq i32 %53, %485
  br i1 %486, label %assert_end156, label %assert_fail155, !prof !5

assert_fail155:                                   ; preds = %assert_end154
  %487 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %487(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end156:                                    ; preds = %assert_end154
  %488 = getelementptr inbounds %1, %1* %40, i64 0, i32 2
  %489 = load i32, i32* %488, align 4
  %490 = icmp eq i32 %489, 5
  br i1 %490, label %assert_end158, label %assert_fail157, !prof !5

assert_fail157:                                   ; preds = %assert_end156
  %491 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %491(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.208, i64 0, i64 0))
  ret i32 -1

assert_end158:                                    ; preds = %assert_end156
  %492 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 0
  %493 = load i8, i8* %492, align 1
  %494 = icmp eq i8 %493, 2
  %495 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 1
  %496 = load i8, i8* %495, align 1
  %497 = icmp eq i8 %496, 32
  %498 = and i1 %494, %497
  %499 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 2
  %500 = load i16, i16* %499, align 2
  %501 = icmp eq i16 %500, 1
  %502 = and i1 %498, %501
  br i1 %502, label %assert_end160, label %assert_fail159, !prof !5

assert_fail159:                                   ; preds = %assert_end158
  %503 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %503(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.209, i64 0, i64 0))
  ret i32 -1

assert_end160:                                    ; preds = %assert_end158
  %504 = load i64, i64* %87, align 8, !tbaa !1781
  %505 = trunc i64 %504 to i32
  %506 = icmp eq i32 %505, 1
  br i1 %506, label %assert_end162, label %assert_fail161, !prof !5

assert_fail161:                                   ; preds = %assert_end160
  %507 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %507(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.210, i64 0, i64 0))
  ret i32 -1

assert_end162:                                    ; preds = %assert_end160
  %508 = getelementptr inbounds i64, i64* %87, i64 1
  %509 = load i64, i64* %508, align 8, !tbaa !1795
  %510 = trunc i64 %509 to i32
  %511 = icmp eq i32 %510, 8
  br i1 %511, label %assert_end164, label %assert_fail163, !prof !5

assert_fail163:                                   ; preds = %assert_end162
  %512 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %512(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.211, i64 0, i64 0))
  ret i32 -1

assert_end164:                                    ; preds = %assert_end162
  %513 = getelementptr inbounds i64, i64* %87, i64 2
  %514 = load i64, i64* %513, align 8, !tbaa !1797
  %515 = trunc i64 %514 to i32
  %516 = icmp eq i32 %515, 28
  br i1 %516, label %assert_end166, label %assert_fail165, !prof !5

assert_fail165:                                   ; preds = %assert_end164
  %517 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %517(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.212, i64 0, i64 0))
  ret i32 -1

assert_end166:                                    ; preds = %assert_end164
  %518 = getelementptr inbounds i64, i64* %87, i64 3
  %519 = load i64, i64* %518, align 8, !tbaa !1800
  %520 = trunc i64 %519 to i32
  %521 = icmp eq i32 %520, 28
  br i1 %521, label %assert_end168, label %assert_fail167, !prof !5

assert_fail167:                                   ; preds = %assert_end166
  %522 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %522(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.213, i64 0, i64 0))
  ret i32 -1

assert_end168:                                    ; preds = %assert_end166
  %523 = getelementptr inbounds i64, i64* %87, i64 4
  %524 = load i64, i64* %523, align 8, !tbaa !1802
  %525 = trunc i64 %524 to i32
  %526 = icmp eq i32 %525, 64
  br i1 %526, label %assert_end170, label %assert_fail169, !prof !5

assert_fail169:                                   ; preds = %assert_end168
  %527 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %527(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.214, i64 0, i64 0))
  ret i32 -1

assert_end170:                                    ; preds = %assert_end168
  %528 = icmp eq i64* %89, null
  br i1 %528, label %if_end172, label %if_then171, !prof !50

if_then171:                                       ; preds = %assert_end170
  %529 = getelementptr inbounds i64, i64* %89, i64 1
  %530 = bitcast i64* %529 to <4 x i64>*
  %531 = load <4 x i64>, <4 x i64>* %530, align 8, !tbaa !1806
  %532 = trunc <4 x i64> %531 to <4 x i32>
  %533 = icmp eq <4 x i32> %532, <i32 50176, i32 1792, i32 64, i32 1>
  %534 = load i64, i64* %89, align 8, !tbaa !1817
  %535 = trunc i64 %534 to i32
  %536 = icmp eq i32 %535, 401408
  %rdx.shuf = shufflevector <4 x i1> %533, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %533, %rdx.shuf
  %rdx.shuf181 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx182 = and <4 x i1> %bin.rdx, %rdx.shuf181
  %537 = extractelement <4 x i1> %bin.rdx182, i32 0
  %538 = and i1 %537, %536
  br i1 %538, label %if_end172, label %assert_fail173, !prof !5

if_end172:                                        ; preds = %assert_end170, %if_then171
  %539 = getelementptr inbounds %1, %1* %40, i64 0, i32 6
  %540 = load i64, i64* %539, align 8
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %assert_end176, label %assert_fail175, !prof !5

assert_fail173:                                   ; preds = %if_then171
  %542 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %542(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.215, i64 0, i64 0))
  ret i32 -1

assert_fail175:                                   ; preds = %if_end172
  %543 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %543(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.216, i64 0, i64 0))
  ret i32 -1

assert_end176:                                    ; preds = %if_end172
  %544 = getelementptr inbounds %1, %1* %40, i64 0, i32 1, i32 0
  %545 = load i32, i32* %544, align 4
  %546 = icmp eq i32 %545, 1
  br i1 %546, label %assert_end178, label %assert_fail177, !prof !5

assert_fail177:                                   ; preds = %assert_end176
  %547 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %547(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.217, i64 0, i64 0))
  ret i32 -1

assert_end178:                                    ; preds = %assert_end176
  %548 = getelementptr inbounds %1, %1* %40, i64 0, i32 1, i32 1
  %549 = load i32, i32* %548, align 4
  %550 = icmp eq i32 %53, %549
  br i1 %550, label %assert_end180, label %assert_fail179, !prof !5

assert_fail179:                                   ; preds = %assert_end178
  %551 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %551(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.218, i64 0, i64 0))
  ret i32 -1

assert_end180:                                    ; preds = %assert_end178
  %552 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2_compute_(i8* %45, i8* %55, i8* %85, i8* %61, i8* %67, i8* %73, i8* %79, i32 %53)
  ret i32 %552
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_2_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %8 = alloca %14, align 8
  %9 = getelementptr inbounds %14, %14* %8, i64 0, i32 0
  store i8* %0, i8** %9, align 8
  %10 = getelementptr inbounds %14, %14* %8, i64 0, i32 1
  store i8* %1, i8** %10, align 8
  %11 = getelementptr inbounds %14, %14* %8, i64 0, i32 2
  store i8* %2, i8** %11, align 8
  %12 = getelementptr inbounds %14, %14* %8, i64 0, i32 3
  store i8* %3, i8** %12, align 8
  %13 = getelementptr inbounds %14, %14* %8, i64 0, i32 4
  store i8* %4, i8** %13, align 8
  %14 = getelementptr inbounds %14, %14* %8, i64 0, i32 5
  store i8* %5, i8** %14, align 8
  %15 = getelementptr inbounds %14, %14* %8, i64 0, i32 6
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %14, %14* %8, i64 0, i32 7
  store i32 %7, i32* %16, align 8
  %17 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %18 = bitcast %14* %8 to i8*
  %19 = call i32 %17(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.219, i8* nonnull %18, i32 0)
  ret i32 %19
}

define private i32 @__tvm_parallel_lambda.219(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %2, i64 48
  %21 = bitcast i8* %20 to float**
  %22 = load float*, float** %21, align 8
  %23 = getelementptr inbounds i8, i8* %2, i64 56
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, 223
  %29 = sdiv i32 %28, %27
  %30 = mul nsw i32 %29, %0
  %31 = icmp slt i32 %30, 224
  %32 = select i1 %31, i32 %30, i32 224
  %33 = add nsw i32 %0, 1
  %34 = mul nsw i32 %29, %33
  %35 = icmp slt i32 %34, 224
  %36 = select i1 %35, i32 %34, i32 224
  %37 = icmp slt i32 %32, %36
  br i1 %37, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %38 = add i32 %32, 1
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, -1
  %41 = sext i32 %36 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_end6.6
  %indvars.iv36 = phi i64 [ %40, %for_body.preheader ], [ %indvars.iv.next37, %for_end6.6 ]
  %42 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %43 = tail call i8* %42(i32 1, i32 %25, i64 7168, i32 2, i32 32)
  %44 = trunc i64 %indvars.iv36 to i32
  %45 = srem i32 %44, 28
  %46 = mul nsw i32 %45, 28672
  %47 = sdiv i32 %44, 28
  %48 = shl i32 %47, 14
  %49 = sext i32 %48 to i64
  %50 = sext i32 %46 to i64
  %51 = bitcast i8* %43 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %51, align 64, !tbaa !1821
  %52 = getelementptr inbounds i8, i8* %43, i64 256
  %53 = bitcast i8* %52 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %53, align 64, !tbaa !1821
  %54 = getelementptr inbounds i8, i8* %43, i64 512
  %55 = bitcast i8* %54 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %55, align 64, !tbaa !1821
  %56 = getelementptr inbounds i8, i8* %43, i64 768
  %57 = bitcast i8* %56 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %57, align 64, !tbaa !1821
  br label %for_body5

for_end:                                          ; preds = %for_end6.6, %entry
  ret i32 0

for_body5:                                        ; preds = %for_body5, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_body5 ]
  %58 = phi <64 x float> [ zeroinitializer, %for_body ], [ %90, %for_body5 ]
  %59 = phi <64 x float> [ zeroinitializer, %for_body ], [ %84, %for_body5 ]
  %60 = phi <64 x float> [ zeroinitializer, %for_body ], [ %78, %for_body5 ]
  %61 = phi <64 x float> [ zeroinitializer, %for_body ], [ %72, %for_body5 ]
  %62 = add nsw i64 %indvars.iv, %50
  %63 = getelementptr inbounds float, float* %4, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !1824
  %65 = insertelement <64 x float> undef, float %64, i32 0
  %66 = shufflevector <64 x float> %65, <64 x float> undef, <64 x i32> zeroinitializer
  %67 = shl i64 %indvars.iv, 6
  %68 = add nuw nsw i64 %67, %49
  %69 = getelementptr inbounds float, float* %7, i64 %68
  %70 = bitcast float* %69 to <64 x float>*
  %71 = load <64 x float>, <64 x float>* %70, align 64, !tbaa !1827
  %72 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %66, <64 x float> %71, <64 x float> %61)
  %73 = add nsw i64 %62, 512
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !1824
  %76 = insertelement <64 x float> undef, float %75, i32 0
  %77 = shufflevector <64 x float> %76, <64 x float> undef, <64 x i32> zeroinitializer
  %78 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %77, <64 x float> %71, <64 x float> %60)
  %79 = add nsw i64 %62, 1024
  %80 = getelementptr inbounds float, float* %4, i64 %79
  %81 = load float, float* %80, align 4, !tbaa !1824
  %82 = insertelement <64 x float> undef, float %81, i32 0
  %83 = shufflevector <64 x float> %82, <64 x float> undef, <64 x i32> zeroinitializer
  %84 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %83, <64 x float> %71, <64 x float> %59)
  %85 = add nsw i64 %62, 1536
  %86 = getelementptr inbounds float, float* %4, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !1824
  %88 = insertelement <64 x float> undef, float %87, i32 0
  %89 = shufflevector <64 x float> %88, <64 x float> undef, <64 x i32> zeroinitializer
  %90 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %89, <64 x float> %71, <64 x float> %58)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  store <64 x float> %72, <64 x float>* %51, align 64, !tbaa !1821
  store <64 x float> %78, <64 x float>* %53, align 64, !tbaa !1821
  store <64 x float> %84, <64 x float>* %55, align 64, !tbaa !1821
  store <64 x float> %90, <64 x float>* %57, align 64, !tbaa !1821
  %91 = getelementptr inbounds i8, i8* %43, i64 1024
  %92 = bitcast i8* %91 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %92, align 64, !tbaa !1821
  %93 = getelementptr inbounds i8, i8* %43, i64 1280
  %94 = bitcast i8* %93 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %94, align 64, !tbaa !1821
  %95 = getelementptr inbounds i8, i8* %43, i64 1536
  %96 = bitcast i8* %95 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %96, align 64, !tbaa !1821
  %97 = getelementptr inbounds i8, i8* %43, i64 1792
  %98 = bitcast i8* %97 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %98, align 64, !tbaa !1821
  %99 = or i64 %50, 2048
  br label %for_body5.1

for_body5.1:                                      ; preds = %for_body5.1, %for_end6
  %indvars.iv.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next.1, %for_body5.1 ]
  %100 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %132, %for_body5.1 ]
  %101 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %126, %for_body5.1 ]
  %102 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %120, %for_body5.1 ]
  %103 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %114, %for_body5.1 ]
  %104 = add nsw i64 %99, %indvars.iv.1
  %105 = getelementptr inbounds float, float* %4, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !1824
  %107 = insertelement <64 x float> undef, float %106, i32 0
  %108 = shufflevector <64 x float> %107, <64 x float> undef, <64 x i32> zeroinitializer
  %109 = shl i64 %indvars.iv.1, 6
  %110 = add nuw nsw i64 %109, %49
  %111 = getelementptr inbounds float, float* %7, i64 %110
  %112 = bitcast float* %111 to <64 x float>*
  %113 = load <64 x float>, <64 x float>* %112, align 64, !tbaa !1827
  %114 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %108, <64 x float> %113, <64 x float> %103)
  %115 = add nsw i64 %104, 512
  %116 = getelementptr inbounds float, float* %4, i64 %115
  %117 = load float, float* %116, align 4, !tbaa !1824
  %118 = insertelement <64 x float> undef, float %117, i32 0
  %119 = shufflevector <64 x float> %118, <64 x float> undef, <64 x i32> zeroinitializer
  %120 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %119, <64 x float> %113, <64 x float> %102)
  %121 = add nsw i64 %104, 1024
  %122 = getelementptr inbounds float, float* %4, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !1824
  %124 = insertelement <64 x float> undef, float %123, i32 0
  %125 = shufflevector <64 x float> %124, <64 x float> undef, <64 x i32> zeroinitializer
  %126 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %125, <64 x float> %113, <64 x float> %101)
  %127 = add nsw i64 %104, 1536
  %128 = getelementptr inbounds float, float* %4, i64 %127
  %129 = load float, float* %128, align 4, !tbaa !1824
  %130 = insertelement <64 x float> undef, float %129, i32 0
  %131 = shufflevector <64 x float> %130, <64 x float> undef, <64 x i32> zeroinitializer
  %132 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %131, <64 x float> %113, <64 x float> %100)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 256
  br i1 %exitcond.1, label %for_end6.1, label %for_body5.1, !prof !50

for_end6.1:                                       ; preds = %for_body5.1
  store <64 x float> %114, <64 x float>* %92, align 64, !tbaa !1821
  store <64 x float> %120, <64 x float>* %94, align 64, !tbaa !1821
  store <64 x float> %126, <64 x float>* %96, align 64, !tbaa !1821
  store <64 x float> %132, <64 x float>* %98, align 64, !tbaa !1821
  %133 = getelementptr inbounds i8, i8* %43, i64 2048
  %134 = bitcast i8* %133 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %134, align 64, !tbaa !1821
  %135 = getelementptr inbounds i8, i8* %43, i64 2304
  %136 = bitcast i8* %135 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %136, align 64, !tbaa !1821
  %137 = getelementptr inbounds i8, i8* %43, i64 2560
  %138 = bitcast i8* %137 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %138, align 64, !tbaa !1821
  %139 = getelementptr inbounds i8, i8* %43, i64 2816
  %140 = bitcast i8* %139 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %140, align 64, !tbaa !1821
  %141 = add nsw i64 %50, 4096
  br label %for_body5.2

for_body5.2:                                      ; preds = %for_body5.2, %for_end6.1
  %indvars.iv.2 = phi i64 [ 0, %for_end6.1 ], [ %indvars.iv.next.2, %for_body5.2 ]
  %142 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %174, %for_body5.2 ]
  %143 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %168, %for_body5.2 ]
  %144 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %162, %for_body5.2 ]
  %145 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %156, %for_body5.2 ]
  %146 = add nsw i64 %141, %indvars.iv.2
  %147 = getelementptr inbounds float, float* %4, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !1824
  %149 = insertelement <64 x float> undef, float %148, i32 0
  %150 = shufflevector <64 x float> %149, <64 x float> undef, <64 x i32> zeroinitializer
  %151 = shl i64 %indvars.iv.2, 6
  %152 = add nuw nsw i64 %151, %49
  %153 = getelementptr inbounds float, float* %7, i64 %152
  %154 = bitcast float* %153 to <64 x float>*
  %155 = load <64 x float>, <64 x float>* %154, align 64, !tbaa !1827
  %156 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %150, <64 x float> %155, <64 x float> %145)
  %157 = add nsw i64 %146, 512
  %158 = getelementptr inbounds float, float* %4, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !1824
  %160 = insertelement <64 x float> undef, float %159, i32 0
  %161 = shufflevector <64 x float> %160, <64 x float> undef, <64 x i32> zeroinitializer
  %162 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %161, <64 x float> %155, <64 x float> %144)
  %163 = add nsw i64 %146, 1024
  %164 = getelementptr inbounds float, float* %4, i64 %163
  %165 = load float, float* %164, align 4, !tbaa !1824
  %166 = insertelement <64 x float> undef, float %165, i32 0
  %167 = shufflevector <64 x float> %166, <64 x float> undef, <64 x i32> zeroinitializer
  %168 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %167, <64 x float> %155, <64 x float> %143)
  %169 = add nsw i64 %146, 1536
  %170 = getelementptr inbounds float, float* %4, i64 %169
  %171 = load float, float* %170, align 4, !tbaa !1824
  %172 = insertelement <64 x float> undef, float %171, i32 0
  %173 = shufflevector <64 x float> %172, <64 x float> undef, <64 x i32> zeroinitializer
  %174 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %173, <64 x float> %155, <64 x float> %142)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 256
  br i1 %exitcond.2, label %for_end6.2, label %for_body5.2, !prof !50

for_end6.2:                                       ; preds = %for_body5.2
  store <64 x float> %156, <64 x float>* %134, align 64, !tbaa !1821
  store <64 x float> %162, <64 x float>* %136, align 64, !tbaa !1821
  store <64 x float> %168, <64 x float>* %138, align 64, !tbaa !1821
  store <64 x float> %174, <64 x float>* %140, align 64, !tbaa !1821
  %175 = getelementptr inbounds i8, i8* %43, i64 3072
  %176 = bitcast i8* %175 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %176, align 64, !tbaa !1821
  %177 = getelementptr inbounds i8, i8* %43, i64 3328
  %178 = bitcast i8* %177 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %178, align 64, !tbaa !1821
  %179 = getelementptr inbounds i8, i8* %43, i64 3584
  %180 = bitcast i8* %179 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %180, align 64, !tbaa !1821
  %181 = getelementptr inbounds i8, i8* %43, i64 3840
  %182 = bitcast i8* %181 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %182, align 64, !tbaa !1821
  %183 = add nsw i64 %50, 6144
  br label %for_body5.3

for_body5.3:                                      ; preds = %for_body5.3, %for_end6.2
  %indvars.iv.3 = phi i64 [ 0, %for_end6.2 ], [ %indvars.iv.next.3, %for_body5.3 ]
  %184 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %216, %for_body5.3 ]
  %185 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %210, %for_body5.3 ]
  %186 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %204, %for_body5.3 ]
  %187 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %198, %for_body5.3 ]
  %188 = add nsw i64 %183, %indvars.iv.3
  %189 = getelementptr inbounds float, float* %4, i64 %188
  %190 = load float, float* %189, align 4, !tbaa !1824
  %191 = insertelement <64 x float> undef, float %190, i32 0
  %192 = shufflevector <64 x float> %191, <64 x float> undef, <64 x i32> zeroinitializer
  %193 = shl i64 %indvars.iv.3, 6
  %194 = add nuw nsw i64 %193, %49
  %195 = getelementptr inbounds float, float* %7, i64 %194
  %196 = bitcast float* %195 to <64 x float>*
  %197 = load <64 x float>, <64 x float>* %196, align 64, !tbaa !1827
  %198 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %192, <64 x float> %197, <64 x float> %187)
  %199 = add nsw i64 %188, 512
  %200 = getelementptr inbounds float, float* %4, i64 %199
  %201 = load float, float* %200, align 4, !tbaa !1824
  %202 = insertelement <64 x float> undef, float %201, i32 0
  %203 = shufflevector <64 x float> %202, <64 x float> undef, <64 x i32> zeroinitializer
  %204 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %203, <64 x float> %197, <64 x float> %186)
  %205 = add nsw i64 %188, 1024
  %206 = getelementptr inbounds float, float* %4, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !1824
  %208 = insertelement <64 x float> undef, float %207, i32 0
  %209 = shufflevector <64 x float> %208, <64 x float> undef, <64 x i32> zeroinitializer
  %210 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %209, <64 x float> %197, <64 x float> %185)
  %211 = add nsw i64 %188, 1536
  %212 = getelementptr inbounds float, float* %4, i64 %211
  %213 = load float, float* %212, align 4, !tbaa !1824
  %214 = insertelement <64 x float> undef, float %213, i32 0
  %215 = shufflevector <64 x float> %214, <64 x float> undef, <64 x i32> zeroinitializer
  %216 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %215, <64 x float> %197, <64 x float> %184)
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, 256
  br i1 %exitcond.3, label %for_end6.3, label %for_body5.3, !prof !50

for_end6.3:                                       ; preds = %for_body5.3
  store <64 x float> %198, <64 x float>* %176, align 64, !tbaa !1821
  store <64 x float> %204, <64 x float>* %178, align 64, !tbaa !1821
  store <64 x float> %210, <64 x float>* %180, align 64, !tbaa !1821
  store <64 x float> %216, <64 x float>* %182, align 64, !tbaa !1821
  %217 = getelementptr inbounds i8, i8* %43, i64 4096
  %218 = bitcast i8* %217 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %218, align 64, !tbaa !1821
  %219 = getelementptr inbounds i8, i8* %43, i64 4352
  %220 = bitcast i8* %219 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %220, align 64, !tbaa !1821
  %221 = getelementptr inbounds i8, i8* %43, i64 4608
  %222 = bitcast i8* %221 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %222, align 64, !tbaa !1821
  %223 = getelementptr inbounds i8, i8* %43, i64 4864
  %224 = bitcast i8* %223 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %224, align 64, !tbaa !1821
  %225 = add nsw i64 %50, 8192
  br label %for_body5.4

for_body5.4:                                      ; preds = %for_body5.4, %for_end6.3
  %indvars.iv.4 = phi i64 [ 0, %for_end6.3 ], [ %indvars.iv.next.4, %for_body5.4 ]
  %226 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %258, %for_body5.4 ]
  %227 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %252, %for_body5.4 ]
  %228 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %246, %for_body5.4 ]
  %229 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %240, %for_body5.4 ]
  %230 = add nsw i64 %225, %indvars.iv.4
  %231 = getelementptr inbounds float, float* %4, i64 %230
  %232 = load float, float* %231, align 4, !tbaa !1824
  %233 = insertelement <64 x float> undef, float %232, i32 0
  %234 = shufflevector <64 x float> %233, <64 x float> undef, <64 x i32> zeroinitializer
  %235 = shl i64 %indvars.iv.4, 6
  %236 = add nuw nsw i64 %235, %49
  %237 = getelementptr inbounds float, float* %7, i64 %236
  %238 = bitcast float* %237 to <64 x float>*
  %239 = load <64 x float>, <64 x float>* %238, align 64, !tbaa !1827
  %240 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %234, <64 x float> %239, <64 x float> %229)
  %241 = add nsw i64 %230, 512
  %242 = getelementptr inbounds float, float* %4, i64 %241
  %243 = load float, float* %242, align 4, !tbaa !1824
  %244 = insertelement <64 x float> undef, float %243, i32 0
  %245 = shufflevector <64 x float> %244, <64 x float> undef, <64 x i32> zeroinitializer
  %246 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %245, <64 x float> %239, <64 x float> %228)
  %247 = add nsw i64 %230, 1024
  %248 = getelementptr inbounds float, float* %4, i64 %247
  %249 = load float, float* %248, align 4, !tbaa !1824
  %250 = insertelement <64 x float> undef, float %249, i32 0
  %251 = shufflevector <64 x float> %250, <64 x float> undef, <64 x i32> zeroinitializer
  %252 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %251, <64 x float> %239, <64 x float> %227)
  %253 = add nsw i64 %230, 1536
  %254 = getelementptr inbounds float, float* %4, i64 %253
  %255 = load float, float* %254, align 4, !tbaa !1824
  %256 = insertelement <64 x float> undef, float %255, i32 0
  %257 = shufflevector <64 x float> %256, <64 x float> undef, <64 x i32> zeroinitializer
  %258 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %257, <64 x float> %239, <64 x float> %226)
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv.4, 1
  %exitcond.4 = icmp eq i64 %indvars.iv.next.4, 256
  br i1 %exitcond.4, label %for_end6.4, label %for_body5.4, !prof !50

for_end6.4:                                       ; preds = %for_body5.4
  store <64 x float> %240, <64 x float>* %218, align 64, !tbaa !1821
  store <64 x float> %246, <64 x float>* %220, align 64, !tbaa !1821
  store <64 x float> %252, <64 x float>* %222, align 64, !tbaa !1821
  store <64 x float> %258, <64 x float>* %224, align 64, !tbaa !1821
  %259 = getelementptr inbounds i8, i8* %43, i64 5120
  %260 = bitcast i8* %259 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %260, align 64, !tbaa !1821
  %261 = getelementptr inbounds i8, i8* %43, i64 5376
  %262 = bitcast i8* %261 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %262, align 64, !tbaa !1821
  %263 = getelementptr inbounds i8, i8* %43, i64 5632
  %264 = bitcast i8* %263 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %264, align 64, !tbaa !1821
  %265 = getelementptr inbounds i8, i8* %43, i64 5888
  %266 = bitcast i8* %265 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %266, align 64, !tbaa !1821
  %267 = add nsw i64 %50, 10240
  br label %for_body5.5

for_body5.5:                                      ; preds = %for_body5.5, %for_end6.4
  %indvars.iv.5 = phi i64 [ 0, %for_end6.4 ], [ %indvars.iv.next.5, %for_body5.5 ]
  %268 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %300, %for_body5.5 ]
  %269 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %294, %for_body5.5 ]
  %270 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %288, %for_body5.5 ]
  %271 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %282, %for_body5.5 ]
  %272 = add nsw i64 %267, %indvars.iv.5
  %273 = getelementptr inbounds float, float* %4, i64 %272
  %274 = load float, float* %273, align 4, !tbaa !1824
  %275 = insertelement <64 x float> undef, float %274, i32 0
  %276 = shufflevector <64 x float> %275, <64 x float> undef, <64 x i32> zeroinitializer
  %277 = shl i64 %indvars.iv.5, 6
  %278 = add nuw nsw i64 %277, %49
  %279 = getelementptr inbounds float, float* %7, i64 %278
  %280 = bitcast float* %279 to <64 x float>*
  %281 = load <64 x float>, <64 x float>* %280, align 64, !tbaa !1827
  %282 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %276, <64 x float> %281, <64 x float> %271)
  %283 = add nsw i64 %272, 512
  %284 = getelementptr inbounds float, float* %4, i64 %283
  %285 = load float, float* %284, align 4, !tbaa !1824
  %286 = insertelement <64 x float> undef, float %285, i32 0
  %287 = shufflevector <64 x float> %286, <64 x float> undef, <64 x i32> zeroinitializer
  %288 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %287, <64 x float> %281, <64 x float> %270)
  %289 = add nsw i64 %272, 1024
  %290 = getelementptr inbounds float, float* %4, i64 %289
  %291 = load float, float* %290, align 4, !tbaa !1824
  %292 = insertelement <64 x float> undef, float %291, i32 0
  %293 = shufflevector <64 x float> %292, <64 x float> undef, <64 x i32> zeroinitializer
  %294 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %293, <64 x float> %281, <64 x float> %269)
  %295 = add nsw i64 %272, 1536
  %296 = getelementptr inbounds float, float* %4, i64 %295
  %297 = load float, float* %296, align 4, !tbaa !1824
  %298 = insertelement <64 x float> undef, float %297, i32 0
  %299 = shufflevector <64 x float> %298, <64 x float> undef, <64 x i32> zeroinitializer
  %300 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %299, <64 x float> %281, <64 x float> %268)
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv.5, 1
  %exitcond.5 = icmp eq i64 %indvars.iv.next.5, 256
  br i1 %exitcond.5, label %for_end6.5, label %for_body5.5, !prof !50

for_end6.5:                                       ; preds = %for_body5.5
  store <64 x float> %282, <64 x float>* %260, align 64, !tbaa !1821
  store <64 x float> %288, <64 x float>* %262, align 64, !tbaa !1821
  store <64 x float> %294, <64 x float>* %264, align 64, !tbaa !1821
  store <64 x float> %300, <64 x float>* %266, align 64, !tbaa !1821
  %301 = getelementptr inbounds i8, i8* %43, i64 6144
  %302 = bitcast i8* %301 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %302, align 64, !tbaa !1821
  %303 = getelementptr inbounds i8, i8* %43, i64 6400
  %304 = bitcast i8* %303 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %304, align 64, !tbaa !1821
  %305 = getelementptr inbounds i8, i8* %43, i64 6656
  %306 = bitcast i8* %305 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %306, align 64, !tbaa !1821
  %307 = getelementptr inbounds i8, i8* %43, i64 6912
  %308 = bitcast i8* %307 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %308, align 64, !tbaa !1821
  %309 = add nsw i64 %50, 12288
  br label %for_body5.6

for_body5.6:                                      ; preds = %for_body5.6, %for_end6.5
  %indvars.iv.6 = phi i64 [ 0, %for_end6.5 ], [ %indvars.iv.next.6, %for_body5.6 ]
  %310 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %342, %for_body5.6 ]
  %311 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %336, %for_body5.6 ]
  %312 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %330, %for_body5.6 ]
  %313 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %324, %for_body5.6 ]
  %314 = add nsw i64 %309, %indvars.iv.6
  %315 = getelementptr inbounds float, float* %4, i64 %314
  %316 = load float, float* %315, align 4, !tbaa !1824
  %317 = insertelement <64 x float> undef, float %316, i32 0
  %318 = shufflevector <64 x float> %317, <64 x float> undef, <64 x i32> zeroinitializer
  %319 = shl i64 %indvars.iv.6, 6
  %320 = add nuw nsw i64 %319, %49
  %321 = getelementptr inbounds float, float* %7, i64 %320
  %322 = bitcast float* %321 to <64 x float>*
  %323 = load <64 x float>, <64 x float>* %322, align 64, !tbaa !1827
  %324 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %318, <64 x float> %323, <64 x float> %313)
  %325 = add nsw i64 %314, 512
  %326 = getelementptr inbounds float, float* %4, i64 %325
  %327 = load float, float* %326, align 4, !tbaa !1824
  %328 = insertelement <64 x float> undef, float %327, i32 0
  %329 = shufflevector <64 x float> %328, <64 x float> undef, <64 x i32> zeroinitializer
  %330 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %329, <64 x float> %323, <64 x float> %312)
  %331 = add nsw i64 %314, 1024
  %332 = getelementptr inbounds float, float* %4, i64 %331
  %333 = load float, float* %332, align 4, !tbaa !1824
  %334 = insertelement <64 x float> undef, float %333, i32 0
  %335 = shufflevector <64 x float> %334, <64 x float> undef, <64 x i32> zeroinitializer
  %336 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %335, <64 x float> %323, <64 x float> %311)
  %337 = add nsw i64 %314, 1536
  %338 = getelementptr inbounds float, float* %4, i64 %337
  %339 = load float, float* %338, align 4, !tbaa !1824
  %340 = insertelement <64 x float> undef, float %339, i32 0
  %341 = shufflevector <64 x float> %340, <64 x float> undef, <64 x i32> zeroinitializer
  %342 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %341, <64 x float> %323, <64 x float> %310)
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv.6, 1
  %exitcond.6 = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6, label %for_end6.6, label %for_body5.6, !prof !50

for_end6.6:                                       ; preds = %for_body5.6
  store <64 x float> %324, <64 x float>* %302, align 64, !tbaa !1821
  store <64 x float> %330, <64 x float>* %304, align 64, !tbaa !1821
  store <64 x float> %336, <64 x float>* %306, align 64, !tbaa !1821
  store <64 x float> %342, <64 x float>* %308, align 64, !tbaa !1821
  %343 = mul nsw i64 %indvars.iv36, 1792
  %344 = shl nsw i32 %47, 6
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds float, float* %13, i64 %345
  %347 = bitcast float* %346 to <64 x float>*
  %348 = load <64 x float>, <64 x float>* %347, align 64, !tbaa !1830
  %349 = getelementptr inbounds float, float* %16, i64 %345
  %350 = bitcast float* %349 to <64 x float>*
  %351 = load <64 x float>, <64 x float>* %350, align 64, !tbaa !1833
  %352 = getelementptr inbounds float, float* %19, i64 %345
  %353 = bitcast float* %352 to <64 x float>*
  %354 = load <64 x float>, <64 x float>* %353, align 64, !tbaa !1836
  %355 = bitcast i8* %43 to <64 x float>*
  %356 = load <64 x float>, <64 x float>* %355, align 64, !tbaa !1821
  %357 = fadd <64 x float> %356, %348
  %358 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %357, <64 x float> %351, <64 x float> %354)
  %359 = getelementptr inbounds float, float* %22, i64 %343
  %360 = bitcast float* %359 to <64 x float>*
  %361 = load <64 x float>, <64 x float>* %360, align 64, !tbaa !1839
  %362 = fadd <64 x float> %358, %361
  %363 = fcmp ogt <64 x float> %362, zeroinitializer
  %364 = select <64 x i1> %363, <64 x float> %362, <64 x float> zeroinitializer
  %365 = getelementptr inbounds float, float* %10, i64 %343
  %366 = bitcast float* %365 to <64 x float>*
  store <64 x float> %364, <64 x float>* %366, align 64, !tbaa !1842
  %367 = getelementptr inbounds i8, i8* %43, i64 256
  %368 = bitcast i8* %367 to <64 x float>*
  %369 = load <64 x float>, <64 x float>* %368, align 64, !tbaa !1821
  %370 = fadd <64 x float> %369, %348
  %371 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %370, <64 x float> %351, <64 x float> %354)
  %372 = mul i64 %indvars.iv36, 7696581394432
  %sext = ashr exact i64 %372, 32
  %373 = or i64 %sext, 64
  %374 = getelementptr inbounds float, float* %22, i64 %373
  %375 = bitcast float* %374 to <64 x float>*
  %376 = load <64 x float>, <64 x float>* %375, align 64, !tbaa !1839
  %377 = fadd <64 x float> %371, %376
  %378 = fcmp ogt <64 x float> %377, zeroinitializer
  %379 = select <64 x i1> %378, <64 x float> %377, <64 x float> zeroinitializer
  %380 = getelementptr inbounds float, float* %10, i64 %373
  %381 = bitcast float* %380 to <64 x float>*
  store <64 x float> %379, <64 x float>* %381, align 64, !tbaa !1842
  %382 = getelementptr inbounds i8, i8* %43, i64 512
  %383 = bitcast i8* %382 to <64 x float>*
  %384 = load <64 x float>, <64 x float>* %383, align 64, !tbaa !1821
  %385 = fadd <64 x float> %384, %348
  %386 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %385, <64 x float> %351, <64 x float> %354)
  %387 = mul i64 %indvars.iv36, 7696581394432
  %sext38 = ashr exact i64 %387, 32
  %388 = or i64 %sext38, 128
  %389 = getelementptr inbounds float, float* %22, i64 %388
  %390 = bitcast float* %389 to <64 x float>*
  %391 = load <64 x float>, <64 x float>* %390, align 64, !tbaa !1839
  %392 = fadd <64 x float> %386, %391
  %393 = fcmp ogt <64 x float> %392, zeroinitializer
  %394 = select <64 x i1> %393, <64 x float> %392, <64 x float> zeroinitializer
  %395 = getelementptr inbounds float, float* %10, i64 %388
  %396 = bitcast float* %395 to <64 x float>*
  store <64 x float> %394, <64 x float>* %396, align 64, !tbaa !1842
  %397 = getelementptr inbounds i8, i8* %43, i64 768
  %398 = bitcast i8* %397 to <64 x float>*
  %399 = load <64 x float>, <64 x float>* %398, align 64, !tbaa !1821
  %400 = fadd <64 x float> %399, %348
  %401 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %400, <64 x float> %351, <64 x float> %354)
  %402 = mul i64 %indvars.iv36, 7696581394432
  %sext39 = ashr exact i64 %402, 32
  %403 = or i64 %sext39, 192
  %404 = getelementptr inbounds float, float* %22, i64 %403
  %405 = bitcast float* %404 to <64 x float>*
  %406 = load <64 x float>, <64 x float>* %405, align 64, !tbaa !1839
  %407 = fadd <64 x float> %401, %406
  %408 = fcmp ogt <64 x float> %407, zeroinitializer
  %409 = select <64 x i1> %408, <64 x float> %407, <64 x float> zeroinitializer
  %410 = getelementptr inbounds float, float* %10, i64 %403
  %411 = bitcast float* %410 to <64 x float>*
  store <64 x float> %409, <64 x float>* %411, align 64, !tbaa !1842
  %412 = getelementptr inbounds i8, i8* %43, i64 1024
  %413 = bitcast i8* %412 to <64 x float>*
  %414 = load <64 x float>, <64 x float>* %413, align 64, !tbaa !1821
  %415 = fadd <64 x float> %414, %348
  %416 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %415, <64 x float> %351, <64 x float> %354)
  %417 = mul i64 %indvars.iv36, 7696581394432
  %sext40 = add i64 %417, 1099511627776
  %418 = ashr exact i64 %sext40, 32
  %419 = getelementptr inbounds float, float* %22, i64 %418
  %420 = bitcast float* %419 to <64 x float>*
  %421 = load <64 x float>, <64 x float>* %420, align 64, !tbaa !1839
  %422 = fadd <64 x float> %416, %421
  %423 = fcmp ogt <64 x float> %422, zeroinitializer
  %424 = select <64 x i1> %423, <64 x float> %422, <64 x float> zeroinitializer
  %425 = getelementptr inbounds float, float* %10, i64 %418
  %426 = bitcast float* %425 to <64 x float>*
  store <64 x float> %424, <64 x float>* %426, align 64, !tbaa !1842
  %427 = getelementptr inbounds i8, i8* %43, i64 1280
  %428 = bitcast i8* %427 to <64 x float>*
  %429 = load <64 x float>, <64 x float>* %428, align 64, !tbaa !1821
  %430 = fadd <64 x float> %429, %348
  %431 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %430, <64 x float> %351, <64 x float> %354)
  %432 = mul i64 %indvars.iv36, 7696581394432
  %sext41 = add i64 %432, 1374389534720
  %433 = ashr exact i64 %sext41, 32
  %434 = getelementptr inbounds float, float* %22, i64 %433
  %435 = bitcast float* %434 to <64 x float>*
  %436 = load <64 x float>, <64 x float>* %435, align 64, !tbaa !1839
  %437 = fadd <64 x float> %431, %436
  %438 = fcmp ogt <64 x float> %437, zeroinitializer
  %439 = select <64 x i1> %438, <64 x float> %437, <64 x float> zeroinitializer
  %440 = getelementptr inbounds float, float* %10, i64 %433
  %441 = bitcast float* %440 to <64 x float>*
  store <64 x float> %439, <64 x float>* %441, align 64, !tbaa !1842
  %442 = getelementptr inbounds i8, i8* %43, i64 1536
  %443 = bitcast i8* %442 to <64 x float>*
  %444 = load <64 x float>, <64 x float>* %443, align 64, !tbaa !1821
  %445 = fadd <64 x float> %444, %348
  %446 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %445, <64 x float> %351, <64 x float> %354)
  %447 = mul i64 %indvars.iv36, 7696581394432
  %sext42 = add i64 %447, 1649267441664
  %448 = ashr exact i64 %sext42, 32
  %449 = getelementptr inbounds float, float* %22, i64 %448
  %450 = bitcast float* %449 to <64 x float>*
  %451 = load <64 x float>, <64 x float>* %450, align 64, !tbaa !1839
  %452 = fadd <64 x float> %446, %451
  %453 = fcmp ogt <64 x float> %452, zeroinitializer
  %454 = select <64 x i1> %453, <64 x float> %452, <64 x float> zeroinitializer
  %455 = getelementptr inbounds float, float* %10, i64 %448
  %456 = bitcast float* %455 to <64 x float>*
  store <64 x float> %454, <64 x float>* %456, align 64, !tbaa !1842
  %457 = getelementptr inbounds i8, i8* %43, i64 1792
  %458 = bitcast i8* %457 to <64 x float>*
  %459 = load <64 x float>, <64 x float>* %458, align 64, !tbaa !1821
  %460 = fadd <64 x float> %459, %348
  %461 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %460, <64 x float> %351, <64 x float> %354)
  %462 = mul i64 %indvars.iv36, 7696581394432
  %sext43 = add i64 %462, 1924145348608
  %463 = ashr exact i64 %sext43, 32
  %464 = getelementptr inbounds float, float* %22, i64 %463
  %465 = bitcast float* %464 to <64 x float>*
  %466 = load <64 x float>, <64 x float>* %465, align 64, !tbaa !1839
  %467 = fadd <64 x float> %461, %466
  %468 = fcmp ogt <64 x float> %467, zeroinitializer
  %469 = select <64 x i1> %468, <64 x float> %467, <64 x float> zeroinitializer
  %470 = getelementptr inbounds float, float* %10, i64 %463
  %471 = bitcast float* %470 to <64 x float>*
  store <64 x float> %469, <64 x float>* %471, align 64, !tbaa !1842
  %472 = getelementptr inbounds i8, i8* %43, i64 2048
  %473 = bitcast i8* %472 to <64 x float>*
  %474 = load <64 x float>, <64 x float>* %473, align 64, !tbaa !1821
  %475 = fadd <64 x float> %474, %348
  %476 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %475, <64 x float> %351, <64 x float> %354)
  %477 = mul i64 %indvars.iv36, 7696581394432
  %sext44 = add i64 %477, 2199023255552
  %478 = ashr exact i64 %sext44, 32
  %479 = getelementptr inbounds float, float* %22, i64 %478
  %480 = bitcast float* %479 to <64 x float>*
  %481 = load <64 x float>, <64 x float>* %480, align 64, !tbaa !1839
  %482 = fadd <64 x float> %476, %481
  %483 = fcmp ogt <64 x float> %482, zeroinitializer
  %484 = select <64 x i1> %483, <64 x float> %482, <64 x float> zeroinitializer
  %485 = getelementptr inbounds float, float* %10, i64 %478
  %486 = bitcast float* %485 to <64 x float>*
  store <64 x float> %484, <64 x float>* %486, align 64, !tbaa !1842
  %487 = getelementptr inbounds i8, i8* %43, i64 2304
  %488 = bitcast i8* %487 to <64 x float>*
  %489 = load <64 x float>, <64 x float>* %488, align 64, !tbaa !1821
  %490 = fadd <64 x float> %489, %348
  %491 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %490, <64 x float> %351, <64 x float> %354)
  %492 = mul i64 %indvars.iv36, 7696581394432
  %sext45 = add i64 %492, 2473901162496
  %493 = ashr exact i64 %sext45, 32
  %494 = getelementptr inbounds float, float* %22, i64 %493
  %495 = bitcast float* %494 to <64 x float>*
  %496 = load <64 x float>, <64 x float>* %495, align 64, !tbaa !1839
  %497 = fadd <64 x float> %491, %496
  %498 = fcmp ogt <64 x float> %497, zeroinitializer
  %499 = select <64 x i1> %498, <64 x float> %497, <64 x float> zeroinitializer
  %500 = getelementptr inbounds float, float* %10, i64 %493
  %501 = bitcast float* %500 to <64 x float>*
  store <64 x float> %499, <64 x float>* %501, align 64, !tbaa !1842
  %502 = getelementptr inbounds i8, i8* %43, i64 2560
  %503 = bitcast i8* %502 to <64 x float>*
  %504 = load <64 x float>, <64 x float>* %503, align 64, !tbaa !1821
  %505 = fadd <64 x float> %504, %348
  %506 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %505, <64 x float> %351, <64 x float> %354)
  %507 = mul i64 %indvars.iv36, 7696581394432
  %sext46 = add i64 %507, 2748779069440
  %508 = ashr exact i64 %sext46, 32
  %509 = getelementptr inbounds float, float* %22, i64 %508
  %510 = bitcast float* %509 to <64 x float>*
  %511 = load <64 x float>, <64 x float>* %510, align 64, !tbaa !1839
  %512 = fadd <64 x float> %506, %511
  %513 = fcmp ogt <64 x float> %512, zeroinitializer
  %514 = select <64 x i1> %513, <64 x float> %512, <64 x float> zeroinitializer
  %515 = getelementptr inbounds float, float* %10, i64 %508
  %516 = bitcast float* %515 to <64 x float>*
  store <64 x float> %514, <64 x float>* %516, align 64, !tbaa !1842
  %517 = getelementptr inbounds i8, i8* %43, i64 2816
  %518 = bitcast i8* %517 to <64 x float>*
  %519 = load <64 x float>, <64 x float>* %518, align 64, !tbaa !1821
  %520 = fadd <64 x float> %519, %348
  %521 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %520, <64 x float> %351, <64 x float> %354)
  %522 = mul i64 %indvars.iv36, 7696581394432
  %sext47 = add i64 %522, 3023656976384
  %523 = ashr exact i64 %sext47, 32
  %524 = getelementptr inbounds float, float* %22, i64 %523
  %525 = bitcast float* %524 to <64 x float>*
  %526 = load <64 x float>, <64 x float>* %525, align 64, !tbaa !1839
  %527 = fadd <64 x float> %521, %526
  %528 = fcmp ogt <64 x float> %527, zeroinitializer
  %529 = select <64 x i1> %528, <64 x float> %527, <64 x float> zeroinitializer
  %530 = getelementptr inbounds float, float* %10, i64 %523
  %531 = bitcast float* %530 to <64 x float>*
  store <64 x float> %529, <64 x float>* %531, align 64, !tbaa !1842
  %532 = getelementptr inbounds i8, i8* %43, i64 3072
  %533 = bitcast i8* %532 to <64 x float>*
  %534 = load <64 x float>, <64 x float>* %533, align 64, !tbaa !1821
  %535 = fadd <64 x float> %534, %348
  %536 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %535, <64 x float> %351, <64 x float> %354)
  %537 = mul i64 %indvars.iv36, 7696581394432
  %sext48 = add i64 %537, 3298534883328
  %538 = ashr exact i64 %sext48, 32
  %539 = getelementptr inbounds float, float* %22, i64 %538
  %540 = bitcast float* %539 to <64 x float>*
  %541 = load <64 x float>, <64 x float>* %540, align 64, !tbaa !1839
  %542 = fadd <64 x float> %536, %541
  %543 = fcmp ogt <64 x float> %542, zeroinitializer
  %544 = select <64 x i1> %543, <64 x float> %542, <64 x float> zeroinitializer
  %545 = getelementptr inbounds float, float* %10, i64 %538
  %546 = bitcast float* %545 to <64 x float>*
  store <64 x float> %544, <64 x float>* %546, align 64, !tbaa !1842
  %547 = getelementptr inbounds i8, i8* %43, i64 3328
  %548 = bitcast i8* %547 to <64 x float>*
  %549 = load <64 x float>, <64 x float>* %548, align 64, !tbaa !1821
  %550 = fadd <64 x float> %549, %348
  %551 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %550, <64 x float> %351, <64 x float> %354)
  %552 = mul i64 %indvars.iv36, 7696581394432
  %sext49 = add i64 %552, 3573412790272
  %553 = ashr exact i64 %sext49, 32
  %554 = getelementptr inbounds float, float* %22, i64 %553
  %555 = bitcast float* %554 to <64 x float>*
  %556 = load <64 x float>, <64 x float>* %555, align 64, !tbaa !1839
  %557 = fadd <64 x float> %551, %556
  %558 = fcmp ogt <64 x float> %557, zeroinitializer
  %559 = select <64 x i1> %558, <64 x float> %557, <64 x float> zeroinitializer
  %560 = getelementptr inbounds float, float* %10, i64 %553
  %561 = bitcast float* %560 to <64 x float>*
  store <64 x float> %559, <64 x float>* %561, align 64, !tbaa !1842
  %562 = getelementptr inbounds i8, i8* %43, i64 3584
  %563 = bitcast i8* %562 to <64 x float>*
  %564 = load <64 x float>, <64 x float>* %563, align 64, !tbaa !1821
  %565 = fadd <64 x float> %564, %348
  %566 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %565, <64 x float> %351, <64 x float> %354)
  %567 = mul i64 %indvars.iv36, 7696581394432
  %sext50 = add i64 %567, 3848290697216
  %568 = ashr exact i64 %sext50, 32
  %569 = getelementptr inbounds float, float* %22, i64 %568
  %570 = bitcast float* %569 to <64 x float>*
  %571 = load <64 x float>, <64 x float>* %570, align 64, !tbaa !1839
  %572 = fadd <64 x float> %566, %571
  %573 = fcmp ogt <64 x float> %572, zeroinitializer
  %574 = select <64 x i1> %573, <64 x float> %572, <64 x float> zeroinitializer
  %575 = getelementptr inbounds float, float* %10, i64 %568
  %576 = bitcast float* %575 to <64 x float>*
  store <64 x float> %574, <64 x float>* %576, align 64, !tbaa !1842
  %577 = getelementptr inbounds i8, i8* %43, i64 3840
  %578 = bitcast i8* %577 to <64 x float>*
  %579 = load <64 x float>, <64 x float>* %578, align 64, !tbaa !1821
  %580 = fadd <64 x float> %579, %348
  %581 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %580, <64 x float> %351, <64 x float> %354)
  %582 = mul i64 %indvars.iv36, 7696581394432
  %sext51 = add i64 %582, 4123168604160
  %583 = ashr exact i64 %sext51, 32
  %584 = getelementptr inbounds float, float* %22, i64 %583
  %585 = bitcast float* %584 to <64 x float>*
  %586 = load <64 x float>, <64 x float>* %585, align 64, !tbaa !1839
  %587 = fadd <64 x float> %581, %586
  %588 = fcmp ogt <64 x float> %587, zeroinitializer
  %589 = select <64 x i1> %588, <64 x float> %587, <64 x float> zeroinitializer
  %590 = getelementptr inbounds float, float* %10, i64 %583
  %591 = bitcast float* %590 to <64 x float>*
  store <64 x float> %589, <64 x float>* %591, align 64, !tbaa !1842
  %592 = getelementptr inbounds i8, i8* %43, i64 4096
  %593 = bitcast i8* %592 to <64 x float>*
  %594 = load <64 x float>, <64 x float>* %593, align 64, !tbaa !1821
  %595 = fadd <64 x float> %594, %348
  %596 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %595, <64 x float> %351, <64 x float> %354)
  %597 = mul i64 %indvars.iv36, 7696581394432
  %sext52 = add i64 %597, 4398046511104
  %598 = ashr exact i64 %sext52, 32
  %599 = getelementptr inbounds float, float* %22, i64 %598
  %600 = bitcast float* %599 to <64 x float>*
  %601 = load <64 x float>, <64 x float>* %600, align 64, !tbaa !1839
  %602 = fadd <64 x float> %596, %601
  %603 = fcmp ogt <64 x float> %602, zeroinitializer
  %604 = select <64 x i1> %603, <64 x float> %602, <64 x float> zeroinitializer
  %605 = getelementptr inbounds float, float* %10, i64 %598
  %606 = bitcast float* %605 to <64 x float>*
  store <64 x float> %604, <64 x float>* %606, align 64, !tbaa !1842
  %607 = getelementptr inbounds i8, i8* %43, i64 4352
  %608 = bitcast i8* %607 to <64 x float>*
  %609 = load <64 x float>, <64 x float>* %608, align 64, !tbaa !1821
  %610 = fadd <64 x float> %609, %348
  %611 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %610, <64 x float> %351, <64 x float> %354)
  %612 = mul i64 %indvars.iv36, 7696581394432
  %sext53 = add i64 %612, 4672924418048
  %613 = ashr exact i64 %sext53, 32
  %614 = getelementptr inbounds float, float* %22, i64 %613
  %615 = bitcast float* %614 to <64 x float>*
  %616 = load <64 x float>, <64 x float>* %615, align 64, !tbaa !1839
  %617 = fadd <64 x float> %611, %616
  %618 = fcmp ogt <64 x float> %617, zeroinitializer
  %619 = select <64 x i1> %618, <64 x float> %617, <64 x float> zeroinitializer
  %620 = getelementptr inbounds float, float* %10, i64 %613
  %621 = bitcast float* %620 to <64 x float>*
  store <64 x float> %619, <64 x float>* %621, align 64, !tbaa !1842
  %622 = getelementptr inbounds i8, i8* %43, i64 4608
  %623 = bitcast i8* %622 to <64 x float>*
  %624 = load <64 x float>, <64 x float>* %623, align 64, !tbaa !1821
  %625 = fadd <64 x float> %624, %348
  %626 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %625, <64 x float> %351, <64 x float> %354)
  %627 = mul i64 %indvars.iv36, 7696581394432
  %sext54 = add i64 %627, 4947802324992
  %628 = ashr exact i64 %sext54, 32
  %629 = getelementptr inbounds float, float* %22, i64 %628
  %630 = bitcast float* %629 to <64 x float>*
  %631 = load <64 x float>, <64 x float>* %630, align 64, !tbaa !1839
  %632 = fadd <64 x float> %626, %631
  %633 = fcmp ogt <64 x float> %632, zeroinitializer
  %634 = select <64 x i1> %633, <64 x float> %632, <64 x float> zeroinitializer
  %635 = getelementptr inbounds float, float* %10, i64 %628
  %636 = bitcast float* %635 to <64 x float>*
  store <64 x float> %634, <64 x float>* %636, align 64, !tbaa !1842
  %637 = getelementptr inbounds i8, i8* %43, i64 4864
  %638 = bitcast i8* %637 to <64 x float>*
  %639 = load <64 x float>, <64 x float>* %638, align 64, !tbaa !1821
  %640 = fadd <64 x float> %639, %348
  %641 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %640, <64 x float> %351, <64 x float> %354)
  %642 = mul i64 %indvars.iv36, 7696581394432
  %sext55 = add i64 %642, 5222680231936
  %643 = ashr exact i64 %sext55, 32
  %644 = getelementptr inbounds float, float* %22, i64 %643
  %645 = bitcast float* %644 to <64 x float>*
  %646 = load <64 x float>, <64 x float>* %645, align 64, !tbaa !1839
  %647 = fadd <64 x float> %641, %646
  %648 = fcmp ogt <64 x float> %647, zeroinitializer
  %649 = select <64 x i1> %648, <64 x float> %647, <64 x float> zeroinitializer
  %650 = getelementptr inbounds float, float* %10, i64 %643
  %651 = bitcast float* %650 to <64 x float>*
  store <64 x float> %649, <64 x float>* %651, align 64, !tbaa !1842
  %652 = getelementptr inbounds i8, i8* %43, i64 5120
  %653 = bitcast i8* %652 to <64 x float>*
  %654 = load <64 x float>, <64 x float>* %653, align 64, !tbaa !1821
  %655 = fadd <64 x float> %654, %348
  %656 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %655, <64 x float> %351, <64 x float> %354)
  %657 = mul i64 %indvars.iv36, 7696581394432
  %sext56 = add i64 %657, 5497558138880
  %658 = ashr exact i64 %sext56, 32
  %659 = getelementptr inbounds float, float* %22, i64 %658
  %660 = bitcast float* %659 to <64 x float>*
  %661 = load <64 x float>, <64 x float>* %660, align 64, !tbaa !1839
  %662 = fadd <64 x float> %656, %661
  %663 = fcmp ogt <64 x float> %662, zeroinitializer
  %664 = select <64 x i1> %663, <64 x float> %662, <64 x float> zeroinitializer
  %665 = getelementptr inbounds float, float* %10, i64 %658
  %666 = bitcast float* %665 to <64 x float>*
  store <64 x float> %664, <64 x float>* %666, align 64, !tbaa !1842
  %667 = getelementptr inbounds i8, i8* %43, i64 5376
  %668 = bitcast i8* %667 to <64 x float>*
  %669 = load <64 x float>, <64 x float>* %668, align 64, !tbaa !1821
  %670 = fadd <64 x float> %669, %348
  %671 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %670, <64 x float> %351, <64 x float> %354)
  %672 = mul i64 %indvars.iv36, 7696581394432
  %sext57 = add i64 %672, 5772436045824
  %673 = ashr exact i64 %sext57, 32
  %674 = getelementptr inbounds float, float* %22, i64 %673
  %675 = bitcast float* %674 to <64 x float>*
  %676 = load <64 x float>, <64 x float>* %675, align 64, !tbaa !1839
  %677 = fadd <64 x float> %671, %676
  %678 = fcmp ogt <64 x float> %677, zeroinitializer
  %679 = select <64 x i1> %678, <64 x float> %677, <64 x float> zeroinitializer
  %680 = getelementptr inbounds float, float* %10, i64 %673
  %681 = bitcast float* %680 to <64 x float>*
  store <64 x float> %679, <64 x float>* %681, align 64, !tbaa !1842
  %682 = getelementptr inbounds i8, i8* %43, i64 5632
  %683 = bitcast i8* %682 to <64 x float>*
  %684 = load <64 x float>, <64 x float>* %683, align 64, !tbaa !1821
  %685 = fadd <64 x float> %684, %348
  %686 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %685, <64 x float> %351, <64 x float> %354)
  %687 = mul i64 %indvars.iv36, 7696581394432
  %sext58 = add i64 %687, 6047313952768
  %688 = ashr exact i64 %sext58, 32
  %689 = getelementptr inbounds float, float* %22, i64 %688
  %690 = bitcast float* %689 to <64 x float>*
  %691 = load <64 x float>, <64 x float>* %690, align 64, !tbaa !1839
  %692 = fadd <64 x float> %686, %691
  %693 = fcmp ogt <64 x float> %692, zeroinitializer
  %694 = select <64 x i1> %693, <64 x float> %692, <64 x float> zeroinitializer
  %695 = getelementptr inbounds float, float* %10, i64 %688
  %696 = bitcast float* %695 to <64 x float>*
  store <64 x float> %694, <64 x float>* %696, align 64, !tbaa !1842
  %697 = getelementptr inbounds i8, i8* %43, i64 5888
  %698 = bitcast i8* %697 to <64 x float>*
  %699 = load <64 x float>, <64 x float>* %698, align 64, !tbaa !1821
  %700 = fadd <64 x float> %699, %348
  %701 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %700, <64 x float> %351, <64 x float> %354)
  %702 = mul i64 %indvars.iv36, 7696581394432
  %sext59 = add i64 %702, 6322191859712
  %703 = ashr exact i64 %sext59, 32
  %704 = getelementptr inbounds float, float* %22, i64 %703
  %705 = bitcast float* %704 to <64 x float>*
  %706 = load <64 x float>, <64 x float>* %705, align 64, !tbaa !1839
  %707 = fadd <64 x float> %701, %706
  %708 = fcmp ogt <64 x float> %707, zeroinitializer
  %709 = select <64 x i1> %708, <64 x float> %707, <64 x float> zeroinitializer
  %710 = getelementptr inbounds float, float* %10, i64 %703
  %711 = bitcast float* %710 to <64 x float>*
  store <64 x float> %709, <64 x float>* %711, align 64, !tbaa !1842
  %712 = getelementptr inbounds i8, i8* %43, i64 6144
  %713 = bitcast i8* %712 to <64 x float>*
  %714 = load <64 x float>, <64 x float>* %713, align 64, !tbaa !1821
  %715 = fadd <64 x float> %714, %348
  %716 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %715, <64 x float> %351, <64 x float> %354)
  %717 = mul i64 %indvars.iv36, 7696581394432
  %sext60 = add i64 %717, 6597069766656
  %718 = ashr exact i64 %sext60, 32
  %719 = getelementptr inbounds float, float* %22, i64 %718
  %720 = bitcast float* %719 to <64 x float>*
  %721 = load <64 x float>, <64 x float>* %720, align 64, !tbaa !1839
  %722 = fadd <64 x float> %716, %721
  %723 = fcmp ogt <64 x float> %722, zeroinitializer
  %724 = select <64 x i1> %723, <64 x float> %722, <64 x float> zeroinitializer
  %725 = getelementptr inbounds float, float* %10, i64 %718
  %726 = bitcast float* %725 to <64 x float>*
  store <64 x float> %724, <64 x float>* %726, align 64, !tbaa !1842
  %727 = getelementptr inbounds i8, i8* %43, i64 6400
  %728 = bitcast i8* %727 to <64 x float>*
  %729 = load <64 x float>, <64 x float>* %728, align 64, !tbaa !1821
  %730 = fadd <64 x float> %729, %348
  %731 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %730, <64 x float> %351, <64 x float> %354)
  %732 = mul i64 %indvars.iv36, 7696581394432
  %sext61 = add i64 %732, 6871947673600
  %733 = ashr exact i64 %sext61, 32
  %734 = getelementptr inbounds float, float* %22, i64 %733
  %735 = bitcast float* %734 to <64 x float>*
  %736 = load <64 x float>, <64 x float>* %735, align 64, !tbaa !1839
  %737 = fadd <64 x float> %731, %736
  %738 = fcmp ogt <64 x float> %737, zeroinitializer
  %739 = select <64 x i1> %738, <64 x float> %737, <64 x float> zeroinitializer
  %740 = getelementptr inbounds float, float* %10, i64 %733
  %741 = bitcast float* %740 to <64 x float>*
  store <64 x float> %739, <64 x float>* %741, align 64, !tbaa !1842
  %742 = getelementptr inbounds i8, i8* %43, i64 6656
  %743 = bitcast i8* %742 to <64 x float>*
  %744 = load <64 x float>, <64 x float>* %743, align 64, !tbaa !1821
  %745 = fadd <64 x float> %744, %348
  %746 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %745, <64 x float> %351, <64 x float> %354)
  %747 = mul i64 %indvars.iv36, 7696581394432
  %sext62 = add i64 %747, 7146825580544
  %748 = ashr exact i64 %sext62, 32
  %749 = getelementptr inbounds float, float* %22, i64 %748
  %750 = bitcast float* %749 to <64 x float>*
  %751 = load <64 x float>, <64 x float>* %750, align 64, !tbaa !1839
  %752 = fadd <64 x float> %746, %751
  %753 = fcmp ogt <64 x float> %752, zeroinitializer
  %754 = select <64 x i1> %753, <64 x float> %752, <64 x float> zeroinitializer
  %755 = getelementptr inbounds float, float* %10, i64 %748
  %756 = bitcast float* %755 to <64 x float>*
  store <64 x float> %754, <64 x float>* %756, align 64, !tbaa !1842
  %757 = getelementptr inbounds i8, i8* %43, i64 6912
  %758 = bitcast i8* %757 to <64 x float>*
  %759 = load <64 x float>, <64 x float>* %758, align 64, !tbaa !1821
  %760 = fadd <64 x float> %759, %348
  %761 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %760, <64 x float> %351, <64 x float> %354)
  %762 = mul i64 %indvars.iv36, 7696581394432
  %sext63 = add i64 %762, 7421703487488
  %763 = ashr exact i64 %sext63, 32
  %764 = getelementptr inbounds float, float* %22, i64 %763
  %765 = bitcast float* %764 to <64 x float>*
  %766 = load <64 x float>, <64 x float>* %765, align 64, !tbaa !1839
  %767 = fadd <64 x float> %761, %766
  %768 = fcmp ogt <64 x float> %767, zeroinitializer
  %769 = select <64 x i1> %768, <64 x float> %767, <64 x float> zeroinitializer
  %770 = getelementptr inbounds float, float* %10, i64 %763
  %771 = bitcast float* %770 to <64 x float>*
  store <64 x float> %769, <64 x float>* %771, align 64, !tbaa !1842
  %772 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %773 = tail call i32 %772(i32 1, i32 %25, i8* nonnull %43)
  %indvars.iv.next37 = add nsw i64 %indvars.iv36, 1
  %774 = icmp slt i64 %indvars.iv.next37, %41
  br i1 %774, label %for_body, label %for_end, !prof !5
}

; Function Attrs: nounwind readnone speculatable
declare <64 x float> @llvm.fmuladd.v64f32(<64 x float>, <64 x float>, <64 x float>) #3

define dllexport i32 @fused_layout_transform_32(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.220, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1845
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.221, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !1859
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.222, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !1861
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !1875
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 16
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !1877
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 14
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !1880
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 14
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !1882
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 64
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !1886
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 12544, i32 896, i32 64, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !1897
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 200704
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !1901
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !1915
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !1917
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 14
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !1920
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 14
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !1922
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 1024
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !1926
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 200704, i32 14336, i32 1024, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !1937
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 200704
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([244 x i8], [244 x i8]* @.str.225, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_32_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_32_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %15, align 8
  %3 = getelementptr inbounds %15, %15* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %15, %15* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %15* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.226, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.226(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 13
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 14
  %14 = select i1 %13, i32 %12, i32 14
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 14
  %18 = select i1 %17, i32 %16, i32 14
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 14336
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = mul i32 %25, 896
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %28 = shl i64 %indvars.iv7, 10
  %29 = add nsw i64 %28, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %30 = shl i32 %indvars.iv7.tr, 6
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %27
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %34 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %35 = shl nsw i64 %indvars.iv, 4
  %36 = add nsw i64 %29, %35
  %37 = trunc i64 %35 to i32
  %38 = insertelement <16 x i32> undef, i32 %37, i32 0
  %39 = trunc i64 %35 to i32
  %40 = or i32 %39, 1
  %41 = insertelement <16 x i32> %38, i32 %40, i32 1
  %42 = trunc i64 %35 to i32
  %43 = or i32 %42, 2
  %44 = insertelement <16 x i32> %41, i32 %43, i32 2
  %45 = trunc i64 %35 to i32
  %46 = or i32 %45, 3
  %47 = insertelement <16 x i32> %44, i32 %46, i32 3
  %48 = trunc i64 %35 to i32
  %49 = or i32 %48, 4
  %50 = insertelement <16 x i32> %47, i32 %49, i32 4
  %51 = trunc i64 %35 to i32
  %52 = or i32 %51, 5
  %53 = insertelement <16 x i32> %50, i32 %52, i32 5
  %54 = trunc i64 %35 to i32
  %55 = or i32 %54, 6
  %56 = insertelement <16 x i32> %53, i32 %55, i32 6
  %57 = trunc i64 %35 to i32
  %58 = or i32 %57, 7
  %59 = insertelement <16 x i32> %56, i32 %58, i32 7
  %60 = trunc i64 %35 to i32
  %61 = or i32 %60, 8
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  %63 = trunc i64 %35 to i32
  %64 = or i32 %63, 9
  %65 = insertelement <16 x i32> %62, i32 %64, i32 9
  %66 = trunc i64 %35 to i32
  %67 = or i32 %66, 10
  %68 = insertelement <16 x i32> %65, i32 %67, i32 10
  %69 = trunc i64 %35 to i32
  %70 = or i32 %69, 11
  %71 = insertelement <16 x i32> %68, i32 %70, i32 11
  %72 = trunc i64 %35 to i32
  %73 = or i32 %72, 12
  %74 = insertelement <16 x i32> %71, i32 %73, i32 12
  %75 = trunc i64 %35 to i32
  %76 = or i32 %75, 13
  %77 = insertelement <16 x i32> %74, i32 %76, i32 13
  %78 = trunc i64 %35 to i32
  %79 = or i32 %78, 14
  %80 = insertelement <16 x i32> %77, i32 %79, i32 14
  %81 = trunc i64 %35 to i32
  %82 = or i32 %81, 15
  %83 = insertelement <16 x i32> %80, i32 %82, i32 15
  %84 = sdiv <16 x i32> %83, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = mul <16 x i32> %84, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %86 = sub <16 x i32> %83, %85
  %87 = icmp sgt <16 x i32> %86, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %87, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %88 = sext <16 x i1> %not. to <16 x i32>
  %89 = add nsw <16 x i32> %84, %88
  %90 = mul nsw <16 x i32> %89, <i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544>
  %91 = add nsw <16 x i32> %86, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %92 = select <16 x i1> %87, <16 x i32> %86, <16 x i32> %91
  %93 = add <16 x i32> %33, %92
  %94 = add <16 x i32> %93, %90
  %95 = extractelement <16 x i32> %94, i64 0
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !1941
  %99 = insertelement <16 x float> undef, float %98, i32 0
  %100 = extractelement <16 x i32> %94, i64 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !1941
  %104 = insertelement <16 x float> %99, float %103, i32 1
  %105 = extractelement <16 x i32> %94, i64 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !1941
  %109 = insertelement <16 x float> %104, float %108, i32 2
  %110 = extractelement <16 x i32> %94, i64 3
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !1941
  %114 = insertelement <16 x float> %109, float %113, i32 3
  %115 = extractelement <16 x i32> %94, i64 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !1941
  %119 = insertelement <16 x float> %114, float %118, i32 4
  %120 = extractelement <16 x i32> %94, i64 5
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !1941
  %124 = insertelement <16 x float> %119, float %123, i32 5
  %125 = extractelement <16 x i32> %94, i64 6
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !1941
  %129 = insertelement <16 x float> %124, float %128, i32 6
  %130 = extractelement <16 x i32> %94, i64 7
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !1941
  %134 = insertelement <16 x float> %129, float %133, i32 7
  %135 = extractelement <16 x i32> %94, i64 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !1941
  %139 = insertelement <16 x float> %134, float %138, i32 8
  %140 = extractelement <16 x i32> %94, i64 9
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !1941
  %144 = insertelement <16 x float> %139, float %143, i32 9
  %145 = extractelement <16 x i32> %94, i64 10
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !1941
  %149 = insertelement <16 x float> %144, float %148, i32 10
  %150 = extractelement <16 x i32> %94, i64 11
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !1941
  %154 = insertelement <16 x float> %149, float %153, i32 11
  %155 = extractelement <16 x i32> %94, i64 12
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !1941
  %159 = insertelement <16 x float> %154, float %158, i32 12
  %160 = extractelement <16 x i32> %94, i64 13
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !1941
  %164 = insertelement <16 x float> %159, float %163, i32 13
  %165 = extractelement <16 x i32> %94, i64 14
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !1941
  %169 = insertelement <16 x float> %164, float %168, i32 14
  %170 = extractelement <16 x i32> %94, i64 15
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !1941
  %174 = insertelement <16 x float> %169, float %173, i32 15
  %175 = getelementptr inbounds float, float* %4, i64 %36
  %176 = bitcast float* %175 to <16 x float>*
  store <16 x float> %174, <16 x float>* %176, align 64, !tbaa !1944
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 14
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 7
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.227, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !1947
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !1961
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !1964
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !1966
  %32 = getelementptr inbounds i8, i8* %0, i64 40
  %33 = bitcast i8* %32 to %1**
  %34 = load %1*, %1** %33, align 8
  %35 = getelementptr inbounds i8, i8* %1, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4, !tbaa !1970
  %38 = getelementptr inbounds i8, i8* %0, i64 48
  %39 = bitcast i8* %38 to %1**
  %40 = load %1*, %1** %39, align 8
  %41 = getelementptr inbounds i8, i8* %1, i64 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 4, !tbaa !1972
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  %66 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %77 = load i64*, i64** %76, align 8
  %78 = getelementptr inbounds %1, %1* %34, i64 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds %1, %1* %34, i64 0, i32 4
  %81 = load i64*, i64** %80, align 8
  %82 = getelementptr inbounds %1, %1* %34, i64 0, i32 5
  %83 = load i64*, i64** %82, align 8
  %84 = getelementptr inbounds %1, %1* %40, i64 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %1, %1* %40, i64 0, i32 4
  %87 = load i64*, i64** %86, align 8
  %88 = getelementptr inbounds %1, %1* %40, i64 0, i32 5
  %89 = load i64*, i64** %88, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %90(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.228, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %91 = getelementptr inbounds i8, i8* %1, i64 4
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 4, !tbaa !1975
  switch i32 %93, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %94 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %94(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.229, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.230, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.231, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %97(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.232, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %37, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ]

assert_fail11:                                    ; preds = %assert_end10
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.233, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  switch i32 %43, label %assert_fail13 [
    i32 13, label %assert_end14
    i32 7, label %assert_end14
    i32 4, label %assert_end14
    i32 3, label %assert_end14
  ]

assert_fail13:                                    ; preds = %assert_end12
  %99 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %99(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.234, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12, %assert_end12, %assert_end12, %assert_end12
  %100 = icmp eq i32 %51, 1
  br i1 %100, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 5
  br i1 %104, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %106 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 2
  %109 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 32
  %112 = and i1 %108, %111
  %113 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %114 = load i16, i16* %113, align 2
  %115 = icmp eq i16 %114, 1
  %116 = and i1 %112, %115
  br i1 %116, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %118 = load i64, i64* %47, align 8, !tbaa !1977
  %119 = trunc i64 %118 to i32
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %122 = getelementptr inbounds i64, i64* %47, i64 1
  %123 = load i64, i64* %122, align 8, !tbaa !1991
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 16
  br i1 %125, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %127 = getelementptr inbounds i64, i64* %47, i64 2
  %128 = load i64, i64* %127, align 8, !tbaa !1993
  %129 = trunc i64 %128 to i32
  %130 = icmp eq i32 %129, 56
  br i1 %130, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %132 = getelementptr inbounds i64, i64* %47, i64 3
  %133 = load i64, i64* %132, align 8, !tbaa !1996
  %134 = trunc i64 %133 to i32
  %135 = icmp eq i32 %134, 56
  br i1 %135, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %136 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %136(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %137 = getelementptr inbounds i64, i64* %47, i64 4
  %138 = load i64, i64* %137, align 8, !tbaa !1998
  %139 = trunc i64 %138 to i32
  %140 = icmp eq i32 %139, 4
  br i1 %140, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %141 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %141(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.98, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %142 = icmp eq i64* %49, null
  br i1 %142, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end30
  %143 = getelementptr inbounds i64, i64* %49, i64 1
  %144 = bitcast i64* %143 to <4 x i64>*
  %145 = load <4 x i64>, <4 x i64>* %144, align 8, !tbaa !2002
  %146 = trunc <4 x i64> %145 to <4 x i32>
  %147 = icmp eq <4 x i32> %146, <i32 12544, i32 224, i32 4, i32 1>
  %148 = load i64, i64* %49, align 8, !tbaa !2013
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 200704
  %rdx.shuf203 = shufflevector <4 x i1> %147, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx204 = and <4 x i1> %147, %rdx.shuf203
  %rdx.shuf205 = shufflevector <4 x i1> %bin.rdx204, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx206 = and <4 x i1> %bin.rdx204, %rdx.shuf205
  %151 = extractelement <4 x i1> %bin.rdx206, i32 0
  %152 = and i1 %151, %150
  br i1 %152, label %if_end, label %assert_fail31, !prof !5

if_end:                                           ; preds = %assert_end30, %if_then
  %153 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %154 = load i64, i64* %153, align 8
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %assert_end34, label %assert_fail33, !prof !5

assert_fail31:                                    ; preds = %if_then
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.150, i64 0, i64 0))
  ret i32 -1

assert_fail33:                                    ; preds = %if_end
  %157 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %157(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %if_end
  %158 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 6
  br i1 %160, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %162 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 2
  %165 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %166 = load i8, i8* %165, align 1
  %167 = icmp eq i8 %166, 32
  %168 = and i1 %164, %167
  %169 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %170 = load i16, i16* %169, align 2
  %171 = icmp eq i16 %170, 1
  %172 = and i1 %168, %171
  br i1 %172, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %174 = load i64, i64* %57, align 8, !tbaa !2017
  %175 = trunc i64 %174 to i32
  %176 = icmp eq i32 %175, 8
  br i1 %176, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %177(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.151, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %178 = getelementptr inbounds i64, i64* %57, i64 1
  %179 = load i64, i64* %178, align 8, !tbaa !2031
  %180 = trunc i64 %179 to i32
  %181 = icmp eq i32 %180, 16
  br i1 %181, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.152, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %183 = getelementptr inbounds i64, i64* %57, i64 2
  %184 = load i64, i64* %183, align 8, !tbaa !2033
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 1
  br i1 %186, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %187 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %187(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %188 = getelementptr inbounds i64, i64* %57, i64 3
  %189 = load i64, i64* %188, align 8, !tbaa !2036
  %190 = trunc i64 %189 to i32
  %191 = icmp eq i32 %190, 1
  br i1 %191, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %192 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %192(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %193 = getelementptr inbounds i64, i64* %57, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !2038
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 4
  br i1 %196, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %198 = getelementptr inbounds i64, i64* %57, i64 5
  %199 = load i64, i64* %198, align 8, !tbaa !2042
  %200 = trunc i64 %199 to i32
  %201 = icmp eq i32 %200, 32
  br i1 %201, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %202 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %202(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %203 = icmp eq i64* %59, null
  br i1 %203, label %if_end52, label %if_then51, !prof !50

if_then51:                                        ; preds = %assert_end50
  %204 = getelementptr inbounds i64, i64* %59, i64 2
  %205 = bitcast i64* %204 to <4 x i64>*
  %206 = load <4 x i64>, <4 x i64>* %205, align 8, !tbaa !2044
  %207 = trunc <4 x i64> %206 to <4 x i32>
  %208 = icmp eq <4 x i32> %207, <i32 128, i32 128, i32 32, i32 1>
  %209 = getelementptr inbounds i64, i64* %59, i64 1
  %210 = load i64, i64* %209, align 8, !tbaa !2055
  %211 = trunc i64 %210 to i32
  %212 = icmp eq i32 %211, 128
  %213 = load i64, i64* %59, align 8, !tbaa !2059
  %214 = trunc i64 %213 to i32
  %215 = icmp eq i32 %214, 2048
  %rdx.shuf199 = shufflevector <4 x i1> %208, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx200 = and <4 x i1> %208, %rdx.shuf199
  %rdx.shuf201 = shufflevector <4 x i1> %bin.rdx200, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx202 = and <4 x i1> %bin.rdx200, %rdx.shuf201
  %216 = extractelement <4 x i1> %bin.rdx202, i32 0
  %217 = and i1 %216, %212
  %218 = and i1 %217, %215
  br i1 %218, label %if_end52, label %assert_fail53, !prof !5

if_end52:                                         ; preds = %assert_end50, %if_then51
  %219 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %220 = load i64, i64* %219, align 8
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %assert_end56, label %assert_fail55, !prof !5

assert_fail53:                                    ; preds = %if_then51
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.153, i64 0, i64 0))
  ret i32 -1

assert_fail55:                                    ; preds = %if_end52
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %if_end52
  %224 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 1
  br i1 %226, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %227(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %228 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %53, %229
  br i1 %230, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %231(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %232 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, 5
  br i1 %234, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %236 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %237 = load i8, i8* %236, align 1
  %238 = icmp eq i8 %237, 2
  %239 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 32
  %242 = and i1 %238, %241
  %243 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %244 = load i16, i16* %243, align 2
  %245 = icmp eq i16 %244, 1
  %246 = and i1 %242, %245
  br i1 %246, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %247(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %248 = load i64, i64* %63, align 8, !tbaa !2061
  %249 = trunc i64 %248 to i32
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %251(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %252 = getelementptr inbounds i64, i64* %63, i64 1
  %253 = load i64, i64* %252, align 8, !tbaa !2075
  %254 = trunc i64 %253 to i32
  %255 = icmp eq i32 %254, 8
  br i1 %255, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %256(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.154, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %257 = getelementptr inbounds i64, i64* %63, i64 2
  %258 = load i64, i64* %257, align 8, !tbaa !2077
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %262 = getelementptr inbounds i64, i64* %63, i64 3
  %263 = load i64, i64* %262, align 8, !tbaa !2080
  %264 = trunc i64 %263 to i32
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %266(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %267 = getelementptr inbounds i64, i64* %63, i64 4
  %268 = load i64, i64* %267, align 8, !tbaa !2082
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 32
  br i1 %270, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %271(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %272 = icmp eq i64* %65, null
  br i1 %272, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %273 = getelementptr inbounds i64, i64* %65, i64 1
  %274 = bitcast i64* %273 to <4 x i64>*
  %275 = load <4 x i64>, <4 x i64>* %274, align 8, !tbaa !2086
  %276 = trunc <4 x i64> %275 to <4 x i32>
  %277 = icmp eq <4 x i32> %276, <i32 32, i32 32, i32 32, i32 1>
  %278 = load i64, i64* %65, align 8, !tbaa !2097
  %279 = trunc i64 %278 to i32
  %280 = icmp eq i32 %279, 256
  %rdx.shuf195 = shufflevector <4 x i1> %277, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx196 = and <4 x i1> %277, %rdx.shuf195
  %rdx.shuf197 = shufflevector <4 x i1> %bin.rdx196, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx198 = and <4 x i1> %bin.rdx196, %rdx.shuf197
  %281 = extractelement <4 x i1> %bin.rdx198, i32 0
  %282 = and i1 %281, %280
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.155, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %53, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %301 = load i8, i8* %300, align 1
  %302 = icmp eq i8 %301, 2
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = and i1 %302, %305
  %307 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %308 = load i16, i16* %307, align 2
  %309 = icmp eq i16 %308, 1
  %310 = and i1 %306, %309
  br i1 %310, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %312 = load i64, i64* %69, align 8, !tbaa !2101
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %316 = getelementptr inbounds i64, i64* %69, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !2115
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 8
  br i1 %319, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.156, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %321 = getelementptr inbounds i64, i64* %69, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !2117
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 1
  br i1 %324, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %326 = getelementptr inbounds i64, i64* %69, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !2120
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 1
  br i1 %329, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %331 = getelementptr inbounds i64, i64* %69, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !2122
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 32
  br i1 %334, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %336 = icmp eq i64* %71, null
  br i1 %336, label %if_end100, label %if_then99, !prof !50

if_then99:                                        ; preds = %assert_end98
  %337 = getelementptr inbounds i64, i64* %71, i64 1
  %338 = bitcast i64* %337 to <4 x i64>*
  %339 = load <4 x i64>, <4 x i64>* %338, align 8, !tbaa !2126
  %340 = trunc <4 x i64> %339 to <4 x i32>
  %341 = icmp eq <4 x i32> %340, <i32 32, i32 32, i32 32, i32 1>
  %342 = load i64, i64* %71, align 8, !tbaa !2137
  %343 = trunc i64 %342 to i32
  %344 = icmp eq i32 %343, 256
  %rdx.shuf191 = shufflevector <4 x i1> %341, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx192 = and <4 x i1> %341, %rdx.shuf191
  %rdx.shuf193 = shufflevector <4 x i1> %bin.rdx192, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx194 = and <4 x i1> %bin.rdx192, %rdx.shuf193
  %345 = extractelement <4 x i1> %bin.rdx194, i32 0
  %346 = and i1 %345, %344
  br i1 %346, label %if_end100, label %assert_fail101, !prof !5

if_end100:                                        ; preds = %assert_end98, %if_then99
  %347 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %348 = load i64, i64* %347, align 8
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %assert_end104, label %assert_fail103, !prof !5

assert_fail101:                                   ; preds = %if_then99
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %350(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.157, i64 0, i64 0))
  ret i32 -1

assert_fail103:                                   ; preds = %if_end100
  %351 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %351(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %if_end100
  %352 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %353 = load i32, i32* %352, align 4
  %354 = icmp eq i32 %353, 1
  br i1 %354, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %355 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %355(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %356 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %357 = load i32, i32* %356, align 4
  %358 = icmp eq i32 %53, %357
  br i1 %358, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %359 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %359(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %360 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %361 = load i32, i32* %360, align 4
  %362 = icmp eq i32 %361, 5
  br i1 %362, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %364 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %365 = load i8, i8* %364, align 1
  %366 = icmp eq i8 %365, 2
  %367 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %368 = load i8, i8* %367, align 1
  %369 = icmp eq i8 %368, 32
  %370 = and i1 %366, %369
  %371 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %372 = load i16, i16* %371, align 2
  %373 = icmp eq i16 %372, 1
  %374 = and i1 %370, %373
  br i1 %374, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %375 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %375(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %376 = load i64, i64* %75, align 8, !tbaa !2141
  %377 = trunc i64 %376 to i32
  %378 = icmp eq i32 %377, 1
  br i1 %378, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %379 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %379(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %380 = getelementptr inbounds i64, i64* %75, i64 1
  %381 = load i64, i64* %380, align 8, !tbaa !2155
  %382 = trunc i64 %381 to i32
  %383 = icmp eq i32 %382, 8
  br i1 %383, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %384 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %384(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.158, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %385 = getelementptr inbounds i64, i64* %75, i64 2
  %386 = load i64, i64* %385, align 8, !tbaa !2157
  %387 = trunc i64 %386 to i32
  %388 = icmp eq i32 %387, 1
  br i1 %388, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %390 = getelementptr inbounds i64, i64* %75, i64 3
  %391 = load i64, i64* %390, align 8, !tbaa !2160
  %392 = trunc i64 %391 to i32
  %393 = icmp eq i32 %392, 1
  br i1 %393, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %394 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %394(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %395 = getelementptr inbounds i64, i64* %75, i64 4
  %396 = load i64, i64* %395, align 8, !tbaa !2162
  %397 = trunc i64 %396 to i32
  %398 = icmp eq i32 %397, 32
  br i1 %398, label %assert_end122, label %assert_fail121, !prof !5

assert_fail121:                                   ; preds = %assert_end120
  %399 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %399(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end122:                                    ; preds = %assert_end120
  %400 = icmp eq i64* %77, null
  br i1 %400, label %if_end124, label %if_then123, !prof !50

if_then123:                                       ; preds = %assert_end122
  %401 = getelementptr inbounds i64, i64* %77, i64 1
  %402 = bitcast i64* %401 to <4 x i64>*
  %403 = load <4 x i64>, <4 x i64>* %402, align 8, !tbaa !2166
  %404 = trunc <4 x i64> %403 to <4 x i32>
  %405 = icmp eq <4 x i32> %404, <i32 32, i32 32, i32 32, i32 1>
  %406 = load i64, i64* %77, align 8, !tbaa !2177
  %407 = trunc i64 %406 to i32
  %408 = icmp eq i32 %407, 256
  %rdx.shuf187 = shufflevector <4 x i1> %405, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx188 = and <4 x i1> %405, %rdx.shuf187
  %rdx.shuf189 = shufflevector <4 x i1> %bin.rdx188, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx190 = and <4 x i1> %bin.rdx188, %rdx.shuf189
  %409 = extractelement <4 x i1> %bin.rdx190, i32 0
  %410 = and i1 %409, %408
  br i1 %410, label %if_end124, label %assert_fail125, !prof !5

if_end124:                                        ; preds = %assert_end122, %if_then123
  %411 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %412 = load i64, i64* %411, align 8
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %assert_end128, label %assert_fail127, !prof !5

assert_fail125:                                   ; preds = %if_then123
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %414(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.159, i64 0, i64 0))
  ret i32 -1

assert_fail127:                                   ; preds = %if_end124
  %415 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %415(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %if_end124
  %416 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %417 = load i32, i32* %416, align 4
  %418 = icmp eq i32 %417, 1
  br i1 %418, label %assert_end130, label %assert_fail129, !prof !5

assert_fail129:                                   ; preds = %assert_end128
  %419 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %419(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end130:                                    ; preds = %assert_end128
  %420 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %421 = load i32, i32* %420, align 4
  %422 = icmp eq i32 %53, %421
  br i1 %422, label %assert_end132, label %assert_fail131, !prof !5

assert_fail131:                                   ; preds = %assert_end130
  %423 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %423(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end132:                                    ; preds = %assert_end130
  %424 = getelementptr inbounds %1, %1* %34, i64 0, i32 2
  %425 = load i32, i32* %424, align 4
  %426 = icmp eq i32 %425, 5
  br i1 %426, label %assert_end134, label %assert_fail133, !prof !5

assert_fail133:                                   ; preds = %assert_end132
  %427 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %427(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %assert_end132
  %428 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 0
  %429 = load i8, i8* %428, align 1
  %430 = icmp eq i8 %429, 2
  %431 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 1
  %432 = load i8, i8* %431, align 1
  %433 = icmp eq i8 %432, 32
  %434 = and i1 %430, %433
  %435 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 2
  %436 = load i16, i16* %435, align 2
  %437 = icmp eq i16 %436, 1
  %438 = and i1 %434, %437
  br i1 %438, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %439 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %439(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %440 = load i64, i64* %81, align 8, !tbaa !2181
  %441 = trunc i64 %440 to i32
  %442 = icmp eq i32 %441, 1
  br i1 %442, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %443 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %443(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.116, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %444 = getelementptr inbounds i64, i64* %81, i64 1
  %445 = load i64, i64* %444, align 8, !tbaa !2195
  %446 = trunc i64 %445 to i32
  %447 = icmp eq i32 %446, 8
  br i1 %447, label %assert_end140, label %assert_fail139, !prof !5

assert_fail139:                                   ; preds = %assert_end138
  %448 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %448(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.160, i64 0, i64 0))
  ret i32 -1

assert_end140:                                    ; preds = %assert_end138
  %449 = getelementptr inbounds i64, i64* %81, i64 2
  %450 = load i64, i64* %449, align 8, !tbaa !2197
  %451 = trunc i64 %450 to i32
  %452 = icmp eq i32 %451, 56
  br i1 %452, label %assert_end142, label %assert_fail141, !prof !5

assert_fail141:                                   ; preds = %assert_end140
  %453 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %453(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.161, i64 0, i64 0))
  ret i32 -1

assert_end142:                                    ; preds = %assert_end140
  %454 = getelementptr inbounds i64, i64* %81, i64 3
  %455 = load i64, i64* %454, align 8, !tbaa !2200
  %456 = trunc i64 %455 to i32
  %457 = icmp eq i32 %456, 56
  br i1 %457, label %assert_end144, label %assert_fail143, !prof !5

assert_fail143:                                   ; preds = %assert_end142
  %458 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %458(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.162, i64 0, i64 0))
  ret i32 -1

assert_end144:                                    ; preds = %assert_end142
  %459 = getelementptr inbounds i64, i64* %81, i64 4
  %460 = load i64, i64* %459, align 8, !tbaa !2202
  %461 = trunc i64 %460 to i32
  %462 = icmp eq i32 %461, 32
  br i1 %462, label %assert_end146, label %assert_fail145, !prof !5

assert_fail145:                                   ; preds = %assert_end144
  %463 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %463(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.120, i64 0, i64 0))
  ret i32 -1

assert_end146:                                    ; preds = %assert_end144
  %464 = icmp eq i64* %83, null
  br i1 %464, label %if_end148, label %if_then147, !prof !50

if_then147:                                       ; preds = %assert_end146
  %465 = getelementptr inbounds i64, i64* %83, i64 1
  %466 = bitcast i64* %465 to <4 x i64>*
  %467 = load <4 x i64>, <4 x i64>* %466, align 8, !tbaa !2206
  %468 = trunc <4 x i64> %467 to <4 x i32>
  %469 = icmp eq <4 x i32> %468, <i32 100352, i32 1792, i32 32, i32 1>
  %470 = load i64, i64* %83, align 8, !tbaa !2217
  %471 = trunc i64 %470 to i32
  %472 = icmp eq i32 %471, 802816
  %rdx.shuf183 = shufflevector <4 x i1> %469, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx184 = and <4 x i1> %469, %rdx.shuf183
  %rdx.shuf185 = shufflevector <4 x i1> %bin.rdx184, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx186 = and <4 x i1> %bin.rdx184, %rdx.shuf185
  %473 = extractelement <4 x i1> %bin.rdx186, i32 0
  %474 = and i1 %473, %472
  br i1 %474, label %if_end148, label %assert_fail149, !prof !5

if_end148:                                        ; preds = %assert_end146, %if_then147
  %475 = getelementptr inbounds %1, %1* %34, i64 0, i32 6
  %476 = load i64, i64* %475, align 8
  %477 = icmp eq i64 %476, 0
  br i1 %477, label %assert_end152, label %assert_fail151, !prof !5

assert_fail149:                                   ; preds = %if_then147
  %478 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %478(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.163, i64 0, i64 0))
  ret i32 -1

assert_fail151:                                   ; preds = %if_end148
  %479 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %479(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end152:                                    ; preds = %if_end148
  %480 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 0
  %481 = load i32, i32* %480, align 4
  %482 = icmp eq i32 %481, 1
  br i1 %482, label %assert_end154, label %assert_fail153, !prof !5

assert_fail153:                                   ; preds = %assert_end152
  %483 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %483(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end154:                                    ; preds = %assert_end152
  %484 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 1
  %485 = load i32, i32* %484, align 4
  %486 = icmp eq i32 %53, %485
  br i1 %486, label %assert_end156, label %assert_fail155, !prof !5

assert_fail155:                                   ; preds = %assert_end154
  %487 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %487(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end156:                                    ; preds = %assert_end154
  %488 = getelementptr inbounds %1, %1* %40, i64 0, i32 2
  %489 = load i32, i32* %488, align 4
  %490 = icmp eq i32 %489, 5
  br i1 %490, label %assert_end158, label %assert_fail157, !prof !5

assert_fail157:                                   ; preds = %assert_end156
  %491 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %491(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.208, i64 0, i64 0))
  ret i32 -1

assert_end158:                                    ; preds = %assert_end156
  %492 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 0
  %493 = load i8, i8* %492, align 1
  %494 = icmp eq i8 %493, 2
  %495 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 1
  %496 = load i8, i8* %495, align 1
  %497 = icmp eq i8 %496, 32
  %498 = and i1 %494, %497
  %499 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 2
  %500 = load i16, i16* %499, align 2
  %501 = icmp eq i16 %500, 1
  %502 = and i1 %498, %501
  br i1 %502, label %assert_end160, label %assert_fail159, !prof !5

assert_fail159:                                   ; preds = %assert_end158
  %503 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %503(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.209, i64 0, i64 0))
  ret i32 -1

assert_end160:                                    ; preds = %assert_end158
  %504 = load i64, i64* %87, align 8, !tbaa !2221
  %505 = trunc i64 %504 to i32
  %506 = icmp eq i32 %505, 1
  br i1 %506, label %assert_end162, label %assert_fail161, !prof !5

assert_fail161:                                   ; preds = %assert_end160
  %507 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %507(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.210, i64 0, i64 0))
  ret i32 -1

assert_end162:                                    ; preds = %assert_end160
  %508 = getelementptr inbounds i64, i64* %87, i64 1
  %509 = load i64, i64* %508, align 8, !tbaa !2235
  %510 = trunc i64 %509 to i32
  %511 = icmp eq i32 %510, 8
  br i1 %511, label %assert_end164, label %assert_fail163, !prof !5

assert_fail163:                                   ; preds = %assert_end162
  %512 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %512(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.211, i64 0, i64 0))
  ret i32 -1

assert_end164:                                    ; preds = %assert_end162
  %513 = getelementptr inbounds i64, i64* %87, i64 2
  %514 = load i64, i64* %513, align 8, !tbaa !2237
  %515 = trunc i64 %514 to i32
  %516 = icmp eq i32 %515, 56
  br i1 %516, label %assert_end166, label %assert_fail165, !prof !5

assert_fail165:                                   ; preds = %assert_end164
  %517 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %517(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.235, i64 0, i64 0))
  ret i32 -1

assert_end166:                                    ; preds = %assert_end164
  %518 = getelementptr inbounds i64, i64* %87, i64 3
  %519 = load i64, i64* %518, align 8, !tbaa !2240
  %520 = trunc i64 %519 to i32
  %521 = icmp eq i32 %520, 56
  br i1 %521, label %assert_end168, label %assert_fail167, !prof !5

assert_fail167:                                   ; preds = %assert_end166
  %522 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %522(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.236, i64 0, i64 0))
  ret i32 -1

assert_end168:                                    ; preds = %assert_end166
  %523 = getelementptr inbounds i64, i64* %87, i64 4
  %524 = load i64, i64* %523, align 8, !tbaa !2242
  %525 = trunc i64 %524 to i32
  %526 = icmp eq i32 %525, 32
  br i1 %526, label %assert_end170, label %assert_fail169, !prof !5

assert_fail169:                                   ; preds = %assert_end168
  %527 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %527(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.237, i64 0, i64 0))
  ret i32 -1

assert_end170:                                    ; preds = %assert_end168
  %528 = icmp eq i64* %89, null
  br i1 %528, label %if_end172, label %if_then171, !prof !50

if_then171:                                       ; preds = %assert_end170
  %529 = getelementptr inbounds i64, i64* %89, i64 1
  %530 = bitcast i64* %529 to <4 x i64>*
  %531 = load <4 x i64>, <4 x i64>* %530, align 8, !tbaa !2246
  %532 = trunc <4 x i64> %531 to <4 x i32>
  %533 = icmp eq <4 x i32> %532, <i32 100352, i32 1792, i32 32, i32 1>
  %534 = load i64, i64* %89, align 8, !tbaa !2257
  %535 = trunc i64 %534 to i32
  %536 = icmp eq i32 %535, 802816
  %rdx.shuf = shufflevector <4 x i1> %533, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %533, %rdx.shuf
  %rdx.shuf181 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx182 = and <4 x i1> %bin.rdx, %rdx.shuf181
  %537 = extractelement <4 x i1> %bin.rdx182, i32 0
  %538 = and i1 %537, %536
  br i1 %538, label %if_end172, label %assert_fail173, !prof !5

if_end172:                                        ; preds = %assert_end170, %if_then171
  %539 = getelementptr inbounds %1, %1* %40, i64 0, i32 6
  %540 = load i64, i64* %539, align 8
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %assert_end176, label %assert_fail175, !prof !5

assert_fail173:                                   ; preds = %if_then171
  %542 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %542(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.238, i64 0, i64 0))
  ret i32 -1

assert_fail175:                                   ; preds = %if_end172
  %543 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %543(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.216, i64 0, i64 0))
  ret i32 -1

assert_end176:                                    ; preds = %if_end172
  %544 = getelementptr inbounds %1, %1* %40, i64 0, i32 1, i32 0
  %545 = load i32, i32* %544, align 4
  %546 = icmp eq i32 %545, 1
  br i1 %546, label %assert_end178, label %assert_fail177, !prof !5

assert_fail177:                                   ; preds = %assert_end176
  %547 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %547(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.217, i64 0, i64 0))
  ret i32 -1

assert_end178:                                    ; preds = %assert_end176
  %548 = getelementptr inbounds %1, %1* %40, i64 0, i32 1, i32 1
  %549 = load i32, i32* %548, align 4
  %550 = icmp eq i32 %53, %549
  br i1 %550, label %assert_end180, label %assert_fail179, !prof !5

assert_fail179:                                   ; preds = %assert_end178
  %551 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %551(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.218, i64 0, i64 0))
  ret i32 -1

assert_end180:                                    ; preds = %assert_end178
  %552 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3_compute_(i8* %45, i8* %55, i8* %85, i8* %61, i8* %67, i8* %73, i8* %79, i32 %53)
  ret i32 %552
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_3_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %8 = alloca %16, align 8
  %9 = getelementptr inbounds %16, %16* %8, i64 0, i32 0
  store i8* %0, i8** %9, align 8
  %10 = getelementptr inbounds %16, %16* %8, i64 0, i32 1
  store i8* %1, i8** %10, align 8
  %11 = getelementptr inbounds %16, %16* %8, i64 0, i32 2
  store i8* %2, i8** %11, align 8
  %12 = getelementptr inbounds %16, %16* %8, i64 0, i32 3
  store i8* %3, i8** %12, align 8
  %13 = getelementptr inbounds %16, %16* %8, i64 0, i32 4
  store i8* %4, i8** %13, align 8
  %14 = getelementptr inbounds %16, %16* %8, i64 0, i32 5
  store i8* %5, i8** %14, align 8
  %15 = getelementptr inbounds %16, %16* %8, i64 0, i32 6
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %16, %16* %8, i64 0, i32 7
  store i32 %7, i32* %16, align 8
  %17 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %18 = bitcast %16* %8 to i8*
  %19 = call i32 %17(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.239, i8* nonnull %18, i32 0)
  ret i32 %19
}

define private i32 @__tvm_parallel_lambda.239(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %2, i64 48
  %21 = bitcast i8* %20 to float**
  %22 = load float*, float** %21, align 8
  %23 = getelementptr inbounds i8, i8* %2, i64 56
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, 447
  %29 = sdiv i32 %28, %27
  %30 = mul nsw i32 %29, %0
  %31 = icmp slt i32 %30, 448
  %32 = select i1 %31, i32 %30, i32 448
  %33 = add nsw i32 %0, 1
  %34 = mul nsw i32 %29, %33
  %35 = icmp slt i32 %34, 448
  %36 = select i1 %35, i32 %34, i32 448
  %37 = icmp slt i32 %32, %36
  br i1 %37, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end12
  %38 = phi i32 [ %390, %for_end12 ], [ %32, %entry ]
  %39 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %40 = tail call i8* %39(i32 1, i32 %25, i64 7168, i32 2, i32 32)
  %41 = bitcast i8* %40 to float*
  %42 = srem i32 %38, 56
  %43 = mul nsw i32 %42, 224
  %44 = sdiv i32 %38, 56
  %45 = shl i32 %44, 11
  %46 = sext i32 %45 to i64
  %47 = sext i32 %43 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end12, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %48 = mul nsw i32 %38, 1792
  %49 = shl nsw i32 %44, 5
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds float, float* %13, i64 %50
  %52 = bitcast float* %51 to <32 x float>*
  %53 = load <32 x float>, <32 x float>* %52, align 64, !tbaa !2261
  %54 = getelementptr inbounds float, float* %16, i64 %50
  %55 = bitcast float* %54 to <32 x float>*
  %56 = load <32 x float>, <32 x float>* %55, align 64, !tbaa !2264
  %57 = getelementptr inbounds float, float* %19, i64 %50
  %58 = bitcast float* %57 to <32 x float>*
  %59 = load <32 x float>, <32 x float>* %58, align 64, !tbaa !2267
  br label %for_begin13.preheader

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv52 = phi i64 [ 0, %for_body ], [ %indvars.iv.next53, %for_end6 ]
  %60 = mul nuw nsw i64 %indvars.iv52, 224
  %61 = getelementptr inbounds float, float* %41, i64 %60
  %62 = bitcast float* %61 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %62, align 64, !tbaa !2270
  %63 = add nuw nsw i64 %60, 32
  %64 = getelementptr inbounds float, float* %41, i64 %63
  %65 = bitcast float* %64 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %65, align 64, !tbaa !2270
  %66 = add nuw nsw i64 %60, 64
  %67 = getelementptr inbounds float, float* %41, i64 %66
  %68 = bitcast float* %67 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %68, align 64, !tbaa !2270
  %69 = add nuw nsw i64 %60, 96
  %70 = getelementptr inbounds float, float* %41, i64 %69
  %71 = bitcast float* %70 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %71, align 64, !tbaa !2270
  %72 = add nuw nsw i64 %60, 128
  %73 = getelementptr inbounds float, float* %41, i64 %72
  %74 = bitcast float* %73 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %74, align 64, !tbaa !2270
  %75 = add nuw nsw i64 %60, 160
  %76 = getelementptr inbounds float, float* %41, i64 %75
  %77 = bitcast float* %76 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %77, align 64, !tbaa !2270
  %78 = add nuw nsw i64 %60, 192
  %79 = getelementptr inbounds float, float* %41, i64 %78
  %80 = bitcast float* %79 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %80, align 64, !tbaa !2270
  %81 = mul nuw nsw i64 %indvars.iv52, 28
  %82 = add nsw i64 %81, %47
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_begin7.preheader, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_begin7.preheader ]
  %.lcssa3245 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %268, %for_begin7.preheader ]
  %.lcssa3043 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %262, %for_begin7.preheader ]
  %.lcssa2841 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %256, %for_begin7.preheader ]
  %.lcssa2639 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %250, %for_begin7.preheader ]
  %.lcssa2437 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %244, %for_begin7.preheader ]
  %.lcssa2235 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %238, %for_begin7.preheader ]
  %.lcssa34 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %232, %for_begin7.preheader ]
  %83 = mul nuw nsw i64 %indvars.iv, 12544
  %84 = add nsw i64 %82, %83
  %85 = shl i64 %indvars.iv, 7
  %86 = add nuw nsw i64 %85, %46
  %87 = getelementptr inbounds float, float* %4, i64 %84
  %88 = load float, float* %87, align 4, !tbaa !2273
  %89 = insertelement <32 x float> undef, float %88, i32 0
  %90 = shufflevector <32 x float> %89, <32 x float> undef, <32 x i32> zeroinitializer
  %91 = getelementptr inbounds float, float* %7, i64 %86
  %92 = bitcast float* %91 to <32 x float>*
  %93 = load <32 x float>, <32 x float>* %92, align 64, !tbaa !2276
  %94 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %90, <32 x float> %93, <32 x float> %.lcssa34)
  %95 = add nsw i64 %84, 4
  %96 = getelementptr inbounds float, float* %4, i64 %95
  %97 = load float, float* %96, align 4, !tbaa !2273
  %98 = insertelement <32 x float> undef, float %97, i32 0
  %99 = shufflevector <32 x float> %98, <32 x float> undef, <32 x i32> zeroinitializer
  %100 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %99, <32 x float> %93, <32 x float> %.lcssa2235)
  %101 = add nsw i64 %84, 8
  %102 = getelementptr inbounds float, float* %4, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !2273
  %104 = insertelement <32 x float> undef, float %103, i32 0
  %105 = shufflevector <32 x float> %104, <32 x float> undef, <32 x i32> zeroinitializer
  %106 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %105, <32 x float> %93, <32 x float> %.lcssa2437)
  %107 = add nsw i64 %84, 12
  %108 = getelementptr inbounds float, float* %4, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !2273
  %110 = insertelement <32 x float> undef, float %109, i32 0
  %111 = shufflevector <32 x float> %110, <32 x float> undef, <32 x i32> zeroinitializer
  %112 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %111, <32 x float> %93, <32 x float> %.lcssa2639)
  %113 = add nsw i64 %84, 16
  %114 = getelementptr inbounds float, float* %4, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !2273
  %116 = insertelement <32 x float> undef, float %115, i32 0
  %117 = shufflevector <32 x float> %116, <32 x float> undef, <32 x i32> zeroinitializer
  %118 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %117, <32 x float> %93, <32 x float> %.lcssa2841)
  %119 = add nsw i64 %84, 20
  %120 = getelementptr inbounds float, float* %4, i64 %119
  %121 = load float, float* %120, align 4, !tbaa !2273
  %122 = insertelement <32 x float> undef, float %121, i32 0
  %123 = shufflevector <32 x float> %122, <32 x float> undef, <32 x i32> zeroinitializer
  %124 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %123, <32 x float> %93, <32 x float> %.lcssa3043)
  %125 = add nsw i64 %84, 24
  %126 = getelementptr inbounds float, float* %4, i64 %125
  %127 = load float, float* %126, align 4, !tbaa !2273
  %128 = insertelement <32 x float> undef, float %127, i32 0
  %129 = shufflevector <32 x float> %128, <32 x float> undef, <32 x i32> zeroinitializer
  %130 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %129, <32 x float> %93, <32 x float> %.lcssa3245)
  %131 = or i64 %84, 1
  %132 = getelementptr inbounds float, float* %4, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !2273
  %134 = insertelement <32 x float> undef, float %133, i32 0
  %135 = shufflevector <32 x float> %134, <32 x float> undef, <32 x i32> zeroinitializer
  %136 = or i64 %86, 32
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = bitcast float* %137 to <32 x float>*
  %139 = load <32 x float>, <32 x float>* %138, align 64, !tbaa !2276
  %140 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %135, <32 x float> %139, <32 x float> %94)
  %141 = add nsw i64 %131, 4
  %142 = getelementptr inbounds float, float* %4, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !2273
  %144 = insertelement <32 x float> undef, float %143, i32 0
  %145 = shufflevector <32 x float> %144, <32 x float> undef, <32 x i32> zeroinitializer
  %146 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %145, <32 x float> %139, <32 x float> %100)
  %147 = add nsw i64 %131, 8
  %148 = getelementptr inbounds float, float* %4, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !2273
  %150 = insertelement <32 x float> undef, float %149, i32 0
  %151 = shufflevector <32 x float> %150, <32 x float> undef, <32 x i32> zeroinitializer
  %152 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %151, <32 x float> %139, <32 x float> %106)
  %153 = add nsw i64 %131, 12
  %154 = getelementptr inbounds float, float* %4, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !2273
  %156 = insertelement <32 x float> undef, float %155, i32 0
  %157 = shufflevector <32 x float> %156, <32 x float> undef, <32 x i32> zeroinitializer
  %158 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %157, <32 x float> %139, <32 x float> %112)
  %159 = add nsw i64 %131, 16
  %160 = getelementptr inbounds float, float* %4, i64 %159
  %161 = load float, float* %160, align 4, !tbaa !2273
  %162 = insertelement <32 x float> undef, float %161, i32 0
  %163 = shufflevector <32 x float> %162, <32 x float> undef, <32 x i32> zeroinitializer
  %164 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %163, <32 x float> %139, <32 x float> %118)
  %165 = add nsw i64 %131, 20
  %166 = getelementptr inbounds float, float* %4, i64 %165
  %167 = load float, float* %166, align 4, !tbaa !2273
  %168 = insertelement <32 x float> undef, float %167, i32 0
  %169 = shufflevector <32 x float> %168, <32 x float> undef, <32 x i32> zeroinitializer
  %170 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %169, <32 x float> %139, <32 x float> %124)
  %171 = add nsw i64 %131, 24
  %172 = getelementptr inbounds float, float* %4, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !2273
  %174 = insertelement <32 x float> undef, float %173, i32 0
  %175 = shufflevector <32 x float> %174, <32 x float> undef, <32 x i32> zeroinitializer
  %176 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %175, <32 x float> %139, <32 x float> %130)
  %177 = or i64 %84, 2
  %178 = getelementptr inbounds float, float* %4, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !2273
  %180 = insertelement <32 x float> undef, float %179, i32 0
  %181 = shufflevector <32 x float> %180, <32 x float> undef, <32 x i32> zeroinitializer
  %182 = or i64 %86, 64
  %183 = getelementptr inbounds float, float* %7, i64 %182
  %184 = bitcast float* %183 to <32 x float>*
  %185 = load <32 x float>, <32 x float>* %184, align 64, !tbaa !2276
  %186 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %181, <32 x float> %185, <32 x float> %140)
  %187 = add nsw i64 %177, 4
  %188 = getelementptr inbounds float, float* %4, i64 %187
  %189 = load float, float* %188, align 4, !tbaa !2273
  %190 = insertelement <32 x float> undef, float %189, i32 0
  %191 = shufflevector <32 x float> %190, <32 x float> undef, <32 x i32> zeroinitializer
  %192 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %191, <32 x float> %185, <32 x float> %146)
  %193 = add nsw i64 %177, 8
  %194 = getelementptr inbounds float, float* %4, i64 %193
  %195 = load float, float* %194, align 4, !tbaa !2273
  %196 = insertelement <32 x float> undef, float %195, i32 0
  %197 = shufflevector <32 x float> %196, <32 x float> undef, <32 x i32> zeroinitializer
  %198 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %197, <32 x float> %185, <32 x float> %152)
  %199 = add nsw i64 %177, 12
  %200 = getelementptr inbounds float, float* %4, i64 %199
  %201 = load float, float* %200, align 4, !tbaa !2273
  %202 = insertelement <32 x float> undef, float %201, i32 0
  %203 = shufflevector <32 x float> %202, <32 x float> undef, <32 x i32> zeroinitializer
  %204 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %203, <32 x float> %185, <32 x float> %158)
  %205 = add nsw i64 %177, 16
  %206 = getelementptr inbounds float, float* %4, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !2273
  %208 = insertelement <32 x float> undef, float %207, i32 0
  %209 = shufflevector <32 x float> %208, <32 x float> undef, <32 x i32> zeroinitializer
  %210 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %209, <32 x float> %185, <32 x float> %164)
  %211 = add nsw i64 %177, 20
  %212 = getelementptr inbounds float, float* %4, i64 %211
  %213 = load float, float* %212, align 4, !tbaa !2273
  %214 = insertelement <32 x float> undef, float %213, i32 0
  %215 = shufflevector <32 x float> %214, <32 x float> undef, <32 x i32> zeroinitializer
  %216 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %215, <32 x float> %185, <32 x float> %170)
  %217 = add nsw i64 %177, 24
  %218 = getelementptr inbounds float, float* %4, i64 %217
  %219 = load float, float* %218, align 4, !tbaa !2273
  %220 = insertelement <32 x float> undef, float %219, i32 0
  %221 = shufflevector <32 x float> %220, <32 x float> undef, <32 x i32> zeroinitializer
  %222 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %221, <32 x float> %185, <32 x float> %176)
  %223 = or i64 %84, 3
  %224 = getelementptr inbounds float, float* %4, i64 %223
  %225 = load float, float* %224, align 4, !tbaa !2273
  %226 = insertelement <32 x float> undef, float %225, i32 0
  %227 = shufflevector <32 x float> %226, <32 x float> undef, <32 x i32> zeroinitializer
  %228 = or i64 %86, 96
  %229 = getelementptr inbounds float, float* %7, i64 %228
  %230 = bitcast float* %229 to <32 x float>*
  %231 = load <32 x float>, <32 x float>* %230, align 64, !tbaa !2276
  %232 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %227, <32 x float> %231, <32 x float> %186)
  %233 = add nsw i64 %223, 4
  %234 = getelementptr inbounds float, float* %4, i64 %233
  %235 = load float, float* %234, align 4, !tbaa !2273
  %236 = insertelement <32 x float> undef, float %235, i32 0
  %237 = shufflevector <32 x float> %236, <32 x float> undef, <32 x i32> zeroinitializer
  %238 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %237, <32 x float> %231, <32 x float> %192)
  %239 = add nsw i64 %223, 8
  %240 = getelementptr inbounds float, float* %4, i64 %239
  %241 = load float, float* %240, align 4, !tbaa !2273
  %242 = insertelement <32 x float> undef, float %241, i32 0
  %243 = shufflevector <32 x float> %242, <32 x float> undef, <32 x i32> zeroinitializer
  %244 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %243, <32 x float> %231, <32 x float> %198)
  %245 = add nsw i64 %223, 12
  %246 = getelementptr inbounds float, float* %4, i64 %245
  %247 = load float, float* %246, align 4, !tbaa !2273
  %248 = insertelement <32 x float> undef, float %247, i32 0
  %249 = shufflevector <32 x float> %248, <32 x float> undef, <32 x i32> zeroinitializer
  %250 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %249, <32 x float> %231, <32 x float> %204)
  %251 = add nsw i64 %223, 16
  %252 = getelementptr inbounds float, float* %4, i64 %251
  %253 = load float, float* %252, align 4, !tbaa !2273
  %254 = insertelement <32 x float> undef, float %253, i32 0
  %255 = shufflevector <32 x float> %254, <32 x float> undef, <32 x i32> zeroinitializer
  %256 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %255, <32 x float> %231, <32 x float> %210)
  %257 = add nsw i64 %223, 20
  %258 = getelementptr inbounds float, float* %4, i64 %257
  %259 = load float, float* %258, align 4, !tbaa !2273
  %260 = insertelement <32 x float> undef, float %259, i32 0
  %261 = shufflevector <32 x float> %260, <32 x float> undef, <32 x i32> zeroinitializer
  %262 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %261, <32 x float> %231, <32 x float> %216)
  %263 = add nsw i64 %223, 24
  %264 = getelementptr inbounds float, float* %4, i64 %263
  %265 = load float, float* %264, align 4, !tbaa !2273
  %266 = insertelement <32 x float> undef, float %265, i32 0
  %267 = shufflevector <32 x float> %266, <32 x float> undef, <32 x i32> zeroinitializer
  %268 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %267, <32 x float> %231, <32 x float> %222)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end6, label %for_begin7.preheader, !prof !50

for_end6:                                         ; preds = %for_begin7.preheader
  store <32 x float> %232, <32 x float>* %62, align 64, !tbaa !2270
  store <32 x float> %238, <32 x float>* %65, align 64, !tbaa !2270
  store <32 x float> %244, <32 x float>* %68, align 64, !tbaa !2270
  store <32 x float> %250, <32 x float>* %71, align 64, !tbaa !2270
  store <32 x float> %256, <32 x float>* %74, align 64, !tbaa !2270
  store <32 x float> %262, <32 x float>* %77, align 64, !tbaa !2270
  store <32 x float> %268, <32 x float>* %80, align 64, !tbaa !2270
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %exitcond54 = icmp eq i64 %indvars.iv.next53, 8
  br i1 %exitcond54, label %for_begin10.preheader, label %for_body2, !prof !50

for_begin13.preheader:                            ; preds = %for_begin13.preheader, %for_begin10.preheader
  %indvars.iv58 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next59, %for_begin13.preheader ]
  %269 = mul nuw nsw i64 %indvars.iv58, 224
  %270 = trunc i64 %269 to i32
  %271 = add i32 %48, %270
  %272 = getelementptr inbounds float, float* %41, i64 %269
  %273 = bitcast float* %272 to <32 x float>*
  %274 = load <32 x float>, <32 x float>* %273, align 64, !tbaa !2270
  %275 = fadd <32 x float> %274, %53
  %276 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %275, <32 x float> %56, <32 x float> %59)
  %277 = sext i32 %271 to i64
  %278 = getelementptr inbounds float, float* %22, i64 %277
  %279 = bitcast float* %278 to <32 x float>*
  %280 = load <32 x float>, <32 x float>* %279, align 64, !tbaa !2279
  %281 = fadd <32 x float> %276, %280
  %282 = fcmp ogt <32 x float> %281, zeroinitializer
  %283 = select <32 x i1> %282, <32 x float> %281, <32 x float> zeroinitializer
  %284 = getelementptr inbounds float, float* %10, i64 %277
  %285 = bitcast float* %284 to <32 x float>*
  store <32 x float> %283, <32 x float>* %285, align 64, !tbaa !2282
  %286 = add nuw nsw i64 %269, 32
  %287 = trunc i64 %286 to i32
  %288 = add i32 %48, %287
  %289 = getelementptr inbounds float, float* %41, i64 %286
  %290 = bitcast float* %289 to <32 x float>*
  %291 = load <32 x float>, <32 x float>* %290, align 64, !tbaa !2270
  %292 = fadd <32 x float> %291, %53
  %293 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %292, <32 x float> %56, <32 x float> %59)
  %294 = sext i32 %288 to i64
  %295 = getelementptr inbounds float, float* %22, i64 %294
  %296 = bitcast float* %295 to <32 x float>*
  %297 = load <32 x float>, <32 x float>* %296, align 64, !tbaa !2279
  %298 = fadd <32 x float> %293, %297
  %299 = fcmp ogt <32 x float> %298, zeroinitializer
  %300 = select <32 x i1> %299, <32 x float> %298, <32 x float> zeroinitializer
  %301 = getelementptr inbounds float, float* %10, i64 %294
  %302 = bitcast float* %301 to <32 x float>*
  store <32 x float> %300, <32 x float>* %302, align 64, !tbaa !2282
  %303 = add nuw nsw i64 %269, 64
  %304 = trunc i64 %303 to i32
  %305 = add i32 %48, %304
  %306 = getelementptr inbounds float, float* %41, i64 %303
  %307 = bitcast float* %306 to <32 x float>*
  %308 = load <32 x float>, <32 x float>* %307, align 64, !tbaa !2270
  %309 = fadd <32 x float> %308, %53
  %310 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %309, <32 x float> %56, <32 x float> %59)
  %311 = sext i32 %305 to i64
  %312 = getelementptr inbounds float, float* %22, i64 %311
  %313 = bitcast float* %312 to <32 x float>*
  %314 = load <32 x float>, <32 x float>* %313, align 64, !tbaa !2279
  %315 = fadd <32 x float> %310, %314
  %316 = fcmp ogt <32 x float> %315, zeroinitializer
  %317 = select <32 x i1> %316, <32 x float> %315, <32 x float> zeroinitializer
  %318 = getelementptr inbounds float, float* %10, i64 %311
  %319 = bitcast float* %318 to <32 x float>*
  store <32 x float> %317, <32 x float>* %319, align 64, !tbaa !2282
  %320 = add nuw nsw i64 %269, 96
  %321 = trunc i64 %320 to i32
  %322 = add i32 %48, %321
  %323 = getelementptr inbounds float, float* %41, i64 %320
  %324 = bitcast float* %323 to <32 x float>*
  %325 = load <32 x float>, <32 x float>* %324, align 64, !tbaa !2270
  %326 = fadd <32 x float> %325, %53
  %327 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %326, <32 x float> %56, <32 x float> %59)
  %328 = sext i32 %322 to i64
  %329 = getelementptr inbounds float, float* %22, i64 %328
  %330 = bitcast float* %329 to <32 x float>*
  %331 = load <32 x float>, <32 x float>* %330, align 64, !tbaa !2279
  %332 = fadd <32 x float> %327, %331
  %333 = fcmp ogt <32 x float> %332, zeroinitializer
  %334 = select <32 x i1> %333, <32 x float> %332, <32 x float> zeroinitializer
  %335 = getelementptr inbounds float, float* %10, i64 %328
  %336 = bitcast float* %335 to <32 x float>*
  store <32 x float> %334, <32 x float>* %336, align 64, !tbaa !2282
  %337 = add nuw nsw i64 %269, 128
  %338 = trunc i64 %337 to i32
  %339 = add i32 %48, %338
  %340 = getelementptr inbounds float, float* %41, i64 %337
  %341 = bitcast float* %340 to <32 x float>*
  %342 = load <32 x float>, <32 x float>* %341, align 64, !tbaa !2270
  %343 = fadd <32 x float> %342, %53
  %344 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %343, <32 x float> %56, <32 x float> %59)
  %345 = sext i32 %339 to i64
  %346 = getelementptr inbounds float, float* %22, i64 %345
  %347 = bitcast float* %346 to <32 x float>*
  %348 = load <32 x float>, <32 x float>* %347, align 64, !tbaa !2279
  %349 = fadd <32 x float> %344, %348
  %350 = fcmp ogt <32 x float> %349, zeroinitializer
  %351 = select <32 x i1> %350, <32 x float> %349, <32 x float> zeroinitializer
  %352 = getelementptr inbounds float, float* %10, i64 %345
  %353 = bitcast float* %352 to <32 x float>*
  store <32 x float> %351, <32 x float>* %353, align 64, !tbaa !2282
  %354 = add nuw nsw i64 %269, 160
  %355 = trunc i64 %354 to i32
  %356 = add i32 %48, %355
  %357 = getelementptr inbounds float, float* %41, i64 %354
  %358 = bitcast float* %357 to <32 x float>*
  %359 = load <32 x float>, <32 x float>* %358, align 64, !tbaa !2270
  %360 = fadd <32 x float> %359, %53
  %361 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %360, <32 x float> %56, <32 x float> %59)
  %362 = sext i32 %356 to i64
  %363 = getelementptr inbounds float, float* %22, i64 %362
  %364 = bitcast float* %363 to <32 x float>*
  %365 = load <32 x float>, <32 x float>* %364, align 64, !tbaa !2279
  %366 = fadd <32 x float> %361, %365
  %367 = fcmp ogt <32 x float> %366, zeroinitializer
  %368 = select <32 x i1> %367, <32 x float> %366, <32 x float> zeroinitializer
  %369 = getelementptr inbounds float, float* %10, i64 %362
  %370 = bitcast float* %369 to <32 x float>*
  store <32 x float> %368, <32 x float>* %370, align 64, !tbaa !2282
  %371 = add nuw nsw i64 %269, 192
  %372 = trunc i64 %371 to i32
  %373 = add i32 %48, %372
  %374 = getelementptr inbounds float, float* %41, i64 %371
  %375 = bitcast float* %374 to <32 x float>*
  %376 = load <32 x float>, <32 x float>* %375, align 64, !tbaa !2270
  %377 = fadd <32 x float> %376, %53
  %378 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %377, <32 x float> %56, <32 x float> %59)
  %379 = sext i32 %373 to i64
  %380 = getelementptr inbounds float, float* %22, i64 %379
  %381 = bitcast float* %380 to <32 x float>*
  %382 = load <32 x float>, <32 x float>* %381, align 64, !tbaa !2279
  %383 = fadd <32 x float> %378, %382
  %384 = fcmp ogt <32 x float> %383, zeroinitializer
  %385 = select <32 x i1> %384, <32 x float> %383, <32 x float> zeroinitializer
  %386 = getelementptr inbounds float, float* %10, i64 %379
  %387 = bitcast float* %386 to <32 x float>*
  store <32 x float> %385, <32 x float>* %387, align 64, !tbaa !2282
  %indvars.iv.next59 = add nuw nsw i64 %indvars.iv58, 1
  %exitcond60 = icmp eq i64 %indvars.iv.next59, 8
  br i1 %exitcond60, label %for_end12, label %for_begin13.preheader, !prof !50

for_end12:                                        ; preds = %for_begin13.preheader
  %388 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %389 = tail call i32 %388(i32 1, i32 %25, i8* nonnull %40)
  %390 = add nsw i32 %38, 1
  %391 = icmp slt i32 %390, %36
  br i1 %391, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_add_nn_relu_2(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 3
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.240, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !2285
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !2299
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %23 = load i64*, i64** %22, align 8
  %24 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %42 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %42(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.241, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %43 = getelementptr inbounds i8, i8* %1, i64 4
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !2302
  switch i32 %45, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %46(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.242, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %47(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.243, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  %48 = icmp eq i32 %27, 1
  br i1 %48, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %49(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %50 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 5
  br i1 %52, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %53(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %54 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 2
  %57 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 32
  %60 = and i1 %56, %59
  %61 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %62 = load i16, i16* %61, align 2
  %63 = icmp eq i16 %62, 1
  %64 = and i1 %60, %63
  br i1 %64, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %65(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %66 = load i64, i64* %23, align 8, !tbaa !2304
  %67 = trunc i64 %66 to i32
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %69(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %70 = getelementptr inbounds i64, i64* %23, i64 1
  %71 = load i64, i64* %70, align 8, !tbaa !2318
  %72 = trunc i64 %71 to i32
  %73 = icmp eq i32 %72, 8
  br i1 %73, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %75 = getelementptr inbounds i64, i64* %23, i64 2
  %76 = load i64, i64* %75, align 8, !tbaa !2320
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %77, 56
  br i1 %78, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %80 = getelementptr inbounds i64, i64* %23, i64 3
  %81 = load i64, i64* %80, align 8, !tbaa !2323
  %82 = trunc i64 %81 to i32
  %83 = icmp eq i32 %82, 56
  br i1 %83, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %85 = getelementptr inbounds i64, i64* %23, i64 4
  %86 = load i64, i64* %85, align 8, !tbaa !2325
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 32
  br i1 %88, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %89 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %89(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %90 = icmp eq i64* %25, null
  br i1 %90, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end22
  %91 = getelementptr inbounds i64, i64* %25, i64 1
  %92 = bitcast i64* %91 to <4 x i64>*
  %93 = load <4 x i64>, <4 x i64>* %92, align 8, !tbaa !2329
  %94 = trunc <4 x i64> %93 to <4 x i32>
  %95 = icmp eq <4 x i32> %94, <i32 100352, i32 1792, i32 32, i32 1>
  %96 = load i64, i64* %25, align 8, !tbaa !2340
  %97 = trunc i64 %96 to i32
  %98 = icmp eq i32 %97, 802816
  %rdx.shuf81 = shufflevector <4 x i1> %95, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx82 = and <4 x i1> %95, %rdx.shuf81
  %rdx.shuf83 = shufflevector <4 x i1> %bin.rdx82, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx84 = and <4 x i1> %bin.rdx82, %rdx.shuf83
  %99 = extractelement <4 x i1> %bin.rdx84, i32 0
  %100 = and i1 %99, %98
  br i1 %100, label %if_end, label %assert_fail23, !prof !5

if_end:                                           ; preds = %assert_end22, %if_then
  %101 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %102 = load i64, i64* %101, align 8
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %assert_end26, label %assert_fail25, !prof !5

assert_fail23:                                    ; preds = %if_then
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.244, i64 0, i64 0))
  ret i32 -1

assert_fail25:                                    ; preds = %if_end
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %if_end
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 2
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = and i1 %112, %115
  %117 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %118 = load i16, i16* %117, align 2
  %119 = icmp eq i16 %118, 1
  %120 = and i1 %116, %119
  br i1 %120, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %122 = load i64, i64* %33, align 8, !tbaa !2344
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %126 = getelementptr inbounds i64, i64* %33, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !2358
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 8
  br i1 %129, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %131 = getelementptr inbounds i64, i64* %33, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !2360
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 56
  br i1 %134, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %136 = getelementptr inbounds i64, i64* %33, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !2363
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 56
  br i1 %139, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %141 = getelementptr inbounds i64, i64* %33, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !2365
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 32
  br i1 %144, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.183, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %146 = icmp eq i64* %35, null
  br i1 %146, label %if_end42, label %if_then41, !prof !50

if_then41:                                        ; preds = %assert_end40
  %147 = getelementptr inbounds i64, i64* %35, i64 1
  %148 = bitcast i64* %147 to <4 x i64>*
  %149 = load <4 x i64>, <4 x i64>* %148, align 8, !tbaa !2369
  %150 = trunc <4 x i64> %149 to <4 x i32>
  %151 = icmp eq <4 x i32> %150, <i32 100352, i32 1792, i32 32, i32 1>
  %152 = load i64, i64* %35, align 8, !tbaa !2380
  %153 = trunc i64 %152 to i32
  %154 = icmp eq i32 %153, 802816
  %rdx.shuf77 = shufflevector <4 x i1> %151, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx78 = and <4 x i1> %151, %rdx.shuf77
  %rdx.shuf79 = shufflevector <4 x i1> %bin.rdx78, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx80 = and <4 x i1> %bin.rdx78, %rdx.shuf79
  %155 = extractelement <4 x i1> %bin.rdx80, i32 0
  %156 = and i1 %155, %154
  br i1 %156, label %if_end42, label %assert_fail43, !prof !5

if_end42:                                         ; preds = %assert_end40, %if_then41
  %157 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %158 = load i64, i64* %157, align 8
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %assert_end46, label %assert_fail45, !prof !5

assert_fail43:                                    ; preds = %if_then41
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.247, i64 0, i64 0))
  ret i32 -1

assert_fail45:                                    ; preds = %if_end42
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %if_end42
  %162 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %165(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %166 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %29, %167
  br i1 %168, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %170 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, 5
  br i1 %172, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %174 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %175 = load i8, i8* %174, align 1
  %176 = icmp eq i8 %175, 2
  %177 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %178 = load i8, i8* %177, align 1
  %179 = icmp eq i8 %178, 32
  %180 = and i1 %176, %179
  %181 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %182 = load i16, i16* %181, align 2
  %183 = icmp eq i16 %182, 1
  %184 = and i1 %180, %183
  br i1 %184, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %185(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %186 = load i64, i64* %39, align 8, !tbaa !2384
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 1
  br i1 %188, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %190 = getelementptr inbounds i64, i64* %39, i64 1
  %191 = load i64, i64* %190, align 8, !tbaa !2398
  %192 = trunc i64 %191 to i32
  %193 = icmp eq i32 %192, 8
  br i1 %193, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %194 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %194(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.154, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %195 = getelementptr inbounds i64, i64* %39, i64 2
  %196 = load i64, i64* %195, align 8, !tbaa !2400
  %197 = trunc i64 %196 to i32
  %198 = icmp eq i32 %197, 56
  br i1 %198, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %199(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.248, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %200 = getelementptr inbounds i64, i64* %39, i64 3
  %201 = load i64, i64* %200, align 8, !tbaa !2403
  %202 = trunc i64 %201 to i32
  %203 = icmp eq i32 %202, 56
  br i1 %203, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %204(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.249, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %205 = getelementptr inbounds i64, i64* %39, i64 4
  %206 = load i64, i64* %205, align 8, !tbaa !2405
  %207 = trunc i64 %206 to i32
  %208 = icmp eq i32 %207, 32
  br i1 %208, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %210 = icmp eq i64* %41, null
  br i1 %210, label %if_end66, label %if_then65, !prof !50

if_then65:                                        ; preds = %assert_end64
  %211 = getelementptr inbounds i64, i64* %41, i64 1
  %212 = bitcast i64* %211 to <4 x i64>*
  %213 = load <4 x i64>, <4 x i64>* %212, align 8, !tbaa !2409
  %214 = trunc <4 x i64> %213 to <4 x i32>
  %215 = icmp eq <4 x i32> %214, <i32 100352, i32 1792, i32 32, i32 1>
  %216 = load i64, i64* %41, align 8, !tbaa !2420
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 802816
  %rdx.shuf = shufflevector <4 x i1> %215, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %215, %rdx.shuf
  %rdx.shuf75 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx76 = and <4 x i1> %bin.rdx, %rdx.shuf75
  %219 = extractelement <4 x i1> %bin.rdx76, i32 0
  %220 = and i1 %219, %218
  br i1 %220, label %if_end66, label %assert_fail67, !prof !5

if_end66:                                         ; preds = %assert_end64, %if_then65
  %221 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %222 = load i64, i64* %221, align 8
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %assert_end70, label %assert_fail69, !prof !5

assert_fail67:                                    ; preds = %if_then65
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.250, i64 0, i64 0))
  ret i32 -1

assert_fail69:                                    ; preds = %if_end66
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %if_end66
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 1
  br i1 %228, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %229 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %229(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %29, %231
  br i1 %232, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %233 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %233(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %234 = tail call fastcc i32 @fused_add_nn_relu_2_compute_(i8* %37, i8* %21, i8* %31)
  ret i32 %234
}

; Function Attrs: noinline
define private fastcc i32 @fused_add_nn_relu_2_compute_(i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %3 = alloca %17, align 8
  %4 = getelementptr inbounds %17, %17* %3, i64 0, i32 0
  store i8* %0, i8** %4, align 8
  %5 = getelementptr inbounds %17, %17* %3, i64 0, i32 1
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %17, %17* %3, i64 0, i32 2
  store i8* %2, i8** %6, align 8
  %7 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %8 = bitcast %17* %3 to i8*
  %9 = call i32 %7(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.251, i8* nonnull %8, i32 0)
  ret i32 %9
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.251(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 447
  %14 = sdiv i32 %13, %12
  %15 = mul nsw i32 %14, %0
  %16 = icmp slt i32 %15, 448
  %17 = select i1 %16, i32 %15, i32 448
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %14, %18
  %20 = icmp slt i32 %19, 448
  %21 = select i1 %20, i32 %19, i32 448
  %22 = icmp slt i32 %17, %21
  br i1 %22, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %23 = add i32 %17, 1
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, -1
  %26 = sext i32 %21 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %25, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %27 = mul nsw i64 %indvars.iv7, 1792
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %28 = shl i64 %indvars.iv, 5
  %29 = add nsw i64 %28, %27
  %30 = getelementptr inbounds float, float* %7, i64 %29
  %31 = bitcast float* %30 to <16 x float>*
  %32 = load <16 x float>, <16 x float>* %31, align 64, !tbaa !2424
  %33 = getelementptr inbounds float, float* %10, i64 %29
  %34 = bitcast float* %33 to <16 x float>*
  %35 = load <16 x float>, <16 x float>* %34, align 64, !tbaa !2427
  %36 = fadd <16 x float> %32, %35
  %37 = fcmp ogt <16 x float> %36, zeroinitializer
  %38 = select <16 x i1> %37, <16 x float> %36, <16 x float> zeroinitializer
  %39 = getelementptr inbounds float, float* %4, i64 %29
  %40 = bitcast float* %39 to <16 x float>*
  store <16 x float> %38, <16 x float>* %40, align 64, !tbaa !2430
  %41 = or i64 %29, 16
  %42 = getelementptr inbounds float, float* %7, i64 %41
  %43 = bitcast float* %42 to <16 x float>*
  %44 = load <16 x float>, <16 x float>* %43, align 64, !tbaa !2424
  %45 = getelementptr inbounds float, float* %10, i64 %41
  %46 = bitcast float* %45 to <16 x float>*
  %47 = load <16 x float>, <16 x float>* %46, align 64, !tbaa !2427
  %48 = fadd <16 x float> %44, %47
  %49 = fcmp ogt <16 x float> %48, zeroinitializer
  %50 = select <16 x i1> %49, <16 x float> %48, <16 x float> zeroinitializer
  %51 = getelementptr inbounds float, float* %4, i64 %41
  %52 = bitcast float* %51 to <16 x float>*
  store <16 x float> %50, <16 x float>* %52, align 64, !tbaa !2430
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !50

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %53 = icmp slt i64 %indvars.iv.next8, %26
  br i1 %53, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 6
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.252, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !2433
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !2447
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !2450
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !2452
  %32 = getelementptr inbounds i8, i8* %0, i64 40
  %33 = bitcast i8* %32 to %1**
  %34 = load %1*, %1** %33, align 8
  %35 = getelementptr inbounds i8, i8* %1, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4, !tbaa !2456
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  %66 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %1, %1* %34, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %1, %1* %34, i64 0, i32 4
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %1, %1* %34, i64 0, i32 5
  %77 = load i64*, i64** %76, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.253, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %79 = getelementptr inbounds i8, i8* %1, i64 4
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 4, !tbaa !2458
  switch i32 %81, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.254, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.255, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.256, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %85 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %85(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.257, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %37, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ]

assert_fail11:                                    ; preds = %assert_end10
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %86(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.258, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  %87 = icmp eq i32 %45, 1
  br i1 %87, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %89 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 5
  br i1 %91, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %93 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 2
  %96 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %97 = load i8, i8* %96, align 1
  %98 = icmp eq i8 %97, 32
  %99 = and i1 %95, %98
  %100 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %101, 1
  %103 = and i1 %99, %102
  br i1 %103, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %105 = load i64, i64* %41, align 8, !tbaa !2460
  %106 = trunc i64 %105 to i32
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %109 = getelementptr inbounds i64, i64* %41, i64 1
  %110 = load i64, i64* %109, align 8, !tbaa !2474
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %114 = getelementptr inbounds i64, i64* %41, i64 2
  %115 = load i64, i64* %114, align 8, !tbaa !2476
  %116 = trunc i64 %115 to i32
  %117 = icmp eq i32 %116, 14
  br i1 %117, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %119 = getelementptr inbounds i64, i64* %41, i64 3
  %120 = load i64, i64* %119, align 8, !tbaa !2479
  %121 = trunc i64 %120 to i32
  %122 = icmp eq i32 %121, 14
  br i1 %122, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %123 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %123(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %124 = getelementptr inbounds i64, i64* %41, i64 4
  %125 = load i64, i64* %124, align 8, !tbaa !2481
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 256
  br i1 %127, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %128 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %128(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.196, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %129 = icmp eq i64* %43, null
  br i1 %129, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end28
  %130 = getelementptr inbounds i64, i64* %43, i64 1
  %131 = bitcast i64* %130 to <4 x i64>*
  %132 = load <4 x i64>, <4 x i64>* %131, align 8, !tbaa !2485
  %133 = trunc <4 x i64> %132 to <4 x i32>
  %134 = icmp eq <4 x i32> %133, <i32 50176, i32 3584, i32 256, i32 1>
  %135 = load i64, i64* %43, align 8, !tbaa !2496
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %136, 50176
  %rdx.shuf173 = shufflevector <4 x i1> %134, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx174 = and <4 x i1> %134, %rdx.shuf173
  %rdx.shuf175 = shufflevector <4 x i1> %bin.rdx174, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx176 = and <4 x i1> %bin.rdx174, %rdx.shuf175
  %138 = extractelement <4 x i1> %bin.rdx176, i32 0
  %139 = and i1 %138, %137
  br i1 %139, label %if_end, label %assert_fail29, !prof !5

if_end:                                           ; preds = %assert_end28, %if_then
  %140 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %141 = load i64, i64* %140, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %143(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.259, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 6
  br i1 %147, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 2
  %152 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 32
  %155 = and i1 %151, %154
  %156 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %157 = load i16, i16* %156, align 2
  %158 = icmp eq i16 %157, 1
  %159 = and i1 %155, %158
  br i1 %159, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %161 = load i64, i64* %51, align 8, !tbaa !2500
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i32 %162, 16
  br i1 %163, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %165 = getelementptr inbounds i64, i64* %51, i64 1
  %166 = load i64, i64* %165, align 8, !tbaa !2514
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %170 = getelementptr inbounds i64, i64* %51, i64 2
  %171 = load i64, i64* %170, align 8, !tbaa !2516
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %175 = getelementptr inbounds i64, i64* %51, i64 3
  %176 = load i64, i64* %175, align 8, !tbaa !2519
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %179(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %180 = getelementptr inbounds i64, i64* %51, i64 4
  %181 = load i64, i64* %180, align 8, !tbaa !2521
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 256
  br i1 %183, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.171, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %185 = getelementptr inbounds i64, i64* %51, i64 5
  %186 = load i64, i64* %185, align 8, !tbaa !2525
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 64
  br i1 %188, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.198, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %190 = icmp eq i64* %53, null
  br i1 %190, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %191 = getelementptr inbounds i64, i64* %53, i64 2
  %192 = bitcast i64* %191 to <4 x i64>*
  %193 = load <4 x i64>, <4 x i64>* %192, align 8, !tbaa !2527
  %194 = trunc <4 x i64> %193 to <4 x i32>
  %195 = icmp eq <4 x i32> %194, <i32 16384, i32 16384, i32 64, i32 1>
  %196 = getelementptr inbounds i64, i64* %53, i64 1
  %197 = load i64, i64* %196, align 8, !tbaa !2538
  %198 = trunc i64 %197 to i32
  %199 = icmp eq i32 %198, 16384
  %200 = load i64, i64* %53, align 8, !tbaa !2542
  %201 = trunc i64 %200 to i32
  %202 = icmp eq i32 %201, 16384
  %rdx.shuf169 = shufflevector <4 x i1> %195, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx170 = and <4 x i1> %195, %rdx.shuf169
  %rdx.shuf171 = shufflevector <4 x i1> %bin.rdx170, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx172 = and <4 x i1> %bin.rdx170, %rdx.shuf171
  %203 = extractelement <4 x i1> %bin.rdx172, i32 0
  %204 = and i1 %203, %199
  %205 = and i1 %204, %202
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([279 x i8], [279 x i8]* @.str.199, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %47, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 2
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = and i1 %225, %228
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %231 = load i16, i16* %230, align 2
  %232 = icmp eq i16 %231, 1
  %233 = and i1 %229, %232
  br i1 %233, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %235 = load i64, i64* %57, align 8, !tbaa !2544
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %239 = getelementptr inbounds i64, i64* %57, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !2558
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 16
  br i1 %242, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %244 = getelementptr inbounds i64, i64* %57, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !2560
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %249 = getelementptr inbounds i64, i64* %57, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !2563
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %254 = getelementptr inbounds i64, i64* %57, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !2565
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 64
  br i1 %257, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.200, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %259 = icmp eq i64* %59, null
  br i1 %259, label %if_end74, label %if_then73, !prof !50

if_then73:                                        ; preds = %assert_end72
  %260 = getelementptr inbounds i64, i64* %59, i64 1
  %261 = bitcast i64* %260 to <4 x i64>*
  %262 = load <4 x i64>, <4 x i64>* %261, align 8, !tbaa !2569
  %263 = trunc <4 x i64> %262 to <4 x i32>
  %264 = icmp eq <4 x i32> %263, <i32 64, i32 64, i32 64, i32 1>
  %265 = load i64, i64* %59, align 8, !tbaa !2580
  %266 = trunc i64 %265 to i32
  %267 = icmp eq i32 %266, 1024
  %rdx.shuf165 = shufflevector <4 x i1> %264, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx166 = and <4 x i1> %264, %rdx.shuf165
  %rdx.shuf167 = shufflevector <4 x i1> %bin.rdx166, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx168 = and <4 x i1> %bin.rdx166, %rdx.shuf167
  %268 = extractelement <4 x i1> %bin.rdx168, i32 0
  %269 = and i1 %268, %267
  br i1 %269, label %if_end74, label %assert_fail75, !prof !5

if_end74:                                         ; preds = %assert_end72, %if_then73
  %270 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %271 = load i64, i64* %270, align 8
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %assert_end78, label %assert_fail77, !prof !5

assert_fail75:                                    ; preds = %if_then73
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.260, i64 0, i64 0))
  ret i32 -1

assert_fail77:                                    ; preds = %if_end74
  %274 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %274(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %if_end74
  %275 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %276 = load i32, i32* %275, align 4
  %277 = icmp eq i32 %276, 1
  br i1 %277, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %278 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %278(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %279 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %280 = load i32, i32* %279, align 4
  %281 = icmp eq i32 %47, %280
  br i1 %281, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %282(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %283 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %284 = load i32, i32* %283, align 4
  %285 = icmp eq i32 %284, 5
  br i1 %285, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %287 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %288 = load i8, i8* %287, align 1
  %289 = icmp eq i8 %288, 2
  %290 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %291, 32
  %293 = and i1 %289, %292
  %294 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %295 = load i16, i16* %294, align 2
  %296 = icmp eq i16 %295, 1
  %297 = and i1 %293, %296
  br i1 %297, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %298 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %298(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %299 = load i64, i64* %63, align 8, !tbaa !2584
  %300 = trunc i64 %299 to i32
  %301 = icmp eq i32 %300, 1
  br i1 %301, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %302(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %303 = getelementptr inbounds i64, i64* %63, i64 1
  %304 = load i64, i64* %303, align 8, !tbaa !2598
  %305 = trunc i64 %304 to i32
  %306 = icmp eq i32 %305, 16
  br i1 %306, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %307 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %307(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %308 = getelementptr inbounds i64, i64* %63, i64 2
  %309 = load i64, i64* %308, align 8, !tbaa !2600
  %310 = trunc i64 %309 to i32
  %311 = icmp eq i32 %310, 1
  br i1 %311, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %313 = getelementptr inbounds i64, i64* %63, i64 3
  %314 = load i64, i64* %313, align 8, !tbaa !2603
  %315 = trunc i64 %314 to i32
  %316 = icmp eq i32 %315, 1
  br i1 %316, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %317 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %317(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %318 = getelementptr inbounds i64, i64* %63, i64 4
  %319 = load i64, i64* %318, align 8, !tbaa !2605
  %320 = trunc i64 %319 to i32
  %321 = icmp eq i32 %320, 64
  br i1 %321, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %322 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %322(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.202, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %323 = icmp eq i64* %65, null
  br i1 %323, label %if_end98, label %if_then97, !prof !50

if_then97:                                        ; preds = %assert_end96
  %324 = getelementptr inbounds i64, i64* %65, i64 1
  %325 = bitcast i64* %324 to <4 x i64>*
  %326 = load <4 x i64>, <4 x i64>* %325, align 8, !tbaa !2609
  %327 = trunc <4 x i64> %326 to <4 x i32>
  %328 = icmp eq <4 x i32> %327, <i32 64, i32 64, i32 64, i32 1>
  %329 = load i64, i64* %65, align 8, !tbaa !2620
  %330 = trunc i64 %329 to i32
  %331 = icmp eq i32 %330, 1024
  %rdx.shuf161 = shufflevector <4 x i1> %328, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx162 = and <4 x i1> %328, %rdx.shuf161
  %rdx.shuf163 = shufflevector <4 x i1> %bin.rdx162, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx164 = and <4 x i1> %bin.rdx162, %rdx.shuf163
  %332 = extractelement <4 x i1> %bin.rdx164, i32 0
  %333 = and i1 %332, %331
  br i1 %333, label %if_end98, label %assert_fail99, !prof !5

if_end98:                                         ; preds = %assert_end96, %if_then97
  %334 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %335 = load i64, i64* %334, align 8
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %assert_end102, label %assert_fail101, !prof !5

assert_fail99:                                    ; preds = %if_then97
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.261, i64 0, i64 0))
  ret i32 -1

assert_fail101:                                   ; preds = %if_end98
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %338(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %if_end98
  %339 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %340 = load i32, i32* %339, align 4
  %341 = icmp eq i32 %340, 1
  br i1 %341, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %342 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %342(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %343 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %344 = load i32, i32* %343, align 4
  %345 = icmp eq i32 %47, %344
  br i1 %345, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %346 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %346(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %347 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %348 = load i32, i32* %347, align 4
  %349 = icmp eq i32 %348, 5
  br i1 %349, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %350(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %351 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %352 = load i8, i8* %351, align 1
  %353 = icmp eq i8 %352, 2
  %354 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %355 = load i8, i8* %354, align 1
  %356 = icmp eq i8 %355, 32
  %357 = and i1 %353, %356
  %358 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %359 = load i16, i16* %358, align 2
  %360 = icmp eq i16 %359, 1
  %361 = and i1 %357, %360
  br i1 %361, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %362 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %362(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %363 = load i64, i64* %69, align 8, !tbaa !2624
  %364 = trunc i64 %363 to i32
  %365 = icmp eq i32 %364, 1
  br i1 %365, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %366 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %366(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %367 = getelementptr inbounds i64, i64* %69, i64 1
  %368 = load i64, i64* %367, align 8, !tbaa !2638
  %369 = trunc i64 %368 to i32
  %370 = icmp eq i32 %369, 16
  br i1 %370, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %371 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %371(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %372 = getelementptr inbounds i64, i64* %69, i64 2
  %373 = load i64, i64* %372, align 8, !tbaa !2640
  %374 = trunc i64 %373 to i32
  %375 = icmp eq i32 %374, 1
  br i1 %375, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %376(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %377 = getelementptr inbounds i64, i64* %69, i64 3
  %378 = load i64, i64* %377, align 8, !tbaa !2643
  %379 = trunc i64 %378 to i32
  %380 = icmp eq i32 %379, 1
  br i1 %380, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %381 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %381(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %382 = getelementptr inbounds i64, i64* %69, i64 4
  %383 = load i64, i64* %382, align 8, !tbaa !2645
  %384 = trunc i64 %383 to i32
  %385 = icmp eq i32 %384, 64
  br i1 %385, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %386 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %386(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.204, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %387 = icmp eq i64* %71, null
  br i1 %387, label %if_end122, label %if_then121, !prof !50

if_then121:                                       ; preds = %assert_end120
  %388 = getelementptr inbounds i64, i64* %71, i64 1
  %389 = bitcast i64* %388 to <4 x i64>*
  %390 = load <4 x i64>, <4 x i64>* %389, align 8, !tbaa !2649
  %391 = trunc <4 x i64> %390 to <4 x i32>
  %392 = icmp eq <4 x i32> %391, <i32 64, i32 64, i32 64, i32 1>
  %393 = load i64, i64* %71, align 8, !tbaa !2660
  %394 = trunc i64 %393 to i32
  %395 = icmp eq i32 %394, 1024
  %rdx.shuf157 = shufflevector <4 x i1> %392, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx158 = and <4 x i1> %392, %rdx.shuf157
  %rdx.shuf159 = shufflevector <4 x i1> %bin.rdx158, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx160 = and <4 x i1> %bin.rdx158, %rdx.shuf159
  %396 = extractelement <4 x i1> %bin.rdx160, i32 0
  %397 = and i1 %396, %395
  br i1 %397, label %if_end122, label %assert_fail123, !prof !5

if_end122:                                        ; preds = %assert_end120, %if_then121
  %398 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %399 = load i64, i64* %398, align 8
  %400 = icmp eq i64 %399, 0
  br i1 %400, label %assert_end126, label %assert_fail125, !prof !5

assert_fail123:                                   ; preds = %if_then121
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %401(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.262, i64 0, i64 0))
  ret i32 -1

assert_fail125:                                   ; preds = %if_end122
  %402 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %402(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %if_end122
  %403 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %404 = load i32, i32* %403, align 4
  %405 = icmp eq i32 %404, 1
  br i1 %405, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %406 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %406(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %407 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %408 = load i32, i32* %407, align 4
  %409 = icmp eq i32 %47, %408
  br i1 %409, label %assert_end130, label %assert_fail129, !prof !5

assert_fail129:                                   ; preds = %assert_end128
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %410(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end130:                                    ; preds = %assert_end128
  %411 = getelementptr inbounds %1, %1* %34, i64 0, i32 2
  %412 = load i32, i32* %411, align 4
  %413 = icmp eq i32 %412, 5
  br i1 %413, label %assert_end132, label %assert_fail131, !prof !5

assert_fail131:                                   ; preds = %assert_end130
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %414(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end132:                                    ; preds = %assert_end130
  %415 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 0
  %416 = load i8, i8* %415, align 1
  %417 = icmp eq i8 %416, 2
  %418 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 1
  %419 = load i8, i8* %418, align 1
  %420 = icmp eq i8 %419, 32
  %421 = and i1 %417, %420
  %422 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 2
  %423 = load i16, i16* %422, align 2
  %424 = icmp eq i16 %423, 1
  %425 = and i1 %421, %424
  br i1 %425, label %assert_end134, label %assert_fail133, !prof !5

assert_fail133:                                   ; preds = %assert_end132
  %426 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %426(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %assert_end132
  %427 = load i64, i64* %75, align 8, !tbaa !2664
  %428 = trunc i64 %427 to i32
  %429 = icmp eq i32 %428, 1
  br i1 %429, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %430 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %430(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.116, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %431 = getelementptr inbounds i64, i64* %75, i64 1
  %432 = load i64, i64* %431, align 8, !tbaa !2678
  %433 = trunc i64 %432 to i32
  %434 = icmp eq i32 %433, 16
  br i1 %434, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %435 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %435(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.117, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %436 = getelementptr inbounds i64, i64* %75, i64 2
  %437 = load i64, i64* %436, align 8, !tbaa !2680
  %438 = trunc i64 %437 to i32
  %439 = icmp eq i32 %438, 14
  br i1 %439, label %assert_end140, label %assert_fail139, !prof !5

assert_fail139:                                   ; preds = %assert_end138
  %440 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %440(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.263, i64 0, i64 0))
  ret i32 -1

assert_end140:                                    ; preds = %assert_end138
  %441 = getelementptr inbounds i64, i64* %75, i64 3
  %442 = load i64, i64* %441, align 8, !tbaa !2683
  %443 = trunc i64 %442 to i32
  %444 = icmp eq i32 %443, 14
  br i1 %444, label %assert_end142, label %assert_fail141, !prof !5

assert_fail141:                                   ; preds = %assert_end140
  %445 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %445(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.264, i64 0, i64 0))
  ret i32 -1

assert_end142:                                    ; preds = %assert_end140
  %446 = getelementptr inbounds i64, i64* %75, i64 4
  %447 = load i64, i64* %446, align 8, !tbaa !2685
  %448 = trunc i64 %447 to i32
  %449 = icmp eq i32 %448, 64
  br i1 %449, label %assert_end144, label %assert_fail143, !prof !5

assert_fail143:                                   ; preds = %assert_end142
  %450 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %450(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.206, i64 0, i64 0))
  ret i32 -1

assert_end144:                                    ; preds = %assert_end142
  %451 = icmp eq i64* %77, null
  br i1 %451, label %if_end146, label %if_then145, !prof !50

if_then145:                                       ; preds = %assert_end144
  %452 = getelementptr inbounds i64, i64* %77, i64 1
  %453 = bitcast i64* %452 to <4 x i64>*
  %454 = load <4 x i64>, <4 x i64>* %453, align 8, !tbaa !2689
  %455 = trunc <4 x i64> %454 to <4 x i32>
  %456 = icmp eq <4 x i32> %455, <i32 12544, i32 896, i32 64, i32 1>
  %457 = load i64, i64* %77, align 8, !tbaa !2700
  %458 = trunc i64 %457 to i32
  %459 = icmp eq i32 %458, 200704
  %rdx.shuf = shufflevector <4 x i1> %456, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %456, %rdx.shuf
  %rdx.shuf155 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx156 = and <4 x i1> %bin.rdx, %rdx.shuf155
  %460 = extractelement <4 x i1> %bin.rdx156, i32 0
  %461 = and i1 %460, %459
  br i1 %461, label %if_end146, label %assert_fail147, !prof !5

if_end146:                                        ; preds = %assert_end144, %if_then145
  %462 = getelementptr inbounds %1, %1* %34, i64 0, i32 6
  %463 = load i64, i64* %462, align 8
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %assert_end150, label %assert_fail149, !prof !5

assert_fail147:                                   ; preds = %if_then145
  %465 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %465(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.265, i64 0, i64 0))
  ret i32 -1

assert_fail149:                                   ; preds = %if_end146
  %466 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %466(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end150:                                    ; preds = %if_end146
  %467 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 0
  %468 = load i32, i32* %467, align 4
  %469 = icmp eq i32 %468, 1
  br i1 %469, label %assert_end152, label %assert_fail151, !prof !5

assert_fail151:                                   ; preds = %assert_end150
  %470 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %470(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end152:                                    ; preds = %assert_end150
  %471 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 1
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %47, %472
  br i1 %473, label %assert_end154, label %assert_fail153, !prof !5

assert_fail153:                                   ; preds = %assert_end152
  %474 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %474(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end154:                                    ; preds = %assert_end152
  %475 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2_compute_(i8* %39, i8* %49, i8* %73, i8* %55, i8* %61, i8* %67, i32 %47)
  ret i32 %475
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_2_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %7 = alloca %18, align 8
  %8 = getelementptr inbounds %18, %18* %7, i64 0, i32 0
  store i8* %0, i8** %8, align 8
  %9 = getelementptr inbounds %18, %18* %7, i64 0, i32 1
  store i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %18, %18* %7, i64 0, i32 2
  store i8* %2, i8** %10, align 8
  %11 = getelementptr inbounds %18, %18* %7, i64 0, i32 3
  store i8* %3, i8** %11, align 8
  %12 = getelementptr inbounds %18, %18* %7, i64 0, i32 4
  store i8* %4, i8** %12, align 8
  %13 = getelementptr inbounds %18, %18* %7, i64 0, i32 5
  store i8* %5, i8** %13, align 8
  %14 = getelementptr inbounds %18, %18* %7, i64 0, i32 6
  store i32 %6, i32* %14, align 8
  %15 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %16 = bitcast %18* %7 to i8*
  %17 = call i32 %15(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.266, i8* nonnull %16, i32 0)
  ret i32 %17
}

define private i32 @__tvm_parallel_lambda.266(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %2, i64 48
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, 111
  %26 = sdiv i32 %25, %24
  %27 = mul nsw i32 %26, %0
  %28 = icmp slt i32 %27, 112
  %29 = select i1 %28, i32 %27, i32 112
  %30 = add nsw i32 %0, 1
  %31 = mul nsw i32 %26, %30
  %32 = icmp slt i32 %31, 112
  %33 = select i1 %32, i32 %31, i32 112
  %34 = icmp slt i32 %29, %33
  br i1 %34, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %35 = add i32 %29, 1
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %36, -1
  %38 = sext i32 %33 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_end6.6
  %indvars.iv43 = phi i64 [ %37, %for_body.preheader ], [ %indvars.iv.next44, %for_end6.6 ]
  %39 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %40 = tail call i8* %39(i32 1, i32 %22, i64 7168, i32 2, i32 32)
  %41 = trunc i64 %indvars.iv43 to i32
  %42 = srem i32 %41, 7
  %43 = mul nsw i32 %42, 7168
  %44 = sdiv i32 %41, 7
  %45 = shl i32 %44, 14
  %46 = sext i32 %45 to i64
  %47 = sext i32 %43 to i64
  %48 = bitcast i8* %40 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %48, align 64, !tbaa !2704
  %49 = getelementptr inbounds i8, i8* %40, i64 256
  %50 = bitcast i8* %49 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %50, align 64, !tbaa !2704
  %51 = getelementptr inbounds i8, i8* %40, i64 3584
  %52 = bitcast i8* %51 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %52, align 64, !tbaa !2704
  %53 = getelementptr inbounds i8, i8* %40, i64 3840
  %54 = bitcast i8* %53 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %54, align 64, !tbaa !2704
  br label %for_body5

for_end:                                          ; preds = %for_end6.6, %entry
  ret i32 0

for_body5:                                        ; preds = %for_body5, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_body5 ]
  %55 = phi <64 x float> [ zeroinitializer, %for_body ], [ %87, %for_body5 ]
  %56 = phi <64 x float> [ zeroinitializer, %for_body ], [ %81, %for_body5 ]
  %57 = phi <64 x float> [ zeroinitializer, %for_body ], [ %75, %for_body5 ]
  %58 = phi <64 x float> [ zeroinitializer, %for_body ], [ %69, %for_body5 ]
  %59 = add nsw i64 %indvars.iv, %47
  %60 = getelementptr inbounds float, float* %4, i64 %59
  %61 = load float, float* %60, align 4, !tbaa !2707
  %62 = insertelement <64 x float> undef, float %61, i32 0
  %63 = shufflevector <64 x float> %62, <64 x float> undef, <64 x i32> zeroinitializer
  %64 = shl i64 %indvars.iv, 6
  %65 = add nuw nsw i64 %64, %46
  %66 = getelementptr inbounds float, float* %7, i64 %65
  %67 = bitcast float* %66 to <64 x float>*
  %68 = load <64 x float>, <64 x float>* %67, align 64, !tbaa !2710
  %69 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %63, <64 x float> %68, <64 x float> %58)
  %70 = add nsw i64 %59, 256
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !2707
  %73 = insertelement <64 x float> undef, float %72, i32 0
  %74 = shufflevector <64 x float> %73, <64 x float> undef, <64 x i32> zeroinitializer
  %75 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %74, <64 x float> %68, <64 x float> %57)
  %76 = add nsw i64 %59, 3584
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !2707
  %79 = insertelement <64 x float> undef, float %78, i32 0
  %80 = shufflevector <64 x float> %79, <64 x float> undef, <64 x i32> zeroinitializer
  %81 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %80, <64 x float> %68, <64 x float> %56)
  %82 = add nsw i64 %59, 3840
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = load float, float* %83, align 4, !tbaa !2707
  %85 = insertelement <64 x float> undef, float %84, i32 0
  %86 = shufflevector <64 x float> %85, <64 x float> undef, <64 x i32> zeroinitializer
  %87 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %86, <64 x float> %68, <64 x float> %55)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  store <64 x float> %69, <64 x float>* %48, align 64, !tbaa !2704
  store <64 x float> %75, <64 x float>* %50, align 64, !tbaa !2704
  store <64 x float> %81, <64 x float>* %52, align 64, !tbaa !2704
  store <64 x float> %87, <64 x float>* %54, align 64, !tbaa !2704
  %88 = getelementptr inbounds i8, i8* %40, i64 512
  %89 = bitcast i8* %88 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %89, align 64, !tbaa !2704
  %90 = getelementptr inbounds i8, i8* %40, i64 768
  %91 = bitcast i8* %90 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %91, align 64, !tbaa !2704
  %92 = getelementptr inbounds i8, i8* %40, i64 4096
  %93 = bitcast i8* %92 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %93, align 64, !tbaa !2704
  %94 = getelementptr inbounds i8, i8* %40, i64 4352
  %95 = bitcast i8* %94 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %95, align 64, !tbaa !2704
  %96 = or i64 %47, 512
  br label %for_body5.1

for_body5.1:                                      ; preds = %for_body5.1, %for_end6
  %indvars.iv.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next.1, %for_body5.1 ]
  %97 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %129, %for_body5.1 ]
  %98 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %123, %for_body5.1 ]
  %99 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %117, %for_body5.1 ]
  %100 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %111, %for_body5.1 ]
  %101 = add nsw i64 %96, %indvars.iv.1
  %102 = getelementptr inbounds float, float* %4, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !2707
  %104 = insertelement <64 x float> undef, float %103, i32 0
  %105 = shufflevector <64 x float> %104, <64 x float> undef, <64 x i32> zeroinitializer
  %106 = shl i64 %indvars.iv.1, 6
  %107 = add nuw nsw i64 %106, %46
  %108 = getelementptr inbounds float, float* %7, i64 %107
  %109 = bitcast float* %108 to <64 x float>*
  %110 = load <64 x float>, <64 x float>* %109, align 64, !tbaa !2710
  %111 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %105, <64 x float> %110, <64 x float> %100)
  %112 = add nsw i64 %101, 256
  %113 = getelementptr inbounds float, float* %4, i64 %112
  %114 = load float, float* %113, align 4, !tbaa !2707
  %115 = insertelement <64 x float> undef, float %114, i32 0
  %116 = shufflevector <64 x float> %115, <64 x float> undef, <64 x i32> zeroinitializer
  %117 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %116, <64 x float> %110, <64 x float> %99)
  %118 = add nsw i64 %101, 3584
  %119 = getelementptr inbounds float, float* %4, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !2707
  %121 = insertelement <64 x float> undef, float %120, i32 0
  %122 = shufflevector <64 x float> %121, <64 x float> undef, <64 x i32> zeroinitializer
  %123 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %122, <64 x float> %110, <64 x float> %98)
  %124 = add nsw i64 %101, 3840
  %125 = getelementptr inbounds float, float* %4, i64 %124
  %126 = load float, float* %125, align 4, !tbaa !2707
  %127 = insertelement <64 x float> undef, float %126, i32 0
  %128 = shufflevector <64 x float> %127, <64 x float> undef, <64 x i32> zeroinitializer
  %129 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %128, <64 x float> %110, <64 x float> %97)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 256
  br i1 %exitcond.1, label %for_end6.1, label %for_body5.1, !prof !50

for_end6.1:                                       ; preds = %for_body5.1
  store <64 x float> %111, <64 x float>* %89, align 64, !tbaa !2704
  store <64 x float> %117, <64 x float>* %91, align 64, !tbaa !2704
  store <64 x float> %123, <64 x float>* %93, align 64, !tbaa !2704
  store <64 x float> %129, <64 x float>* %95, align 64, !tbaa !2704
  %130 = getelementptr inbounds i8, i8* %40, i64 1024
  %131 = bitcast i8* %130 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %131, align 64, !tbaa !2704
  %132 = getelementptr inbounds i8, i8* %40, i64 1280
  %133 = bitcast i8* %132 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %133, align 64, !tbaa !2704
  %134 = getelementptr inbounds i8, i8* %40, i64 4608
  %135 = bitcast i8* %134 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %135, align 64, !tbaa !2704
  %136 = getelementptr inbounds i8, i8* %40, i64 4864
  %137 = bitcast i8* %136 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %137, align 64, !tbaa !2704
  %138 = add nsw i64 %47, 1024
  br label %for_body5.2

for_body5.2:                                      ; preds = %for_body5.2, %for_end6.1
  %indvars.iv.2 = phi i64 [ 0, %for_end6.1 ], [ %indvars.iv.next.2, %for_body5.2 ]
  %139 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %171, %for_body5.2 ]
  %140 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %165, %for_body5.2 ]
  %141 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %159, %for_body5.2 ]
  %142 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %153, %for_body5.2 ]
  %143 = add nsw i64 %138, %indvars.iv.2
  %144 = getelementptr inbounds float, float* %4, i64 %143
  %145 = load float, float* %144, align 4, !tbaa !2707
  %146 = insertelement <64 x float> undef, float %145, i32 0
  %147 = shufflevector <64 x float> %146, <64 x float> undef, <64 x i32> zeroinitializer
  %148 = shl i64 %indvars.iv.2, 6
  %149 = add nuw nsw i64 %148, %46
  %150 = getelementptr inbounds float, float* %7, i64 %149
  %151 = bitcast float* %150 to <64 x float>*
  %152 = load <64 x float>, <64 x float>* %151, align 64, !tbaa !2710
  %153 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %147, <64 x float> %152, <64 x float> %142)
  %154 = add nsw i64 %143, 256
  %155 = getelementptr inbounds float, float* %4, i64 %154
  %156 = load float, float* %155, align 4, !tbaa !2707
  %157 = insertelement <64 x float> undef, float %156, i32 0
  %158 = shufflevector <64 x float> %157, <64 x float> undef, <64 x i32> zeroinitializer
  %159 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %158, <64 x float> %152, <64 x float> %141)
  %160 = add nsw i64 %143, 3584
  %161 = getelementptr inbounds float, float* %4, i64 %160
  %162 = load float, float* %161, align 4, !tbaa !2707
  %163 = insertelement <64 x float> undef, float %162, i32 0
  %164 = shufflevector <64 x float> %163, <64 x float> undef, <64 x i32> zeroinitializer
  %165 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %164, <64 x float> %152, <64 x float> %140)
  %166 = add nsw i64 %143, 3840
  %167 = getelementptr inbounds float, float* %4, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !2707
  %169 = insertelement <64 x float> undef, float %168, i32 0
  %170 = shufflevector <64 x float> %169, <64 x float> undef, <64 x i32> zeroinitializer
  %171 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %170, <64 x float> %152, <64 x float> %139)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 256
  br i1 %exitcond.2, label %for_end6.2, label %for_body5.2, !prof !50

for_end6.2:                                       ; preds = %for_body5.2
  store <64 x float> %153, <64 x float>* %131, align 64, !tbaa !2704
  store <64 x float> %159, <64 x float>* %133, align 64, !tbaa !2704
  store <64 x float> %165, <64 x float>* %135, align 64, !tbaa !2704
  store <64 x float> %171, <64 x float>* %137, align 64, !tbaa !2704
  %172 = getelementptr inbounds i8, i8* %40, i64 1536
  %173 = bitcast i8* %172 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %173, align 64, !tbaa !2704
  %174 = getelementptr inbounds i8, i8* %40, i64 1792
  %175 = bitcast i8* %174 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %175, align 64, !tbaa !2704
  %176 = getelementptr inbounds i8, i8* %40, i64 5120
  %177 = bitcast i8* %176 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %177, align 64, !tbaa !2704
  %178 = getelementptr inbounds i8, i8* %40, i64 5376
  %179 = bitcast i8* %178 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %179, align 64, !tbaa !2704
  %180 = add nsw i64 %47, 1536
  br label %for_body5.3

for_body5.3:                                      ; preds = %for_body5.3, %for_end6.2
  %indvars.iv.3 = phi i64 [ 0, %for_end6.2 ], [ %indvars.iv.next.3, %for_body5.3 ]
  %181 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %213, %for_body5.3 ]
  %182 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %207, %for_body5.3 ]
  %183 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %201, %for_body5.3 ]
  %184 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %195, %for_body5.3 ]
  %185 = add nsw i64 %180, %indvars.iv.3
  %186 = getelementptr inbounds float, float* %4, i64 %185
  %187 = load float, float* %186, align 4, !tbaa !2707
  %188 = insertelement <64 x float> undef, float %187, i32 0
  %189 = shufflevector <64 x float> %188, <64 x float> undef, <64 x i32> zeroinitializer
  %190 = shl i64 %indvars.iv.3, 6
  %191 = add nuw nsw i64 %190, %46
  %192 = getelementptr inbounds float, float* %7, i64 %191
  %193 = bitcast float* %192 to <64 x float>*
  %194 = load <64 x float>, <64 x float>* %193, align 64, !tbaa !2710
  %195 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %189, <64 x float> %194, <64 x float> %184)
  %196 = add nsw i64 %185, 256
  %197 = getelementptr inbounds float, float* %4, i64 %196
  %198 = load float, float* %197, align 4, !tbaa !2707
  %199 = insertelement <64 x float> undef, float %198, i32 0
  %200 = shufflevector <64 x float> %199, <64 x float> undef, <64 x i32> zeroinitializer
  %201 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %200, <64 x float> %194, <64 x float> %183)
  %202 = add nsw i64 %185, 3584
  %203 = getelementptr inbounds float, float* %4, i64 %202
  %204 = load float, float* %203, align 4, !tbaa !2707
  %205 = insertelement <64 x float> undef, float %204, i32 0
  %206 = shufflevector <64 x float> %205, <64 x float> undef, <64 x i32> zeroinitializer
  %207 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %206, <64 x float> %194, <64 x float> %182)
  %208 = add nsw i64 %185, 3840
  %209 = getelementptr inbounds float, float* %4, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !2707
  %211 = insertelement <64 x float> undef, float %210, i32 0
  %212 = shufflevector <64 x float> %211, <64 x float> undef, <64 x i32> zeroinitializer
  %213 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %212, <64 x float> %194, <64 x float> %181)
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, 256
  br i1 %exitcond.3, label %for_end6.3, label %for_body5.3, !prof !50

for_end6.3:                                       ; preds = %for_body5.3
  store <64 x float> %195, <64 x float>* %173, align 64, !tbaa !2704
  store <64 x float> %201, <64 x float>* %175, align 64, !tbaa !2704
  store <64 x float> %207, <64 x float>* %177, align 64, !tbaa !2704
  store <64 x float> %213, <64 x float>* %179, align 64, !tbaa !2704
  %214 = getelementptr inbounds i8, i8* %40, i64 2048
  %215 = bitcast i8* %214 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %215, align 64, !tbaa !2704
  %216 = getelementptr inbounds i8, i8* %40, i64 2304
  %217 = bitcast i8* %216 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %217, align 64, !tbaa !2704
  %218 = getelementptr inbounds i8, i8* %40, i64 5632
  %219 = bitcast i8* %218 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %219, align 64, !tbaa !2704
  %220 = getelementptr inbounds i8, i8* %40, i64 5888
  %221 = bitcast i8* %220 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %221, align 64, !tbaa !2704
  %222 = add nsw i64 %47, 2048
  br label %for_body5.4

for_body5.4:                                      ; preds = %for_body5.4, %for_end6.3
  %indvars.iv.4 = phi i64 [ 0, %for_end6.3 ], [ %indvars.iv.next.4, %for_body5.4 ]
  %223 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %255, %for_body5.4 ]
  %224 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %249, %for_body5.4 ]
  %225 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %243, %for_body5.4 ]
  %226 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %237, %for_body5.4 ]
  %227 = add nsw i64 %222, %indvars.iv.4
  %228 = getelementptr inbounds float, float* %4, i64 %227
  %229 = load float, float* %228, align 4, !tbaa !2707
  %230 = insertelement <64 x float> undef, float %229, i32 0
  %231 = shufflevector <64 x float> %230, <64 x float> undef, <64 x i32> zeroinitializer
  %232 = shl i64 %indvars.iv.4, 6
  %233 = add nuw nsw i64 %232, %46
  %234 = getelementptr inbounds float, float* %7, i64 %233
  %235 = bitcast float* %234 to <64 x float>*
  %236 = load <64 x float>, <64 x float>* %235, align 64, !tbaa !2710
  %237 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %231, <64 x float> %236, <64 x float> %226)
  %238 = add nsw i64 %227, 256
  %239 = getelementptr inbounds float, float* %4, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !2707
  %241 = insertelement <64 x float> undef, float %240, i32 0
  %242 = shufflevector <64 x float> %241, <64 x float> undef, <64 x i32> zeroinitializer
  %243 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %242, <64 x float> %236, <64 x float> %225)
  %244 = add nsw i64 %227, 3584
  %245 = getelementptr inbounds float, float* %4, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !2707
  %247 = insertelement <64 x float> undef, float %246, i32 0
  %248 = shufflevector <64 x float> %247, <64 x float> undef, <64 x i32> zeroinitializer
  %249 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %248, <64 x float> %236, <64 x float> %224)
  %250 = add nsw i64 %227, 3840
  %251 = getelementptr inbounds float, float* %4, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !2707
  %253 = insertelement <64 x float> undef, float %252, i32 0
  %254 = shufflevector <64 x float> %253, <64 x float> undef, <64 x i32> zeroinitializer
  %255 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %254, <64 x float> %236, <64 x float> %223)
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv.4, 1
  %exitcond.4 = icmp eq i64 %indvars.iv.next.4, 256
  br i1 %exitcond.4, label %for_end6.4, label %for_body5.4, !prof !50

for_end6.4:                                       ; preds = %for_body5.4
  store <64 x float> %237, <64 x float>* %215, align 64, !tbaa !2704
  store <64 x float> %243, <64 x float>* %217, align 64, !tbaa !2704
  store <64 x float> %249, <64 x float>* %219, align 64, !tbaa !2704
  store <64 x float> %255, <64 x float>* %221, align 64, !tbaa !2704
  %256 = getelementptr inbounds i8, i8* %40, i64 2560
  %257 = bitcast i8* %256 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %257, align 64, !tbaa !2704
  %258 = getelementptr inbounds i8, i8* %40, i64 2816
  %259 = bitcast i8* %258 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %259, align 64, !tbaa !2704
  %260 = getelementptr inbounds i8, i8* %40, i64 6144
  %261 = bitcast i8* %260 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %261, align 64, !tbaa !2704
  %262 = getelementptr inbounds i8, i8* %40, i64 6400
  %263 = bitcast i8* %262 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %263, align 64, !tbaa !2704
  %264 = add nsw i64 %47, 2560
  br label %for_body5.5

for_body5.5:                                      ; preds = %for_body5.5, %for_end6.4
  %indvars.iv.5 = phi i64 [ 0, %for_end6.4 ], [ %indvars.iv.next.5, %for_body5.5 ]
  %265 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %297, %for_body5.5 ]
  %266 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %291, %for_body5.5 ]
  %267 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %285, %for_body5.5 ]
  %268 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %279, %for_body5.5 ]
  %269 = add nsw i64 %264, %indvars.iv.5
  %270 = getelementptr inbounds float, float* %4, i64 %269
  %271 = load float, float* %270, align 4, !tbaa !2707
  %272 = insertelement <64 x float> undef, float %271, i32 0
  %273 = shufflevector <64 x float> %272, <64 x float> undef, <64 x i32> zeroinitializer
  %274 = shl i64 %indvars.iv.5, 6
  %275 = add nuw nsw i64 %274, %46
  %276 = getelementptr inbounds float, float* %7, i64 %275
  %277 = bitcast float* %276 to <64 x float>*
  %278 = load <64 x float>, <64 x float>* %277, align 64, !tbaa !2710
  %279 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %273, <64 x float> %278, <64 x float> %268)
  %280 = add nsw i64 %269, 256
  %281 = getelementptr inbounds float, float* %4, i64 %280
  %282 = load float, float* %281, align 4, !tbaa !2707
  %283 = insertelement <64 x float> undef, float %282, i32 0
  %284 = shufflevector <64 x float> %283, <64 x float> undef, <64 x i32> zeroinitializer
  %285 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %284, <64 x float> %278, <64 x float> %267)
  %286 = add nsw i64 %269, 3584
  %287 = getelementptr inbounds float, float* %4, i64 %286
  %288 = load float, float* %287, align 4, !tbaa !2707
  %289 = insertelement <64 x float> undef, float %288, i32 0
  %290 = shufflevector <64 x float> %289, <64 x float> undef, <64 x i32> zeroinitializer
  %291 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %290, <64 x float> %278, <64 x float> %266)
  %292 = add nsw i64 %269, 3840
  %293 = getelementptr inbounds float, float* %4, i64 %292
  %294 = load float, float* %293, align 4, !tbaa !2707
  %295 = insertelement <64 x float> undef, float %294, i32 0
  %296 = shufflevector <64 x float> %295, <64 x float> undef, <64 x i32> zeroinitializer
  %297 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %296, <64 x float> %278, <64 x float> %265)
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv.5, 1
  %exitcond.5 = icmp eq i64 %indvars.iv.next.5, 256
  br i1 %exitcond.5, label %for_end6.5, label %for_body5.5, !prof !50

for_end6.5:                                       ; preds = %for_body5.5
  store <64 x float> %279, <64 x float>* %257, align 64, !tbaa !2704
  store <64 x float> %285, <64 x float>* %259, align 64, !tbaa !2704
  store <64 x float> %291, <64 x float>* %261, align 64, !tbaa !2704
  store <64 x float> %297, <64 x float>* %263, align 64, !tbaa !2704
  %298 = getelementptr inbounds i8, i8* %40, i64 3072
  %299 = bitcast i8* %298 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %299, align 64, !tbaa !2704
  %300 = getelementptr inbounds i8, i8* %40, i64 3328
  %301 = bitcast i8* %300 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %301, align 64, !tbaa !2704
  %302 = getelementptr inbounds i8, i8* %40, i64 6656
  %303 = bitcast i8* %302 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %303, align 64, !tbaa !2704
  %304 = getelementptr inbounds i8, i8* %40, i64 6912
  %305 = bitcast i8* %304 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %305, align 64, !tbaa !2704
  %306 = add nsw i64 %47, 3072
  br label %for_body5.6

for_body5.6:                                      ; preds = %for_body5.6, %for_end6.5
  %indvars.iv.6 = phi i64 [ 0, %for_end6.5 ], [ %indvars.iv.next.6, %for_body5.6 ]
  %307 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %339, %for_body5.6 ]
  %308 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %333, %for_body5.6 ]
  %309 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %327, %for_body5.6 ]
  %310 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %321, %for_body5.6 ]
  %311 = add nsw i64 %306, %indvars.iv.6
  %312 = getelementptr inbounds float, float* %4, i64 %311
  %313 = load float, float* %312, align 4, !tbaa !2707
  %314 = insertelement <64 x float> undef, float %313, i32 0
  %315 = shufflevector <64 x float> %314, <64 x float> undef, <64 x i32> zeroinitializer
  %316 = shl i64 %indvars.iv.6, 6
  %317 = add nuw nsw i64 %316, %46
  %318 = getelementptr inbounds float, float* %7, i64 %317
  %319 = bitcast float* %318 to <64 x float>*
  %320 = load <64 x float>, <64 x float>* %319, align 64, !tbaa !2710
  %321 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %315, <64 x float> %320, <64 x float> %310)
  %322 = add nsw i64 %311, 256
  %323 = getelementptr inbounds float, float* %4, i64 %322
  %324 = load float, float* %323, align 4, !tbaa !2707
  %325 = insertelement <64 x float> undef, float %324, i32 0
  %326 = shufflevector <64 x float> %325, <64 x float> undef, <64 x i32> zeroinitializer
  %327 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %326, <64 x float> %320, <64 x float> %309)
  %328 = add nsw i64 %311, 3584
  %329 = getelementptr inbounds float, float* %4, i64 %328
  %330 = load float, float* %329, align 4, !tbaa !2707
  %331 = insertelement <64 x float> undef, float %330, i32 0
  %332 = shufflevector <64 x float> %331, <64 x float> undef, <64 x i32> zeroinitializer
  %333 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %332, <64 x float> %320, <64 x float> %308)
  %334 = add nsw i64 %311, 3840
  %335 = getelementptr inbounds float, float* %4, i64 %334
  %336 = load float, float* %335, align 4, !tbaa !2707
  %337 = insertelement <64 x float> undef, float %336, i32 0
  %338 = shufflevector <64 x float> %337, <64 x float> undef, <64 x i32> zeroinitializer
  %339 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %338, <64 x float> %320, <64 x float> %307)
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv.6, 1
  %exitcond.6 = icmp eq i64 %indvars.iv.next.6, 256
  br i1 %exitcond.6, label %for_end6.6, label %for_body5.6, !prof !50

for_end6.6:                                       ; preds = %for_body5.6
  store <64 x float> %321, <64 x float>* %299, align 64, !tbaa !2704
  store <64 x float> %327, <64 x float>* %301, align 64, !tbaa !2704
  store <64 x float> %333, <64 x float>* %303, align 64, !tbaa !2704
  store <64 x float> %339, <64 x float>* %305, align 64, !tbaa !2704
  %340 = mul nsw i64 %indvars.iv43, 1792
  %341 = shl nsw i32 %44, 6
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds float, float* %13, i64 %342
  %344 = bitcast float* %343 to <64 x float>*
  %345 = load <64 x float>, <64 x float>* %344, align 64, !tbaa !2713
  %346 = getelementptr inbounds float, float* %16, i64 %342
  %347 = bitcast float* %346 to <64 x float>*
  %348 = load <64 x float>, <64 x float>* %347, align 64, !tbaa !2716
  %349 = getelementptr inbounds float, float* %19, i64 %342
  %350 = bitcast float* %349 to <64 x float>*
  %351 = load <64 x float>, <64 x float>* %350, align 64, !tbaa !2719
  %352 = bitcast i8* %40 to <64 x float>*
  %353 = load <64 x float>, <64 x float>* %352, align 64, !tbaa !2704
  %354 = fadd <64 x float> %353, %345
  %355 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %354, <64 x float> %348, <64 x float> %351)
  %356 = getelementptr inbounds float, float* %10, i64 %340
  %357 = bitcast float* %356 to <64 x float>*
  store <64 x float> %355, <64 x float>* %357, align 64, !tbaa !2722
  %358 = getelementptr inbounds i8, i8* %40, i64 256
  %359 = bitcast i8* %358 to <64 x float>*
  %360 = load <64 x float>, <64 x float>* %359, align 64, !tbaa !2704
  %361 = fadd <64 x float> %360, %345
  %362 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %361, <64 x float> %348, <64 x float> %351)
  %363 = mul i64 %indvars.iv43, 7696581394432
  %sext = ashr exact i64 %363, 32
  %364 = or i64 %sext, 64
  %365 = getelementptr inbounds float, float* %10, i64 %364
  %366 = bitcast float* %365 to <64 x float>*
  store <64 x float> %362, <64 x float>* %366, align 64, !tbaa !2722
  %367 = getelementptr inbounds i8, i8* %40, i64 3584
  %368 = bitcast i8* %367 to <64 x float>*
  %369 = load <64 x float>, <64 x float>* %368, align 64, !tbaa !2704
  %370 = fadd <64 x float> %369, %345
  %371 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %370, <64 x float> %348, <64 x float> %351)
  %372 = mul i64 %indvars.iv43, 7696581394432
  %sext58 = add i64 %372, 3848290697216
  %373 = ashr exact i64 %sext58, 32
  %374 = getelementptr inbounds float, float* %10, i64 %373
  %375 = bitcast float* %374 to <64 x float>*
  store <64 x float> %371, <64 x float>* %375, align 64, !tbaa !2722
  %376 = getelementptr inbounds i8, i8* %40, i64 3840
  %377 = bitcast i8* %376 to <64 x float>*
  %378 = load <64 x float>, <64 x float>* %377, align 64, !tbaa !2704
  %379 = fadd <64 x float> %378, %345
  %380 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %379, <64 x float> %348, <64 x float> %351)
  %381 = mul i64 %indvars.iv43, 7696581394432
  %sext45 = add i64 %381, 4123168604160
  %382 = ashr exact i64 %sext45, 32
  %383 = getelementptr inbounds float, float* %10, i64 %382
  %384 = bitcast float* %383 to <64 x float>*
  store <64 x float> %380, <64 x float>* %384, align 64, !tbaa !2722
  %385 = getelementptr inbounds i8, i8* %40, i64 512
  %386 = bitcast i8* %385 to <64 x float>*
  %387 = load <64 x float>, <64 x float>* %386, align 64, !tbaa !2704
  %388 = fadd <64 x float> %387, %345
  %389 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %388, <64 x float> %348, <64 x float> %351)
  %390 = mul i64 %indvars.iv43, 7696581394432
  %sext59 = ashr exact i64 %390, 32
  %391 = or i64 %sext59, 128
  %392 = getelementptr inbounds float, float* %10, i64 %391
  %393 = bitcast float* %392 to <64 x float>*
  store <64 x float> %389, <64 x float>* %393, align 64, !tbaa !2722
  %394 = getelementptr inbounds i8, i8* %40, i64 768
  %395 = bitcast i8* %394 to <64 x float>*
  %396 = load <64 x float>, <64 x float>* %395, align 64, !tbaa !2704
  %397 = fadd <64 x float> %396, %345
  %398 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %397, <64 x float> %348, <64 x float> %351)
  %399 = mul i64 %indvars.iv43, 7696581394432
  %sext46 = ashr exact i64 %399, 32
  %400 = or i64 %sext46, 192
  %401 = getelementptr inbounds float, float* %10, i64 %400
  %402 = bitcast float* %401 to <64 x float>*
  store <64 x float> %398, <64 x float>* %402, align 64, !tbaa !2722
  %403 = getelementptr inbounds i8, i8* %40, i64 4096
  %404 = bitcast i8* %403 to <64 x float>*
  %405 = load <64 x float>, <64 x float>* %404, align 64, !tbaa !2704
  %406 = fadd <64 x float> %405, %345
  %407 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %406, <64 x float> %348, <64 x float> %351)
  %408 = mul i64 %indvars.iv43, 7696581394432
  %sext60 = add i64 %408, 4398046511104
  %409 = ashr exact i64 %sext60, 32
  %410 = getelementptr inbounds float, float* %10, i64 %409
  %411 = bitcast float* %410 to <64 x float>*
  store <64 x float> %407, <64 x float>* %411, align 64, !tbaa !2722
  %412 = getelementptr inbounds i8, i8* %40, i64 4352
  %413 = bitcast i8* %412 to <64 x float>*
  %414 = load <64 x float>, <64 x float>* %413, align 64, !tbaa !2704
  %415 = fadd <64 x float> %414, %345
  %416 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %415, <64 x float> %348, <64 x float> %351)
  %417 = mul i64 %indvars.iv43, 7696581394432
  %sext47 = add i64 %417, 4672924418048
  %418 = ashr exact i64 %sext47, 32
  %419 = getelementptr inbounds float, float* %10, i64 %418
  %420 = bitcast float* %419 to <64 x float>*
  store <64 x float> %416, <64 x float>* %420, align 64, !tbaa !2722
  %421 = getelementptr inbounds i8, i8* %40, i64 1024
  %422 = bitcast i8* %421 to <64 x float>*
  %423 = load <64 x float>, <64 x float>* %422, align 64, !tbaa !2704
  %424 = fadd <64 x float> %423, %345
  %425 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %424, <64 x float> %348, <64 x float> %351)
  %426 = mul i64 %indvars.iv43, 7696581394432
  %sext61 = add i64 %426, 1099511627776
  %427 = ashr exact i64 %sext61, 32
  %428 = getelementptr inbounds float, float* %10, i64 %427
  %429 = bitcast float* %428 to <64 x float>*
  store <64 x float> %425, <64 x float>* %429, align 64, !tbaa !2722
  %430 = getelementptr inbounds i8, i8* %40, i64 1280
  %431 = bitcast i8* %430 to <64 x float>*
  %432 = load <64 x float>, <64 x float>* %431, align 64, !tbaa !2704
  %433 = fadd <64 x float> %432, %345
  %434 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %433, <64 x float> %348, <64 x float> %351)
  %435 = mul i64 %indvars.iv43, 7696581394432
  %sext48 = add i64 %435, 1374389534720
  %436 = ashr exact i64 %sext48, 32
  %437 = getelementptr inbounds float, float* %10, i64 %436
  %438 = bitcast float* %437 to <64 x float>*
  store <64 x float> %434, <64 x float>* %438, align 64, !tbaa !2722
  %439 = getelementptr inbounds i8, i8* %40, i64 4608
  %440 = bitcast i8* %439 to <64 x float>*
  %441 = load <64 x float>, <64 x float>* %440, align 64, !tbaa !2704
  %442 = fadd <64 x float> %441, %345
  %443 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %442, <64 x float> %348, <64 x float> %351)
  %444 = mul i64 %indvars.iv43, 7696581394432
  %sext62 = add i64 %444, 4947802324992
  %445 = ashr exact i64 %sext62, 32
  %446 = getelementptr inbounds float, float* %10, i64 %445
  %447 = bitcast float* %446 to <64 x float>*
  store <64 x float> %443, <64 x float>* %447, align 64, !tbaa !2722
  %448 = getelementptr inbounds i8, i8* %40, i64 4864
  %449 = bitcast i8* %448 to <64 x float>*
  %450 = load <64 x float>, <64 x float>* %449, align 64, !tbaa !2704
  %451 = fadd <64 x float> %450, %345
  %452 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %451, <64 x float> %348, <64 x float> %351)
  %453 = mul i64 %indvars.iv43, 7696581394432
  %sext49 = add i64 %453, 5222680231936
  %454 = ashr exact i64 %sext49, 32
  %455 = getelementptr inbounds float, float* %10, i64 %454
  %456 = bitcast float* %455 to <64 x float>*
  store <64 x float> %452, <64 x float>* %456, align 64, !tbaa !2722
  %457 = getelementptr inbounds i8, i8* %40, i64 1536
  %458 = bitcast i8* %457 to <64 x float>*
  %459 = load <64 x float>, <64 x float>* %458, align 64, !tbaa !2704
  %460 = fadd <64 x float> %459, %345
  %461 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %460, <64 x float> %348, <64 x float> %351)
  %462 = mul i64 %indvars.iv43, 7696581394432
  %sext63 = add i64 %462, 1649267441664
  %463 = ashr exact i64 %sext63, 32
  %464 = getelementptr inbounds float, float* %10, i64 %463
  %465 = bitcast float* %464 to <64 x float>*
  store <64 x float> %461, <64 x float>* %465, align 64, !tbaa !2722
  %466 = getelementptr inbounds i8, i8* %40, i64 1792
  %467 = bitcast i8* %466 to <64 x float>*
  %468 = load <64 x float>, <64 x float>* %467, align 64, !tbaa !2704
  %469 = fadd <64 x float> %468, %345
  %470 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %469, <64 x float> %348, <64 x float> %351)
  %471 = mul i64 %indvars.iv43, 7696581394432
  %sext50 = add i64 %471, 1924145348608
  %472 = ashr exact i64 %sext50, 32
  %473 = getelementptr inbounds float, float* %10, i64 %472
  %474 = bitcast float* %473 to <64 x float>*
  store <64 x float> %470, <64 x float>* %474, align 64, !tbaa !2722
  %475 = getelementptr inbounds i8, i8* %40, i64 5120
  %476 = bitcast i8* %475 to <64 x float>*
  %477 = load <64 x float>, <64 x float>* %476, align 64, !tbaa !2704
  %478 = fadd <64 x float> %477, %345
  %479 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %478, <64 x float> %348, <64 x float> %351)
  %480 = mul i64 %indvars.iv43, 7696581394432
  %sext64 = add i64 %480, 5497558138880
  %481 = ashr exact i64 %sext64, 32
  %482 = getelementptr inbounds float, float* %10, i64 %481
  %483 = bitcast float* %482 to <64 x float>*
  store <64 x float> %479, <64 x float>* %483, align 64, !tbaa !2722
  %484 = getelementptr inbounds i8, i8* %40, i64 5376
  %485 = bitcast i8* %484 to <64 x float>*
  %486 = load <64 x float>, <64 x float>* %485, align 64, !tbaa !2704
  %487 = fadd <64 x float> %486, %345
  %488 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %487, <64 x float> %348, <64 x float> %351)
  %489 = mul i64 %indvars.iv43, 7696581394432
  %sext51 = add i64 %489, 5772436045824
  %490 = ashr exact i64 %sext51, 32
  %491 = getelementptr inbounds float, float* %10, i64 %490
  %492 = bitcast float* %491 to <64 x float>*
  store <64 x float> %488, <64 x float>* %492, align 64, !tbaa !2722
  %493 = getelementptr inbounds i8, i8* %40, i64 2048
  %494 = bitcast i8* %493 to <64 x float>*
  %495 = load <64 x float>, <64 x float>* %494, align 64, !tbaa !2704
  %496 = fadd <64 x float> %495, %345
  %497 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %496, <64 x float> %348, <64 x float> %351)
  %498 = mul i64 %indvars.iv43, 7696581394432
  %sext65 = add i64 %498, 2199023255552
  %499 = ashr exact i64 %sext65, 32
  %500 = getelementptr inbounds float, float* %10, i64 %499
  %501 = bitcast float* %500 to <64 x float>*
  store <64 x float> %497, <64 x float>* %501, align 64, !tbaa !2722
  %502 = getelementptr inbounds i8, i8* %40, i64 2304
  %503 = bitcast i8* %502 to <64 x float>*
  %504 = load <64 x float>, <64 x float>* %503, align 64, !tbaa !2704
  %505 = fadd <64 x float> %504, %345
  %506 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %505, <64 x float> %348, <64 x float> %351)
  %507 = mul i64 %indvars.iv43, 7696581394432
  %sext52 = add i64 %507, 2473901162496
  %508 = ashr exact i64 %sext52, 32
  %509 = getelementptr inbounds float, float* %10, i64 %508
  %510 = bitcast float* %509 to <64 x float>*
  store <64 x float> %506, <64 x float>* %510, align 64, !tbaa !2722
  %511 = getelementptr inbounds i8, i8* %40, i64 5632
  %512 = bitcast i8* %511 to <64 x float>*
  %513 = load <64 x float>, <64 x float>* %512, align 64, !tbaa !2704
  %514 = fadd <64 x float> %513, %345
  %515 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %514, <64 x float> %348, <64 x float> %351)
  %516 = mul i64 %indvars.iv43, 7696581394432
  %sext66 = add i64 %516, 6047313952768
  %517 = ashr exact i64 %sext66, 32
  %518 = getelementptr inbounds float, float* %10, i64 %517
  %519 = bitcast float* %518 to <64 x float>*
  store <64 x float> %515, <64 x float>* %519, align 64, !tbaa !2722
  %520 = getelementptr inbounds i8, i8* %40, i64 5888
  %521 = bitcast i8* %520 to <64 x float>*
  %522 = load <64 x float>, <64 x float>* %521, align 64, !tbaa !2704
  %523 = fadd <64 x float> %522, %345
  %524 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %523, <64 x float> %348, <64 x float> %351)
  %525 = mul i64 %indvars.iv43, 7696581394432
  %sext53 = add i64 %525, 6322191859712
  %526 = ashr exact i64 %sext53, 32
  %527 = getelementptr inbounds float, float* %10, i64 %526
  %528 = bitcast float* %527 to <64 x float>*
  store <64 x float> %524, <64 x float>* %528, align 64, !tbaa !2722
  %529 = getelementptr inbounds i8, i8* %40, i64 2560
  %530 = bitcast i8* %529 to <64 x float>*
  %531 = load <64 x float>, <64 x float>* %530, align 64, !tbaa !2704
  %532 = fadd <64 x float> %531, %345
  %533 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %532, <64 x float> %348, <64 x float> %351)
  %534 = mul i64 %indvars.iv43, 7696581394432
  %sext67 = add i64 %534, 2748779069440
  %535 = ashr exact i64 %sext67, 32
  %536 = getelementptr inbounds float, float* %10, i64 %535
  %537 = bitcast float* %536 to <64 x float>*
  store <64 x float> %533, <64 x float>* %537, align 64, !tbaa !2722
  %538 = getelementptr inbounds i8, i8* %40, i64 2816
  %539 = bitcast i8* %538 to <64 x float>*
  %540 = load <64 x float>, <64 x float>* %539, align 64, !tbaa !2704
  %541 = fadd <64 x float> %540, %345
  %542 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %541, <64 x float> %348, <64 x float> %351)
  %543 = mul i64 %indvars.iv43, 7696581394432
  %sext54 = add i64 %543, 3023656976384
  %544 = ashr exact i64 %sext54, 32
  %545 = getelementptr inbounds float, float* %10, i64 %544
  %546 = bitcast float* %545 to <64 x float>*
  store <64 x float> %542, <64 x float>* %546, align 64, !tbaa !2722
  %547 = getelementptr inbounds i8, i8* %40, i64 6144
  %548 = bitcast i8* %547 to <64 x float>*
  %549 = load <64 x float>, <64 x float>* %548, align 64, !tbaa !2704
  %550 = fadd <64 x float> %549, %345
  %551 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %550, <64 x float> %348, <64 x float> %351)
  %552 = mul i64 %indvars.iv43, 7696581394432
  %sext68 = add i64 %552, 6597069766656
  %553 = ashr exact i64 %sext68, 32
  %554 = getelementptr inbounds float, float* %10, i64 %553
  %555 = bitcast float* %554 to <64 x float>*
  store <64 x float> %551, <64 x float>* %555, align 64, !tbaa !2722
  %556 = getelementptr inbounds i8, i8* %40, i64 6400
  %557 = bitcast i8* %556 to <64 x float>*
  %558 = load <64 x float>, <64 x float>* %557, align 64, !tbaa !2704
  %559 = fadd <64 x float> %558, %345
  %560 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %559, <64 x float> %348, <64 x float> %351)
  %561 = mul i64 %indvars.iv43, 7696581394432
  %sext55 = add i64 %561, 6871947673600
  %562 = ashr exact i64 %sext55, 32
  %563 = getelementptr inbounds float, float* %10, i64 %562
  %564 = bitcast float* %563 to <64 x float>*
  store <64 x float> %560, <64 x float>* %564, align 64, !tbaa !2722
  %565 = getelementptr inbounds i8, i8* %40, i64 3072
  %566 = bitcast i8* %565 to <64 x float>*
  %567 = load <64 x float>, <64 x float>* %566, align 64, !tbaa !2704
  %568 = fadd <64 x float> %567, %345
  %569 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %568, <64 x float> %348, <64 x float> %351)
  %570 = mul i64 %indvars.iv43, 7696581394432
  %sext69 = add i64 %570, 3298534883328
  %571 = ashr exact i64 %sext69, 32
  %572 = getelementptr inbounds float, float* %10, i64 %571
  %573 = bitcast float* %572 to <64 x float>*
  store <64 x float> %569, <64 x float>* %573, align 64, !tbaa !2722
  %574 = getelementptr inbounds i8, i8* %40, i64 3328
  %575 = bitcast i8* %574 to <64 x float>*
  %576 = load <64 x float>, <64 x float>* %575, align 64, !tbaa !2704
  %577 = fadd <64 x float> %576, %345
  %578 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %577, <64 x float> %348, <64 x float> %351)
  %579 = mul i64 %indvars.iv43, 7696581394432
  %sext56 = add i64 %579, 3573412790272
  %580 = ashr exact i64 %sext56, 32
  %581 = getelementptr inbounds float, float* %10, i64 %580
  %582 = bitcast float* %581 to <64 x float>*
  store <64 x float> %578, <64 x float>* %582, align 64, !tbaa !2722
  %583 = getelementptr inbounds i8, i8* %40, i64 6656
  %584 = bitcast i8* %583 to <64 x float>*
  %585 = load <64 x float>, <64 x float>* %584, align 64, !tbaa !2704
  %586 = fadd <64 x float> %585, %345
  %587 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %586, <64 x float> %348, <64 x float> %351)
  %588 = mul i64 %indvars.iv43, 7696581394432
  %sext70 = add i64 %588, 7146825580544
  %589 = ashr exact i64 %sext70, 32
  %590 = getelementptr inbounds float, float* %10, i64 %589
  %591 = bitcast float* %590 to <64 x float>*
  store <64 x float> %587, <64 x float>* %591, align 64, !tbaa !2722
  %592 = getelementptr inbounds i8, i8* %40, i64 6912
  %593 = bitcast i8* %592 to <64 x float>*
  %594 = load <64 x float>, <64 x float>* %593, align 64, !tbaa !2704
  %595 = fadd <64 x float> %594, %345
  %596 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %595, <64 x float> %348, <64 x float> %351)
  %597 = mul i64 %indvars.iv43, 7696581394432
  %sext57 = add i64 %597, 7421703487488
  %598 = ashr exact i64 %sext57, 32
  %599 = getelementptr inbounds float, float* %10, i64 %598
  %600 = bitcast float* %599 to <64 x float>*
  store <64 x float> %596, <64 x float>* %600, align 64, !tbaa !2722
  %601 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %602 = tail call i32 %601(i32 1, i32 %22, i8* nonnull %40)
  %indvars.iv.next44 = add nsw i64 %indvars.iv43, 1
  %603 = icmp slt i64 %indvars.iv.next44, %38
  br i1 %603, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_add_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 3
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.267, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !2725
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !2739
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %23 = load i64*, i64** %22, align 8
  %24 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %42 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %42(i8* getelementptr inbounds ([162 x i8], [162 x i8]* @.str.268, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %43 = getelementptr inbounds i8, i8* %1, i64 4
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !2742
  switch i32 %45, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %46(i8* getelementptr inbounds ([162 x i8], [162 x i8]* @.str.269, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %47(i8* getelementptr inbounds ([162 x i8], [162 x i8]* @.str.270, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  %48 = icmp eq i32 %27, 1
  br i1 %48, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %49(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %50 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 5
  br i1 %52, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %53(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %54 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 2
  %57 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 32
  %60 = and i1 %56, %59
  %61 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %62 = load i16, i16* %61, align 2
  %63 = icmp eq i16 %62, 1
  %64 = and i1 %60, %63
  br i1 %64, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %65(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %66 = load i64, i64* %23, align 8, !tbaa !2744
  %67 = trunc i64 %66 to i32
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %69(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %70 = getelementptr inbounds i64, i64* %23, i64 1
  %71 = load i64, i64* %70, align 8, !tbaa !2758
  %72 = trunc i64 %71 to i32
  %73 = icmp eq i32 %72, 8
  br i1 %73, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %75 = getelementptr inbounds i64, i64* %23, i64 2
  %76 = load i64, i64* %75, align 8, !tbaa !2760
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %77, 28
  br i1 %78, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %80 = getelementptr inbounds i64, i64* %23, i64 3
  %81 = load i64, i64* %80, align 8, !tbaa !2763
  %82 = trunc i64 %81 to i32
  %83 = icmp eq i32 %82, 28
  br i1 %83, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %85 = getelementptr inbounds i64, i64* %23, i64 4
  %86 = load i64, i64* %85, align 8, !tbaa !2765
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 64
  br i1 %88, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %89 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %89(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %90 = icmp eq i64* %25, null
  br i1 %90, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end22
  %91 = getelementptr inbounds i64, i64* %25, i64 1
  %92 = bitcast i64* %91 to <4 x i64>*
  %93 = load <4 x i64>, <4 x i64>* %92, align 8, !tbaa !2769
  %94 = trunc <4 x i64> %93 to <4 x i32>
  %95 = icmp eq <4 x i32> %94, <i32 50176, i32 1792, i32 64, i32 1>
  %96 = load i64, i64* %25, align 8, !tbaa !2780
  %97 = trunc i64 %96 to i32
  %98 = icmp eq i32 %97, 401408
  %rdx.shuf81 = shufflevector <4 x i1> %95, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx82 = and <4 x i1> %95, %rdx.shuf81
  %rdx.shuf83 = shufflevector <4 x i1> %bin.rdx82, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx84 = and <4 x i1> %bin.rdx82, %rdx.shuf83
  %99 = extractelement <4 x i1> %bin.rdx84, i32 0
  %100 = and i1 %99, %98
  br i1 %100, label %if_end, label %assert_fail23, !prof !5

if_end:                                           ; preds = %assert_end22, %if_then
  %101 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %102 = load i64, i64* %101, align 8
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %assert_end26, label %assert_fail25, !prof !5

assert_fail23:                                    ; preds = %if_then
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.271, i64 0, i64 0))
  ret i32 -1

assert_fail25:                                    ; preds = %if_end
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %if_end
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 2
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = and i1 %112, %115
  %117 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %118 = load i16, i16* %117, align 2
  %119 = icmp eq i16 %118, 1
  %120 = and i1 %116, %119
  br i1 %120, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %122 = load i64, i64* %33, align 8, !tbaa !2784
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %126 = getelementptr inbounds i64, i64* %33, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !2798
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 16
  br i1 %129, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.152, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %131 = getelementptr inbounds i64, i64* %33, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !2800
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 28
  br i1 %134, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.272, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %136 = getelementptr inbounds i64, i64* %33, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !2803
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 28
  br i1 %139, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.273, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %141 = getelementptr inbounds i64, i64* %33, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !2805
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 32
  br i1 %144, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.183, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %146 = icmp eq i64* %35, null
  br i1 %146, label %if_end42, label %if_then41, !prof !50

if_then41:                                        ; preds = %assert_end40
  %147 = getelementptr inbounds i64, i64* %35, i64 1
  %148 = bitcast i64* %147 to <4 x i64>*
  %149 = load <4 x i64>, <4 x i64>* %148, align 8, !tbaa !2809
  %150 = trunc <4 x i64> %149 to <4 x i32>
  %151 = icmp eq <4 x i32> %150, <i32 25088, i32 896, i32 32, i32 1>
  %152 = load i64, i64* %35, align 8, !tbaa !2820
  %153 = trunc i64 %152 to i32
  %154 = icmp eq i32 %153, 401408
  %rdx.shuf77 = shufflevector <4 x i1> %151, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx78 = and <4 x i1> %151, %rdx.shuf77
  %rdx.shuf79 = shufflevector <4 x i1> %bin.rdx78, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx80 = and <4 x i1> %bin.rdx78, %rdx.shuf79
  %155 = extractelement <4 x i1> %bin.rdx80, i32 0
  %156 = and i1 %155, %154
  br i1 %156, label %if_end42, label %assert_fail43, !prof !5

if_end42:                                         ; preds = %assert_end40, %if_then41
  %157 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %158 = load i64, i64* %157, align 8
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %assert_end46, label %assert_fail45, !prof !5

assert_fail43:                                    ; preds = %if_then41
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.274, i64 0, i64 0))
  ret i32 -1

assert_fail45:                                    ; preds = %if_end42
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %if_end42
  %162 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %165(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %166 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %29, %167
  br i1 %168, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %170 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, 5
  br i1 %172, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %174 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %175 = load i8, i8* %174, align 1
  %176 = icmp eq i8 %175, 2
  %177 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %178 = load i8, i8* %177, align 1
  %179 = icmp eq i8 %178, 32
  %180 = and i1 %176, %179
  %181 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %182 = load i16, i16* %181, align 2
  %183 = icmp eq i16 %182, 1
  %184 = and i1 %180, %183
  br i1 %184, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %185(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %186 = load i64, i64* %39, align 8, !tbaa !2824
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 1
  br i1 %188, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %190 = getelementptr inbounds i64, i64* %39, i64 1
  %191 = load i64, i64* %190, align 8, !tbaa !2838
  %192 = trunc i64 %191 to i32
  %193 = icmp eq i32 %192, 8
  br i1 %193, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %194 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %194(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.154, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %195 = getelementptr inbounds i64, i64* %39, i64 2
  %196 = load i64, i64* %195, align 8, !tbaa !2840
  %197 = trunc i64 %196 to i32
  %198 = icmp eq i32 %197, 28
  br i1 %198, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %199(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.275, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %200 = getelementptr inbounds i64, i64* %39, i64 3
  %201 = load i64, i64* %200, align 8, !tbaa !2843
  %202 = trunc i64 %201 to i32
  %203 = icmp eq i32 %202, 28
  br i1 %203, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %204(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.276, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %205 = getelementptr inbounds i64, i64* %39, i64 4
  %206 = load i64, i64* %205, align 8, !tbaa !2845
  %207 = trunc i64 %206 to i32
  %208 = icmp eq i32 %207, 64
  br i1 %208, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.200, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %210 = icmp eq i64* %41, null
  br i1 %210, label %if_end66, label %if_then65, !prof !50

if_then65:                                        ; preds = %assert_end64
  %211 = getelementptr inbounds i64, i64* %41, i64 1
  %212 = bitcast i64* %211 to <4 x i64>*
  %213 = load <4 x i64>, <4 x i64>* %212, align 8, !tbaa !2849
  %214 = trunc <4 x i64> %213 to <4 x i32>
  %215 = icmp eq <4 x i32> %214, <i32 50176, i32 1792, i32 64, i32 1>
  %216 = load i64, i64* %41, align 8, !tbaa !2860
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 401408
  %rdx.shuf = shufflevector <4 x i1> %215, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %215, %rdx.shuf
  %rdx.shuf75 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx76 = and <4 x i1> %bin.rdx, %rdx.shuf75
  %219 = extractelement <4 x i1> %bin.rdx76, i32 0
  %220 = and i1 %219, %218
  br i1 %220, label %if_end66, label %assert_fail67, !prof !5

if_end66:                                         ; preds = %assert_end64, %if_then65
  %221 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %222 = load i64, i64* %221, align 8
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %assert_end70, label %assert_fail69, !prof !5

assert_fail67:                                    ; preds = %if_then65
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.277, i64 0, i64 0))
  ret i32 -1

assert_fail69:                                    ; preds = %if_end66
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %if_end66
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 1
  br i1 %228, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %229 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %229(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %29, %231
  br i1 %232, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %233 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %233(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %234 = tail call fastcc i32 @fused_layout_transform_add_nn_relu_compute_(i8* %37, i8* %21, i8* %31)
  ret i32 %234
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_add_nn_relu_compute_(i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %3 = alloca %19, align 8
  %4 = getelementptr inbounds %19, %19* %3, i64 0, i32 0
  store i8* %0, i8** %4, align 8
  %5 = getelementptr inbounds %19, %19* %3, i64 0, i32 1
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %19, %19* %3, i64 0, i32 2
  store i8* %2, i8** %6, align 8
  %7 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %8 = bitcast %19* %3 to i8*
  %9 = call i32 %7(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.278, i8* nonnull %8, i32 0)
  ret i32 %9
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.278(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 223
  %14 = sdiv i32 %13, %12
  %15 = mul nsw i32 %14, %0
  %16 = icmp slt i32 %15, 224
  %17 = select i1 %16, i32 %15, i32 224
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %14, %18
  %20 = icmp slt i32 %19, 224
  %21 = select i1 %20, i32 %19, i32 224
  %22 = icmp slt i32 %17, %21
  br i1 %22, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %23 = add i32 %17, 1
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, -1
  %26 = sext i32 %21 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %25, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %27 = mul nsw i64 %indvars.iv10, 1792
  %28 = trunc i64 %indvars.iv10 to i32
  %29 = sdiv i32 %28, 28
  %30 = mul nsw i32 %29, 50176
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = srem i32 %28, 28
  %33 = mul nsw i32 %32, 896
  %34 = insertelement <16 x i32> undef, i32 %33, i32 0
  %35 = add <16 x i32> %34, %31
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %36 = shl i64 %indvars.iv7, 6
  %37 = add nsw i64 %36, %27
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %38 = shl i32 %indvars.iv7.tr, 5
  %39 = insertelement <16 x i32> undef, i32 %38, i32 0
  %40 = add <16 x i32> %35, %39
  %41 = shufflevector <16 x i32> %40, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %42 = icmp slt i64 %indvars.iv.next11, %26
  br i1 %42, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %43 = shl nsw i64 %indvars.iv, 4
  %44 = add nsw i64 %37, %43
  %45 = getelementptr inbounds float, float* %7, i64 %44
  %46 = bitcast float* %45 to <16 x float>*
  %47 = load <16 x float>, <16 x float>* %46, align 64, !tbaa !2864
  %48 = trunc i64 %43 to i32
  %49 = insertelement <16 x i32> undef, i32 %48, i32 0
  %50 = trunc i64 %43 to i32
  %51 = or i32 %50, 1
  %52 = insertelement <16 x i32> %49, i32 %51, i32 1
  %53 = trunc i64 %43 to i32
  %54 = or i32 %53, 2
  %55 = insertelement <16 x i32> %52, i32 %54, i32 2
  %56 = trunc i64 %43 to i32
  %57 = or i32 %56, 3
  %58 = insertelement <16 x i32> %55, i32 %57, i32 3
  %59 = trunc i64 %43 to i32
  %60 = or i32 %59, 4
  %61 = insertelement <16 x i32> %58, i32 %60, i32 4
  %62 = trunc i64 %43 to i32
  %63 = or i32 %62, 5
  %64 = insertelement <16 x i32> %61, i32 %63, i32 5
  %65 = trunc i64 %43 to i32
  %66 = or i32 %65, 6
  %67 = insertelement <16 x i32> %64, i32 %66, i32 6
  %68 = trunc i64 %43 to i32
  %69 = or i32 %68, 7
  %70 = insertelement <16 x i32> %67, i32 %69, i32 7
  %71 = trunc i64 %43 to i32
  %72 = or i32 %71, 8
  %73 = insertelement <16 x i32> %70, i32 %72, i32 8
  %74 = trunc i64 %43 to i32
  %75 = or i32 %74, 9
  %76 = insertelement <16 x i32> %73, i32 %75, i32 9
  %77 = trunc i64 %43 to i32
  %78 = or i32 %77, 10
  %79 = insertelement <16 x i32> %76, i32 %78, i32 10
  %80 = trunc i64 %43 to i32
  %81 = or i32 %80, 11
  %82 = insertelement <16 x i32> %79, i32 %81, i32 11
  %83 = trunc i64 %43 to i32
  %84 = or i32 %83, 12
  %85 = insertelement <16 x i32> %82, i32 %84, i32 12
  %86 = trunc i64 %43 to i32
  %87 = or i32 %86, 13
  %88 = insertelement <16 x i32> %85, i32 %87, i32 13
  %89 = trunc i64 %43 to i32
  %90 = or i32 %89, 14
  %91 = insertelement <16 x i32> %88, i32 %90, i32 14
  %92 = trunc i64 %43 to i32
  %93 = or i32 %92, 15
  %94 = insertelement <16 x i32> %91, i32 %93, i32 15
  %95 = sdiv <16 x i32> %94, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %96 = mul <16 x i32> %95, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %97 = sub <16 x i32> %94, %96
  %98 = icmp sgt <16 x i32> %97, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %98, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %99 = sext <16 x i1> %not. to <16 x i32>
  %100 = add nsw <16 x i32> %95, %99
  %101 = mul nsw <16 x i32> %100, <i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088>
  %102 = add nsw <16 x i32> %97, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %103 = select <16 x i1> %98, <16 x i32> %97, <16 x i32> %102
  %104 = add <16 x i32> %41, %103
  %105 = add <16 x i32> %104, %101
  %106 = extractelement <16 x i32> %105, i64 0
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds float, float* %10, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !2867
  %110 = insertelement <16 x float> undef, float %109, i32 0
  %111 = extractelement <16 x i32> %105, i64 1
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds float, float* %10, i64 %112
  %114 = load float, float* %113, align 4, !tbaa !2867
  %115 = insertelement <16 x float> %110, float %114, i32 1
  %116 = extractelement <16 x i32> %105, i64 2
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float* %10, i64 %117
  %119 = load float, float* %118, align 4, !tbaa !2867
  %120 = insertelement <16 x float> %115, float %119, i32 2
  %121 = extractelement <16 x i32> %105, i64 3
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds float, float* %10, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !2867
  %125 = insertelement <16 x float> %120, float %124, i32 3
  %126 = extractelement <16 x i32> %105, i64 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds float, float* %10, i64 %127
  %129 = load float, float* %128, align 4, !tbaa !2867
  %130 = insertelement <16 x float> %125, float %129, i32 4
  %131 = extractelement <16 x i32> %105, i64 5
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds float, float* %10, i64 %132
  %134 = load float, float* %133, align 4, !tbaa !2867
  %135 = insertelement <16 x float> %130, float %134, i32 5
  %136 = extractelement <16 x i32> %105, i64 6
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds float, float* %10, i64 %137
  %139 = load float, float* %138, align 4, !tbaa !2867
  %140 = insertelement <16 x float> %135, float %139, i32 6
  %141 = extractelement <16 x i32> %105, i64 7
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds float, float* %10, i64 %142
  %144 = load float, float* %143, align 4, !tbaa !2867
  %145 = insertelement <16 x float> %140, float %144, i32 7
  %146 = extractelement <16 x i32> %105, i64 8
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %10, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !2867
  %150 = insertelement <16 x float> %145, float %149, i32 8
  %151 = extractelement <16 x i32> %105, i64 9
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %10, i64 %152
  %154 = load float, float* %153, align 4, !tbaa !2867
  %155 = insertelement <16 x float> %150, float %154, i32 9
  %156 = extractelement <16 x i32> %105, i64 10
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds float, float* %10, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !2867
  %160 = insertelement <16 x float> %155, float %159, i32 10
  %161 = extractelement <16 x i32> %105, i64 11
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds float, float* %10, i64 %162
  %164 = load float, float* %163, align 4, !tbaa !2867
  %165 = insertelement <16 x float> %160, float %164, i32 11
  %166 = extractelement <16 x i32> %105, i64 12
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds float, float* %10, i64 %167
  %169 = load float, float* %168, align 4, !tbaa !2867
  %170 = insertelement <16 x float> %165, float %169, i32 12
  %171 = extractelement <16 x i32> %105, i64 13
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds float, float* %10, i64 %172
  %174 = load float, float* %173, align 4, !tbaa !2867
  %175 = insertelement <16 x float> %170, float %174, i32 13
  %176 = extractelement <16 x i32> %105, i64 14
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds float, float* %10, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !2867
  %180 = insertelement <16 x float> %175, float %179, i32 14
  %181 = extractelement <16 x i32> %105, i64 15
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds float, float* %10, i64 %182
  %184 = load float, float* %183, align 4, !tbaa !2867
  %185 = insertelement <16 x float> %180, float %184, i32 15
  %186 = fadd <16 x float> %47, %185
  %187 = fcmp ogt <16 x float> %186, zeroinitializer
  %188 = select <16 x i1> %187, <16 x float> %186, <16 x float> zeroinitializer
  %189 = getelementptr inbounds float, float* %4, i64 %44
  %190 = bitcast float* %189 to <16 x float>*
  store <16 x float> %188, <16 x float>* %190, align 64, !tbaa !2870
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 28
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_max_pool2d(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.279, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !2873
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.280, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !2887
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.281, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !2889
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !2903
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 8
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !2905
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 114
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.282, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !2908
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 114
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.283, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !2910
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 8
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.30, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !2914
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 103968, i32 912, i32 8, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !2925
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 831744
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.284, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !2929
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !2943
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 8
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !2945
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 56
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !2948
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 56
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !2950
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 8
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.35, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !2954
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 25088, i32 448, i32 8, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !2965
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 200704
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.285, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_nn_max_pool2d_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_max_pool2d_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %20, align 8
  %3 = getelementptr inbounds %20, %20* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %20, %20* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %20* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.286, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.286(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 447
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 448
  %14 = select i1 %13, i32 %12, i32 448
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 448
  %18 = select i1 %17, i32 %16, i32 448
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 448
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = sdiv i32 %25, 56
  %27 = mul nsw i32 %26, 103968
  %28 = srem i32 %25, 56
  %29 = mul nsw i32 %28, 1824
  %30 = add nsw i32 %27, %29
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %31 = shl i64 %indvars.iv, 3
  %32 = add nsw i64 %31, %24
  %33 = getelementptr inbounds float, float* %4, i64 %32
  %34 = bitcast float* %33 to <8 x float>*
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %35 = shl i32 %indvars.iv.tr, 4
  %36 = add i32 %30, %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds float, float* %7, i64 %37
  %39 = bitcast float* %38 to <8 x float>*
  %40 = load <8 x float>, <8 x float>* %39, align 32, !tbaa !2969
  %41 = fcmp olt <8 x float> %40, <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>
  %42 = select <8 x i1> %41, <8 x float> <float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000, float 0xC7EFFFFFE0000000>, <8 x float> %40
  %43 = or i32 %36, 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds float, float* %7, i64 %44
  %46 = bitcast float* %45 to <8 x float>*
  %47 = load <8 x float>, <8 x float>* %46, align 32, !tbaa !2969
  %48 = fcmp ogt <8 x float> %42, %47
  %49 = select <8 x i1> %48, <8 x float> %42, <8 x float> %47
  %50 = add i32 %36, 16
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = bitcast float* %52 to <8 x float>*
  %54 = load <8 x float>, <8 x float>* %53, align 32, !tbaa !2969
  %55 = fcmp ogt <8 x float> %49, %54
  %56 = select <8 x i1> %55, <8 x float> %49, <8 x float> %54
  %57 = add i32 %36, 912
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds float, float* %7, i64 %58
  %60 = bitcast float* %59 to <8 x float>*
  %61 = load <8 x float>, <8 x float>* %60, align 32, !tbaa !2969
  %62 = fcmp ogt <8 x float> %56, %61
  %63 = select <8 x i1> %62, <8 x float> %56, <8 x float> %61
  %64 = add i32 %36, 920
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds float, float* %7, i64 %65
  %67 = bitcast float* %66 to <8 x float>*
  %68 = load <8 x float>, <8 x float>* %67, align 32, !tbaa !2969
  %69 = fcmp ogt <8 x float> %63, %68
  %70 = select <8 x i1> %69, <8 x float> %63, <8 x float> %68
  %71 = add i32 %36, 928
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float* %7, i64 %72
  %74 = bitcast float* %73 to <8 x float>*
  %75 = load <8 x float>, <8 x float>* %74, align 32, !tbaa !2969
  %76 = fcmp ogt <8 x float> %70, %75
  %77 = select <8 x i1> %76, <8 x float> %70, <8 x float> %75
  %78 = add i32 %36, 1824
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %7, i64 %79
  %81 = bitcast float* %80 to <8 x float>*
  %82 = load <8 x float>, <8 x float>* %81, align 32, !tbaa !2969
  %83 = fcmp ogt <8 x float> %77, %82
  %84 = select <8 x i1> %83, <8 x float> %77, <8 x float> %82
  %85 = add i32 %36, 1832
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds float, float* %7, i64 %86
  %88 = bitcast float* %87 to <8 x float>*
  %89 = load <8 x float>, <8 x float>* %88, align 32, !tbaa !2969
  %90 = fcmp ogt <8 x float> %84, %89
  %91 = select <8 x i1> %90, <8 x float> %84, <8 x float> %89
  %92 = add i32 %36, 1840
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %7, i64 %93
  %95 = bitcast float* %94 to <8 x float>*
  %96 = load <8 x float>, <8 x float>* %95, align 32, !tbaa !2969
  %97 = fcmp ogt <8 x float> %91, %96
  %98 = select <8 x i1> %97, <8 x float> %91, <8 x float> %96
  store <8 x float> %98, <8 x float>* %34, align 32, !tbaa !2972
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %99 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %99, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_36(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.287, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !2975
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.288, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !2989
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.289, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !2991
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !3005
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 4
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !3007
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 56
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !3010
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 56
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !3012
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 16
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.168, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !3016
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 50176, i32 896, i32 16, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !3027
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 200704
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.290, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !3031
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !3045
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !3047
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 56
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !3050
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 56
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !3052
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 64
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.291, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !3056
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 200704, i32 3584, i32 64, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !3067
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 200704
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.292, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_36_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_36_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %21, align 8
  %3 = getelementptr inbounds %21, %21* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %21, %21* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %21* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.293, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.293(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 55
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 56
  %14 = select i1 %13, i32 %12, i32 56
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 56
  %18 = select i1 %17, i32 %16, i32 56
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv7, 3584
  %25 = trunc i64 %indvars.iv7 to i32
  %26 = mul i32 %25, 896
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %27 = shl i64 %indvars.iv, 6
  %28 = add nsw i64 %27, %24
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %29 = shl i32 %indvars.iv.tr, 4
  %30 = add i32 %29, %26
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %7, i64 %31
  %33 = bitcast float* %32 to <16 x float>*
  %34 = load <16 x float>, <16 x float>* %33, align 64, !tbaa !3071
  %35 = getelementptr inbounds float, float* %4, i64 %28
  %36 = bitcast float* %35 to <16 x float>*
  store <16 x float> %34, <16 x float>* %36, align 64, !tbaa !3074
  %37 = or i64 %28, 16
  %38 = add i32 %30, 50176
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds float, float* %7, i64 %39
  %41 = bitcast float* %40 to <16 x float>*
  %42 = load <16 x float>, <16 x float>* %41, align 64, !tbaa !3071
  %43 = getelementptr inbounds float, float* %4, i64 %37
  %44 = bitcast float* %43 to <16 x float>*
  store <16 x float> %42, <16 x float>* %44, align 64, !tbaa !3074
  %45 = or i64 %28, 32
  %46 = add i32 %30, 100352
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %7, i64 %47
  %49 = bitcast float* %48 to <16 x float>*
  %50 = load <16 x float>, <16 x float>* %49, align 64, !tbaa !3071
  %51 = getelementptr inbounds float, float* %4, i64 %45
  %52 = bitcast float* %51 to <16 x float>*
  store <16 x float> %50, <16 x float>* %52, align 64, !tbaa !3074
  %53 = or i64 %28, 48
  %54 = add i32 %30, 150528
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %7, i64 %55
  %57 = bitcast float* %56 to <16 x float>*
  %58 = load <16 x float>, <16 x float>* %57, align 64, !tbaa !3071
  %59 = getelementptr inbounds float, float* %4, i64 %53
  %60 = bitcast float* %59 to <16 x float>*
  store <16 x float> %58, <16 x float>* %60, align 64, !tbaa !3074
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !50

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %61 = icmp slt i64 %indvars.iv.next8, %23
  br i1 %61, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_41(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.294, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3077
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.295, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !3091
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.296, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !3093
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !3107
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 4
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !3109
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 28
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !3112
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 28
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !3114
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !3118
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 25088, i32 896, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !3129
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 100352
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.297, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !3133
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !3147
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 32
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.100, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !3149
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 28
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.272, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !3152
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 28
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.273, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !3154
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 4
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !3158
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 3136, i32 112, i32 4, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !3169
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 100352
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.298, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_41_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_41_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %22, align 8
  %3 = getelementptr inbounds %22, %22* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %22, %22* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %22* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.299, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.299(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 895
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 896
  %14 = select i1 %13, i32 %12, i32 896
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 896
  %18 = select i1 %17, i32 %16, i32 896
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv4, 112
  %25 = trunc i64 %indvars.iv4 to i32
  %26 = sdiv i32 %25, 28
  %27 = shl nsw i32 %26, 2
  %28 = insertelement <4 x i32> undef, i32 %27, i32 0
  %29 = or i32 %27, 1
  %30 = insertelement <4 x i32> %28, i32 %29, i32 1
  %31 = or i32 %27, 2
  %32 = insertelement <4 x i32> %30, i32 %31, i32 2
  %33 = or i32 %27, 3
  %34 = insertelement <4 x i32> %32, i32 %33, i32 3
  %35 = sdiv <4 x i32> %34, <i32 32, i32 32, i32 32, i32 32>
  %36 = mul <4 x i32> %35, <i32 32, i32 32, i32 32, i32 32>
  %37 = sub <4 x i32> %34, %36
  %38 = icmp sgt <4 x i32> %37, <i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <4 x i1> %38, <i1 true, i1 true, i1 true, i1 true>
  %39 = sext <4 x i1> %not. to <4 x i32>
  %40 = add nsw <4 x i32> %35, %39
  %41 = mul nsw <4 x i32> %40, <i32 25088, i32 25088, i32 25088, i32 25088>
  %42 = srem i32 %25, 28
  %43 = mul nsw i32 %42, 896
  %44 = insertelement <4 x i32> undef, i32 %43, i32 0
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> zeroinitializer
  %46 = add nsw <4 x i32> %37, <i32 32, i32 32, i32 32, i32 32>
  %47 = select <4 x i1> %38, <4 x i32> %37, <4 x i32> %46
  %48 = add <4 x i32> %47, %45
  %49 = add <4 x i32> %48, %41
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %50 = shl i64 %indvars.iv, 2
  %51 = add nsw i64 %50, %24
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %52 = shl i32 %indvars.iv.tr, 5
  %53 = insertelement <4 x i32> undef, i32 %52, i32 0
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> zeroinitializer
  %55 = add <4 x i32> %49, %54
  %56 = extractelement <4 x i32> %55, i64 0
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds float, float* %7, i64 %57
  %59 = load float, float* %58, align 4, !tbaa !3173
  %60 = insertelement <4 x float> undef, float %59, i32 0
  %61 = extractelement <4 x i32> %55, i64 1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds float, float* %7, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !3173
  %65 = insertelement <4 x float> %60, float %64, i32 1
  %66 = extractelement <4 x i32> %55, i64 2
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %7, i64 %67
  %69 = load float, float* %68, align 4, !tbaa !3173
  %70 = insertelement <4 x float> %65, float %69, i32 2
  %71 = extractelement <4 x i32> %55, i64 3
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float* %7, i64 %72
  %74 = load float, float* %73, align 4, !tbaa !3173
  %75 = insertelement <4 x float> %70, float %74, i32 3
  %76 = getelementptr inbounds float, float* %4, i64 %51
  %77 = bitcast float* %76 to <4 x float>*
  store <4 x float> %75, <4 x float>* %77, align 16, !tbaa !3176
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 28
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %78 = icmp slt i64 %indvars.iv.next5, %23
  br i1 %78, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_11(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.300, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3179
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !3193
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !3196
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !3198
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.301, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !3202
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.302, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.303, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.304, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.305, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !3204
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !3218
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 512
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.306, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !3220
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 7
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.178, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !3223
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 7
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !3225
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 4
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.98, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !3229
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 196, i32 28, i32 4, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !3240
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 100352
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.307, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !3244
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !3258
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 512
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.308, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !3260
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !3263
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !3265
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 4
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !3269
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !3271
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 128, i32 128, i32 32, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !3282
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 128
  %187 = load i64, i64* %47, align 8, !tbaa !3286
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 65536
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([273 x i8], [273 x i8]* @.str.309, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !3288
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !3302
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 16
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !3304
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !3307
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !3309
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !3313
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 32, i32 32, i32 32, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !3324
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 512
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.107, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !3328
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !3342
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 16
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !3344
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !3347
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !3349
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 32
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !3353
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 32, i32 32, i32 32, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !3364
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 512
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !3368
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !3382
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 16
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !3384
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 7
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.136, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !3387
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 7
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.137, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !3389
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 32
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !3393
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 1568, i32 224, i32 32, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !3404
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 25088
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.138, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_11_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_11_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %5 = alloca %23, align 8
  %6 = getelementptr inbounds %23, %23* %5, i64 0, i32 0
  store i8* %0, i8** %6, align 8
  %7 = getelementptr inbounds %23, %23* %5, i64 0, i32 1
  store i8* %1, i8** %7, align 8
  %8 = getelementptr inbounds %23, %23* %5, i64 0, i32 2
  store i8* %2, i8** %8, align 8
  %9 = getelementptr inbounds %23, %23* %5, i64 0, i32 3
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %23, %23* %5, i64 0, i32 4
  store i8* %4, i8** %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %23* %5 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.310, i8* nonnull %12, i32 0)
  ret i32 %13
}

; Function Attrs: nounwind
define private i32 @__tvm_parallel_lambda.310(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 111
  %20 = sdiv i32 %19, %18
  %21 = mul nsw i32 %20, %0
  %22 = icmp slt i32 %21, 112
  %23 = select i1 %22, i32 %21, i32 112
  %24 = add nsw i32 %0, 1
  %25 = mul nsw i32 %20, %24
  %26 = icmp slt i32 %25, 112
  %27 = select i1 %26, i32 %25, i32 112
  %28 = icmp slt i32 %23, %27
  br i1 %28, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %29 = add i32 %23, 1
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, -1
  %32 = sext i32 %27 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_begin7.preheader
  %indvars.iv45 = phi i64 [ %31, %for_body.lr.ph ], [ %indvars.iv.next46, %for_begin7.preheader ]
  %33 = trunc i64 %indvars.iv45 to i32
  %34 = srem i32 %33, 7
  %35 = mul nsw i32 %34, 28
  %36 = sdiv i32 %33, 7
  %37 = shl i32 %36, 16
  %38 = sext i32 %35 to i64
  %39 = sext i32 %37 to i64
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_begin7.preheader, %entry
  ret i32 0

for_begin7.preheader:                             ; preds = %for_begin4.preheader
  %40 = mul nsw i64 %indvars.iv45, 224
  %41 = shl nsw i32 %36, 5
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, float* %13, i64 %42
  %44 = bitcast float* %43 to <32 x float>*
  %45 = load <32 x float>, <32 x float>* %44, align 64, !tbaa !3408
  %46 = getelementptr inbounds float, float* %16, i64 %42
  %47 = bitcast float* %46 to <32 x float>*
  %48 = load <32 x float>, <32 x float>* %47, align 64, !tbaa !3411
  %49 = fadd <32 x float> %247, %45
  %50 = fadd <32 x float> %49, %48
  %51 = fcmp ogt <32 x float> %50, zeroinitializer
  %52 = select <32 x i1> %51, <32 x float> %50, <32 x float> zeroinitializer
  %53 = getelementptr inbounds float, float* %10, i64 %40
  %54 = bitcast float* %53 to <32 x float>*
  store <32 x float> %52, <32 x float>* %54, align 64, !tbaa !3414
  %55 = add nsw i64 %40, 32
  %56 = fadd <32 x float> %253, %45
  %57 = fadd <32 x float> %56, %48
  %58 = fcmp ogt <32 x float> %57, zeroinitializer
  %59 = select <32 x i1> %58, <32 x float> %57, <32 x float> zeroinitializer
  %60 = getelementptr inbounds float, float* %10, i64 %55
  %61 = bitcast float* %60 to <32 x float>*
  store <32 x float> %59, <32 x float>* %61, align 64, !tbaa !3414
  %62 = add nsw i64 %40, 64
  %63 = fadd <32 x float> %259, %45
  %64 = fadd <32 x float> %63, %48
  %65 = fcmp ogt <32 x float> %64, zeroinitializer
  %66 = select <32 x i1> %65, <32 x float> %64, <32 x float> zeroinitializer
  %67 = getelementptr inbounds float, float* %10, i64 %62
  %68 = bitcast float* %67 to <32 x float>*
  store <32 x float> %66, <32 x float>* %68, align 64, !tbaa !3414
  %69 = add nsw i64 %40, 96
  %70 = fadd <32 x float> %265, %45
  %71 = fadd <32 x float> %70, %48
  %72 = fcmp ogt <32 x float> %71, zeroinitializer
  %73 = select <32 x i1> %72, <32 x float> %71, <32 x float> zeroinitializer
  %74 = getelementptr inbounds float, float* %10, i64 %69
  %75 = bitcast float* %74 to <32 x float>*
  store <32 x float> %73, <32 x float>* %75, align 64, !tbaa !3414
  %76 = add nsw i64 %40, 128
  %77 = fadd <32 x float> %271, %45
  %78 = fadd <32 x float> %77, %48
  %79 = fcmp ogt <32 x float> %78, zeroinitializer
  %80 = select <32 x i1> %79, <32 x float> %78, <32 x float> zeroinitializer
  %81 = getelementptr inbounds float, float* %10, i64 %76
  %82 = bitcast float* %81 to <32 x float>*
  store <32 x float> %80, <32 x float>* %82, align 64, !tbaa !3414
  %83 = add nsw i64 %40, 160
  %84 = fadd <32 x float> %277, %45
  %85 = fadd <32 x float> %84, %48
  %86 = fcmp ogt <32 x float> %85, zeroinitializer
  %87 = select <32 x i1> %86, <32 x float> %85, <32 x float> zeroinitializer
  %88 = getelementptr inbounds float, float* %10, i64 %83
  %89 = bitcast float* %88 to <32 x float>*
  store <32 x float> %87, <32 x float>* %89, align 64, !tbaa !3414
  %90 = add nsw i64 %40, 192
  %91 = fadd <32 x float> %283, %45
  %92 = fadd <32 x float> %91, %48
  %93 = fcmp ogt <32 x float> %92, zeroinitializer
  %94 = select <32 x i1> %93, <32 x float> %92, <32 x float> zeroinitializer
  %95 = getelementptr inbounds float, float* %10, i64 %90
  %96 = bitcast float* %95 to <32 x float>*
  store <32 x float> %94, <32 x float>* %96, align 64, !tbaa !3414
  %indvars.iv.next46 = add nsw i64 %indvars.iv45, 1
  %97 = icmp slt i64 %indvars.iv.next46, %32
  br i1 %97, label %for_body, label %for_end, !prof !5

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_begin4.preheader ]
  %.lcssa2235 = phi <32 x float> [ zeroinitializer, %for_body ], [ %283, %for_begin4.preheader ]
  %.lcssa2033 = phi <32 x float> [ zeroinitializer, %for_body ], [ %277, %for_begin4.preheader ]
  %.lcssa1831 = phi <32 x float> [ zeroinitializer, %for_body ], [ %271, %for_begin4.preheader ]
  %.lcssa1629 = phi <32 x float> [ zeroinitializer, %for_body ], [ %265, %for_begin4.preheader ]
  %.lcssa1427 = phi <32 x float> [ zeroinitializer, %for_body ], [ %259, %for_begin4.preheader ]
  %.lcssa1226 = phi <32 x float> [ zeroinitializer, %for_body ], [ %253, %for_begin4.preheader ]
  %.lcssa24 = phi <32 x float> [ zeroinitializer, %for_body ], [ %247, %for_begin4.preheader ]
  %98 = mul nuw nsw i64 %indvars.iv, 196
  %99 = add nsw i64 %98, %38
  %100 = shl i64 %indvars.iv, 7
  %101 = add nuw nsw i64 %100, %39
  %102 = getelementptr inbounds float, float* %4, i64 %99
  %103 = load float, float* %102, align 4, !tbaa !3417
  %104 = insertelement <32 x float> undef, float %103, i32 0
  %105 = shufflevector <32 x float> %104, <32 x float> undef, <32 x i32> zeroinitializer
  %106 = getelementptr inbounds float, float* %7, i64 %101
  %107 = bitcast float* %106 to <32 x float>*
  %108 = load <32 x float>, <32 x float>* %107, align 64, !tbaa !3420
  %109 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %105, <32 x float> %108, <32 x float> %.lcssa24)
  %110 = add nsw i64 %99, 4
  %111 = getelementptr inbounds float, float* %4, i64 %110
  %112 = load float, float* %111, align 4, !tbaa !3417
  %113 = insertelement <32 x float> undef, float %112, i32 0
  %114 = shufflevector <32 x float> %113, <32 x float> undef, <32 x i32> zeroinitializer
  %115 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %114, <32 x float> %108, <32 x float> %.lcssa1226)
  %116 = add nsw i64 %99, 8
  %117 = getelementptr inbounds float, float* %4, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !3417
  %119 = insertelement <32 x float> undef, float %118, i32 0
  %120 = shufflevector <32 x float> %119, <32 x float> undef, <32 x i32> zeroinitializer
  %121 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %120, <32 x float> %108, <32 x float> %.lcssa1427)
  %122 = add nsw i64 %99, 12
  %123 = getelementptr inbounds float, float* %4, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !3417
  %125 = insertelement <32 x float> undef, float %124, i32 0
  %126 = shufflevector <32 x float> %125, <32 x float> undef, <32 x i32> zeroinitializer
  %127 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %126, <32 x float> %108, <32 x float> %.lcssa1629)
  %128 = add nsw i64 %99, 16
  %129 = getelementptr inbounds float, float* %4, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !3417
  %131 = insertelement <32 x float> undef, float %130, i32 0
  %132 = shufflevector <32 x float> %131, <32 x float> undef, <32 x i32> zeroinitializer
  %133 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %132, <32 x float> %108, <32 x float> %.lcssa1831)
  %134 = add nsw i64 %99, 20
  %135 = getelementptr inbounds float, float* %4, i64 %134
  %136 = load float, float* %135, align 4, !tbaa !3417
  %137 = insertelement <32 x float> undef, float %136, i32 0
  %138 = shufflevector <32 x float> %137, <32 x float> undef, <32 x i32> zeroinitializer
  %139 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %138, <32 x float> %108, <32 x float> %.lcssa2033)
  %140 = add nsw i64 %99, 24
  %141 = getelementptr inbounds float, float* %4, i64 %140
  %142 = load float, float* %141, align 4, !tbaa !3417
  %143 = insertelement <32 x float> undef, float %142, i32 0
  %144 = shufflevector <32 x float> %143, <32 x float> undef, <32 x i32> zeroinitializer
  %145 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %144, <32 x float> %108, <32 x float> %.lcssa2235)
  %146 = or i64 %99, 1
  %147 = getelementptr inbounds float, float* %4, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !3417
  %149 = insertelement <32 x float> undef, float %148, i32 0
  %150 = shufflevector <32 x float> %149, <32 x float> undef, <32 x i32> zeroinitializer
  %151 = or i64 %101, 32
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = bitcast float* %152 to <32 x float>*
  %154 = load <32 x float>, <32 x float>* %153, align 64, !tbaa !3420
  %155 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %150, <32 x float> %154, <32 x float> %109)
  %156 = add nsw i64 %146, 4
  %157 = getelementptr inbounds float, float* %4, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !3417
  %159 = insertelement <32 x float> undef, float %158, i32 0
  %160 = shufflevector <32 x float> %159, <32 x float> undef, <32 x i32> zeroinitializer
  %161 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %160, <32 x float> %154, <32 x float> %115)
  %162 = add nsw i64 %146, 8
  %163 = getelementptr inbounds float, float* %4, i64 %162
  %164 = load float, float* %163, align 4, !tbaa !3417
  %165 = insertelement <32 x float> undef, float %164, i32 0
  %166 = shufflevector <32 x float> %165, <32 x float> undef, <32 x i32> zeroinitializer
  %167 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %166, <32 x float> %154, <32 x float> %121)
  %168 = add nsw i64 %146, 12
  %169 = getelementptr inbounds float, float* %4, i64 %168
  %170 = load float, float* %169, align 4, !tbaa !3417
  %171 = insertelement <32 x float> undef, float %170, i32 0
  %172 = shufflevector <32 x float> %171, <32 x float> undef, <32 x i32> zeroinitializer
  %173 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %172, <32 x float> %154, <32 x float> %127)
  %174 = add nsw i64 %146, 16
  %175 = getelementptr inbounds float, float* %4, i64 %174
  %176 = load float, float* %175, align 4, !tbaa !3417
  %177 = insertelement <32 x float> undef, float %176, i32 0
  %178 = shufflevector <32 x float> %177, <32 x float> undef, <32 x i32> zeroinitializer
  %179 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %178, <32 x float> %154, <32 x float> %133)
  %180 = add nsw i64 %146, 20
  %181 = getelementptr inbounds float, float* %4, i64 %180
  %182 = load float, float* %181, align 4, !tbaa !3417
  %183 = insertelement <32 x float> undef, float %182, i32 0
  %184 = shufflevector <32 x float> %183, <32 x float> undef, <32 x i32> zeroinitializer
  %185 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %184, <32 x float> %154, <32 x float> %139)
  %186 = add nsw i64 %146, 24
  %187 = getelementptr inbounds float, float* %4, i64 %186
  %188 = load float, float* %187, align 4, !tbaa !3417
  %189 = insertelement <32 x float> undef, float %188, i32 0
  %190 = shufflevector <32 x float> %189, <32 x float> undef, <32 x i32> zeroinitializer
  %191 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %190, <32 x float> %154, <32 x float> %145)
  %192 = or i64 %99, 2
  %193 = getelementptr inbounds float, float* %4, i64 %192
  %194 = load float, float* %193, align 4, !tbaa !3417
  %195 = insertelement <32 x float> undef, float %194, i32 0
  %196 = shufflevector <32 x float> %195, <32 x float> undef, <32 x i32> zeroinitializer
  %197 = or i64 %101, 64
  %198 = getelementptr inbounds float, float* %7, i64 %197
  %199 = bitcast float* %198 to <32 x float>*
  %200 = load <32 x float>, <32 x float>* %199, align 64, !tbaa !3420
  %201 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %196, <32 x float> %200, <32 x float> %155)
  %202 = add nsw i64 %192, 4
  %203 = getelementptr inbounds float, float* %4, i64 %202
  %204 = load float, float* %203, align 4, !tbaa !3417
  %205 = insertelement <32 x float> undef, float %204, i32 0
  %206 = shufflevector <32 x float> %205, <32 x float> undef, <32 x i32> zeroinitializer
  %207 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %206, <32 x float> %200, <32 x float> %161)
  %208 = add nsw i64 %192, 8
  %209 = getelementptr inbounds float, float* %4, i64 %208
  %210 = load float, float* %209, align 4, !tbaa !3417
  %211 = insertelement <32 x float> undef, float %210, i32 0
  %212 = shufflevector <32 x float> %211, <32 x float> undef, <32 x i32> zeroinitializer
  %213 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %212, <32 x float> %200, <32 x float> %167)
  %214 = add nsw i64 %192, 12
  %215 = getelementptr inbounds float, float* %4, i64 %214
  %216 = load float, float* %215, align 4, !tbaa !3417
  %217 = insertelement <32 x float> undef, float %216, i32 0
  %218 = shufflevector <32 x float> %217, <32 x float> undef, <32 x i32> zeroinitializer
  %219 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %218, <32 x float> %200, <32 x float> %173)
  %220 = add nsw i64 %192, 16
  %221 = getelementptr inbounds float, float* %4, i64 %220
  %222 = load float, float* %221, align 4, !tbaa !3417
  %223 = insertelement <32 x float> undef, float %222, i32 0
  %224 = shufflevector <32 x float> %223, <32 x float> undef, <32 x i32> zeroinitializer
  %225 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %224, <32 x float> %200, <32 x float> %179)
  %226 = add nsw i64 %192, 20
  %227 = getelementptr inbounds float, float* %4, i64 %226
  %228 = load float, float* %227, align 4, !tbaa !3417
  %229 = insertelement <32 x float> undef, float %228, i32 0
  %230 = shufflevector <32 x float> %229, <32 x float> undef, <32 x i32> zeroinitializer
  %231 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %200, <32 x float> %185)
  %232 = add nsw i64 %192, 24
  %233 = getelementptr inbounds float, float* %4, i64 %232
  %234 = load float, float* %233, align 4, !tbaa !3417
  %235 = insertelement <32 x float> undef, float %234, i32 0
  %236 = shufflevector <32 x float> %235, <32 x float> undef, <32 x i32> zeroinitializer
  %237 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %200, <32 x float> %191)
  %238 = or i64 %99, 3
  %239 = getelementptr inbounds float, float* %4, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !3417
  %241 = insertelement <32 x float> undef, float %240, i32 0
  %242 = shufflevector <32 x float> %241, <32 x float> undef, <32 x i32> zeroinitializer
  %243 = or i64 %101, 96
  %244 = getelementptr inbounds float, float* %7, i64 %243
  %245 = bitcast float* %244 to <32 x float>*
  %246 = load <32 x float>, <32 x float>* %245, align 64, !tbaa !3420
  %247 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %246, <32 x float> %201)
  %248 = add nsw i64 %238, 4
  %249 = getelementptr inbounds float, float* %4, i64 %248
  %250 = load float, float* %249, align 4, !tbaa !3417
  %251 = insertelement <32 x float> undef, float %250, i32 0
  %252 = shufflevector <32 x float> %251, <32 x float> undef, <32 x i32> zeroinitializer
  %253 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %252, <32 x float> %246, <32 x float> %207)
  %254 = add nsw i64 %238, 8
  %255 = getelementptr inbounds float, float* %4, i64 %254
  %256 = load float, float* %255, align 4, !tbaa !3417
  %257 = insertelement <32 x float> undef, float %256, i32 0
  %258 = shufflevector <32 x float> %257, <32 x float> undef, <32 x i32> zeroinitializer
  %259 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %258, <32 x float> %246, <32 x float> %213)
  %260 = add nsw i64 %238, 12
  %261 = getelementptr inbounds float, float* %4, i64 %260
  %262 = load float, float* %261, align 4, !tbaa !3417
  %263 = insertelement <32 x float> undef, float %262, i32 0
  %264 = shufflevector <32 x float> %263, <32 x float> undef, <32 x i32> zeroinitializer
  %265 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %264, <32 x float> %246, <32 x float> %219)
  %266 = add nsw i64 %238, 16
  %267 = getelementptr inbounds float, float* %4, i64 %266
  %268 = load float, float* %267, align 4, !tbaa !3417
  %269 = insertelement <32 x float> undef, float %268, i32 0
  %270 = shufflevector <32 x float> %269, <32 x float> undef, <32 x i32> zeroinitializer
  %271 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %270, <32 x float> %246, <32 x float> %225)
  %272 = add nsw i64 %238, 20
  %273 = getelementptr inbounds float, float* %4, i64 %272
  %274 = load float, float* %273, align 4, !tbaa !3417
  %275 = insertelement <32 x float> undef, float %274, i32 0
  %276 = shufflevector <32 x float> %275, <32 x float> undef, <32 x i32> zeroinitializer
  %277 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %276, <32 x float> %246, <32 x float> %231)
  %278 = add nsw i64 %238, 24
  %279 = getelementptr inbounds float, float* %4, i64 %278
  %280 = load float, float* %279, align 4, !tbaa !3417
  %281 = insertelement <32 x float> undef, float %280, i32 0
  %282 = shufflevector <32 x float> %281, <32 x float> undef, <32 x i32> zeroinitializer
  %283 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %282, <32 x float> %246, <32 x float> %237)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_begin7.preheader, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_42(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.311, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3423
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.312, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !3437
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.313, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !3439
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !3453
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 4
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !3455
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 28
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !3458
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 28
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !3460
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !3464
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 25088, i32 896, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !3475
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 100352
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.297, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !3479
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !3493
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !3495
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 28
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.272, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !3498
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 28
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.273, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !3500
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 128
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !3504
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 100352, i32 3584, i32 128, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !3515
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 100352
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.314, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_42_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_42_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %24, align 8
  %3 = getelementptr inbounds %24, %24* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %24, %24* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %24* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.315, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.315(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 27
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 28
  %14 = select i1 %13, i32 %12, i32 28
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 28
  %18 = select i1 %17, i32 %16, i32 28
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 3584
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = mul i32 %25, 896
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %28 = shl i64 %indvars.iv7, 7
  %29 = add nsw i64 %28, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %30 = shl i32 %indvars.iv7.tr, 5
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %27
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %34 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %35 = shl nsw i64 %indvars.iv, 4
  %36 = add nsw i64 %29, %35
  %37 = trunc i64 %35 to i32
  %38 = insertelement <16 x i32> undef, i32 %37, i32 0
  %39 = trunc i64 %35 to i32
  %40 = or i32 %39, 1
  %41 = insertelement <16 x i32> %38, i32 %40, i32 1
  %42 = trunc i64 %35 to i32
  %43 = or i32 %42, 2
  %44 = insertelement <16 x i32> %41, i32 %43, i32 2
  %45 = trunc i64 %35 to i32
  %46 = or i32 %45, 3
  %47 = insertelement <16 x i32> %44, i32 %46, i32 3
  %48 = trunc i64 %35 to i32
  %49 = or i32 %48, 4
  %50 = insertelement <16 x i32> %47, i32 %49, i32 4
  %51 = trunc i64 %35 to i32
  %52 = or i32 %51, 5
  %53 = insertelement <16 x i32> %50, i32 %52, i32 5
  %54 = trunc i64 %35 to i32
  %55 = or i32 %54, 6
  %56 = insertelement <16 x i32> %53, i32 %55, i32 6
  %57 = trunc i64 %35 to i32
  %58 = or i32 %57, 7
  %59 = insertelement <16 x i32> %56, i32 %58, i32 7
  %60 = trunc i64 %35 to i32
  %61 = or i32 %60, 8
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  %63 = trunc i64 %35 to i32
  %64 = or i32 %63, 9
  %65 = insertelement <16 x i32> %62, i32 %64, i32 9
  %66 = trunc i64 %35 to i32
  %67 = or i32 %66, 10
  %68 = insertelement <16 x i32> %65, i32 %67, i32 10
  %69 = trunc i64 %35 to i32
  %70 = or i32 %69, 11
  %71 = insertelement <16 x i32> %68, i32 %70, i32 11
  %72 = trunc i64 %35 to i32
  %73 = or i32 %72, 12
  %74 = insertelement <16 x i32> %71, i32 %73, i32 12
  %75 = trunc i64 %35 to i32
  %76 = or i32 %75, 13
  %77 = insertelement <16 x i32> %74, i32 %76, i32 13
  %78 = trunc i64 %35 to i32
  %79 = or i32 %78, 14
  %80 = insertelement <16 x i32> %77, i32 %79, i32 14
  %81 = trunc i64 %35 to i32
  %82 = or i32 %81, 15
  %83 = insertelement <16 x i32> %80, i32 %82, i32 15
  %84 = sdiv <16 x i32> %83, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %85 = mul <16 x i32> %84, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %86 = sub <16 x i32> %83, %85
  %87 = icmp sgt <16 x i32> %86, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %87, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %88 = sext <16 x i1> %not. to <16 x i32>
  %89 = add nsw <16 x i32> %84, %88
  %90 = mul nsw <16 x i32> %89, <i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088>
  %91 = add nsw <16 x i32> %86, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %92 = select <16 x i1> %87, <16 x i32> %86, <16 x i32> %91
  %93 = add <16 x i32> %33, %92
  %94 = add <16 x i32> %93, %90
  %95 = extractelement <16 x i32> %94, i64 0
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !3519
  %99 = insertelement <16 x float> undef, float %98, i32 0
  %100 = extractelement <16 x i32> %94, i64 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !3519
  %104 = insertelement <16 x float> %99, float %103, i32 1
  %105 = extractelement <16 x i32> %94, i64 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !3519
  %109 = insertelement <16 x float> %104, float %108, i32 2
  %110 = extractelement <16 x i32> %94, i64 3
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !3519
  %114 = insertelement <16 x float> %109, float %113, i32 3
  %115 = extractelement <16 x i32> %94, i64 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !3519
  %119 = insertelement <16 x float> %114, float %118, i32 4
  %120 = extractelement <16 x i32> %94, i64 5
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !3519
  %124 = insertelement <16 x float> %119, float %123, i32 5
  %125 = extractelement <16 x i32> %94, i64 6
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !3519
  %129 = insertelement <16 x float> %124, float %128, i32 6
  %130 = extractelement <16 x i32> %94, i64 7
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !3519
  %134 = insertelement <16 x float> %129, float %133, i32 7
  %135 = extractelement <16 x i32> %94, i64 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !3519
  %139 = insertelement <16 x float> %134, float %138, i32 8
  %140 = extractelement <16 x i32> %94, i64 9
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !3519
  %144 = insertelement <16 x float> %139, float %143, i32 9
  %145 = extractelement <16 x i32> %94, i64 10
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !3519
  %149 = insertelement <16 x float> %144, float %148, i32 10
  %150 = extractelement <16 x i32> %94, i64 11
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !3519
  %154 = insertelement <16 x float> %149, float %153, i32 11
  %155 = extractelement <16 x i32> %94, i64 12
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !3519
  %159 = insertelement <16 x float> %154, float %158, i32 12
  %160 = extractelement <16 x i32> %94, i64 13
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !3519
  %164 = insertelement <16 x float> %159, float %163, i32 13
  %165 = extractelement <16 x i32> %94, i64 14
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !3519
  %169 = insertelement <16 x float> %164, float %168, i32 14
  %170 = extractelement <16 x i32> %94, i64 15
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !3519
  %174 = insertelement <16 x float> %169, float %173, i32 15
  %175 = getelementptr inbounds float, float* %4, i64 %36
  %176 = bitcast float* %175 to <16 x float>*
  store <16 x float> %174, <16 x float>* %176, align 64, !tbaa !3522
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 28
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_transpose_nn_batch_flatten(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.str.316, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3525
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([177 x i8], [177 x i8]* @.str.317, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !3539
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([177 x i8], [177 x i8]* @.str.318, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !3541
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !3555
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 64
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.177, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !3557
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.319, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !3560
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.320, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !3562
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !3566
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 32, i32 32, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !3577
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 2048
  %rdx.shuf = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %82, %rdx.shuf
  %rdx.shuf43 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx44 = and <4 x i1> %bin.rdx, %rdx.shuf43
  %86 = extractelement <4 x i1> %bin.rdx44, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.321, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 2
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.322, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !3581
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !3595
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 2048
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.323, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = icmp eq i64* %29, null
  br i1 %118, label %if_end34, label %if_then33, !prof !50

if_then33:                                        ; preds = %assert_end32
  %119 = getelementptr inbounds i64, i64* %29, i64 1
  %120 = load i64, i64* %119, align 8, !tbaa !3597
  %121 = trunc i64 %120 to i32
  %122 = icmp eq i32 %121, 1
  %123 = load i64, i64* %29, align 8, !tbaa !3611
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 2048
  %126 = and i1 %122, %125
  br i1 %126, label %if_end34, label %assert_fail35, !prof !5

if_end34:                                         ; preds = %assert_end32, %if_then33
  %127 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end38, label %assert_fail37, !prof !5

assert_fail35:                                    ; preds = %if_then33
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.324, i64 0, i64 0))
  ret i32 -1

assert_fail37:                                    ; preds = %if_end34
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %if_end34
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 1
  br i1 %134, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %23, %137
  br i1 %138, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  tail call fastcc void @fused_layout_transform_transpose_nn_batch_flatten_compute_(i8* %25, i8* %15)
  ret i32 0
}

; Function Attrs: noinline norecurse nounwind
define private fastcc void @fused_layout_transform_transpose_nn_batch_flatten_compute_(i8* noalias nocapture, i8* noalias nocapture readonly) unnamed_addr #4 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %0, i8* align 64 %1, i64 8192, i1 false)
  ret void
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 6
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.325, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3613
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !3627
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !3630
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !3632
  %32 = getelementptr inbounds i8, i8* %0, i64 40
  %33 = bitcast i8* %32 to %1**
  %34 = load %1*, %1** %33, align 8
  %35 = getelementptr inbounds i8, i8* %1, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4, !tbaa !3636
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  %66 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %1, %1* %34, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %1, %1* %34, i64 0, i32 4
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %1, %1* %34, i64 0, i32 5
  %77 = load i64*, i64** %76, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.326, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %79 = getelementptr inbounds i8, i8* %1, i64 4
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 4, !tbaa !3638
  switch i32 %81, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.327, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.328, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.329, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %85 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %85(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.330, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %37, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ]

assert_fail11:                                    ; preds = %assert_end10
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %86(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.331, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  %87 = icmp eq i32 %45, 1
  br i1 %87, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %89 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 5
  br i1 %91, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %93 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 2
  %96 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %97 = load i8, i8* %96, align 1
  %98 = icmp eq i8 %97, 32
  %99 = and i1 %95, %98
  %100 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %101, 1
  %103 = and i1 %99, %102
  br i1 %103, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %105 = load i64, i64* %41, align 8, !tbaa !3640
  %106 = trunc i64 %105 to i32
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %109 = getelementptr inbounds i64, i64* %41, i64 1
  %110 = load i64, i64* %109, align 8, !tbaa !3654
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %111, 128
  br i1 %112, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.332, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %114 = getelementptr inbounds i64, i64* %41, i64 2
  %115 = load i64, i64* %114, align 8, !tbaa !3656
  %116 = trunc i64 %115 to i32
  %117 = icmp eq i32 %116, 7
  br i1 %117, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.178, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %119 = getelementptr inbounds i64, i64* %41, i64 3
  %120 = load i64, i64* %119, align 8, !tbaa !3659
  %121 = trunc i64 %120 to i32
  %122 = icmp eq i32 %121, 7
  br i1 %122, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %123 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %123(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %124 = getelementptr inbounds i64, i64* %41, i64 4
  %125 = load i64, i64* %124, align 8, !tbaa !3661
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 4
  br i1 %127, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %128 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %128(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.98, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %129 = icmp eq i64* %43, null
  br i1 %129, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end28
  %130 = getelementptr inbounds i64, i64* %43, i64 1
  %131 = bitcast i64* %130 to <4 x i64>*
  %132 = load <4 x i64>, <4 x i64>* %131, align 8, !tbaa !3665
  %133 = trunc <4 x i64> %132 to <4 x i32>
  %134 = icmp eq <4 x i32> %133, <i32 196, i32 28, i32 4, i32 1>
  %135 = load i64, i64* %43, align 8, !tbaa !3676
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %136, 25088
  %rdx.shuf173 = shufflevector <4 x i1> %134, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx174 = and <4 x i1> %134, %rdx.shuf173
  %rdx.shuf175 = shufflevector <4 x i1> %bin.rdx174, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx176 = and <4 x i1> %bin.rdx174, %rdx.shuf175
  %138 = extractelement <4 x i1> %bin.rdx176, i32 0
  %139 = and i1 %138, %137
  br i1 %139, label %if_end, label %assert_fail29, !prof !5

if_end:                                           ; preds = %assert_end28, %if_then
  %140 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %141 = load i64, i64* %140, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %143(i8* getelementptr inbounds ([234 x i8], [234 x i8]* @.str.333, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 6
  br i1 %147, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 2
  %152 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 32
  %155 = and i1 %151, %154
  %156 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %157 = load i16, i16* %156, align 2
  %158 = icmp eq i16 %157, 1
  %159 = and i1 %155, %158
  br i1 %159, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %161 = load i64, i64* %51, align 8, !tbaa !3680
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i32 %162, 64
  br i1 %163, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.334, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %165 = getelementptr inbounds i64, i64* %51, i64 1
  %166 = load i64, i64* %165, align 8, !tbaa !3694
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 128
  br i1 %168, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.335, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %170 = getelementptr inbounds i64, i64* %51, i64 2
  %171 = load i64, i64* %170, align 8, !tbaa !3696
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %175 = getelementptr inbounds i64, i64* %51, i64 3
  %176 = load i64, i64* %175, align 8, !tbaa !3699
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %179(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %180 = getelementptr inbounds i64, i64* %51, i64 4
  %181 = load i64, i64* %180, align 8, !tbaa !3701
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 4
  br i1 %183, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %185 = getelementptr inbounds i64, i64* %51, i64 5
  %186 = load i64, i64* %185, align 8, !tbaa !3705
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 32
  br i1 %188, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %190 = icmp eq i64* %53, null
  br i1 %190, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %191 = getelementptr inbounds i64, i64* %53, i64 2
  %192 = bitcast i64* %191 to <4 x i64>*
  %193 = load <4 x i64>, <4 x i64>* %192, align 8, !tbaa !3707
  %194 = trunc <4 x i64> %193 to <4 x i32>
  %195 = icmp eq <4 x i32> %194, <i32 128, i32 128, i32 32, i32 1>
  %196 = getelementptr inbounds i64, i64* %53, i64 1
  %197 = load i64, i64* %196, align 8, !tbaa !3718
  %198 = trunc i64 %197 to i32
  %199 = icmp eq i32 %198, 128
  %200 = load i64, i64* %53, align 8, !tbaa !3722
  %201 = trunc i64 %200 to i32
  %202 = icmp eq i32 %201, 16384
  %rdx.shuf169 = shufflevector <4 x i1> %195, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx170 = and <4 x i1> %195, %rdx.shuf169
  %rdx.shuf171 = shufflevector <4 x i1> %bin.rdx170, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx172 = and <4 x i1> %bin.rdx170, %rdx.shuf171
  %203 = extractelement <4 x i1> %bin.rdx172, i32 0
  %204 = and i1 %203, %199
  %205 = and i1 %204, %202
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([273 x i8], [273 x i8]* @.str.336, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %47, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 2
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = and i1 %225, %228
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %231 = load i16, i16* %230, align 2
  %232 = icmp eq i16 %231, 1
  %233 = and i1 %229, %232
  br i1 %233, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %235 = load i64, i64* %57, align 8, !tbaa !3724
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %239 = getelementptr inbounds i64, i64* %57, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !3738
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 64
  br i1 %242, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.337, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %244 = getelementptr inbounds i64, i64* %57, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !3740
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %249 = getelementptr inbounds i64, i64* %57, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !3743
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %254 = getelementptr inbounds i64, i64* %57, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !3745
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 32
  br i1 %257, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %259 = icmp eq i64* %59, null
  br i1 %259, label %if_end74, label %if_then73, !prof !50

if_then73:                                        ; preds = %assert_end72
  %260 = getelementptr inbounds i64, i64* %59, i64 1
  %261 = bitcast i64* %260 to <4 x i64>*
  %262 = load <4 x i64>, <4 x i64>* %261, align 8, !tbaa !3749
  %263 = trunc <4 x i64> %262 to <4 x i32>
  %264 = icmp eq <4 x i32> %263, <i32 32, i32 32, i32 32, i32 1>
  %265 = load i64, i64* %59, align 8, !tbaa !3760
  %266 = trunc i64 %265 to i32
  %267 = icmp eq i32 %266, 2048
  %rdx.shuf165 = shufflevector <4 x i1> %264, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx166 = and <4 x i1> %264, %rdx.shuf165
  %rdx.shuf167 = shufflevector <4 x i1> %bin.rdx166, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx168 = and <4 x i1> %bin.rdx166, %rdx.shuf167
  %268 = extractelement <4 x i1> %bin.rdx168, i32 0
  %269 = and i1 %268, %267
  br i1 %269, label %if_end74, label %assert_fail75, !prof !5

if_end74:                                         ; preds = %assert_end72, %if_then73
  %270 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %271 = load i64, i64* %270, align 8
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %assert_end78, label %assert_fail77, !prof !5

assert_fail75:                                    ; preds = %if_then73
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.338, i64 0, i64 0))
  ret i32 -1

assert_fail77:                                    ; preds = %if_end74
  %274 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %274(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %if_end74
  %275 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %276 = load i32, i32* %275, align 4
  %277 = icmp eq i32 %276, 1
  br i1 %277, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %278 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %278(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %279 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %280 = load i32, i32* %279, align 4
  %281 = icmp eq i32 %47, %280
  br i1 %281, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %282(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %283 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %284 = load i32, i32* %283, align 4
  %285 = icmp eq i32 %284, 5
  br i1 %285, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %287 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %288 = load i8, i8* %287, align 1
  %289 = icmp eq i8 %288, 2
  %290 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %291, 32
  %293 = and i1 %289, %292
  %294 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %295 = load i16, i16* %294, align 2
  %296 = icmp eq i16 %295, 1
  %297 = and i1 %293, %296
  br i1 %297, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %298 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %298(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %299 = load i64, i64* %63, align 8, !tbaa !3764
  %300 = trunc i64 %299 to i32
  %301 = icmp eq i32 %300, 1
  br i1 %301, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %302(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %303 = getelementptr inbounds i64, i64* %63, i64 1
  %304 = load i64, i64* %303, align 8, !tbaa !3778
  %305 = trunc i64 %304 to i32
  %306 = icmp eq i32 %305, 64
  br i1 %306, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %307 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %307(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.339, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %308 = getelementptr inbounds i64, i64* %63, i64 2
  %309 = load i64, i64* %308, align 8, !tbaa !3780
  %310 = trunc i64 %309 to i32
  %311 = icmp eq i32 %310, 1
  br i1 %311, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %313 = getelementptr inbounds i64, i64* %63, i64 3
  %314 = load i64, i64* %313, align 8, !tbaa !3783
  %315 = trunc i64 %314 to i32
  %316 = icmp eq i32 %315, 1
  br i1 %316, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %317 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %317(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %318 = getelementptr inbounds i64, i64* %63, i64 4
  %319 = load i64, i64* %318, align 8, !tbaa !3785
  %320 = trunc i64 %319 to i32
  %321 = icmp eq i32 %320, 32
  br i1 %321, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %322 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %322(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %323 = icmp eq i64* %65, null
  br i1 %323, label %if_end98, label %if_then97, !prof !50

if_then97:                                        ; preds = %assert_end96
  %324 = getelementptr inbounds i64, i64* %65, i64 1
  %325 = bitcast i64* %324 to <4 x i64>*
  %326 = load <4 x i64>, <4 x i64>* %325, align 8, !tbaa !3789
  %327 = trunc <4 x i64> %326 to <4 x i32>
  %328 = icmp eq <4 x i32> %327, <i32 32, i32 32, i32 32, i32 1>
  %329 = load i64, i64* %65, align 8, !tbaa !3800
  %330 = trunc i64 %329 to i32
  %331 = icmp eq i32 %330, 2048
  %rdx.shuf161 = shufflevector <4 x i1> %328, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx162 = and <4 x i1> %328, %rdx.shuf161
  %rdx.shuf163 = shufflevector <4 x i1> %bin.rdx162, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx164 = and <4 x i1> %bin.rdx162, %rdx.shuf163
  %332 = extractelement <4 x i1> %bin.rdx164, i32 0
  %333 = and i1 %332, %331
  br i1 %333, label %if_end98, label %assert_fail99, !prof !5

if_end98:                                         ; preds = %assert_end96, %if_then97
  %334 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %335 = load i64, i64* %334, align 8
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %assert_end102, label %assert_fail101, !prof !5

assert_fail99:                                    ; preds = %if_then97
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.340, i64 0, i64 0))
  ret i32 -1

assert_fail101:                                   ; preds = %if_end98
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %338(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %if_end98
  %339 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %340 = load i32, i32* %339, align 4
  %341 = icmp eq i32 %340, 1
  br i1 %341, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %342 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %342(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %343 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %344 = load i32, i32* %343, align 4
  %345 = icmp eq i32 %47, %344
  br i1 %345, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %346 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %346(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %347 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %348 = load i32, i32* %347, align 4
  %349 = icmp eq i32 %348, 5
  br i1 %349, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %350(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %351 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %352 = load i8, i8* %351, align 1
  %353 = icmp eq i8 %352, 2
  %354 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %355 = load i8, i8* %354, align 1
  %356 = icmp eq i8 %355, 32
  %357 = and i1 %353, %356
  %358 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %359 = load i16, i16* %358, align 2
  %360 = icmp eq i16 %359, 1
  %361 = and i1 %357, %360
  br i1 %361, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %362 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %362(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %363 = load i64, i64* %69, align 8, !tbaa !3804
  %364 = trunc i64 %363 to i32
  %365 = icmp eq i32 %364, 1
  br i1 %365, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %366 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %366(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %367 = getelementptr inbounds i64, i64* %69, i64 1
  %368 = load i64, i64* %367, align 8, !tbaa !3818
  %369 = trunc i64 %368 to i32
  %370 = icmp eq i32 %369, 64
  br i1 %370, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %371 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %371(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.341, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %372 = getelementptr inbounds i64, i64* %69, i64 2
  %373 = load i64, i64* %372, align 8, !tbaa !3820
  %374 = trunc i64 %373 to i32
  %375 = icmp eq i32 %374, 1
  br i1 %375, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %376(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %377 = getelementptr inbounds i64, i64* %69, i64 3
  %378 = load i64, i64* %377, align 8, !tbaa !3823
  %379 = trunc i64 %378 to i32
  %380 = icmp eq i32 %379, 1
  br i1 %380, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %381 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %381(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %382 = getelementptr inbounds i64, i64* %69, i64 4
  %383 = load i64, i64* %382, align 8, !tbaa !3825
  %384 = trunc i64 %383 to i32
  %385 = icmp eq i32 %384, 32
  br i1 %385, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %386 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %386(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %387 = icmp eq i64* %71, null
  br i1 %387, label %if_end122, label %if_then121, !prof !50

if_then121:                                       ; preds = %assert_end120
  %388 = getelementptr inbounds i64, i64* %71, i64 1
  %389 = bitcast i64* %388 to <4 x i64>*
  %390 = load <4 x i64>, <4 x i64>* %389, align 8, !tbaa !3829
  %391 = trunc <4 x i64> %390 to <4 x i32>
  %392 = icmp eq <4 x i32> %391, <i32 32, i32 32, i32 32, i32 1>
  %393 = load i64, i64* %71, align 8, !tbaa !3840
  %394 = trunc i64 %393 to i32
  %395 = icmp eq i32 %394, 2048
  %rdx.shuf157 = shufflevector <4 x i1> %392, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx158 = and <4 x i1> %392, %rdx.shuf157
  %rdx.shuf159 = shufflevector <4 x i1> %bin.rdx158, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx160 = and <4 x i1> %bin.rdx158, %rdx.shuf159
  %396 = extractelement <4 x i1> %bin.rdx160, i32 0
  %397 = and i1 %396, %395
  br i1 %397, label %if_end122, label %assert_fail123, !prof !5

if_end122:                                        ; preds = %assert_end120, %if_then121
  %398 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %399 = load i64, i64* %398, align 8
  %400 = icmp eq i64 %399, 0
  br i1 %400, label %assert_end126, label %assert_fail125, !prof !5

assert_fail123:                                   ; preds = %if_then121
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %401(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.342, i64 0, i64 0))
  ret i32 -1

assert_fail125:                                   ; preds = %if_end122
  %402 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %402(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %if_end122
  %403 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %404 = load i32, i32* %403, align 4
  %405 = icmp eq i32 %404, 1
  br i1 %405, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %406 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %406(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %407 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %408 = load i32, i32* %407, align 4
  %409 = icmp eq i32 %47, %408
  br i1 %409, label %assert_end130, label %assert_fail129, !prof !5

assert_fail129:                                   ; preds = %assert_end128
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %410(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end130:                                    ; preds = %assert_end128
  %411 = getelementptr inbounds %1, %1* %34, i64 0, i32 2
  %412 = load i32, i32* %411, align 4
  %413 = icmp eq i32 %412, 5
  br i1 %413, label %assert_end132, label %assert_fail131, !prof !5

assert_fail131:                                   ; preds = %assert_end130
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %414(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end132:                                    ; preds = %assert_end130
  %415 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 0
  %416 = load i8, i8* %415, align 1
  %417 = icmp eq i8 %416, 2
  %418 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 1
  %419 = load i8, i8* %418, align 1
  %420 = icmp eq i8 %419, 32
  %421 = and i1 %417, %420
  %422 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 2
  %423 = load i16, i16* %422, align 2
  %424 = icmp eq i16 %423, 1
  %425 = and i1 %421, %424
  br i1 %425, label %assert_end134, label %assert_fail133, !prof !5

assert_fail133:                                   ; preds = %assert_end132
  %426 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %426(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %assert_end132
  %427 = load i64, i64* %75, align 8, !tbaa !3844
  %428 = trunc i64 %427 to i32
  %429 = icmp eq i32 %428, 1
  br i1 %429, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %430 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %430(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.116, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %431 = getelementptr inbounds i64, i64* %75, i64 1
  %432 = load i64, i64* %431, align 8, !tbaa !3858
  %433 = trunc i64 %432 to i32
  %434 = icmp eq i32 %433, 64
  br i1 %434, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %435 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %435(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.343, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %436 = getelementptr inbounds i64, i64* %75, i64 2
  %437 = load i64, i64* %436, align 8, !tbaa !3860
  %438 = trunc i64 %437 to i32
  %439 = icmp eq i32 %438, 7
  br i1 %439, label %assert_end140, label %assert_fail139, !prof !5

assert_fail139:                                   ; preds = %assert_end138
  %440 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %440(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.344, i64 0, i64 0))
  ret i32 -1

assert_end140:                                    ; preds = %assert_end138
  %441 = getelementptr inbounds i64, i64* %75, i64 3
  %442 = load i64, i64* %441, align 8, !tbaa !3863
  %443 = trunc i64 %442 to i32
  %444 = icmp eq i32 %443, 7
  br i1 %444, label %assert_end142, label %assert_fail141, !prof !5

assert_fail141:                                   ; preds = %assert_end140
  %445 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %445(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.345, i64 0, i64 0))
  ret i32 -1

assert_end142:                                    ; preds = %assert_end140
  %446 = getelementptr inbounds i64, i64* %75, i64 4
  %447 = load i64, i64* %446, align 8, !tbaa !3865
  %448 = trunc i64 %447 to i32
  %449 = icmp eq i32 %448, 32
  br i1 %449, label %assert_end144, label %assert_fail143, !prof !5

assert_fail143:                                   ; preds = %assert_end142
  %450 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %450(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.120, i64 0, i64 0))
  ret i32 -1

assert_end144:                                    ; preds = %assert_end142
  %451 = icmp eq i64* %77, null
  br i1 %451, label %if_end146, label %if_then145, !prof !50

if_then145:                                       ; preds = %assert_end144
  %452 = getelementptr inbounds i64, i64* %77, i64 1
  %453 = bitcast i64* %452 to <4 x i64>*
  %454 = load <4 x i64>, <4 x i64>* %453, align 8, !tbaa !3869
  %455 = trunc <4 x i64> %454 to <4 x i32>
  %456 = icmp eq <4 x i32> %455, <i32 1568, i32 224, i32 32, i32 1>
  %457 = load i64, i64* %77, align 8, !tbaa !3880
  %458 = trunc i64 %457 to i32
  %459 = icmp eq i32 %458, 100352
  %rdx.shuf = shufflevector <4 x i1> %456, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %456, %rdx.shuf
  %rdx.shuf155 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx156 = and <4 x i1> %bin.rdx, %rdx.shuf155
  %460 = extractelement <4 x i1> %bin.rdx156, i32 0
  %461 = and i1 %460, %459
  br i1 %461, label %if_end146, label %assert_fail147, !prof !5

if_end146:                                        ; preds = %assert_end144, %if_then145
  %462 = getelementptr inbounds %1, %1* %34, i64 0, i32 6
  %463 = load i64, i64* %462, align 8
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %assert_end150, label %assert_fail149, !prof !5

assert_fail147:                                   ; preds = %if_then145
  %465 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %465(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.346, i64 0, i64 0))
  ret i32 -1

assert_fail149:                                   ; preds = %if_end146
  %466 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %466(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end150:                                    ; preds = %if_end146
  %467 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 0
  %468 = load i32, i32* %467, align 4
  %469 = icmp eq i32 %468, 1
  br i1 %469, label %assert_end152, label %assert_fail151, !prof !5

assert_fail151:                                   ; preds = %assert_end150
  %470 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %470(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end152:                                    ; preds = %assert_end150
  %471 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 1
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %47, %472
  br i1 %473, label %assert_end154, label %assert_fail153, !prof !5

assert_fail153:                                   ; preds = %assert_end152
  %474 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %474(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end154:                                    ; preds = %assert_end152
  %475 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3_compute_(i8* %39, i8* %49, i8* %73, i8* %55, i8* %61, i8* %67)
  ret i32 %475
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_3_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %6 = alloca %25, align 8
  %7 = getelementptr inbounds %25, %25* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %25, %25* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %25, %25* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %25, %25* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %25, %25* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %25, %25* %6, i64 0, i32 5
  store i8* %5, i8** %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %25* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.347, i8* nonnull %14, i32 0)
  ret i32 %15
}

; Function Attrs: nounwind
define private i32 @__tvm_parallel_lambda.347(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 447
  %23 = sdiv i32 %22, %21
  %24 = mul nsw i32 %23, %0
  %25 = icmp slt i32 %24, 448
  %26 = select i1 %25, i32 %24, i32 448
  %27 = add nsw i32 %0, 1
  %28 = mul nsw i32 %23, %27
  %29 = icmp slt i32 %28, 448
  %30 = select i1 %29, i32 %28, i32 448
  %31 = icmp slt i32 %26, %30
  br i1 %31, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %32 = add i32 %26, 1
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, -1
  %35 = sext i32 %30 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_begin7.preheader
  %indvars.iv45 = phi i64 [ %34, %for_body.lr.ph ], [ %indvars.iv.next46, %for_begin7.preheader ]
  %36 = trunc i64 %indvars.iv45 to i32
  %37 = srem i32 %36, 7
  %38 = mul nsw i32 %37, 28
  %39 = sdiv i32 %36, 7
  %40 = shl i32 %39, 14
  %41 = sext i32 %38 to i64
  %42 = sext i32 %40 to i64
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_begin7.preheader, %entry
  ret i32 0

for_begin7.preheader:                             ; preds = %for_begin4.preheader
  %43 = mul nsw i64 %indvars.iv45, 224
  %44 = shl nsw i32 %39, 5
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %13, i64 %45
  %47 = bitcast float* %46 to <32 x float>*
  %48 = load <32 x float>, <32 x float>* %47, align 64, !tbaa !3884
  %49 = getelementptr inbounds float, float* %16, i64 %45
  %50 = bitcast float* %49 to <32 x float>*
  %51 = load <32 x float>, <32 x float>* %50, align 64, !tbaa !3887
  %52 = getelementptr inbounds float, float* %19, i64 %45
  %53 = bitcast float* %52 to <32 x float>*
  %54 = load <32 x float>, <32 x float>* %53, align 64, !tbaa !3890
  %55 = fadd <32 x float> %239, %48
  %56 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %55, <32 x float> %51, <32 x float> %54)
  %57 = getelementptr inbounds float, float* %10, i64 %43
  %58 = bitcast float* %57 to <32 x float>*
  store <32 x float> %56, <32 x float>* %58, align 64, !tbaa !3893
  %59 = add nsw i64 %43, 32
  %60 = fadd <32 x float> %245, %48
  %61 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %60, <32 x float> %51, <32 x float> %54)
  %62 = getelementptr inbounds float, float* %10, i64 %59
  %63 = bitcast float* %62 to <32 x float>*
  store <32 x float> %61, <32 x float>* %63, align 64, !tbaa !3893
  %64 = add nsw i64 %43, 64
  %65 = fadd <32 x float> %251, %48
  %66 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %65, <32 x float> %51, <32 x float> %54)
  %67 = getelementptr inbounds float, float* %10, i64 %64
  %68 = bitcast float* %67 to <32 x float>*
  store <32 x float> %66, <32 x float>* %68, align 64, !tbaa !3893
  %69 = add nsw i64 %43, 96
  %70 = fadd <32 x float> %257, %48
  %71 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %70, <32 x float> %51, <32 x float> %54)
  %72 = getelementptr inbounds float, float* %10, i64 %69
  %73 = bitcast float* %72 to <32 x float>*
  store <32 x float> %71, <32 x float>* %73, align 64, !tbaa !3893
  %74 = add nsw i64 %43, 128
  %75 = fadd <32 x float> %263, %48
  %76 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %75, <32 x float> %51, <32 x float> %54)
  %77 = getelementptr inbounds float, float* %10, i64 %74
  %78 = bitcast float* %77 to <32 x float>*
  store <32 x float> %76, <32 x float>* %78, align 64, !tbaa !3893
  %79 = add nsw i64 %43, 160
  %80 = fadd <32 x float> %269, %48
  %81 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %80, <32 x float> %51, <32 x float> %54)
  %82 = getelementptr inbounds float, float* %10, i64 %79
  %83 = bitcast float* %82 to <32 x float>*
  store <32 x float> %81, <32 x float>* %83, align 64, !tbaa !3893
  %84 = add nsw i64 %43, 192
  %85 = fadd <32 x float> %275, %48
  %86 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %85, <32 x float> %51, <32 x float> %54)
  %87 = getelementptr inbounds float, float* %10, i64 %84
  %88 = bitcast float* %87 to <32 x float>*
  store <32 x float> %86, <32 x float>* %88, align 64, !tbaa !3893
  %indvars.iv.next46 = add nsw i64 %indvars.iv45, 1
  %89 = icmp slt i64 %indvars.iv.next46, %35
  br i1 %89, label %for_body, label %for_end, !prof !5

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_begin4.preheader ]
  %.lcssa2235 = phi <32 x float> [ zeroinitializer, %for_body ], [ %275, %for_begin4.preheader ]
  %.lcssa2033 = phi <32 x float> [ zeroinitializer, %for_body ], [ %269, %for_begin4.preheader ]
  %.lcssa1831 = phi <32 x float> [ zeroinitializer, %for_body ], [ %263, %for_begin4.preheader ]
  %.lcssa1629 = phi <32 x float> [ zeroinitializer, %for_body ], [ %257, %for_begin4.preheader ]
  %.lcssa1427 = phi <32 x float> [ zeroinitializer, %for_body ], [ %251, %for_begin4.preheader ]
  %.lcssa1226 = phi <32 x float> [ zeroinitializer, %for_body ], [ %245, %for_begin4.preheader ]
  %.lcssa24 = phi <32 x float> [ zeroinitializer, %for_body ], [ %239, %for_begin4.preheader ]
  %90 = mul nuw nsw i64 %indvars.iv, 196
  %91 = add nsw i64 %90, %41
  %92 = shl i64 %indvars.iv, 7
  %93 = add nuw nsw i64 %92, %42
  %94 = getelementptr inbounds float, float* %4, i64 %91
  %95 = load float, float* %94, align 4, !tbaa !3896
  %96 = insertelement <32 x float> undef, float %95, i32 0
  %97 = shufflevector <32 x float> %96, <32 x float> undef, <32 x i32> zeroinitializer
  %98 = getelementptr inbounds float, float* %7, i64 %93
  %99 = bitcast float* %98 to <32 x float>*
  %100 = load <32 x float>, <32 x float>* %99, align 64, !tbaa !3899
  %101 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %97, <32 x float> %100, <32 x float> %.lcssa24)
  %102 = add nsw i64 %91, 4
  %103 = getelementptr inbounds float, float* %4, i64 %102
  %104 = load float, float* %103, align 4, !tbaa !3896
  %105 = insertelement <32 x float> undef, float %104, i32 0
  %106 = shufflevector <32 x float> %105, <32 x float> undef, <32 x i32> zeroinitializer
  %107 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %106, <32 x float> %100, <32 x float> %.lcssa1226)
  %108 = add nsw i64 %91, 8
  %109 = getelementptr inbounds float, float* %4, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !3896
  %111 = insertelement <32 x float> undef, float %110, i32 0
  %112 = shufflevector <32 x float> %111, <32 x float> undef, <32 x i32> zeroinitializer
  %113 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %112, <32 x float> %100, <32 x float> %.lcssa1427)
  %114 = add nsw i64 %91, 12
  %115 = getelementptr inbounds float, float* %4, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !3896
  %117 = insertelement <32 x float> undef, float %116, i32 0
  %118 = shufflevector <32 x float> %117, <32 x float> undef, <32 x i32> zeroinitializer
  %119 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %118, <32 x float> %100, <32 x float> %.lcssa1629)
  %120 = add nsw i64 %91, 16
  %121 = getelementptr inbounds float, float* %4, i64 %120
  %122 = load float, float* %121, align 4, !tbaa !3896
  %123 = insertelement <32 x float> undef, float %122, i32 0
  %124 = shufflevector <32 x float> %123, <32 x float> undef, <32 x i32> zeroinitializer
  %125 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %124, <32 x float> %100, <32 x float> %.lcssa1831)
  %126 = add nsw i64 %91, 20
  %127 = getelementptr inbounds float, float* %4, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !3896
  %129 = insertelement <32 x float> undef, float %128, i32 0
  %130 = shufflevector <32 x float> %129, <32 x float> undef, <32 x i32> zeroinitializer
  %131 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %130, <32 x float> %100, <32 x float> %.lcssa2033)
  %132 = add nsw i64 %91, 24
  %133 = getelementptr inbounds float, float* %4, i64 %132
  %134 = load float, float* %133, align 4, !tbaa !3896
  %135 = insertelement <32 x float> undef, float %134, i32 0
  %136 = shufflevector <32 x float> %135, <32 x float> undef, <32 x i32> zeroinitializer
  %137 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %136, <32 x float> %100, <32 x float> %.lcssa2235)
  %138 = or i64 %91, 1
  %139 = getelementptr inbounds float, float* %4, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !3896
  %141 = insertelement <32 x float> undef, float %140, i32 0
  %142 = shufflevector <32 x float> %141, <32 x float> undef, <32 x i32> zeroinitializer
  %143 = or i64 %93, 32
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = bitcast float* %144 to <32 x float>*
  %146 = load <32 x float>, <32 x float>* %145, align 64, !tbaa !3899
  %147 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %142, <32 x float> %146, <32 x float> %101)
  %148 = add nsw i64 %138, 4
  %149 = getelementptr inbounds float, float* %4, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !3896
  %151 = insertelement <32 x float> undef, float %150, i32 0
  %152 = shufflevector <32 x float> %151, <32 x float> undef, <32 x i32> zeroinitializer
  %153 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %152, <32 x float> %146, <32 x float> %107)
  %154 = add nsw i64 %138, 8
  %155 = getelementptr inbounds float, float* %4, i64 %154
  %156 = load float, float* %155, align 4, !tbaa !3896
  %157 = insertelement <32 x float> undef, float %156, i32 0
  %158 = shufflevector <32 x float> %157, <32 x float> undef, <32 x i32> zeroinitializer
  %159 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %158, <32 x float> %146, <32 x float> %113)
  %160 = add nsw i64 %138, 12
  %161 = getelementptr inbounds float, float* %4, i64 %160
  %162 = load float, float* %161, align 4, !tbaa !3896
  %163 = insertelement <32 x float> undef, float %162, i32 0
  %164 = shufflevector <32 x float> %163, <32 x float> undef, <32 x i32> zeroinitializer
  %165 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %164, <32 x float> %146, <32 x float> %119)
  %166 = add nsw i64 %138, 16
  %167 = getelementptr inbounds float, float* %4, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !3896
  %169 = insertelement <32 x float> undef, float %168, i32 0
  %170 = shufflevector <32 x float> %169, <32 x float> undef, <32 x i32> zeroinitializer
  %171 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %170, <32 x float> %146, <32 x float> %125)
  %172 = add nsw i64 %138, 20
  %173 = getelementptr inbounds float, float* %4, i64 %172
  %174 = load float, float* %173, align 4, !tbaa !3896
  %175 = insertelement <32 x float> undef, float %174, i32 0
  %176 = shufflevector <32 x float> %175, <32 x float> undef, <32 x i32> zeroinitializer
  %177 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %176, <32 x float> %146, <32 x float> %131)
  %178 = add nsw i64 %138, 24
  %179 = getelementptr inbounds float, float* %4, i64 %178
  %180 = load float, float* %179, align 4, !tbaa !3896
  %181 = insertelement <32 x float> undef, float %180, i32 0
  %182 = shufflevector <32 x float> %181, <32 x float> undef, <32 x i32> zeroinitializer
  %183 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %182, <32 x float> %146, <32 x float> %137)
  %184 = or i64 %91, 2
  %185 = getelementptr inbounds float, float* %4, i64 %184
  %186 = load float, float* %185, align 4, !tbaa !3896
  %187 = insertelement <32 x float> undef, float %186, i32 0
  %188 = shufflevector <32 x float> %187, <32 x float> undef, <32 x i32> zeroinitializer
  %189 = or i64 %93, 64
  %190 = getelementptr inbounds float, float* %7, i64 %189
  %191 = bitcast float* %190 to <32 x float>*
  %192 = load <32 x float>, <32 x float>* %191, align 64, !tbaa !3899
  %193 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %188, <32 x float> %192, <32 x float> %147)
  %194 = add nsw i64 %184, 4
  %195 = getelementptr inbounds float, float* %4, i64 %194
  %196 = load float, float* %195, align 4, !tbaa !3896
  %197 = insertelement <32 x float> undef, float %196, i32 0
  %198 = shufflevector <32 x float> %197, <32 x float> undef, <32 x i32> zeroinitializer
  %199 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %198, <32 x float> %192, <32 x float> %153)
  %200 = add nsw i64 %184, 8
  %201 = getelementptr inbounds float, float* %4, i64 %200
  %202 = load float, float* %201, align 4, !tbaa !3896
  %203 = insertelement <32 x float> undef, float %202, i32 0
  %204 = shufflevector <32 x float> %203, <32 x float> undef, <32 x i32> zeroinitializer
  %205 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %204, <32 x float> %192, <32 x float> %159)
  %206 = add nsw i64 %184, 12
  %207 = getelementptr inbounds float, float* %4, i64 %206
  %208 = load float, float* %207, align 4, !tbaa !3896
  %209 = insertelement <32 x float> undef, float %208, i32 0
  %210 = shufflevector <32 x float> %209, <32 x float> undef, <32 x i32> zeroinitializer
  %211 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %210, <32 x float> %192, <32 x float> %165)
  %212 = add nsw i64 %184, 16
  %213 = getelementptr inbounds float, float* %4, i64 %212
  %214 = load float, float* %213, align 4, !tbaa !3896
  %215 = insertelement <32 x float> undef, float %214, i32 0
  %216 = shufflevector <32 x float> %215, <32 x float> undef, <32 x i32> zeroinitializer
  %217 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %216, <32 x float> %192, <32 x float> %171)
  %218 = add nsw i64 %184, 20
  %219 = getelementptr inbounds float, float* %4, i64 %218
  %220 = load float, float* %219, align 4, !tbaa !3896
  %221 = insertelement <32 x float> undef, float %220, i32 0
  %222 = shufflevector <32 x float> %221, <32 x float> undef, <32 x i32> zeroinitializer
  %223 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %222, <32 x float> %192, <32 x float> %177)
  %224 = add nsw i64 %184, 24
  %225 = getelementptr inbounds float, float* %4, i64 %224
  %226 = load float, float* %225, align 4, !tbaa !3896
  %227 = insertelement <32 x float> undef, float %226, i32 0
  %228 = shufflevector <32 x float> %227, <32 x float> undef, <32 x i32> zeroinitializer
  %229 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %228, <32 x float> %192, <32 x float> %183)
  %230 = or i64 %91, 3
  %231 = getelementptr inbounds float, float* %4, i64 %230
  %232 = load float, float* %231, align 4, !tbaa !3896
  %233 = insertelement <32 x float> undef, float %232, i32 0
  %234 = shufflevector <32 x float> %233, <32 x float> undef, <32 x i32> zeroinitializer
  %235 = or i64 %93, 96
  %236 = getelementptr inbounds float, float* %7, i64 %235
  %237 = bitcast float* %236 to <32 x float>*
  %238 = load <32 x float>, <32 x float>* %237, align 64, !tbaa !3899
  %239 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %234, <32 x float> %238, <32 x float> %193)
  %240 = add nsw i64 %230, 4
  %241 = getelementptr inbounds float, float* %4, i64 %240
  %242 = load float, float* %241, align 4, !tbaa !3896
  %243 = insertelement <32 x float> undef, float %242, i32 0
  %244 = shufflevector <32 x float> %243, <32 x float> undef, <32 x i32> zeroinitializer
  %245 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %244, <32 x float> %238, <32 x float> %199)
  %246 = add nsw i64 %230, 8
  %247 = getelementptr inbounds float, float* %4, i64 %246
  %248 = load float, float* %247, align 4, !tbaa !3896
  %249 = insertelement <32 x float> undef, float %248, i32 0
  %250 = shufflevector <32 x float> %249, <32 x float> undef, <32 x i32> zeroinitializer
  %251 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %250, <32 x float> %238, <32 x float> %205)
  %252 = add nsw i64 %230, 12
  %253 = getelementptr inbounds float, float* %4, i64 %252
  %254 = load float, float* %253, align 4, !tbaa !3896
  %255 = insertelement <32 x float> undef, float %254, i32 0
  %256 = shufflevector <32 x float> %255, <32 x float> undef, <32 x i32> zeroinitializer
  %257 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %256, <32 x float> %238, <32 x float> %211)
  %258 = add nsw i64 %230, 16
  %259 = getelementptr inbounds float, float* %4, i64 %258
  %260 = load float, float* %259, align 4, !tbaa !3896
  %261 = insertelement <32 x float> undef, float %260, i32 0
  %262 = shufflevector <32 x float> %261, <32 x float> undef, <32 x i32> zeroinitializer
  %263 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %262, <32 x float> %238, <32 x float> %217)
  %264 = add nsw i64 %230, 20
  %265 = getelementptr inbounds float, float* %4, i64 %264
  %266 = load float, float* %265, align 4, !tbaa !3896
  %267 = insertelement <32 x float> undef, float %266, i32 0
  %268 = shufflevector <32 x float> %267, <32 x float> undef, <32 x i32> zeroinitializer
  %269 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %268, <32 x float> %238, <32 x float> %223)
  %270 = add nsw i64 %230, 24
  %271 = getelementptr inbounds float, float* %4, i64 %270
  %272 = load float, float* %271, align 4, !tbaa !3896
  %273 = insertelement <32 x float> undef, float %272, i32 0
  %274 = shufflevector <32 x float> %273, <32 x float> undef, <32 x i32> zeroinitializer
  %275 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %274, <32 x float> %238, <32 x float> %229)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_begin7.preheader, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_40(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.348, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !3902
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.349, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !3916
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.350, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !3918
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !3932
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 16
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !3934
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 28
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !3937
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 28
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !3939
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !3943
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 25088, i32 896, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !3954
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 401408
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.351, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !3958
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !3972
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 8
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !3974
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 28
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.272, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !3977
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 28
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.273, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !3979
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 64
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.291, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !3983
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 50176, i32 1792, i32 64, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !3994
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 401408
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.352, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_40_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_40_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %26, align 8
  %3 = getelementptr inbounds %26, %26* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %26, %26* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %26* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.353, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.353(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 223
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 224
  %14 = select i1 %13, i32 %12, i32 224
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 224
  %18 = select i1 %17, i32 %16, i32 224
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 1792
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = sdiv i32 %25, 28
  %27 = mul nsw i32 %26, 50176
  %28 = insertelement <16 x i32> undef, i32 %27, i32 0
  %29 = srem i32 %25, 28
  %30 = mul nsw i32 %29, 896
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %28
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %33 = shl i64 %indvars.iv7, 6
  %34 = add nsw i64 %33, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %35 = shl i32 %indvars.iv7.tr, 5
  %36 = insertelement <16 x i32> undef, i32 %35, i32 0
  %37 = add <16 x i32> %32, %36
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %39 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %39, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %40 = shl nsw i64 %indvars.iv, 4
  %41 = add nsw i64 %34, %40
  %42 = trunc i64 %40 to i32
  %43 = insertelement <16 x i32> undef, i32 %42, i32 0
  %44 = trunc i64 %40 to i32
  %45 = or i32 %44, 1
  %46 = insertelement <16 x i32> %43, i32 %45, i32 1
  %47 = trunc i64 %40 to i32
  %48 = or i32 %47, 2
  %49 = insertelement <16 x i32> %46, i32 %48, i32 2
  %50 = trunc i64 %40 to i32
  %51 = or i32 %50, 3
  %52 = insertelement <16 x i32> %49, i32 %51, i32 3
  %53 = trunc i64 %40 to i32
  %54 = or i32 %53, 4
  %55 = insertelement <16 x i32> %52, i32 %54, i32 4
  %56 = trunc i64 %40 to i32
  %57 = or i32 %56, 5
  %58 = insertelement <16 x i32> %55, i32 %57, i32 5
  %59 = trunc i64 %40 to i32
  %60 = or i32 %59, 6
  %61 = insertelement <16 x i32> %58, i32 %60, i32 6
  %62 = trunc i64 %40 to i32
  %63 = or i32 %62, 7
  %64 = insertelement <16 x i32> %61, i32 %63, i32 7
  %65 = trunc i64 %40 to i32
  %66 = or i32 %65, 8
  %67 = insertelement <16 x i32> %64, i32 %66, i32 8
  %68 = trunc i64 %40 to i32
  %69 = or i32 %68, 9
  %70 = insertelement <16 x i32> %67, i32 %69, i32 9
  %71 = trunc i64 %40 to i32
  %72 = or i32 %71, 10
  %73 = insertelement <16 x i32> %70, i32 %72, i32 10
  %74 = trunc i64 %40 to i32
  %75 = or i32 %74, 11
  %76 = insertelement <16 x i32> %73, i32 %75, i32 11
  %77 = trunc i64 %40 to i32
  %78 = or i32 %77, 12
  %79 = insertelement <16 x i32> %76, i32 %78, i32 12
  %80 = trunc i64 %40 to i32
  %81 = or i32 %80, 13
  %82 = insertelement <16 x i32> %79, i32 %81, i32 13
  %83 = trunc i64 %40 to i32
  %84 = or i32 %83, 14
  %85 = insertelement <16 x i32> %82, i32 %84, i32 14
  %86 = trunc i64 %40 to i32
  %87 = or i32 %86, 15
  %88 = insertelement <16 x i32> %85, i32 %87, i32 15
  %89 = sdiv <16 x i32> %88, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %90 = mul <16 x i32> %89, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %91 = sub <16 x i32> %88, %90
  %92 = icmp sgt <16 x i32> %91, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %92, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %93 = sext <16 x i1> %not. to <16 x i32>
  %94 = add nsw <16 x i32> %89, %93
  %95 = mul nsw <16 x i32> %94, <i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088, i32 25088>
  %96 = add nsw <16 x i32> %91, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %97 = select <16 x i1> %92, <16 x i32> %91, <16 x i32> %96
  %98 = add <16 x i32> %38, %97
  %99 = add <16 x i32> %98, %95
  %100 = extractelement <16 x i32> %99, i64 0
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !3998
  %104 = insertelement <16 x float> undef, float %103, i32 0
  %105 = extractelement <16 x i32> %99, i64 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !3998
  %109 = insertelement <16 x float> %104, float %108, i32 1
  %110 = extractelement <16 x i32> %99, i64 2
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !3998
  %114 = insertelement <16 x float> %109, float %113, i32 2
  %115 = extractelement <16 x i32> %99, i64 3
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !3998
  %119 = insertelement <16 x float> %114, float %118, i32 3
  %120 = extractelement <16 x i32> %99, i64 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !3998
  %124 = insertelement <16 x float> %119, float %123, i32 4
  %125 = extractelement <16 x i32> %99, i64 5
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !3998
  %129 = insertelement <16 x float> %124, float %128, i32 5
  %130 = extractelement <16 x i32> %99, i64 6
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !3998
  %134 = insertelement <16 x float> %129, float %133, i32 6
  %135 = extractelement <16 x i32> %99, i64 7
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !3998
  %139 = insertelement <16 x float> %134, float %138, i32 7
  %140 = extractelement <16 x i32> %99, i64 8
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !3998
  %144 = insertelement <16 x float> %139, float %143, i32 8
  %145 = extractelement <16 x i32> %99, i64 9
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !3998
  %149 = insertelement <16 x float> %144, float %148, i32 9
  %150 = extractelement <16 x i32> %99, i64 10
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !3998
  %154 = insertelement <16 x float> %149, float %153, i32 10
  %155 = extractelement <16 x i32> %99, i64 11
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !3998
  %159 = insertelement <16 x float> %154, float %158, i32 11
  %160 = extractelement <16 x i32> %99, i64 12
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !3998
  %164 = insertelement <16 x float> %159, float %163, i32 12
  %165 = extractelement <16 x i32> %99, i64 13
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !3998
  %169 = insertelement <16 x float> %164, float %168, i32 13
  %170 = extractelement <16 x i32> %99, i64 14
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !3998
  %174 = insertelement <16 x float> %169, float %173, i32 14
  %175 = extractelement <16 x i32> %99, i64 15
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, float* %7, i64 %176
  %178 = load float, float* %177, align 4, !tbaa !3998
  %179 = insertelement <16 x float> %174, float %178, i32 15
  %180 = getelementptr inbounds float, float* %4, i64 %41
  %181 = bitcast float* %180 to <16 x float>*
  store <16 x float> %179, <16 x float>* %181, align 64, !tbaa !4001
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 28
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_47(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.354, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4004
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.355, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !4018
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.356, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !4020
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !4034
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 16
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !4036
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 7
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.178, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !4039
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 7
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !4041
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !4045
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 1568, i32 224, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !4056
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 25088
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.357, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !4060
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !4074
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 128
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.335, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !4076
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 7
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.358, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !4079
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 7
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.359, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !4081
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 4
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !4085
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 196, i32 28, i32 4, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !4096
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 25088
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([234 x i8], [234 x i8]* @.str.360, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_47_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_47_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %27, align 8
  %3 = getelementptr inbounds %27, %27* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %27, %27* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %27* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.361, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.361(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 895
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 896
  %14 = select i1 %13, i32 %12, i32 896
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 896
  %18 = select i1 %17, i32 %16, i32 896
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_begin1.preheader ]
  %24 = mul nsw i64 %indvars.iv, 28
  %25 = trunc i64 %indvars.iv to i32
  %26 = sdiv i32 %25, 7
  %27 = shl nsw i32 %26, 2
  %28 = insertelement <4 x i32> undef, i32 %27, i32 0
  %29 = or i32 %27, 1
  %30 = insertelement <4 x i32> %28, i32 %29, i32 1
  %31 = or i32 %27, 2
  %32 = insertelement <4 x i32> %30, i32 %31, i32 2
  %33 = or i32 %27, 3
  %34 = insertelement <4 x i32> %32, i32 %33, i32 3
  %35 = sdiv <4 x i32> %34, <i32 32, i32 32, i32 32, i32 32>
  %36 = mul <4 x i32> %35, <i32 32, i32 32, i32 32, i32 32>
  %37 = sub <4 x i32> %34, %36
  %38 = icmp sgt <4 x i32> %37, <i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <4 x i1> %38, <i1 true, i1 true, i1 true, i1 true>
  %39 = sext <4 x i1> %not. to <4 x i32>
  %40 = add nsw <4 x i32> %35, %39
  %41 = mul nsw <4 x i32> %40, <i32 1568, i32 1568, i32 1568, i32 1568>
  %42 = srem i32 %25, 7
  %43 = mul nsw i32 %42, 224
  %44 = insertelement <4 x i32> undef, i32 %43, i32 0
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> zeroinitializer
  %46 = add nsw <4 x i32> %37, <i32 32, i32 32, i32 32, i32 32>
  %47 = select <4 x i1> %38, <4 x i32> %37, <4 x i32> %46
  %48 = add <4 x i32> %47, %45
  %49 = add <4 x i32> %48, %41
  %50 = extractelement <4 x i32> %49, i64 0
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !4100
  %54 = insertelement <4 x float> undef, float %53, i32 0
  %55 = extractelement <4 x i32> %49, i64 1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %7, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !4100
  %59 = insertelement <4 x float> %54, float %58, i32 1
  %60 = extractelement <4 x i32> %49, i64 2
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !4100
  %64 = insertelement <4 x float> %59, float %63, i32 2
  %65 = extractelement <4 x i32> %49, i64 3
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %7, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !4100
  %69 = insertelement <4 x float> %64, float %68, i32 3
  %70 = getelementptr inbounds float, float* %4, i64 %24
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %69, <4 x float>* %71, align 16, !tbaa !4103
  %72 = add nsw i64 %24, 4
  %73 = add <4 x i32> %49, <i32 32, i32 32, i32 32, i32 32>
  %74 = extractelement <4 x i32> %73, i64 0
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %7, i64 %75
  %77 = load float, float* %76, align 4, !tbaa !4100
  %78 = insertelement <4 x float> undef, float %77, i32 0
  %79 = extractelement <4 x i32> %73, i64 1
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds float, float* %7, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !4100
  %83 = insertelement <4 x float> %78, float %82, i32 1
  %84 = extractelement <4 x i32> %73, i64 2
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds float, float* %7, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !4100
  %88 = insertelement <4 x float> %83, float %87, i32 2
  %89 = extractelement <4 x i32> %73, i64 3
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float* %7, i64 %90
  %92 = load float, float* %91, align 4, !tbaa !4100
  %93 = insertelement <4 x float> %88, float %92, i32 3
  %94 = getelementptr inbounds float, float* %4, i64 %72
  %95 = bitcast float* %94 to <4 x float>*
  store <4 x float> %93, <4 x float>* %95, align 16, !tbaa !4103
  %96 = add nsw i64 %24, 8
  %97 = add <4 x i32> %49, <i32 64, i32 64, i32 64, i32 64>
  %98 = extractelement <4 x i32> %97, i64 0
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float* %7, i64 %99
  %101 = load float, float* %100, align 4, !tbaa !4100
  %102 = insertelement <4 x float> undef, float %101, i32 0
  %103 = extractelement <4 x i32> %97, i64 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds float, float* %7, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !4100
  %107 = insertelement <4 x float> %102, float %106, i32 1
  %108 = extractelement <4 x i32> %97, i64 2
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %7, i64 %109
  %111 = load float, float* %110, align 4, !tbaa !4100
  %112 = insertelement <4 x float> %107, float %111, i32 2
  %113 = extractelement <4 x i32> %97, i64 3
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds float, float* %7, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !4100
  %117 = insertelement <4 x float> %112, float %116, i32 3
  %118 = getelementptr inbounds float, float* %4, i64 %96
  %119 = bitcast float* %118 to <4 x float>*
  store <4 x float> %117, <4 x float>* %119, align 16, !tbaa !4103
  %120 = add nsw i64 %24, 12
  %121 = add <4 x i32> %49, <i32 96, i32 96, i32 96, i32 96>
  %122 = extractelement <4 x i32> %121, i64 0
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds float, float* %7, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !4100
  %126 = insertelement <4 x float> undef, float %125, i32 0
  %127 = extractelement <4 x i32> %121, i64 1
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %7, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !4100
  %131 = insertelement <4 x float> %126, float %130, i32 1
  %132 = extractelement <4 x i32> %121, i64 2
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %7, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !4100
  %136 = insertelement <4 x float> %131, float %135, i32 2
  %137 = extractelement <4 x i32> %121, i64 3
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds float, float* %7, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !4100
  %141 = insertelement <4 x float> %136, float %140, i32 3
  %142 = getelementptr inbounds float, float* %4, i64 %120
  %143 = bitcast float* %142 to <4 x float>*
  store <4 x float> %141, <4 x float>* %143, align 16, !tbaa !4103
  %144 = add nsw i64 %24, 16
  %145 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %146 = extractelement <4 x i32> %145, i64 0
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %7, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !4100
  %150 = insertelement <4 x float> undef, float %149, i32 0
  %151 = extractelement <4 x i32> %145, i64 1
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %7, i64 %152
  %154 = load float, float* %153, align 4, !tbaa !4100
  %155 = insertelement <4 x float> %150, float %154, i32 1
  %156 = extractelement <4 x i32> %145, i64 2
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds float, float* %7, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !4100
  %160 = insertelement <4 x float> %155, float %159, i32 2
  %161 = extractelement <4 x i32> %145, i64 3
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds float, float* %7, i64 %162
  %164 = load float, float* %163, align 4, !tbaa !4100
  %165 = insertelement <4 x float> %160, float %164, i32 3
  %166 = getelementptr inbounds float, float* %4, i64 %144
  %167 = bitcast float* %166 to <4 x float>*
  store <4 x float> %165, <4 x float>* %167, align 16, !tbaa !4103
  %168 = add nsw i64 %24, 20
  %169 = add <4 x i32> %49, <i32 160, i32 160, i32 160, i32 160>
  %170 = extractelement <4 x i32> %169, i64 0
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !4100
  %174 = insertelement <4 x float> undef, float %173, i32 0
  %175 = extractelement <4 x i32> %169, i64 1
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, float* %7, i64 %176
  %178 = load float, float* %177, align 4, !tbaa !4100
  %179 = insertelement <4 x float> %174, float %178, i32 1
  %180 = extractelement <4 x i32> %169, i64 2
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds float, float* %7, i64 %181
  %183 = load float, float* %182, align 4, !tbaa !4100
  %184 = insertelement <4 x float> %179, float %183, i32 2
  %185 = extractelement <4 x i32> %169, i64 3
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds float, float* %7, i64 %186
  %188 = load float, float* %187, align 4, !tbaa !4100
  %189 = insertelement <4 x float> %184, float %188, i32 3
  %190 = getelementptr inbounds float, float* %4, i64 %168
  %191 = bitcast float* %190 to <4 x float>*
  store <4 x float> %189, <4 x float>* %191, align 16, !tbaa !4103
  %192 = add nsw i64 %24, 24
  %193 = add <4 x i32> %49, <i32 192, i32 192, i32 192, i32 192>
  %194 = extractelement <4 x i32> %193, i64 0
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds float, float* %7, i64 %195
  %197 = load float, float* %196, align 4, !tbaa !4100
  %198 = insertelement <4 x float> undef, float %197, i32 0
  %199 = extractelement <4 x i32> %193, i64 1
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds float, float* %7, i64 %200
  %202 = load float, float* %201, align 4, !tbaa !4100
  %203 = insertelement <4 x float> %198, float %202, i32 1
  %204 = extractelement <4 x i32> %193, i64 2
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds float, float* %7, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !4100
  %208 = insertelement <4 x float> %203, float %207, i32 2
  %209 = extractelement <4 x i32> %193, i64 3
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds float, float* %7, i64 %210
  %212 = load float, float* %211, align 4, !tbaa !4100
  %213 = insertelement <4 x float> %208, float %212, i32 3
  %214 = getelementptr inbounds float, float* %4, i64 %192
  %215 = bitcast float* %214 to <4 x float>*
  store <4 x float> %213, <4 x float>* %215, align 16, !tbaa !4103
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %216 = icmp slt i64 %indvars.iv.next, %23
  br i1 %216, label %for_begin1.preheader, label %for_end, !prof !5

for_end:                                          ; preds = %for_begin1.preheader, %entry
  ret i32 0
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_7(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.362, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4106
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !4120
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !4123
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !4125
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.363, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !4129
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.364, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.365, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.366, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.367, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !4131
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !4145
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 8
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !4147
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 28
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !4150
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 28
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !4152
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 64
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !4156
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 50176, i32 1792, i32 64, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !4167
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 401408
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.271, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !4171
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 4
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.368, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !4185
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 8
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !4187
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !4190
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !4192
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 64
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.291, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !4196
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 64
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.198, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !4198
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 4096, i32 4096, i32 64, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !4209
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 4096
  %187 = load i64, i64* %47, align 8, !tbaa !4213
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 32768
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([276 x i8], [276 x i8]* @.str.369, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !4215
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !4229
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 4
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.370, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !4231
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !4234
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !4236
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 64
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.200, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !4240
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 64, i32 64, i32 64, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !4251
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 256
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.371, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !4255
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !4269
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 4
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.372, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !4271
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !4274
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !4276
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 64
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.202, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !4280
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 64, i32 64, i32 64, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !4291
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 256
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.373, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !4295
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !4309
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 4
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.374, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !4311
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 14
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.79, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !4314
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 14
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.80, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !4316
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 64
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.204, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !4320
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 12544, i32 896, i32 64, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !4331
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 50176
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.375, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_7_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_7_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = alloca %28, align 8
  %7 = getelementptr inbounds %28, %28* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %28, %28* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %28, %28* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %28, %28* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %28, %28* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %28, %28* %6, i64 0, i32 5
  store i32 %5, i32* %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %28* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.376, i8* nonnull %14, i32 0)
  ret i32 %15
}

define private i32 @__tvm_parallel_lambda.376(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 27
  %23 = sdiv i32 %22, %21
  %24 = mul nsw i32 %23, %0
  %25 = icmp slt i32 %24, 28
  %26 = select i1 %25, i32 %24, i32 28
  %27 = add nsw i32 %0, 1
  %28 = mul nsw i32 %23, %27
  %29 = icmp slt i32 %28, 28
  %30 = select i1 %29, i32 %28, i32 28
  %31 = icmp slt i32 %26, %30
  br i1 %31, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %32 = add i32 %26, 1
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, -1
  %35 = sext i32 %30 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_begin10.preheader
  %indvars.iv56 = phi i64 [ %34, %for_body.preheader ], [ %indvars.iv.next57, %for_begin10.preheader ]
  %36 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %37 = tail call i8* %36(i32 1, i32 %19, i64 7168, i32 2, i32 32)
  %38 = bitcast i8* %37 to float*
  %39 = trunc i64 %indvars.iv56 to i32
  %40 = srem i32 %39, 7
  %41 = mul nsw i32 %40, 7168
  %42 = sdiv i32 %39, 7
  %43 = shl i32 %42, 15
  %44 = sext i32 %43 to i64
  %45 = sext i32 %41 to i64
  %46 = or i64 %44, 4096
  %47 = or i64 %44, 8192
  %48 = or i64 %44, 12288
  %49 = or i64 %44, 16384
  %50 = or i64 %44, 20480
  %51 = or i64 %44, 24576
  %52 = or i64 %44, 28672
  br label %for_body2

for_end:                                          ; preds = %for_begin10.preheader, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end9.7
  %53 = mul nsw i64 %indvars.iv56, 1792
  %54 = shl nsw i32 %42, 6
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds float, float* %13, i64 %55
  %57 = bitcast float* %56 to <64 x float>*
  %58 = load <64 x float>, <64 x float>* %57, align 64, !tbaa !4335
  %59 = getelementptr inbounds float, float* %16, i64 %55
  %60 = bitcast float* %59 to <64 x float>*
  %61 = load <64 x float>, <64 x float>* %60, align 64, !tbaa !4338
  %62 = bitcast i8* %37 to <64 x float>*
  %63 = load <64 x float>, <64 x float>* %62, align 64, !tbaa !4341
  %64 = fadd <64 x float> %63, %58
  %65 = fadd <64 x float> %64, %61
  %66 = fcmp ogt <64 x float> %65, zeroinitializer
  %67 = select <64 x i1> %66, <64 x float> %65, <64 x float> zeroinitializer
  %68 = getelementptr inbounds float, float* %10, i64 %53
  %69 = bitcast float* %68 to <64 x float>*
  store <64 x float> %67, <64 x float>* %69, align 64, !tbaa !4344
  %70 = getelementptr inbounds i8, i8* %37, i64 256
  %71 = bitcast i8* %70 to <64 x float>*
  %72 = load <64 x float>, <64 x float>* %71, align 64, !tbaa !4341
  %73 = fadd <64 x float> %72, %58
  %74 = fadd <64 x float> %73, %61
  %75 = fcmp ogt <64 x float> %74, zeroinitializer
  %76 = select <64 x i1> %75, <64 x float> %74, <64 x float> zeroinitializer
  %77 = mul i64 %indvars.iv56, 7696581394432
  %sext = ashr exact i64 %77, 32
  %78 = or i64 %sext, 64
  %79 = getelementptr inbounds float, float* %10, i64 %78
  %80 = bitcast float* %79 to <64 x float>*
  store <64 x float> %76, <64 x float>* %80, align 64, !tbaa !4344
  %81 = getelementptr inbounds i8, i8* %37, i64 3584
  %82 = bitcast i8* %81 to <64 x float>*
  %83 = load <64 x float>, <64 x float>* %82, align 64, !tbaa !4341
  %84 = fadd <64 x float> %83, %58
  %85 = fadd <64 x float> %84, %61
  %86 = fcmp ogt <64 x float> %85, zeroinitializer
  %87 = select <64 x i1> %86, <64 x float> %85, <64 x float> zeroinitializer
  %88 = mul i64 %indvars.iv56, 7696581394432
  %sext71 = add i64 %88, 3848290697216
  %89 = ashr exact i64 %sext71, 32
  %90 = getelementptr inbounds float, float* %10, i64 %89
  %91 = bitcast float* %90 to <64 x float>*
  store <64 x float> %87, <64 x float>* %91, align 64, !tbaa !4344
  %92 = getelementptr inbounds i8, i8* %37, i64 3840
  %93 = bitcast i8* %92 to <64 x float>*
  %94 = load <64 x float>, <64 x float>* %93, align 64, !tbaa !4341
  %95 = fadd <64 x float> %94, %58
  %96 = fadd <64 x float> %95, %61
  %97 = fcmp ogt <64 x float> %96, zeroinitializer
  %98 = select <64 x i1> %97, <64 x float> %96, <64 x float> zeroinitializer
  %99 = mul i64 %indvars.iv56, 7696581394432
  %sext58 = add i64 %99, 4123168604160
  %100 = ashr exact i64 %sext58, 32
  %101 = getelementptr inbounds float, float* %10, i64 %100
  %102 = bitcast float* %101 to <64 x float>*
  store <64 x float> %98, <64 x float>* %102, align 64, !tbaa !4344
  %103 = getelementptr inbounds i8, i8* %37, i64 512
  %104 = bitcast i8* %103 to <64 x float>*
  %105 = load <64 x float>, <64 x float>* %104, align 64, !tbaa !4341
  %106 = fadd <64 x float> %105, %58
  %107 = fadd <64 x float> %106, %61
  %108 = fcmp ogt <64 x float> %107, zeroinitializer
  %109 = select <64 x i1> %108, <64 x float> %107, <64 x float> zeroinitializer
  %110 = mul i64 %indvars.iv56, 7696581394432
  %sext72 = ashr exact i64 %110, 32
  %111 = or i64 %sext72, 128
  %112 = getelementptr inbounds float, float* %10, i64 %111
  %113 = bitcast float* %112 to <64 x float>*
  store <64 x float> %109, <64 x float>* %113, align 64, !tbaa !4344
  %114 = getelementptr inbounds i8, i8* %37, i64 768
  %115 = bitcast i8* %114 to <64 x float>*
  %116 = load <64 x float>, <64 x float>* %115, align 64, !tbaa !4341
  %117 = fadd <64 x float> %116, %58
  %118 = fadd <64 x float> %117, %61
  %119 = fcmp ogt <64 x float> %118, zeroinitializer
  %120 = select <64 x i1> %119, <64 x float> %118, <64 x float> zeroinitializer
  %121 = mul i64 %indvars.iv56, 7696581394432
  %sext59 = ashr exact i64 %121, 32
  %122 = or i64 %sext59, 192
  %123 = getelementptr inbounds float, float* %10, i64 %122
  %124 = bitcast float* %123 to <64 x float>*
  store <64 x float> %120, <64 x float>* %124, align 64, !tbaa !4344
  %125 = getelementptr inbounds i8, i8* %37, i64 4096
  %126 = bitcast i8* %125 to <64 x float>*
  %127 = load <64 x float>, <64 x float>* %126, align 64, !tbaa !4341
  %128 = fadd <64 x float> %127, %58
  %129 = fadd <64 x float> %128, %61
  %130 = fcmp ogt <64 x float> %129, zeroinitializer
  %131 = select <64 x i1> %130, <64 x float> %129, <64 x float> zeroinitializer
  %132 = mul i64 %indvars.iv56, 7696581394432
  %sext73 = add i64 %132, 4398046511104
  %133 = ashr exact i64 %sext73, 32
  %134 = getelementptr inbounds float, float* %10, i64 %133
  %135 = bitcast float* %134 to <64 x float>*
  store <64 x float> %131, <64 x float>* %135, align 64, !tbaa !4344
  %136 = getelementptr inbounds i8, i8* %37, i64 4352
  %137 = bitcast i8* %136 to <64 x float>*
  %138 = load <64 x float>, <64 x float>* %137, align 64, !tbaa !4341
  %139 = fadd <64 x float> %138, %58
  %140 = fadd <64 x float> %139, %61
  %141 = fcmp ogt <64 x float> %140, zeroinitializer
  %142 = select <64 x i1> %141, <64 x float> %140, <64 x float> zeroinitializer
  %143 = mul i64 %indvars.iv56, 7696581394432
  %sext60 = add i64 %143, 4672924418048
  %144 = ashr exact i64 %sext60, 32
  %145 = getelementptr inbounds float, float* %10, i64 %144
  %146 = bitcast float* %145 to <64 x float>*
  store <64 x float> %142, <64 x float>* %146, align 64, !tbaa !4344
  %147 = getelementptr inbounds i8, i8* %37, i64 1024
  %148 = bitcast i8* %147 to <64 x float>*
  %149 = load <64 x float>, <64 x float>* %148, align 64, !tbaa !4341
  %150 = fadd <64 x float> %149, %58
  %151 = fadd <64 x float> %150, %61
  %152 = fcmp ogt <64 x float> %151, zeroinitializer
  %153 = select <64 x i1> %152, <64 x float> %151, <64 x float> zeroinitializer
  %154 = mul i64 %indvars.iv56, 7696581394432
  %sext74 = add i64 %154, 1099511627776
  %155 = ashr exact i64 %sext74, 32
  %156 = getelementptr inbounds float, float* %10, i64 %155
  %157 = bitcast float* %156 to <64 x float>*
  store <64 x float> %153, <64 x float>* %157, align 64, !tbaa !4344
  %158 = getelementptr inbounds i8, i8* %37, i64 1280
  %159 = bitcast i8* %158 to <64 x float>*
  %160 = load <64 x float>, <64 x float>* %159, align 64, !tbaa !4341
  %161 = fadd <64 x float> %160, %58
  %162 = fadd <64 x float> %161, %61
  %163 = fcmp ogt <64 x float> %162, zeroinitializer
  %164 = select <64 x i1> %163, <64 x float> %162, <64 x float> zeroinitializer
  %165 = mul i64 %indvars.iv56, 7696581394432
  %sext61 = add i64 %165, 1374389534720
  %166 = ashr exact i64 %sext61, 32
  %167 = getelementptr inbounds float, float* %10, i64 %166
  %168 = bitcast float* %167 to <64 x float>*
  store <64 x float> %164, <64 x float>* %168, align 64, !tbaa !4344
  %169 = getelementptr inbounds i8, i8* %37, i64 4608
  %170 = bitcast i8* %169 to <64 x float>*
  %171 = load <64 x float>, <64 x float>* %170, align 64, !tbaa !4341
  %172 = fadd <64 x float> %171, %58
  %173 = fadd <64 x float> %172, %61
  %174 = fcmp ogt <64 x float> %173, zeroinitializer
  %175 = select <64 x i1> %174, <64 x float> %173, <64 x float> zeroinitializer
  %176 = mul i64 %indvars.iv56, 7696581394432
  %sext75 = add i64 %176, 4947802324992
  %177 = ashr exact i64 %sext75, 32
  %178 = getelementptr inbounds float, float* %10, i64 %177
  %179 = bitcast float* %178 to <64 x float>*
  store <64 x float> %175, <64 x float>* %179, align 64, !tbaa !4344
  %180 = getelementptr inbounds i8, i8* %37, i64 4864
  %181 = bitcast i8* %180 to <64 x float>*
  %182 = load <64 x float>, <64 x float>* %181, align 64, !tbaa !4341
  %183 = fadd <64 x float> %182, %58
  %184 = fadd <64 x float> %183, %61
  %185 = fcmp ogt <64 x float> %184, zeroinitializer
  %186 = select <64 x i1> %185, <64 x float> %184, <64 x float> zeroinitializer
  %187 = mul i64 %indvars.iv56, 7696581394432
  %sext62 = add i64 %187, 5222680231936
  %188 = ashr exact i64 %sext62, 32
  %189 = getelementptr inbounds float, float* %10, i64 %188
  %190 = bitcast float* %189 to <64 x float>*
  store <64 x float> %186, <64 x float>* %190, align 64, !tbaa !4344
  %191 = getelementptr inbounds i8, i8* %37, i64 1536
  %192 = bitcast i8* %191 to <64 x float>*
  %193 = load <64 x float>, <64 x float>* %192, align 64, !tbaa !4341
  %194 = fadd <64 x float> %193, %58
  %195 = fadd <64 x float> %194, %61
  %196 = fcmp ogt <64 x float> %195, zeroinitializer
  %197 = select <64 x i1> %196, <64 x float> %195, <64 x float> zeroinitializer
  %198 = mul i64 %indvars.iv56, 7696581394432
  %sext76 = add i64 %198, 1649267441664
  %199 = ashr exact i64 %sext76, 32
  %200 = getelementptr inbounds float, float* %10, i64 %199
  %201 = bitcast float* %200 to <64 x float>*
  store <64 x float> %197, <64 x float>* %201, align 64, !tbaa !4344
  %202 = getelementptr inbounds i8, i8* %37, i64 1792
  %203 = bitcast i8* %202 to <64 x float>*
  %204 = load <64 x float>, <64 x float>* %203, align 64, !tbaa !4341
  %205 = fadd <64 x float> %204, %58
  %206 = fadd <64 x float> %205, %61
  %207 = fcmp ogt <64 x float> %206, zeroinitializer
  %208 = select <64 x i1> %207, <64 x float> %206, <64 x float> zeroinitializer
  %209 = mul i64 %indvars.iv56, 7696581394432
  %sext63 = add i64 %209, 1924145348608
  %210 = ashr exact i64 %sext63, 32
  %211 = getelementptr inbounds float, float* %10, i64 %210
  %212 = bitcast float* %211 to <64 x float>*
  store <64 x float> %208, <64 x float>* %212, align 64, !tbaa !4344
  %213 = getelementptr inbounds i8, i8* %37, i64 5120
  %214 = bitcast i8* %213 to <64 x float>*
  %215 = load <64 x float>, <64 x float>* %214, align 64, !tbaa !4341
  %216 = fadd <64 x float> %215, %58
  %217 = fadd <64 x float> %216, %61
  %218 = fcmp ogt <64 x float> %217, zeroinitializer
  %219 = select <64 x i1> %218, <64 x float> %217, <64 x float> zeroinitializer
  %220 = mul i64 %indvars.iv56, 7696581394432
  %sext77 = add i64 %220, 5497558138880
  %221 = ashr exact i64 %sext77, 32
  %222 = getelementptr inbounds float, float* %10, i64 %221
  %223 = bitcast float* %222 to <64 x float>*
  store <64 x float> %219, <64 x float>* %223, align 64, !tbaa !4344
  %224 = getelementptr inbounds i8, i8* %37, i64 5376
  %225 = bitcast i8* %224 to <64 x float>*
  %226 = load <64 x float>, <64 x float>* %225, align 64, !tbaa !4341
  %227 = fadd <64 x float> %226, %58
  %228 = fadd <64 x float> %227, %61
  %229 = fcmp ogt <64 x float> %228, zeroinitializer
  %230 = select <64 x i1> %229, <64 x float> %228, <64 x float> zeroinitializer
  %231 = mul i64 %indvars.iv56, 7696581394432
  %sext64 = add i64 %231, 5772436045824
  %232 = ashr exact i64 %sext64, 32
  %233 = getelementptr inbounds float, float* %10, i64 %232
  %234 = bitcast float* %233 to <64 x float>*
  store <64 x float> %230, <64 x float>* %234, align 64, !tbaa !4344
  %235 = getelementptr inbounds i8, i8* %37, i64 2048
  %236 = bitcast i8* %235 to <64 x float>*
  %237 = load <64 x float>, <64 x float>* %236, align 64, !tbaa !4341
  %238 = fadd <64 x float> %237, %58
  %239 = fadd <64 x float> %238, %61
  %240 = fcmp ogt <64 x float> %239, zeroinitializer
  %241 = select <64 x i1> %240, <64 x float> %239, <64 x float> zeroinitializer
  %242 = mul i64 %indvars.iv56, 7696581394432
  %sext78 = add i64 %242, 2199023255552
  %243 = ashr exact i64 %sext78, 32
  %244 = getelementptr inbounds float, float* %10, i64 %243
  %245 = bitcast float* %244 to <64 x float>*
  store <64 x float> %241, <64 x float>* %245, align 64, !tbaa !4344
  %246 = getelementptr inbounds i8, i8* %37, i64 2304
  %247 = bitcast i8* %246 to <64 x float>*
  %248 = load <64 x float>, <64 x float>* %247, align 64, !tbaa !4341
  %249 = fadd <64 x float> %248, %58
  %250 = fadd <64 x float> %249, %61
  %251 = fcmp ogt <64 x float> %250, zeroinitializer
  %252 = select <64 x i1> %251, <64 x float> %250, <64 x float> zeroinitializer
  %253 = mul i64 %indvars.iv56, 7696581394432
  %sext65 = add i64 %253, 2473901162496
  %254 = ashr exact i64 %sext65, 32
  %255 = getelementptr inbounds float, float* %10, i64 %254
  %256 = bitcast float* %255 to <64 x float>*
  store <64 x float> %252, <64 x float>* %256, align 64, !tbaa !4344
  %257 = getelementptr inbounds i8, i8* %37, i64 5632
  %258 = bitcast i8* %257 to <64 x float>*
  %259 = load <64 x float>, <64 x float>* %258, align 64, !tbaa !4341
  %260 = fadd <64 x float> %259, %58
  %261 = fadd <64 x float> %260, %61
  %262 = fcmp ogt <64 x float> %261, zeroinitializer
  %263 = select <64 x i1> %262, <64 x float> %261, <64 x float> zeroinitializer
  %264 = mul i64 %indvars.iv56, 7696581394432
  %sext79 = add i64 %264, 6047313952768
  %265 = ashr exact i64 %sext79, 32
  %266 = getelementptr inbounds float, float* %10, i64 %265
  %267 = bitcast float* %266 to <64 x float>*
  store <64 x float> %263, <64 x float>* %267, align 64, !tbaa !4344
  %268 = getelementptr inbounds i8, i8* %37, i64 5888
  %269 = bitcast i8* %268 to <64 x float>*
  %270 = load <64 x float>, <64 x float>* %269, align 64, !tbaa !4341
  %271 = fadd <64 x float> %270, %58
  %272 = fadd <64 x float> %271, %61
  %273 = fcmp ogt <64 x float> %272, zeroinitializer
  %274 = select <64 x i1> %273, <64 x float> %272, <64 x float> zeroinitializer
  %275 = mul i64 %indvars.iv56, 7696581394432
  %sext66 = add i64 %275, 6322191859712
  %276 = ashr exact i64 %sext66, 32
  %277 = getelementptr inbounds float, float* %10, i64 %276
  %278 = bitcast float* %277 to <64 x float>*
  store <64 x float> %274, <64 x float>* %278, align 64, !tbaa !4344
  %279 = getelementptr inbounds i8, i8* %37, i64 2560
  %280 = bitcast i8* %279 to <64 x float>*
  %281 = load <64 x float>, <64 x float>* %280, align 64, !tbaa !4341
  %282 = fadd <64 x float> %281, %58
  %283 = fadd <64 x float> %282, %61
  %284 = fcmp ogt <64 x float> %283, zeroinitializer
  %285 = select <64 x i1> %284, <64 x float> %283, <64 x float> zeroinitializer
  %286 = mul i64 %indvars.iv56, 7696581394432
  %sext80 = add i64 %286, 2748779069440
  %287 = ashr exact i64 %sext80, 32
  %288 = getelementptr inbounds float, float* %10, i64 %287
  %289 = bitcast float* %288 to <64 x float>*
  store <64 x float> %285, <64 x float>* %289, align 64, !tbaa !4344
  %290 = getelementptr inbounds i8, i8* %37, i64 2816
  %291 = bitcast i8* %290 to <64 x float>*
  %292 = load <64 x float>, <64 x float>* %291, align 64, !tbaa !4341
  %293 = fadd <64 x float> %292, %58
  %294 = fadd <64 x float> %293, %61
  %295 = fcmp ogt <64 x float> %294, zeroinitializer
  %296 = select <64 x i1> %295, <64 x float> %294, <64 x float> zeroinitializer
  %297 = mul i64 %indvars.iv56, 7696581394432
  %sext67 = add i64 %297, 3023656976384
  %298 = ashr exact i64 %sext67, 32
  %299 = getelementptr inbounds float, float* %10, i64 %298
  %300 = bitcast float* %299 to <64 x float>*
  store <64 x float> %296, <64 x float>* %300, align 64, !tbaa !4344
  %301 = getelementptr inbounds i8, i8* %37, i64 6144
  %302 = bitcast i8* %301 to <64 x float>*
  %303 = load <64 x float>, <64 x float>* %302, align 64, !tbaa !4341
  %304 = fadd <64 x float> %303, %58
  %305 = fadd <64 x float> %304, %61
  %306 = fcmp ogt <64 x float> %305, zeroinitializer
  %307 = select <64 x i1> %306, <64 x float> %305, <64 x float> zeroinitializer
  %308 = mul i64 %indvars.iv56, 7696581394432
  %sext81 = add i64 %308, 6597069766656
  %309 = ashr exact i64 %sext81, 32
  %310 = getelementptr inbounds float, float* %10, i64 %309
  %311 = bitcast float* %310 to <64 x float>*
  store <64 x float> %307, <64 x float>* %311, align 64, !tbaa !4344
  %312 = getelementptr inbounds i8, i8* %37, i64 6400
  %313 = bitcast i8* %312 to <64 x float>*
  %314 = load <64 x float>, <64 x float>* %313, align 64, !tbaa !4341
  %315 = fadd <64 x float> %314, %58
  %316 = fadd <64 x float> %315, %61
  %317 = fcmp ogt <64 x float> %316, zeroinitializer
  %318 = select <64 x i1> %317, <64 x float> %316, <64 x float> zeroinitializer
  %319 = mul i64 %indvars.iv56, 7696581394432
  %sext68 = add i64 %319, 6871947673600
  %320 = ashr exact i64 %sext68, 32
  %321 = getelementptr inbounds float, float* %10, i64 %320
  %322 = bitcast float* %321 to <64 x float>*
  store <64 x float> %318, <64 x float>* %322, align 64, !tbaa !4344
  %323 = getelementptr inbounds i8, i8* %37, i64 3072
  %324 = bitcast i8* %323 to <64 x float>*
  %325 = load <64 x float>, <64 x float>* %324, align 64, !tbaa !4341
  %326 = fadd <64 x float> %325, %58
  %327 = fadd <64 x float> %326, %61
  %328 = fcmp ogt <64 x float> %327, zeroinitializer
  %329 = select <64 x i1> %328, <64 x float> %327, <64 x float> zeroinitializer
  %330 = mul i64 %indvars.iv56, 7696581394432
  %sext82 = add i64 %330, 3298534883328
  %331 = ashr exact i64 %sext82, 32
  %332 = getelementptr inbounds float, float* %10, i64 %331
  %333 = bitcast float* %332 to <64 x float>*
  store <64 x float> %329, <64 x float>* %333, align 64, !tbaa !4344
  %334 = getelementptr inbounds i8, i8* %37, i64 3328
  %335 = bitcast i8* %334 to <64 x float>*
  %336 = load <64 x float>, <64 x float>* %335, align 64, !tbaa !4341
  %337 = fadd <64 x float> %336, %58
  %338 = fadd <64 x float> %337, %61
  %339 = fcmp ogt <64 x float> %338, zeroinitializer
  %340 = select <64 x i1> %339, <64 x float> %338, <64 x float> zeroinitializer
  %341 = mul i64 %indvars.iv56, 7696581394432
  %sext69 = add i64 %341, 3573412790272
  %342 = ashr exact i64 %sext69, 32
  %343 = getelementptr inbounds float, float* %10, i64 %342
  %344 = bitcast float* %343 to <64 x float>*
  store <64 x float> %340, <64 x float>* %344, align 64, !tbaa !4344
  %345 = getelementptr inbounds i8, i8* %37, i64 6656
  %346 = bitcast i8* %345 to <64 x float>*
  %347 = load <64 x float>, <64 x float>* %346, align 64, !tbaa !4341
  %348 = fadd <64 x float> %347, %58
  %349 = fadd <64 x float> %348, %61
  %350 = fcmp ogt <64 x float> %349, zeroinitializer
  %351 = select <64 x i1> %350, <64 x float> %349, <64 x float> zeroinitializer
  %352 = mul i64 %indvars.iv56, 7696581394432
  %sext83 = add i64 %352, 7146825580544
  %353 = ashr exact i64 %sext83, 32
  %354 = getelementptr inbounds float, float* %10, i64 %353
  %355 = bitcast float* %354 to <64 x float>*
  store <64 x float> %351, <64 x float>* %355, align 64, !tbaa !4344
  %356 = getelementptr inbounds i8, i8* %37, i64 6912
  %357 = bitcast i8* %356 to <64 x float>*
  %358 = load <64 x float>, <64 x float>* %357, align 64, !tbaa !4341
  %359 = fadd <64 x float> %358, %58
  %360 = fadd <64 x float> %359, %61
  %361 = fcmp ogt <64 x float> %360, zeroinitializer
  %362 = select <64 x i1> %361, <64 x float> %360, <64 x float> zeroinitializer
  %363 = mul i64 %indvars.iv56, 7696581394432
  %sext70 = add i64 %363, 7421703487488
  %364 = ashr exact i64 %sext70, 32
  %365 = getelementptr inbounds float, float* %10, i64 %364
  %366 = bitcast float* %365 to <64 x float>*
  store <64 x float> %362, <64 x float>* %366, align 64, !tbaa !4344
  %367 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %368 = tail call i32 %367(i32 1, i32 %19, i8* nonnull %37)
  %indvars.iv.next57 = add nsw i64 %indvars.iv56, 1
  %369 = icmp slt i64 %indvars.iv.next57, %35
  br i1 %369, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_end9.7, %for_body
  %indvars.iv43 = phi i64 [ 0, %for_body ], [ %indvars.iv.next44, %for_end9.7 ]
  %370 = shl nsw i64 %indvars.iv43, 7
  %371 = getelementptr inbounds float, float* %38, i64 %370
  %372 = bitcast float* %371 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %372, align 64, !tbaa !4341
  %373 = or i64 %370, 64
  %374 = getelementptr inbounds float, float* %38, i64 %373
  %375 = bitcast float* %374 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %375, align 64, !tbaa !4341
  %376 = add nuw nsw i64 %370, 896
  %377 = getelementptr inbounds float, float* %38, i64 %376
  %378 = bitcast float* %377 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %378, align 64, !tbaa !4341
  %379 = add nuw nsw i64 %370, 960
  %380 = getelementptr inbounds float, float* %38, i64 %379
  %381 = bitcast float* %380 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %381, align 64, !tbaa !4341
  %382 = shl i64 %indvars.iv43, 8
  %383 = add nsw i64 %382, %45
  br label %for_body8

for_body8:                                        ; preds = %for_body8, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_body8 ]
  %384 = phi <64 x float> [ zeroinitializer, %for_body2 ], [ %416, %for_body8 ]
  %385 = phi <64 x float> [ zeroinitializer, %for_body2 ], [ %410, %for_body8 ]
  %386 = phi <64 x float> [ zeroinitializer, %for_body2 ], [ %404, %for_body8 ]
  %387 = phi <64 x float> [ zeroinitializer, %for_body2 ], [ %398, %for_body8 ]
  %388 = add nsw i64 %383, %indvars.iv
  %389 = getelementptr inbounds float, float* %4, i64 %388
  %390 = load float, float* %389, align 4, !tbaa !4347
  %391 = insertelement <64 x float> undef, float %390, i32 0
  %392 = shufflevector <64 x float> %391, <64 x float> undef, <64 x i32> zeroinitializer
  %393 = shl i64 %indvars.iv, 6
  %394 = add nuw nsw i64 %393, %44
  %395 = getelementptr inbounds float, float* %7, i64 %394
  %396 = bitcast float* %395 to <64 x float>*
  %397 = load <64 x float>, <64 x float>* %396, align 64, !tbaa !4350
  %398 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %392, <64 x float> %397, <64 x float> %387)
  %399 = add nsw i64 %388, 128
  %400 = getelementptr inbounds float, float* %4, i64 %399
  %401 = load float, float* %400, align 4, !tbaa !4347
  %402 = insertelement <64 x float> undef, float %401, i32 0
  %403 = shufflevector <64 x float> %402, <64 x float> undef, <64 x i32> zeroinitializer
  %404 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %403, <64 x float> %397, <64 x float> %386)
  %405 = add nsw i64 %388, 3584
  %406 = getelementptr inbounds float, float* %4, i64 %405
  %407 = load float, float* %406, align 4, !tbaa !4347
  %408 = insertelement <64 x float> undef, float %407, i32 0
  %409 = shufflevector <64 x float> %408, <64 x float> undef, <64 x i32> zeroinitializer
  %410 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %409, <64 x float> %397, <64 x float> %385)
  %411 = add nsw i64 %388, 3712
  %412 = getelementptr inbounds float, float* %4, i64 %411
  %413 = load float, float* %412, align 4, !tbaa !4347
  %414 = insertelement <64 x float> undef, float %413, i32 0
  %415 = shufflevector <64 x float> %414, <64 x float> undef, <64 x i32> zeroinitializer
  %416 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %415, <64 x float> %397, <64 x float> %384)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %417 = add nsw i64 %383, 50176
  br label %for_body8.1

for_body8.1:                                      ; preds = %for_body8.1, %for_end9
  %indvars.iv.1 = phi i64 [ 0, %for_end9 ], [ %indvars.iv.next.1, %for_body8.1 ]
  %418 = phi <64 x float> [ %416, %for_end9 ], [ %450, %for_body8.1 ]
  %419 = phi <64 x float> [ %410, %for_end9 ], [ %444, %for_body8.1 ]
  %420 = phi <64 x float> [ %404, %for_end9 ], [ %438, %for_body8.1 ]
  %421 = phi <64 x float> [ %398, %for_end9 ], [ %432, %for_body8.1 ]
  %422 = add nsw i64 %417, %indvars.iv.1
  %423 = getelementptr inbounds float, float* %4, i64 %422
  %424 = load float, float* %423, align 4, !tbaa !4347
  %425 = insertelement <64 x float> undef, float %424, i32 0
  %426 = shufflevector <64 x float> %425, <64 x float> undef, <64 x i32> zeroinitializer
  %427 = shl i64 %indvars.iv.1, 6
  %428 = add nuw nsw i64 %46, %427
  %429 = getelementptr inbounds float, float* %7, i64 %428
  %430 = bitcast float* %429 to <64 x float>*
  %431 = load <64 x float>, <64 x float>* %430, align 64, !tbaa !4350
  %432 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %426, <64 x float> %431, <64 x float> %421)
  %433 = add nsw i64 %422, 128
  %434 = getelementptr inbounds float, float* %4, i64 %433
  %435 = load float, float* %434, align 4, !tbaa !4347
  %436 = insertelement <64 x float> undef, float %435, i32 0
  %437 = shufflevector <64 x float> %436, <64 x float> undef, <64 x i32> zeroinitializer
  %438 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %437, <64 x float> %431, <64 x float> %420)
  %439 = add nsw i64 %422, 3584
  %440 = getelementptr inbounds float, float* %4, i64 %439
  %441 = load float, float* %440, align 4, !tbaa !4347
  %442 = insertelement <64 x float> undef, float %441, i32 0
  %443 = shufflevector <64 x float> %442, <64 x float> undef, <64 x i32> zeroinitializer
  %444 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %443, <64 x float> %431, <64 x float> %419)
  %445 = add nsw i64 %422, 3712
  %446 = getelementptr inbounds float, float* %4, i64 %445
  %447 = load float, float* %446, align 4, !tbaa !4347
  %448 = insertelement <64 x float> undef, float %447, i32 0
  %449 = shufflevector <64 x float> %448, <64 x float> undef, <64 x i32> zeroinitializer
  %450 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %449, <64 x float> %431, <64 x float> %418)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 64
  br i1 %exitcond.1, label %for_end9.1, label %for_body8.1, !prof !50

for_end9.1:                                       ; preds = %for_body8.1
  %451 = add nsw i64 %383, 100352
  br label %for_body8.2

for_body8.2:                                      ; preds = %for_body8.2, %for_end9.1
  %indvars.iv.2 = phi i64 [ 0, %for_end9.1 ], [ %indvars.iv.next.2, %for_body8.2 ]
  %452 = phi <64 x float> [ %450, %for_end9.1 ], [ %484, %for_body8.2 ]
  %453 = phi <64 x float> [ %444, %for_end9.1 ], [ %478, %for_body8.2 ]
  %454 = phi <64 x float> [ %438, %for_end9.1 ], [ %472, %for_body8.2 ]
  %455 = phi <64 x float> [ %432, %for_end9.1 ], [ %466, %for_body8.2 ]
  %456 = add nuw nsw i64 %451, %indvars.iv.2
  %457 = getelementptr inbounds float, float* %4, i64 %456
  %458 = load float, float* %457, align 4, !tbaa !4347
  %459 = insertelement <64 x float> undef, float %458, i32 0
  %460 = shufflevector <64 x float> %459, <64 x float> undef, <64 x i32> zeroinitializer
  %461 = shl i64 %indvars.iv.2, 6
  %462 = add nuw nsw i64 %47, %461
  %463 = getelementptr inbounds float, float* %7, i64 %462
  %464 = bitcast float* %463 to <64 x float>*
  %465 = load <64 x float>, <64 x float>* %464, align 64, !tbaa !4350
  %466 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %460, <64 x float> %465, <64 x float> %455)
  %467 = add nsw i64 %456, 128
  %468 = getelementptr inbounds float, float* %4, i64 %467
  %469 = load float, float* %468, align 4, !tbaa !4347
  %470 = insertelement <64 x float> undef, float %469, i32 0
  %471 = shufflevector <64 x float> %470, <64 x float> undef, <64 x i32> zeroinitializer
  %472 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %471, <64 x float> %465, <64 x float> %454)
  %473 = add nsw i64 %456, 3584
  %474 = getelementptr inbounds float, float* %4, i64 %473
  %475 = load float, float* %474, align 4, !tbaa !4347
  %476 = insertelement <64 x float> undef, float %475, i32 0
  %477 = shufflevector <64 x float> %476, <64 x float> undef, <64 x i32> zeroinitializer
  %478 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %477, <64 x float> %465, <64 x float> %453)
  %479 = add nsw i64 %456, 3712
  %480 = getelementptr inbounds float, float* %4, i64 %479
  %481 = load float, float* %480, align 4, !tbaa !4347
  %482 = insertelement <64 x float> undef, float %481, i32 0
  %483 = shufflevector <64 x float> %482, <64 x float> undef, <64 x i32> zeroinitializer
  %484 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %483, <64 x float> %465, <64 x float> %452)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 64
  br i1 %exitcond.2, label %for_end9.2, label %for_body8.2, !prof !50

for_end9.2:                                       ; preds = %for_body8.2
  %485 = add nsw i64 %383, 150528
  br label %for_body8.3

for_body8.3:                                      ; preds = %for_body8.3, %for_end9.2
  %indvars.iv.3 = phi i64 [ 0, %for_end9.2 ], [ %indvars.iv.next.3, %for_body8.3 ]
  %486 = phi <64 x float> [ %484, %for_end9.2 ], [ %518, %for_body8.3 ]
  %487 = phi <64 x float> [ %478, %for_end9.2 ], [ %512, %for_body8.3 ]
  %488 = phi <64 x float> [ %472, %for_end9.2 ], [ %506, %for_body8.3 ]
  %489 = phi <64 x float> [ %466, %for_end9.2 ], [ %500, %for_body8.3 ]
  %490 = add nuw nsw i64 %485, %indvars.iv.3
  %491 = getelementptr inbounds float, float* %4, i64 %490
  %492 = load float, float* %491, align 4, !tbaa !4347
  %493 = insertelement <64 x float> undef, float %492, i32 0
  %494 = shufflevector <64 x float> %493, <64 x float> undef, <64 x i32> zeroinitializer
  %495 = shl i64 %indvars.iv.3, 6
  %496 = add nuw nsw i64 %48, %495
  %497 = getelementptr inbounds float, float* %7, i64 %496
  %498 = bitcast float* %497 to <64 x float>*
  %499 = load <64 x float>, <64 x float>* %498, align 64, !tbaa !4350
  %500 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %494, <64 x float> %499, <64 x float> %489)
  %501 = add nsw i64 %490, 128
  %502 = getelementptr inbounds float, float* %4, i64 %501
  %503 = load float, float* %502, align 4, !tbaa !4347
  %504 = insertelement <64 x float> undef, float %503, i32 0
  %505 = shufflevector <64 x float> %504, <64 x float> undef, <64 x i32> zeroinitializer
  %506 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %505, <64 x float> %499, <64 x float> %488)
  %507 = add nsw i64 %490, 3584
  %508 = getelementptr inbounds float, float* %4, i64 %507
  %509 = load float, float* %508, align 4, !tbaa !4347
  %510 = insertelement <64 x float> undef, float %509, i32 0
  %511 = shufflevector <64 x float> %510, <64 x float> undef, <64 x i32> zeroinitializer
  %512 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %511, <64 x float> %499, <64 x float> %487)
  %513 = add nsw i64 %490, 3712
  %514 = getelementptr inbounds float, float* %4, i64 %513
  %515 = load float, float* %514, align 4, !tbaa !4347
  %516 = insertelement <64 x float> undef, float %515, i32 0
  %517 = shufflevector <64 x float> %516, <64 x float> undef, <64 x i32> zeroinitializer
  %518 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %517, <64 x float> %499, <64 x float> %486)
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, 64
  br i1 %exitcond.3, label %for_end9.3, label %for_body8.3, !prof !50

for_end9.3:                                       ; preds = %for_body8.3
  %519 = add nsw i64 %383, 200704
  br label %for_body8.4

for_body8.4:                                      ; preds = %for_body8.4, %for_end9.3
  %indvars.iv.4 = phi i64 [ 0, %for_end9.3 ], [ %indvars.iv.next.4, %for_body8.4 ]
  %520 = phi <64 x float> [ %518, %for_end9.3 ], [ %552, %for_body8.4 ]
  %521 = phi <64 x float> [ %512, %for_end9.3 ], [ %546, %for_body8.4 ]
  %522 = phi <64 x float> [ %506, %for_end9.3 ], [ %540, %for_body8.4 ]
  %523 = phi <64 x float> [ %500, %for_end9.3 ], [ %534, %for_body8.4 ]
  %524 = add nuw nsw i64 %519, %indvars.iv.4
  %525 = getelementptr inbounds float, float* %4, i64 %524
  %526 = load float, float* %525, align 4, !tbaa !4347
  %527 = insertelement <64 x float> undef, float %526, i32 0
  %528 = shufflevector <64 x float> %527, <64 x float> undef, <64 x i32> zeroinitializer
  %529 = shl i64 %indvars.iv.4, 6
  %530 = add nuw nsw i64 %49, %529
  %531 = getelementptr inbounds float, float* %7, i64 %530
  %532 = bitcast float* %531 to <64 x float>*
  %533 = load <64 x float>, <64 x float>* %532, align 64, !tbaa !4350
  %534 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %528, <64 x float> %533, <64 x float> %523)
  %535 = add nsw i64 %524, 128
  %536 = getelementptr inbounds float, float* %4, i64 %535
  %537 = load float, float* %536, align 4, !tbaa !4347
  %538 = insertelement <64 x float> undef, float %537, i32 0
  %539 = shufflevector <64 x float> %538, <64 x float> undef, <64 x i32> zeroinitializer
  %540 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %539, <64 x float> %533, <64 x float> %522)
  %541 = add nsw i64 %524, 3584
  %542 = getelementptr inbounds float, float* %4, i64 %541
  %543 = load float, float* %542, align 4, !tbaa !4347
  %544 = insertelement <64 x float> undef, float %543, i32 0
  %545 = shufflevector <64 x float> %544, <64 x float> undef, <64 x i32> zeroinitializer
  %546 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %545, <64 x float> %533, <64 x float> %521)
  %547 = add nsw i64 %524, 3712
  %548 = getelementptr inbounds float, float* %4, i64 %547
  %549 = load float, float* %548, align 4, !tbaa !4347
  %550 = insertelement <64 x float> undef, float %549, i32 0
  %551 = shufflevector <64 x float> %550, <64 x float> undef, <64 x i32> zeroinitializer
  %552 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %551, <64 x float> %533, <64 x float> %520)
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv.4, 1
  %exitcond.4 = icmp eq i64 %indvars.iv.next.4, 64
  br i1 %exitcond.4, label %for_end9.4, label %for_body8.4, !prof !50

for_end9.4:                                       ; preds = %for_body8.4
  %553 = add nsw i64 %383, 250880
  br label %for_body8.5

for_body8.5:                                      ; preds = %for_body8.5, %for_end9.4
  %indvars.iv.5 = phi i64 [ 0, %for_end9.4 ], [ %indvars.iv.next.5, %for_body8.5 ]
  %554 = phi <64 x float> [ %552, %for_end9.4 ], [ %586, %for_body8.5 ]
  %555 = phi <64 x float> [ %546, %for_end9.4 ], [ %580, %for_body8.5 ]
  %556 = phi <64 x float> [ %540, %for_end9.4 ], [ %574, %for_body8.5 ]
  %557 = phi <64 x float> [ %534, %for_end9.4 ], [ %568, %for_body8.5 ]
  %558 = add nuw nsw i64 %553, %indvars.iv.5
  %559 = getelementptr inbounds float, float* %4, i64 %558
  %560 = load float, float* %559, align 4, !tbaa !4347
  %561 = insertelement <64 x float> undef, float %560, i32 0
  %562 = shufflevector <64 x float> %561, <64 x float> undef, <64 x i32> zeroinitializer
  %563 = shl i64 %indvars.iv.5, 6
  %564 = add nuw nsw i64 %50, %563
  %565 = getelementptr inbounds float, float* %7, i64 %564
  %566 = bitcast float* %565 to <64 x float>*
  %567 = load <64 x float>, <64 x float>* %566, align 64, !tbaa !4350
  %568 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %562, <64 x float> %567, <64 x float> %557)
  %569 = add nsw i64 %558, 128
  %570 = getelementptr inbounds float, float* %4, i64 %569
  %571 = load float, float* %570, align 4, !tbaa !4347
  %572 = insertelement <64 x float> undef, float %571, i32 0
  %573 = shufflevector <64 x float> %572, <64 x float> undef, <64 x i32> zeroinitializer
  %574 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %573, <64 x float> %567, <64 x float> %556)
  %575 = add nsw i64 %558, 3584
  %576 = getelementptr inbounds float, float* %4, i64 %575
  %577 = load float, float* %576, align 4, !tbaa !4347
  %578 = insertelement <64 x float> undef, float %577, i32 0
  %579 = shufflevector <64 x float> %578, <64 x float> undef, <64 x i32> zeroinitializer
  %580 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %579, <64 x float> %567, <64 x float> %555)
  %581 = add nsw i64 %558, 3712
  %582 = getelementptr inbounds float, float* %4, i64 %581
  %583 = load float, float* %582, align 4, !tbaa !4347
  %584 = insertelement <64 x float> undef, float %583, i32 0
  %585 = shufflevector <64 x float> %584, <64 x float> undef, <64 x i32> zeroinitializer
  %586 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %585, <64 x float> %567, <64 x float> %554)
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv.5, 1
  %exitcond.5 = icmp eq i64 %indvars.iv.next.5, 64
  br i1 %exitcond.5, label %for_end9.5, label %for_body8.5, !prof !50

for_end9.5:                                       ; preds = %for_body8.5
  %587 = add nsw i64 %383, 301056
  br label %for_body8.6

for_body8.6:                                      ; preds = %for_body8.6, %for_end9.5
  %indvars.iv.6 = phi i64 [ 0, %for_end9.5 ], [ %indvars.iv.next.6, %for_body8.6 ]
  %588 = phi <64 x float> [ %586, %for_end9.5 ], [ %620, %for_body8.6 ]
  %589 = phi <64 x float> [ %580, %for_end9.5 ], [ %614, %for_body8.6 ]
  %590 = phi <64 x float> [ %574, %for_end9.5 ], [ %608, %for_body8.6 ]
  %591 = phi <64 x float> [ %568, %for_end9.5 ], [ %602, %for_body8.6 ]
  %592 = add nuw nsw i64 %587, %indvars.iv.6
  %593 = getelementptr inbounds float, float* %4, i64 %592
  %594 = load float, float* %593, align 4, !tbaa !4347
  %595 = insertelement <64 x float> undef, float %594, i32 0
  %596 = shufflevector <64 x float> %595, <64 x float> undef, <64 x i32> zeroinitializer
  %597 = shl i64 %indvars.iv.6, 6
  %598 = add nuw nsw i64 %51, %597
  %599 = getelementptr inbounds float, float* %7, i64 %598
  %600 = bitcast float* %599 to <64 x float>*
  %601 = load <64 x float>, <64 x float>* %600, align 64, !tbaa !4350
  %602 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %596, <64 x float> %601, <64 x float> %591)
  %603 = add nsw i64 %592, 128
  %604 = getelementptr inbounds float, float* %4, i64 %603
  %605 = load float, float* %604, align 4, !tbaa !4347
  %606 = insertelement <64 x float> undef, float %605, i32 0
  %607 = shufflevector <64 x float> %606, <64 x float> undef, <64 x i32> zeroinitializer
  %608 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %607, <64 x float> %601, <64 x float> %590)
  %609 = add nsw i64 %592, 3584
  %610 = getelementptr inbounds float, float* %4, i64 %609
  %611 = load float, float* %610, align 4, !tbaa !4347
  %612 = insertelement <64 x float> undef, float %611, i32 0
  %613 = shufflevector <64 x float> %612, <64 x float> undef, <64 x i32> zeroinitializer
  %614 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %613, <64 x float> %601, <64 x float> %589)
  %615 = add nsw i64 %592, 3712
  %616 = getelementptr inbounds float, float* %4, i64 %615
  %617 = load float, float* %616, align 4, !tbaa !4347
  %618 = insertelement <64 x float> undef, float %617, i32 0
  %619 = shufflevector <64 x float> %618, <64 x float> undef, <64 x i32> zeroinitializer
  %620 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %619, <64 x float> %601, <64 x float> %588)
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv.6, 1
  %exitcond.6 = icmp eq i64 %indvars.iv.next.6, 64
  br i1 %exitcond.6, label %for_end9.6, label %for_body8.6, !prof !50

for_end9.6:                                       ; preds = %for_body8.6
  %621 = add nsw i64 %383, 351232
  br label %for_body8.7

for_body8.7:                                      ; preds = %for_body8.7, %for_end9.6
  %indvars.iv.7 = phi i64 [ 0, %for_end9.6 ], [ %indvars.iv.next.7, %for_body8.7 ]
  %622 = phi <64 x float> [ %620, %for_end9.6 ], [ %654, %for_body8.7 ]
  %623 = phi <64 x float> [ %614, %for_end9.6 ], [ %648, %for_body8.7 ]
  %624 = phi <64 x float> [ %608, %for_end9.6 ], [ %642, %for_body8.7 ]
  %625 = phi <64 x float> [ %602, %for_end9.6 ], [ %636, %for_body8.7 ]
  %626 = add nuw nsw i64 %621, %indvars.iv.7
  %627 = getelementptr inbounds float, float* %4, i64 %626
  %628 = load float, float* %627, align 4, !tbaa !4347
  %629 = insertelement <64 x float> undef, float %628, i32 0
  %630 = shufflevector <64 x float> %629, <64 x float> undef, <64 x i32> zeroinitializer
  %631 = shl i64 %indvars.iv.7, 6
  %632 = add nuw nsw i64 %52, %631
  %633 = getelementptr inbounds float, float* %7, i64 %632
  %634 = bitcast float* %633 to <64 x float>*
  %635 = load <64 x float>, <64 x float>* %634, align 64, !tbaa !4350
  %636 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %630, <64 x float> %635, <64 x float> %625)
  %637 = add nsw i64 %626, 128
  %638 = getelementptr inbounds float, float* %4, i64 %637
  %639 = load float, float* %638, align 4, !tbaa !4347
  %640 = insertelement <64 x float> undef, float %639, i32 0
  %641 = shufflevector <64 x float> %640, <64 x float> undef, <64 x i32> zeroinitializer
  %642 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %641, <64 x float> %635, <64 x float> %624)
  %643 = add nsw i64 %626, 3584
  %644 = getelementptr inbounds float, float* %4, i64 %643
  %645 = load float, float* %644, align 4, !tbaa !4347
  %646 = insertelement <64 x float> undef, float %645, i32 0
  %647 = shufflevector <64 x float> %646, <64 x float> undef, <64 x i32> zeroinitializer
  %648 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %647, <64 x float> %635, <64 x float> %623)
  %649 = add nsw i64 %626, 3712
  %650 = getelementptr inbounds float, float* %4, i64 %649
  %651 = load float, float* %650, align 4, !tbaa !4347
  %652 = insertelement <64 x float> undef, float %651, i32 0
  %653 = shufflevector <64 x float> %652, <64 x float> undef, <64 x i32> zeroinitializer
  %654 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %653, <64 x float> %635, <64 x float> %622)
  %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv.7, 1
  %exitcond.7 = icmp eq i64 %indvars.iv.next.7, 64
  br i1 %exitcond.7, label %for_end9.7, label %for_body8.7, !prof !50

for_end9.7:                                       ; preds = %for_body8.7
  store <64 x float> %636, <64 x float>* %372, align 64, !tbaa !4341
  store <64 x float> %642, <64 x float>* %375, align 64, !tbaa !4341
  store <64 x float> %648, <64 x float>* %378, align 64, !tbaa !4341
  store <64 x float> %654, <64 x float>* %381, align 64, !tbaa !4341
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  %exitcond45 = icmp eq i64 %indvars.iv.next44, 7
  br i1 %exitcond45, label %for_begin10.preheader, label %for_body2, !prof !50
}

define dllexport i32 @fused_layout_transform_46(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.377, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4353
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.378, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !4367
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.379, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !4369
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !4383
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 16
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !4385
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 14
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !4388
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 14
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !4390
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 64
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !4394
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 12544, i32 896, i32 64, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !4405
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 200704
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !4409
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !4423
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 2
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !4425
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 14
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !4428
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 14
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !4430
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 512
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !4434
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 100352, i32 7168, i32 512, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !4445
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 200704
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.380, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_46_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_46_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %29, align 8
  %3 = getelementptr inbounds %29, %29* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %29, %29* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %29* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.381, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.381(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 27
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 28
  %14 = select i1 %13, i32 %12, i32 28
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 28
  %18 = select i1 %17, i32 %16, i32 28
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 7168
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = sdiv i32 %25, 14
  %27 = mul nsw i32 %26, 100352
  %28 = insertelement <16 x i32> undef, i32 %27, i32 0
  %29 = srem i32 %25, 14
  %30 = mul nsw i32 %29, 896
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %28
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %33 = shl i64 %indvars.iv7, 9
  %34 = add nsw i64 %33, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %35 = shl i32 %indvars.iv7.tr, 6
  %36 = insertelement <16 x i32> undef, i32 %35, i32 0
  %37 = add <16 x i32> %32, %36
  %38 = shufflevector <16 x i32> %37, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %39 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %39, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %40 = shl nsw i64 %indvars.iv, 4
  %41 = add nsw i64 %34, %40
  %42 = trunc i64 %40 to i32
  %43 = insertelement <16 x i32> undef, i32 %42, i32 0
  %44 = trunc i64 %40 to i32
  %45 = or i32 %44, 1
  %46 = insertelement <16 x i32> %43, i32 %45, i32 1
  %47 = trunc i64 %40 to i32
  %48 = or i32 %47, 2
  %49 = insertelement <16 x i32> %46, i32 %48, i32 2
  %50 = trunc i64 %40 to i32
  %51 = or i32 %50, 3
  %52 = insertelement <16 x i32> %49, i32 %51, i32 3
  %53 = trunc i64 %40 to i32
  %54 = or i32 %53, 4
  %55 = insertelement <16 x i32> %52, i32 %54, i32 4
  %56 = trunc i64 %40 to i32
  %57 = or i32 %56, 5
  %58 = insertelement <16 x i32> %55, i32 %57, i32 5
  %59 = trunc i64 %40 to i32
  %60 = or i32 %59, 6
  %61 = insertelement <16 x i32> %58, i32 %60, i32 6
  %62 = trunc i64 %40 to i32
  %63 = or i32 %62, 7
  %64 = insertelement <16 x i32> %61, i32 %63, i32 7
  %65 = trunc i64 %40 to i32
  %66 = or i32 %65, 8
  %67 = insertelement <16 x i32> %64, i32 %66, i32 8
  %68 = trunc i64 %40 to i32
  %69 = or i32 %68, 9
  %70 = insertelement <16 x i32> %67, i32 %69, i32 9
  %71 = trunc i64 %40 to i32
  %72 = or i32 %71, 10
  %73 = insertelement <16 x i32> %70, i32 %72, i32 10
  %74 = trunc i64 %40 to i32
  %75 = or i32 %74, 11
  %76 = insertelement <16 x i32> %73, i32 %75, i32 11
  %77 = trunc i64 %40 to i32
  %78 = or i32 %77, 12
  %79 = insertelement <16 x i32> %76, i32 %78, i32 12
  %80 = trunc i64 %40 to i32
  %81 = or i32 %80, 13
  %82 = insertelement <16 x i32> %79, i32 %81, i32 13
  %83 = trunc i64 %40 to i32
  %84 = or i32 %83, 14
  %85 = insertelement <16 x i32> %82, i32 %84, i32 14
  %86 = trunc i64 %40 to i32
  %87 = or i32 %86, 15
  %88 = insertelement <16 x i32> %85, i32 %87, i32 15
  %89 = sdiv <16 x i32> %88, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %90 = mul <16 x i32> %89, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %91 = sub <16 x i32> %88, %90
  %92 = icmp sgt <16 x i32> %91, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %92, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %93 = sext <16 x i1> %not. to <16 x i32>
  %94 = add nsw <16 x i32> %89, %93
  %95 = mul nsw <16 x i32> %94, <i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544, i32 12544>
  %96 = add nsw <16 x i32> %91, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %97 = select <16 x i1> %92, <16 x i32> %91, <16 x i32> %96
  %98 = add <16 x i32> %38, %97
  %99 = add <16 x i32> %98, %95
  %100 = extractelement <16 x i32> %99, i64 0
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !4449
  %104 = insertelement <16 x float> undef, float %103, i32 0
  %105 = extractelement <16 x i32> %99, i64 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !4449
  %109 = insertelement <16 x float> %104, float %108, i32 1
  %110 = extractelement <16 x i32> %99, i64 2
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !4449
  %114 = insertelement <16 x float> %109, float %113, i32 2
  %115 = extractelement <16 x i32> %99, i64 3
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !4449
  %119 = insertelement <16 x float> %114, float %118, i32 3
  %120 = extractelement <16 x i32> %99, i64 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !4449
  %124 = insertelement <16 x float> %119, float %123, i32 4
  %125 = extractelement <16 x i32> %99, i64 5
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !4449
  %129 = insertelement <16 x float> %124, float %128, i32 5
  %130 = extractelement <16 x i32> %99, i64 6
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !4449
  %134 = insertelement <16 x float> %129, float %133, i32 6
  %135 = extractelement <16 x i32> %99, i64 7
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !4449
  %139 = insertelement <16 x float> %134, float %138, i32 7
  %140 = extractelement <16 x i32> %99, i64 8
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !4449
  %144 = insertelement <16 x float> %139, float %143, i32 8
  %145 = extractelement <16 x i32> %99, i64 9
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !4449
  %149 = insertelement <16 x float> %144, float %148, i32 9
  %150 = extractelement <16 x i32> %99, i64 10
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !4449
  %154 = insertelement <16 x float> %149, float %153, i32 10
  %155 = extractelement <16 x i32> %99, i64 11
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !4449
  %159 = insertelement <16 x float> %154, float %158, i32 11
  %160 = extractelement <16 x i32> %99, i64 12
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !4449
  %164 = insertelement <16 x float> %159, float %163, i32 12
  %165 = extractelement <16 x i32> %99, i64 13
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !4449
  %169 = insertelement <16 x float> %164, float %168, i32 13
  %170 = extractelement <16 x i32> %99, i64 14
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !4449
  %174 = insertelement <16 x float> %169, float %173, i32 14
  %175 = extractelement <16 x i32> %99, i64 15
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, float* %7, i64 %176
  %178 = load float, float* %177, align 4, !tbaa !4449
  %179 = insertelement <16 x float> %174, float %178, i32 15
  %180 = getelementptr inbounds float, float* %4, i64 %41
  %181 = bitcast float* %180 to <16 x float>*
  store <16 x float> %179, <16 x float>* %181, align 64, !tbaa !4452
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 14
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_softmax(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.382, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4455
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.383, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !4469
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.384, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 2
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.385, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !4471
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !4485
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 1000
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.386, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = icmp eq i64* %19, null
  br i1 %62, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end14
  %63 = getelementptr inbounds i64, i64* %19, i64 1
  %64 = load i64, i64* %63, align 8, !tbaa !4487
  %65 = trunc i64 %64 to i32
  %66 = icmp eq i32 %65, 1
  %67 = load i64, i64* %19, align 8, !tbaa !4501
  %68 = trunc i64 %67 to i32
  %69 = icmp eq i32 %68, 1000
  %70 = and i1 %66, %69
  br i1 %70, label %if_end, label %assert_fail15, !prof !5

if_end:                                           ; preds = %assert_end14, %if_then
  %71 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %assert_end18, label %assert_fail17, !prof !5

assert_fail15:                                    ; preds = %if_then
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.387, i64 0, i64 0))
  ret i32 -1

assert_fail17:                                    ; preds = %if_end
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %if_end
  %76 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 2
  br i1 %78, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.322, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %80 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %92 = load i64, i64* %27, align 8, !tbaa !4503
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %96 = getelementptr inbounds i64, i64* %27, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !4517
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 1000
  br i1 %99, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.388, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %101 = icmp eq i64* %29, null
  br i1 %101, label %if_end28, label %if_then27, !prof !50

if_then27:                                        ; preds = %assert_end26
  %102 = getelementptr inbounds i64, i64* %29, i64 1
  %103 = load i64, i64* %102, align 8, !tbaa !4519
  %104 = trunc i64 %103 to i32
  %105 = icmp eq i32 %104, 1
  %106 = load i64, i64* %29, align 8, !tbaa !4533
  %107 = trunc i64 %106 to i32
  %108 = icmp eq i32 %107, 1000
  %109 = and i1 %105, %108
  br i1 %109, label %if_end28, label %assert_fail29, !prof !5

if_end28:                                         ; preds = %assert_end26, %if_then27
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %111 = load i64, i64* %110, align 8
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then27
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.389, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end28
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %114(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end28
  %115 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %119 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %23, %120
  br i1 %121, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  tail call fastcc void @fused_nn_softmax_compute_(i8* %15, i8* %25, i32 %23)
  ret i32 0
}

; Function Attrs: noinline
define private fastcc void @fused_nn_softmax_compute_(i8* noalias nocapture readonly, i8* noalias nocapture, i32) unnamed_addr #0 {
entry:
  %3 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %4 = tail call i8* %3(i32 1, i32 %2, i64 4000, i32 2, i32 32)
  %5 = bitcast i8* %0 to float*
  br label %for_body

for_begin1.preheader:                             ; preds = %for_body
  %6 = bitcast i8* %4 to float*
  %broadcast.splatinsert15 = insertelement <4 x float> undef, float %17, i32 0
  %broadcast.splat16 = shufflevector <4 x float> %broadcast.splatinsert15, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %for_begin1.preheader
  %index = phi i64 [ 0, %for_begin1.preheader ], [ %index.next, %vector.body ]
  %7 = getelementptr inbounds float, float* %5, i64 %index
  %8 = bitcast float* %7 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %8, align 4, !tbaa !4535
  %9 = fsub <4 x float> %wide.load, %broadcast.splat16
  %10 = call <4 x float> @llvm.exp.v4f32(<4 x float> %9)
  %11 = getelementptr inbounds float, float* %6, i64 %index
  %12 = bitcast float* %11 to <4 x float>*
  store <4 x float> %10, <4 x float>* %12, align 4, !tbaa !4538
  %index.next = add i64 %index, 4
  %13 = icmp eq i64 %index.next, 1000
  br i1 %13, label %for_body5, label %vector.body, !llvm.loop !4541

for_body:                                         ; preds = %for_body, %entry
  %indvars.iv10 = phi i64 [ 0, %entry ], [ %indvars.iv.next11, %for_body ]
  %.02 = phi float [ 0xC7EFFFFFE0000000, %entry ], [ %17, %for_body ]
  %14 = getelementptr inbounds float, float* %5, i64 %indvars.iv10
  %15 = load float, float* %14, align 4, !tbaa !4535
  %16 = fcmp ogt float %.02, %15
  %17 = select i1 %16, float %.02, float %15
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1
  %exitcond12 = icmp eq i64 %indvars.iv.next11, 1000
  br i1 %exitcond12, label %for_begin1.preheader, label %for_body, !prof !50

for_begin7.preheader:                             ; preds = %for_body5
  %18 = bitcast i8* %1 to float*
  %broadcast.splatinsert29 = insertelement <4 x float> undef, float %27, i32 0
  %broadcast.splat30 = shufflevector <4 x float> %broadcast.splatinsert29, <4 x float> undef, <4 x i32> zeroinitializer
  br label %vector.body17

vector.body17:                                    ; preds = %vector.body17, %for_begin7.preheader
  %index21 = phi i64 [ 0, %for_begin7.preheader ], [ %index.next22, %vector.body17 ]
  %19 = getelementptr inbounds float, float* %6, i64 %index21
  %20 = bitcast float* %19 to <4 x float>*
  %wide.load28 = load <4 x float>, <4 x float>* %20, align 4, !tbaa !4538
  %21 = fdiv <4 x float> %wide.load28, %broadcast.splat30
  %22 = getelementptr inbounds float, float* %18, i64 %index21
  %23 = bitcast float* %22 to <4 x float>*
  store <4 x float> %21, <4 x float>* %23, align 4, !tbaa !4543
  %index.next22 = add i64 %index21, 4
  %24 = icmp eq i64 %index.next22, 1000
  br i1 %24, label %for_end9, label %vector.body17, !llvm.loop !4546

for_body5:                                        ; preds = %vector.body, %for_body5
  %indvars.iv4 = phi i64 [ %indvars.iv.next5, %for_body5 ], [ 0, %vector.body ]
  %.0151 = phi float [ %27, %for_body5 ], [ 0.000000e+00, %vector.body ]
  %25 = getelementptr inbounds float, float* %6, i64 %indvars.iv4
  %26 = load float, float* %25, align 4, !tbaa !4538
  %27 = fadd float %.0151, %26
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %exitcond6 = icmp eq i64 %indvars.iv.next5, 1000
  br i1 %exitcond6, label %for_begin7.preheader, label %for_body5, !prof !50

for_end9:                                         ; preds = %vector.body17
  %28 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %29 = tail call i32 %28(i32 1, i32 %2, i8* nonnull %4)
  ret void
}

define dllexport i32 @fused_add_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 3
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.390, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4547
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !4561
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %23 = load i64*, i64** %22, align 8
  %24 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %42 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %42(i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.391, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %43 = getelementptr inbounds i8, i8* %1, i64 4
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !4564
  switch i32 %45, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %46(i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.392, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %47(i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.393, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  %48 = icmp eq i32 %27, 1
  br i1 %48, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %49(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %50 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 5
  br i1 %52, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %53(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %54 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 2
  %57 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 32
  %60 = and i1 %56, %59
  %61 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %62 = load i16, i16* %61, align 2
  %63 = icmp eq i16 %62, 1
  %64 = and i1 %60, %63
  br i1 %64, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %65(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %66 = load i64, i64* %23, align 8, !tbaa !4566
  %67 = trunc i64 %66 to i32
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %69(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %70 = getelementptr inbounds i64, i64* %23, i64 1
  %71 = load i64, i64* %70, align 8, !tbaa !4580
  %72 = trunc i64 %71 to i32
  %73 = icmp eq i32 %72, 64
  br i1 %73, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.177, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %75 = getelementptr inbounds i64, i64* %23, i64 2
  %76 = load i64, i64* %75, align 8, !tbaa !4582
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %77, 7
  br i1 %78, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.178, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %80 = getelementptr inbounds i64, i64* %23, i64 3
  %81 = load i64, i64* %80, align 8, !tbaa !4585
  %82 = trunc i64 %81 to i32
  %83 = icmp eq i32 %82, 7
  br i1 %83, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %85 = getelementptr inbounds i64, i64* %23, i64 4
  %86 = load i64, i64* %85, align 8, !tbaa !4587
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 32
  br i1 %88, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %89 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %89(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %90 = icmp eq i64* %25, null
  br i1 %90, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end22
  %91 = getelementptr inbounds i64, i64* %25, i64 1
  %92 = bitcast i64* %91 to <4 x i64>*
  %93 = load <4 x i64>, <4 x i64>* %92, align 8, !tbaa !4591
  %94 = trunc <4 x i64> %93 to <4 x i32>
  %95 = icmp eq <4 x i32> %94, <i32 1568, i32 224, i32 32, i32 1>
  %96 = load i64, i64* %25, align 8, !tbaa !4602
  %97 = trunc i64 %96 to i32
  %98 = icmp eq i32 %97, 100352
  %rdx.shuf81 = shufflevector <4 x i1> %95, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx82 = and <4 x i1> %95, %rdx.shuf81
  %rdx.shuf83 = shufflevector <4 x i1> %bin.rdx82, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx84 = and <4 x i1> %bin.rdx82, %rdx.shuf83
  %99 = extractelement <4 x i1> %bin.rdx84, i32 0
  %100 = and i1 %99, %98
  br i1 %100, label %if_end, label %assert_fail23, !prof !5

if_end:                                           ; preds = %assert_end22, %if_then
  %101 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %102 = load i64, i64* %101, align 8
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %assert_end26, label %assert_fail25, !prof !5

assert_fail23:                                    ; preds = %if_then
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.181, i64 0, i64 0))
  ret i32 -1

assert_fail25:                                    ; preds = %if_end
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %if_end
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 2
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = and i1 %112, %115
  %117 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %118 = load i16, i16* %117, align 2
  %119 = icmp eq i16 %118, 1
  %120 = and i1 %116, %119
  br i1 %120, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %122 = load i64, i64* %33, align 8, !tbaa !4606
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %126 = getelementptr inbounds i64, i64* %33, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !4620
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 64
  br i1 %129, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.182, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %131 = getelementptr inbounds i64, i64* %33, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !4622
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 7
  br i1 %134, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.358, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %136 = getelementptr inbounds i64, i64* %33, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !4625
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 7
  br i1 %139, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.359, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %141 = getelementptr inbounds i64, i64* %33, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !4627
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 32
  br i1 %144, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.183, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %146 = icmp eq i64* %35, null
  br i1 %146, label %if_end42, label %if_then41, !prof !50

if_then41:                                        ; preds = %assert_end40
  %147 = getelementptr inbounds i64, i64* %35, i64 1
  %148 = bitcast i64* %147 to <4 x i64>*
  %149 = load <4 x i64>, <4 x i64>* %148, align 8, !tbaa !4631
  %150 = trunc <4 x i64> %149 to <4 x i32>
  %151 = icmp eq <4 x i32> %150, <i32 1568, i32 224, i32 32, i32 1>
  %152 = load i64, i64* %35, align 8, !tbaa !4642
  %153 = trunc i64 %152 to i32
  %154 = icmp eq i32 %153, 100352
  %rdx.shuf77 = shufflevector <4 x i1> %151, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx78 = and <4 x i1> %151, %rdx.shuf77
  %rdx.shuf79 = shufflevector <4 x i1> %bin.rdx78, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx80 = and <4 x i1> %bin.rdx78, %rdx.shuf79
  %155 = extractelement <4 x i1> %bin.rdx80, i32 0
  %156 = and i1 %155, %154
  br i1 %156, label %if_end42, label %assert_fail43, !prof !5

if_end42:                                         ; preds = %assert_end40, %if_then41
  %157 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %158 = load i64, i64* %157, align 8
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %assert_end46, label %assert_fail45, !prof !5

assert_fail43:                                    ; preds = %if_then41
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.394, i64 0, i64 0))
  ret i32 -1

assert_fail45:                                    ; preds = %if_end42
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %if_end42
  %162 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %165(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %166 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %29, %167
  br i1 %168, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %170 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, 5
  br i1 %172, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %174 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %175 = load i8, i8* %174, align 1
  %176 = icmp eq i8 %175, 2
  %177 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %178 = load i8, i8* %177, align 1
  %179 = icmp eq i8 %178, 32
  %180 = and i1 %176, %179
  %181 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %182 = load i16, i16* %181, align 2
  %183 = icmp eq i16 %182, 1
  %184 = and i1 %180, %183
  br i1 %184, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %185(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %186 = load i64, i64* %39, align 8, !tbaa !4646
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 1
  br i1 %188, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %190 = getelementptr inbounds i64, i64* %39, i64 1
  %191 = load i64, i64* %190, align 8, !tbaa !4660
  %192 = trunc i64 %191 to i32
  %193 = icmp eq i32 %192, 64
  br i1 %193, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %194 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %194(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.337, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %195 = getelementptr inbounds i64, i64* %39, i64 2
  %196 = load i64, i64* %195, align 8, !tbaa !4662
  %197 = trunc i64 %196 to i32
  %198 = icmp eq i32 %197, 7
  br i1 %198, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %199(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.395, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %200 = getelementptr inbounds i64, i64* %39, i64 3
  %201 = load i64, i64* %200, align 8, !tbaa !4665
  %202 = trunc i64 %201 to i32
  %203 = icmp eq i32 %202, 7
  br i1 %203, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %204(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.396, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %205 = getelementptr inbounds i64, i64* %39, i64 4
  %206 = load i64, i64* %205, align 8, !tbaa !4667
  %207 = trunc i64 %206 to i32
  %208 = icmp eq i32 %207, 32
  br i1 %208, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %210 = icmp eq i64* %41, null
  br i1 %210, label %if_end66, label %if_then65, !prof !50

if_then65:                                        ; preds = %assert_end64
  %211 = getelementptr inbounds i64, i64* %41, i64 1
  %212 = bitcast i64* %211 to <4 x i64>*
  %213 = load <4 x i64>, <4 x i64>* %212, align 8, !tbaa !4671
  %214 = trunc <4 x i64> %213 to <4 x i32>
  %215 = icmp eq <4 x i32> %214, <i32 1568, i32 224, i32 32, i32 1>
  %216 = load i64, i64* %41, align 8, !tbaa !4682
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 100352
  %rdx.shuf = shufflevector <4 x i1> %215, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %215, %rdx.shuf
  %rdx.shuf75 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx76 = and <4 x i1> %bin.rdx, %rdx.shuf75
  %219 = extractelement <4 x i1> %bin.rdx76, i32 0
  %220 = and i1 %219, %218
  br i1 %220, label %if_end66, label %assert_fail67, !prof !5

if_end66:                                         ; preds = %assert_end64, %if_then65
  %221 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %222 = load i64, i64* %221, align 8
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %assert_end70, label %assert_fail69, !prof !5

assert_fail67:                                    ; preds = %if_then65
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.397, i64 0, i64 0))
  ret i32 -1

assert_fail69:                                    ; preds = %if_end66
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %if_end66
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 1
  br i1 %228, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %229 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %229(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %29, %231
  br i1 %232, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %233 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %233(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %234 = tail call fastcc i32 @fused_add_nn_relu_compute_(i8* %37, i8* %21, i8* %31)
  ret i32 %234
}

; Function Attrs: noinline
define private fastcc i32 @fused_add_nn_relu_compute_(i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %3 = alloca %30, align 8
  %4 = getelementptr inbounds %30, %30* %3, i64 0, i32 0
  store i8* %0, i8** %4, align 8
  %5 = getelementptr inbounds %30, %30* %3, i64 0, i32 1
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %30, %30* %3, i64 0, i32 2
  store i8* %2, i8** %6, align 8
  %7 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %8 = bitcast %30* %3 to i8*
  %9 = call i32 %7(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.398, i8* nonnull %8, i32 0)
  ret i32 %9
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.398(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 447
  %14 = sdiv i32 %13, %12
  %15 = mul nsw i32 %14, %0
  %16 = icmp slt i32 %15, 448
  %17 = select i1 %16, i32 %15, i32 448
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %14, %18
  %20 = icmp slt i32 %19, 448
  %21 = select i1 %20, i32 %19, i32 448
  %22 = icmp slt i32 %17, %21
  br i1 %22, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %23 = add i32 %17, 1
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, -1
  %26 = sext i32 %21 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ %25, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_begin1.preheader ]
  %27 = mul nsw i64 %indvars.iv, 224
  %28 = getelementptr inbounds float, float* %7, i64 %27
  %29 = bitcast float* %28 to <16 x float>*
  %30 = load <16 x float>, <16 x float>* %29, align 64, !tbaa !4686
  %31 = getelementptr inbounds float, float* %10, i64 %27
  %32 = bitcast float* %31 to <16 x float>*
  %33 = load <16 x float>, <16 x float>* %32, align 64, !tbaa !4689
  %34 = fadd <16 x float> %30, %33
  %35 = fcmp ogt <16 x float> %34, zeroinitializer
  %36 = select <16 x i1> %35, <16 x float> %34, <16 x float> zeroinitializer
  %37 = getelementptr inbounds float, float* %4, i64 %27
  %38 = bitcast float* %37 to <16 x float>*
  store <16 x float> %36, <16 x float>* %38, align 64, !tbaa !4692
  %39 = or i64 %27, 16
  %40 = getelementptr inbounds float, float* %7, i64 %39
  %41 = bitcast float* %40 to <16 x float>*
  %42 = load <16 x float>, <16 x float>* %41, align 64, !tbaa !4686
  %43 = getelementptr inbounds float, float* %10, i64 %39
  %44 = bitcast float* %43 to <16 x float>*
  %45 = load <16 x float>, <16 x float>* %44, align 64, !tbaa !4689
  %46 = fadd <16 x float> %42, %45
  %47 = fcmp ogt <16 x float> %46, zeroinitializer
  %48 = select <16 x i1> %47, <16 x float> %46, <16 x float> zeroinitializer
  %49 = getelementptr inbounds float, float* %4, i64 %39
  %50 = bitcast float* %49 to <16 x float>*
  store <16 x float> %48, <16 x float>* %50, align 64, !tbaa !4692
  %51 = add nsw i64 %27, 32
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = bitcast float* %52 to <16 x float>*
  %54 = load <16 x float>, <16 x float>* %53, align 64, !tbaa !4686
  %55 = getelementptr inbounds float, float* %10, i64 %51
  %56 = bitcast float* %55 to <16 x float>*
  %57 = load <16 x float>, <16 x float>* %56, align 64, !tbaa !4689
  %58 = fadd <16 x float> %54, %57
  %59 = fcmp ogt <16 x float> %58, zeroinitializer
  %60 = select <16 x i1> %59, <16 x float> %58, <16 x float> zeroinitializer
  %61 = getelementptr inbounds float, float* %4, i64 %51
  %62 = bitcast float* %61 to <16 x float>*
  store <16 x float> %60, <16 x float>* %62, align 64, !tbaa !4692
  %63 = add nsw i64 %27, 48
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = bitcast float* %64 to <16 x float>*
  %66 = load <16 x float>, <16 x float>* %65, align 64, !tbaa !4686
  %67 = getelementptr inbounds float, float* %10, i64 %63
  %68 = bitcast float* %67 to <16 x float>*
  %69 = load <16 x float>, <16 x float>* %68, align 64, !tbaa !4689
  %70 = fadd <16 x float> %66, %69
  %71 = fcmp ogt <16 x float> %70, zeroinitializer
  %72 = select <16 x i1> %71, <16 x float> %70, <16 x float> zeroinitializer
  %73 = getelementptr inbounds float, float* %4, i64 %63
  %74 = bitcast float* %73 to <16 x float>*
  store <16 x float> %72, <16 x float>* %74, align 64, !tbaa !4692
  %75 = add nsw i64 %27, 64
  %76 = getelementptr inbounds float, float* %7, i64 %75
  %77 = bitcast float* %76 to <16 x float>*
  %78 = load <16 x float>, <16 x float>* %77, align 64, !tbaa !4686
  %79 = getelementptr inbounds float, float* %10, i64 %75
  %80 = bitcast float* %79 to <16 x float>*
  %81 = load <16 x float>, <16 x float>* %80, align 64, !tbaa !4689
  %82 = fadd <16 x float> %78, %81
  %83 = fcmp ogt <16 x float> %82, zeroinitializer
  %84 = select <16 x i1> %83, <16 x float> %82, <16 x float> zeroinitializer
  %85 = getelementptr inbounds float, float* %4, i64 %75
  %86 = bitcast float* %85 to <16 x float>*
  store <16 x float> %84, <16 x float>* %86, align 64, !tbaa !4692
  %87 = add nsw i64 %27, 80
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = bitcast float* %88 to <16 x float>*
  %90 = load <16 x float>, <16 x float>* %89, align 64, !tbaa !4686
  %91 = getelementptr inbounds float, float* %10, i64 %87
  %92 = bitcast float* %91 to <16 x float>*
  %93 = load <16 x float>, <16 x float>* %92, align 64, !tbaa !4689
  %94 = fadd <16 x float> %90, %93
  %95 = fcmp ogt <16 x float> %94, zeroinitializer
  %96 = select <16 x i1> %95, <16 x float> %94, <16 x float> zeroinitializer
  %97 = getelementptr inbounds float, float* %4, i64 %87
  %98 = bitcast float* %97 to <16 x float>*
  store <16 x float> %96, <16 x float>* %98, align 64, !tbaa !4692
  %99 = add nsw i64 %27, 96
  %100 = getelementptr inbounds float, float* %7, i64 %99
  %101 = bitcast float* %100 to <16 x float>*
  %102 = load <16 x float>, <16 x float>* %101, align 64, !tbaa !4686
  %103 = getelementptr inbounds float, float* %10, i64 %99
  %104 = bitcast float* %103 to <16 x float>*
  %105 = load <16 x float>, <16 x float>* %104, align 64, !tbaa !4689
  %106 = fadd <16 x float> %102, %105
  %107 = fcmp ogt <16 x float> %106, zeroinitializer
  %108 = select <16 x i1> %107, <16 x float> %106, <16 x float> zeroinitializer
  %109 = getelementptr inbounds float, float* %4, i64 %99
  %110 = bitcast float* %109 to <16 x float>*
  store <16 x float> %108, <16 x float>* %110, align 64, !tbaa !4692
  %111 = add nsw i64 %27, 112
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = bitcast float* %112 to <16 x float>*
  %114 = load <16 x float>, <16 x float>* %113, align 64, !tbaa !4686
  %115 = getelementptr inbounds float, float* %10, i64 %111
  %116 = bitcast float* %115 to <16 x float>*
  %117 = load <16 x float>, <16 x float>* %116, align 64, !tbaa !4689
  %118 = fadd <16 x float> %114, %117
  %119 = fcmp ogt <16 x float> %118, zeroinitializer
  %120 = select <16 x i1> %119, <16 x float> %118, <16 x float> zeroinitializer
  %121 = getelementptr inbounds float, float* %4, i64 %111
  %122 = bitcast float* %121 to <16 x float>*
  store <16 x float> %120, <16 x float>* %122, align 64, !tbaa !4692
  %123 = add nsw i64 %27, 128
  %124 = getelementptr inbounds float, float* %7, i64 %123
  %125 = bitcast float* %124 to <16 x float>*
  %126 = load <16 x float>, <16 x float>* %125, align 64, !tbaa !4686
  %127 = getelementptr inbounds float, float* %10, i64 %123
  %128 = bitcast float* %127 to <16 x float>*
  %129 = load <16 x float>, <16 x float>* %128, align 64, !tbaa !4689
  %130 = fadd <16 x float> %126, %129
  %131 = fcmp ogt <16 x float> %130, zeroinitializer
  %132 = select <16 x i1> %131, <16 x float> %130, <16 x float> zeroinitializer
  %133 = getelementptr inbounds float, float* %4, i64 %123
  %134 = bitcast float* %133 to <16 x float>*
  store <16 x float> %132, <16 x float>* %134, align 64, !tbaa !4692
  %135 = add nsw i64 %27, 144
  %136 = getelementptr inbounds float, float* %7, i64 %135
  %137 = bitcast float* %136 to <16 x float>*
  %138 = load <16 x float>, <16 x float>* %137, align 64, !tbaa !4686
  %139 = getelementptr inbounds float, float* %10, i64 %135
  %140 = bitcast float* %139 to <16 x float>*
  %141 = load <16 x float>, <16 x float>* %140, align 64, !tbaa !4689
  %142 = fadd <16 x float> %138, %141
  %143 = fcmp ogt <16 x float> %142, zeroinitializer
  %144 = select <16 x i1> %143, <16 x float> %142, <16 x float> zeroinitializer
  %145 = getelementptr inbounds float, float* %4, i64 %135
  %146 = bitcast float* %145 to <16 x float>*
  store <16 x float> %144, <16 x float>* %146, align 64, !tbaa !4692
  %147 = add nsw i64 %27, 160
  %148 = getelementptr inbounds float, float* %7, i64 %147
  %149 = bitcast float* %148 to <16 x float>*
  %150 = load <16 x float>, <16 x float>* %149, align 64, !tbaa !4686
  %151 = getelementptr inbounds float, float* %10, i64 %147
  %152 = bitcast float* %151 to <16 x float>*
  %153 = load <16 x float>, <16 x float>* %152, align 64, !tbaa !4689
  %154 = fadd <16 x float> %150, %153
  %155 = fcmp ogt <16 x float> %154, zeroinitializer
  %156 = select <16 x i1> %155, <16 x float> %154, <16 x float> zeroinitializer
  %157 = getelementptr inbounds float, float* %4, i64 %147
  %158 = bitcast float* %157 to <16 x float>*
  store <16 x float> %156, <16 x float>* %158, align 64, !tbaa !4692
  %159 = add nsw i64 %27, 176
  %160 = getelementptr inbounds float, float* %7, i64 %159
  %161 = bitcast float* %160 to <16 x float>*
  %162 = load <16 x float>, <16 x float>* %161, align 64, !tbaa !4686
  %163 = getelementptr inbounds float, float* %10, i64 %159
  %164 = bitcast float* %163 to <16 x float>*
  %165 = load <16 x float>, <16 x float>* %164, align 64, !tbaa !4689
  %166 = fadd <16 x float> %162, %165
  %167 = fcmp ogt <16 x float> %166, zeroinitializer
  %168 = select <16 x i1> %167, <16 x float> %166, <16 x float> zeroinitializer
  %169 = getelementptr inbounds float, float* %4, i64 %159
  %170 = bitcast float* %169 to <16 x float>*
  store <16 x float> %168, <16 x float>* %170, align 64, !tbaa !4692
  %171 = add nsw i64 %27, 192
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = bitcast float* %172 to <16 x float>*
  %174 = load <16 x float>, <16 x float>* %173, align 64, !tbaa !4686
  %175 = getelementptr inbounds float, float* %10, i64 %171
  %176 = bitcast float* %175 to <16 x float>*
  %177 = load <16 x float>, <16 x float>* %176, align 64, !tbaa !4689
  %178 = fadd <16 x float> %174, %177
  %179 = fcmp ogt <16 x float> %178, zeroinitializer
  %180 = select <16 x i1> %179, <16 x float> %178, <16 x float> zeroinitializer
  %181 = getelementptr inbounds float, float* %4, i64 %171
  %182 = bitcast float* %181 to <16 x float>*
  store <16 x float> %180, <16 x float>* %182, align 64, !tbaa !4692
  %183 = add nsw i64 %27, 208
  %184 = getelementptr inbounds float, float* %7, i64 %183
  %185 = bitcast float* %184 to <16 x float>*
  %186 = load <16 x float>, <16 x float>* %185, align 64, !tbaa !4686
  %187 = getelementptr inbounds float, float* %10, i64 %183
  %188 = bitcast float* %187 to <16 x float>*
  %189 = load <16 x float>, <16 x float>* %188, align 64, !tbaa !4689
  %190 = fadd <16 x float> %186, %189
  %191 = fcmp ogt <16 x float> %190, zeroinitializer
  %192 = select <16 x i1> %191, <16 x float> %190, <16 x float> zeroinitializer
  %193 = getelementptr inbounds float, float* %4, i64 %183
  %194 = bitcast float* %193 to <16 x float>*
  store <16 x float> %192, <16 x float>* %194, align 64, !tbaa !4692
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %195 = icmp slt i64 %indvars.iv.next, %26
  br i1 %195, label %for_begin1.preheader, label %for_end, !prof !5

for_end:                                          ; preds = %for_begin1.preheader, %entry
  ret i32 0
}

define dllexport i32 @fused_nn_dense_add(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 4
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.399, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4695
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !4709
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !4712
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %31 = load i64*, i64** %30, align 8
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %54 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %54(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.400, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %55 = getelementptr inbounds i8, i8* %1, i64 4
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 4, !tbaa !4714
  switch i32 %57, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %58(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.401, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %59 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %59(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.402, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %60(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.403, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  %61 = icmp eq i32 %33, 1
  br i1 %61, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %62(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %63 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 2
  br i1 %65, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.385, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %67 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %68, 2
  %70 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %71 = load i8, i8* %70, align 1
  %72 = icmp eq i8 %71, 32
  %73 = and i1 %69, %72
  %74 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %75 = load i16, i16* %74, align 2
  %76 = icmp eq i16 %75, 1
  %77 = and i1 %73, %76
  br i1 %77, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %79 = load i64, i64* %29, align 8, !tbaa !4716
  %80 = trunc i64 %79 to i32
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %83 = getelementptr inbounds i64, i64* %29, i64 1
  %84 = load i64, i64* %83, align 8, !tbaa !4730
  %85 = trunc i64 %84 to i32
  %86 = icmp eq i32 %85, 2048
  br i1 %86, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %87(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.404, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %88 = icmp eq i64* %31, null
  br i1 %88, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end18
  %89 = getelementptr inbounds i64, i64* %31, i64 1
  %90 = load i64, i64* %89, align 8, !tbaa !4732
  %91 = trunc i64 %90 to i32
  %92 = icmp eq i32 %91, 1
  %93 = load i64, i64* %31, align 8, !tbaa !4746
  %94 = trunc i64 %93 to i32
  %95 = icmp eq i32 %94, 2048
  %96 = and i1 %92, %95
  br i1 %96, label %if_end, label %assert_fail19, !prof !5

if_end:                                           ; preds = %assert_end18, %if_then
  %97 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %assert_end22, label %assert_fail21, !prof !5

assert_fail19:                                    ; preds = %if_then
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.405, i64 0, i64 0))
  ret i32 -1

assert_fail21:                                    ; preds = %if_end
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %if_end
  %102 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 2
  br i1 %104, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.322, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 2
  %109 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 32
  %112 = and i1 %108, %111
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %114 = load i16, i16* %113, align 2
  %115 = icmp eq i16 %114, 1
  %116 = and i1 %112, %115
  br i1 %116, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %118 = load i64, i64* %39, align 8, !tbaa !4748
  %119 = trunc i64 %118 to i32
  %120 = icmp eq i32 %119, 1000
  br i1 %120, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.406, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %122 = getelementptr inbounds i64, i64* %39, i64 1
  %123 = load i64, i64* %122, align 8, !tbaa !4762
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 2048
  br i1 %125, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.323, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %127 = icmp eq i64* %41, null
  br i1 %127, label %if_end32, label %if_then31, !prof !50

if_then31:                                        ; preds = %assert_end30
  %128 = getelementptr inbounds i64, i64* %41, i64 1
  %129 = load i64, i64* %128, align 8, !tbaa !4764
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 1
  %132 = load i64, i64* %41, align 8, !tbaa !4778
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 2048
  %135 = and i1 %131, %134
  br i1 %135, label %if_end32, label %assert_fail33, !prof !5

if_end32:                                         ; preds = %assert_end30, %if_then31
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %137 = load i64, i64* %136, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %assert_end36, label %assert_fail35, !prof !5

assert_fail33:                                    ; preds = %if_then31
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %139(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.324, i64 0, i64 0))
  ret i32 -1

assert_fail35:                                    ; preds = %if_end32
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %if_end32
  %141 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %35, %146
  br i1 %147, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %149 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.407, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %153 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %154 = load i8, i8* %153, align 1
  %155 = icmp eq i8 %154, 2
  %156 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %157 = load i8, i8* %156, align 1
  %158 = icmp eq i8 %157, 32
  %159 = and i1 %155, %158
  %160 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %161 = load i16, i16* %160, align 2
  %162 = icmp eq i16 %161, 1
  %163 = and i1 %159, %162
  br i1 %163, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %165 = load i64, i64* %45, align 8, !tbaa !4780
  %166 = trunc i64 %165 to i32
  %167 = icmp eq i32 %166, 1000
  br i1 %167, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %168 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %168(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.408, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %169 = icmp eq i64* %47, null
  br i1 %169, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %170 = load i64, i64* %47, align 8, !tbaa !4794
  %171 = trunc i64 %170 to i32
  %172 = icmp eq i32 %171, 1
  br i1 %172, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %173 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %174 = load i64, i64* %173, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.409, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %177(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %178 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = icmp eq i32 %179, 1
  br i1 %180, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %181 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %181(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %182 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = icmp eq i32 %35, %183
  br i1 %184, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %185(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %186 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %187 = load i32, i32* %186, align 4
  %188 = icmp eq i32 %187, 2
  br i1 %188, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.410, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %190 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %191 = load i8, i8* %190, align 1
  %192 = icmp eq i8 %191, 2
  %193 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %194 = load i8, i8* %193, align 1
  %195 = icmp eq i8 %194, 32
  %196 = and i1 %192, %195
  %197 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %198 = load i16, i16* %197, align 2
  %199 = icmp eq i16 %198, 1
  %200 = and i1 %196, %199
  br i1 %200, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %202 = load i64, i64* %51, align 8, !tbaa !4808
  %203 = trunc i64 %202 to i32
  %204 = icmp eq i32 %203, 1
  br i1 %204, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %206 = getelementptr inbounds i64, i64* %51, i64 1
  %207 = load i64, i64* %206, align 8, !tbaa !4822
  %208 = trunc i64 %207 to i32
  %209 = icmp eq i32 %208, 1000
  br i1 %209, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.411, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %211 = icmp eq i64* %53, null
  br i1 %211, label %if_end66, label %if_then65, !prof !50

if_then65:                                        ; preds = %assert_end64
  %212 = getelementptr inbounds i64, i64* %53, i64 1
  %213 = load i64, i64* %212, align 8, !tbaa !4824
  %214 = trunc i64 %213 to i32
  %215 = icmp eq i32 %214, 1
  %216 = load i64, i64* %53, align 8, !tbaa !4838
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 1000
  %219 = and i1 %215, %218
  br i1 %219, label %if_end66, label %assert_fail67, !prof !5

if_end66:                                         ; preds = %assert_end64, %if_then65
  %220 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %221 = load i64, i64* %220, align 8
  %222 = icmp eq i64 %221, 0
  br i1 %222, label %assert_end70, label %assert_fail69, !prof !5

assert_fail67:                                    ; preds = %if_then65
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.412, i64 0, i64 0))
  ret i32 -1

assert_fail69:                                    ; preds = %if_end66
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %if_end66
  %225 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %226 = load i32, i32* %225, align 4
  %227 = icmp eq i32 %226, 1
  br i1 %227, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %228 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %228(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %229 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = icmp eq i32 %35, %230
  br i1 %231, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %232 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %232(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %233 = tail call fastcc i32 @fused_nn_dense_add_compute_(i8* %27, i8* %37, i8* %49, i8* %43, i32 %35)
  ret i32 %233
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_dense_add_compute_(i8* noalias, i8* noalias, i8* noalias nocapture, i8* noalias nocapture readonly, i32) unnamed_addr #0 {
entry:
  %5 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %6 = tail call i8* %5(i32 1, i32 %4, i64 4000, i32 2, i32 32)
  %7 = alloca %31, align 8
  %8 = getelementptr inbounds %31, %31* %7, i64 0, i32 0
  store i8* %0, i8** %8, align 8
  %9 = getelementptr inbounds %31, %31* %7, i64 0, i32 1
  store i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %31, %31* %7, i64 0, i32 2
  store i8* %6, i8** %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %31* %7 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.413, i8* nonnull %12, i32 0)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %for_begin.preheader, label %call_fail, !prof !5

for_begin.preheader:                              ; preds = %entry
  %15 = bitcast i8* %6 to float*
  %16 = bitcast i8* %3 to float*
  %17 = bitcast i8* %2 to float*
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %for_begin.preheader
  %index = phi i64 [ 0, %for_begin.preheader ], [ %index.next, %vector.body ]
  %18 = getelementptr inbounds float, float* %15, i64 %index
  %19 = bitcast float* %18 to <4 x float>*
  %wide.load = load <4 x float>, <4 x float>* %19, align 4, !tbaa !4840
  %20 = getelementptr inbounds float, float* %18, i64 4
  %21 = bitcast float* %20 to <4 x float>*
  %wide.load5 = load <4 x float>, <4 x float>* %21, align 4, !tbaa !4840
  %22 = getelementptr inbounds float, float* %16, i64 %index
  %23 = bitcast float* %22 to <4 x float>*
  %wide.load6 = load <4 x float>, <4 x float>* %23, align 4, !tbaa !4843
  %24 = getelementptr inbounds float, float* %22, i64 4
  %25 = bitcast float* %24 to <4 x float>*
  %wide.load7 = load <4 x float>, <4 x float>* %25, align 4, !tbaa !4843
  %26 = fadd <4 x float> %wide.load, %wide.load6
  %27 = fadd <4 x float> %wide.load5, %wide.load7
  %28 = getelementptr inbounds float, float* %17, i64 %index
  %29 = bitcast float* %28 to <4 x float>*
  store <4 x float> %26, <4 x float>* %29, align 4, !tbaa !4846
  %30 = getelementptr inbounds float, float* %28, i64 4
  %31 = bitcast float* %30 to <4 x float>*
  store <4 x float> %27, <4 x float>* %31, align 4, !tbaa !4846
  %index.next = add i64 %index, 8
  %32 = icmp eq i64 %index.next, 1000
  br i1 %32, label %for_end, label %vector.body, !llvm.loop !4849

call_fail:                                        ; preds = %for_end, %entry
  %merge = phi i32 [ %13, %entry ], [ 0, %for_end ]
  ret i32 %merge

for_end:                                          ; preds = %vector.body
  %33 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %34 = call i32 %33(i32 1, i32 %4, i8* nonnull %6)
  br label %call_fail
}

; Function Attrs: nounwind
define private i32 @__tvm_parallel_lambda.413(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 999
  %14 = sdiv i32 %13, %12
  %15 = mul nsw i32 %14, %0
  %16 = icmp slt i32 %15, 1000
  %17 = select i1 %16, i32 %15, i32 1000
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %14, %18
  %20 = icmp slt i32 %19, 1000
  %21 = select i1 %20, i32 %19, i32 1000
  %22 = icmp slt i32 %17, %21
  br i1 %22, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %23 = add i32 %17, 1
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, -1
  %26 = sext i32 %21 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %25, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %27 = trunc i64 %indvars.iv7 to i32
  %28 = shl i32 %27, 11
  %29 = sext i32 %28 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %.06 = phi <16 x float> [ zeroinitializer, %for_begin1.preheader ], [ %38, %for_body2 ]
  %30 = shl nsw i64 %indvars.iv, 4
  %31 = getelementptr inbounds float, float* %4, i64 %30
  %32 = bitcast float* %31 to <16 x float>*
  %33 = load <16 x float>, <16 x float>* %32, align 64, !tbaa !4850
  %34 = add nuw nsw i64 %30, %29
  %35 = getelementptr inbounds float, float* %7, i64 %34
  %36 = bitcast float* %35 to <16 x float>*
  %37 = load <16 x float>, <16 x float>* %36, align 64, !tbaa !4853
  %38 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %33, <16 x float> %37, <16 x float> %.06)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %39 = getelementptr inbounds float, float* %10, i64 %indvars.iv7
  %.0.vec.extract = extractelement <16 x float> %38, i32 0
  %40 = fadd float %.0.vec.extract, 0.000000e+00
  %.4.vec.extract = extractelement <16 x float> %38, i32 1
  %41 = fadd float %.4.vec.extract, %40
  %.8.vec.extract = extractelement <16 x float> %38, i32 2
  %42 = fadd float %.8.vec.extract, %41
  %.12.vec.extract = extractelement <16 x float> %38, i32 3
  %43 = fadd float %.12.vec.extract, %42
  %.16.vec.extract = extractelement <16 x float> %38, i32 4
  %44 = fadd float %.16.vec.extract, %43
  %.20.vec.extract = extractelement <16 x float> %38, i32 5
  %45 = fadd float %.20.vec.extract, %44
  %.24.vec.extract = extractelement <16 x float> %38, i32 6
  %46 = fadd float %.24.vec.extract, %45
  %.28.vec.extract = extractelement <16 x float> %38, i32 7
  %47 = fadd float %.28.vec.extract, %46
  %.32.vec.extract = extractelement <16 x float> %38, i32 8
  %48 = fadd float %.32.vec.extract, %47
  %.36.vec.extract = extractelement <16 x float> %38, i32 9
  %49 = fadd float %.36.vec.extract, %48
  %.40.vec.extract = extractelement <16 x float> %38, i32 10
  %50 = fadd float %.40.vec.extract, %49
  %.44.vec.extract = extractelement <16 x float> %38, i32 11
  %51 = fadd float %.44.vec.extract, %50
  %.48.vec.extract = extractelement <16 x float> %38, i32 12
  %52 = fadd float %.48.vec.extract, %51
  %.52.vec.extract = extractelement <16 x float> %38, i32 13
  %53 = fadd float %.52.vec.extract, %52
  %.56.vec.extract = extractelement <16 x float> %38, i32 14
  %54 = fadd float %.56.vec.extract, %53
  %.60.vec.extract = extractelement <16 x float> %38, i32 15
  %55 = fadd float %.60.vec.extract, %54
  store float %55, float* %39, align 4, !tbaa !4840
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %56 = icmp slt i64 %indvars.iv.next8, %26
  br i1 %56, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 6
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.414, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !4856
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !4870
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !4873
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !4875
  %32 = getelementptr inbounds i8, i8* %0, i64 40
  %33 = bitcast i8* %32 to %1**
  %34 = load %1*, %1** %33, align 8
  %35 = getelementptr inbounds i8, i8* %1, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4, !tbaa !4879
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %43 = load i64*, i64** %42, align 8
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  %66 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %1, %1* %34, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %1, %1* %34, i64 0, i32 4
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %1, %1* %34, i64 0, i32 5
  %77 = load i64*, i64** %76, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %78(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.415, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %79 = getelementptr inbounds i8, i8* %1, i64 4
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 4, !tbaa !4881
  switch i32 %81, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.416, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %83(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.417, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.418, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %85 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %85(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.419, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %37, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ]

assert_fail11:                                    ; preds = %assert_end10
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %86(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.420, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  %87 = icmp eq i32 %45, 1
  br i1 %87, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %88(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %89 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, 5
  br i1 %91, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %93 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 2
  %96 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %97 = load i8, i8* %96, align 1
  %98 = icmp eq i8 %97, 32
  %99 = and i1 %95, %98
  %100 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %101, 1
  %103 = and i1 %99, %102
  br i1 %103, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %105 = load i64, i64* %41, align 8, !tbaa !4883
  %106 = trunc i64 %105 to i32
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %109 = getelementptr inbounds i64, i64* %41, i64 1
  %110 = load i64, i64* %109, align 8, !tbaa !4897
  %111 = trunc i64 %110 to i32
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %113(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %114 = getelementptr inbounds i64, i64* %41, i64 2
  %115 = load i64, i64* %114, align 8, !tbaa !4899
  %116 = trunc i64 %115 to i32
  %117 = icmp eq i32 %116, 230
  br i1 %117, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %118(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.421, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %119 = getelementptr inbounds i64, i64* %41, i64 3
  %120 = load i64, i64* %119, align 8, !tbaa !4902
  %121 = trunc i64 %120 to i32
  %122 = icmp eq i32 %121, 230
  br i1 %122, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %123 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %123(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.422, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %124 = getelementptr inbounds i64, i64* %41, i64 4
  %125 = load i64, i64* %124, align 8, !tbaa !4904
  %126 = trunc i64 %125 to i32
  %127 = icmp eq i32 %126, 3
  br i1 %127, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %128 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %128(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.423, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %129 = icmp eq i64* %43, null
  br i1 %129, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end28
  %130 = getelementptr inbounds i64, i64* %43, i64 1
  %131 = bitcast i64* %130 to <4 x i64>*
  %132 = load <4 x i64>, <4 x i64>* %131, align 8, !tbaa !4908
  %133 = trunc <4 x i64> %132 to <4 x i32>
  %134 = icmp eq <4 x i32> %133, <i32 158700, i32 690, i32 3, i32 1>
  %135 = load i64, i64* %43, align 8, !tbaa !4919
  %136 = trunc i64 %135 to i32
  %137 = icmp eq i32 %136, 158700
  %rdx.shuf173 = shufflevector <4 x i1> %134, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx174 = and <4 x i1> %134, %rdx.shuf173
  %rdx.shuf175 = shufflevector <4 x i1> %bin.rdx174, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx176 = and <4 x i1> %bin.rdx174, %rdx.shuf175
  %138 = extractelement <4 x i1> %bin.rdx176, i32 0
  %139 = and i1 %138, %137
  br i1 %139, label %if_end, label %assert_fail29, !prof !5

if_end:                                           ; preds = %assert_end28, %if_then
  %140 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %141 = load i64, i64* %140, align 8
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %assert_end32, label %assert_fail31, !prof !5

assert_fail29:                                    ; preds = %if_then
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %143(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.424, i64 0, i64 0))
  ret i32 -1

assert_fail31:                                    ; preds = %if_end
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %144(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %if_end
  %145 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 6
  br i1 %147, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 2
  %152 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 32
  %155 = and i1 %151, %154
  %156 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %157 = load i16, i16* %156, align 2
  %158 = icmp eq i16 %157, 1
  %159 = and i1 %155, %158
  br i1 %159, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %161 = load i64, i64* %51, align 8, !tbaa !4923
  %162 = trunc i64 %161 to i32
  %163 = icmp eq i32 %162, 8
  br i1 %163, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %164 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %164(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.151, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %165 = getelementptr inbounds i64, i64* %51, i64 1
  %166 = load i64, i64* %165, align 8, !tbaa !4937
  %167 = trunc i64 %166 to i32
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %170 = getelementptr inbounds i64, i64* %51, i64 2
  %171 = load i64, i64* %170, align 8, !tbaa !4939
  %172 = trunc i64 %171 to i32
  %173 = icmp eq i32 %172, 7
  br i1 %173, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %174(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.358, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %175 = getelementptr inbounds i64, i64* %51, i64 3
  %176 = load i64, i64* %175, align 8, !tbaa !4942
  %177 = trunc i64 %176 to i32
  %178 = icmp eq i32 %177, 7
  br i1 %178, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %179(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.359, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %180 = getelementptr inbounds i64, i64* %51, i64 4
  %181 = load i64, i64* %180, align 8, !tbaa !4944
  %182 = trunc i64 %181 to i32
  %183 = icmp eq i32 %182, 3
  br i1 %183, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %184(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.425, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %185 = getelementptr inbounds i64, i64* %51, i64 5
  %186 = load i64, i64* %185, align 8, !tbaa !4948
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 8
  br i1 %188, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.426, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %190 = icmp eq i64* %53, null
  br i1 %190, label %if_end50, label %if_then49, !prof !50

if_then49:                                        ; preds = %assert_end48
  %191 = getelementptr inbounds i64, i64* %53, i64 2
  %192 = bitcast i64* %191 to <4 x i64>*
  %193 = load <4 x i64>, <4 x i64>* %192, align 8, !tbaa !4950
  %194 = trunc <4 x i64> %193 to <4 x i32>
  %195 = icmp eq <4 x i32> %194, <i32 168, i32 24, i32 8, i32 1>
  %196 = getelementptr inbounds i64, i64* %53, i64 1
  %197 = load i64, i64* %196, align 8, !tbaa !4961
  %198 = trunc i64 %197 to i32
  %199 = icmp eq i32 %198, 1176
  %200 = load i64, i64* %53, align 8, !tbaa !4965
  %201 = trunc i64 %200 to i32
  %202 = icmp eq i32 %201, 1176
  %rdx.shuf169 = shufflevector <4 x i1> %195, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx170 = and <4 x i1> %195, %rdx.shuf169
  %rdx.shuf171 = shufflevector <4 x i1> %bin.rdx170, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx172 = and <4 x i1> %bin.rdx170, %rdx.shuf171
  %203 = extractelement <4 x i1> %bin.rdx172, i32 0
  %204 = and i1 %203, %199
  %205 = and i1 %204, %202
  br i1 %205, label %if_end50, label %assert_fail51, !prof !5

if_end50:                                         ; preds = %assert_end48, %if_then49
  %206 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %207 = load i64, i64* %206, align 8
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %assert_end54, label %assert_fail53, !prof !5

assert_fail51:                                    ; preds = %if_then49
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.427, i64 0, i64 0))
  ret i32 -1

assert_fail53:                                    ; preds = %if_end50
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %210(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %if_end50
  %211 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = icmp eq i32 %212, 1
  br i1 %213, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %214(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %215 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %47, %216
  br i1 %217, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %218 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %218(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %219 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %220, 5
  br i1 %221, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %223 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %224 = load i8, i8* %223, align 1
  %225 = icmp eq i8 %224, 2
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %227 = load i8, i8* %226, align 1
  %228 = icmp eq i8 %227, 32
  %229 = and i1 %225, %228
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %231 = load i16, i16* %230, align 2
  %232 = icmp eq i16 %231, 1
  %233 = and i1 %229, %232
  br i1 %233, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %234(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %235 = load i64, i64* %57, align 8, !tbaa !4967
  %236 = trunc i64 %235 to i32
  %237 = icmp eq i32 %236, 1
  br i1 %237, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %238(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %239 = getelementptr inbounds i64, i64* %57, i64 1
  %240 = load i64, i64* %239, align 8, !tbaa !4981
  %241 = trunc i64 %240 to i32
  %242 = icmp eq i32 %241, 8
  br i1 %242, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %243(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.154, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %244 = getelementptr inbounds i64, i64* %57, i64 2
  %245 = load i64, i64* %244, align 8, !tbaa !4983
  %246 = trunc i64 %245 to i32
  %247 = icmp eq i32 %246, 1
  br i1 %247, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %248(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %249 = getelementptr inbounds i64, i64* %57, i64 3
  %250 = load i64, i64* %249, align 8, !tbaa !4986
  %251 = trunc i64 %250 to i32
  %252 = icmp eq i32 %251, 1
  br i1 %252, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %253(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %254 = getelementptr inbounds i64, i64* %57, i64 4
  %255 = load i64, i64* %254, align 8, !tbaa !4988
  %256 = trunc i64 %255 to i32
  %257 = icmp eq i32 %256, 8
  br i1 %257, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %258(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.428, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %259 = icmp eq i64* %59, null
  br i1 %259, label %if_end74, label %if_then73, !prof !50

if_then73:                                        ; preds = %assert_end72
  %260 = getelementptr inbounds i64, i64* %59, i64 1
  %261 = bitcast i64* %260 to <4 x i64>*
  %262 = load <4 x i64>, <4 x i64>* %261, align 8, !tbaa !4992
  %263 = trunc <4 x i64> %262 to <4 x i32>
  %264 = icmp eq <4 x i32> %263, <i32 8, i32 8, i32 8, i32 1>
  %265 = load i64, i64* %59, align 8, !tbaa !5003
  %266 = trunc i64 %265 to i32
  %267 = icmp eq i32 %266, 64
  %rdx.shuf165 = shufflevector <4 x i1> %264, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx166 = and <4 x i1> %264, %rdx.shuf165
  %rdx.shuf167 = shufflevector <4 x i1> %bin.rdx166, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx168 = and <4 x i1> %bin.rdx166, %rdx.shuf167
  %268 = extractelement <4 x i1> %bin.rdx168, i32 0
  %269 = and i1 %268, %267
  br i1 %269, label %if_end74, label %assert_fail75, !prof !5

if_end74:                                         ; preds = %assert_end72, %if_then73
  %270 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %271 = load i64, i64* %270, align 8
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %assert_end78, label %assert_fail77, !prof !5

assert_fail75:                                    ; preds = %if_then73
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([228 x i8], [228 x i8]* @.str.429, i64 0, i64 0))
  ret i32 -1

assert_fail77:                                    ; preds = %if_end74
  %274 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %274(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %if_end74
  %275 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %276 = load i32, i32* %275, align 4
  %277 = icmp eq i32 %276, 1
  br i1 %277, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %278 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %278(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %279 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %280 = load i32, i32* %279, align 4
  %281 = icmp eq i32 %47, %280
  br i1 %281, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %282(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %283 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %284 = load i32, i32* %283, align 4
  %285 = icmp eq i32 %284, 5
  br i1 %285, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %287 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %288 = load i8, i8* %287, align 1
  %289 = icmp eq i8 %288, 2
  %290 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %291, 32
  %293 = and i1 %289, %292
  %294 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %295 = load i16, i16* %294, align 2
  %296 = icmp eq i16 %295, 1
  %297 = and i1 %293, %296
  br i1 %297, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %298 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %298(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %299 = load i64, i64* %63, align 8, !tbaa !5007
  %300 = trunc i64 %299 to i32
  %301 = icmp eq i32 %300, 1
  br i1 %301, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %302(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %303 = getelementptr inbounds i64, i64* %63, i64 1
  %304 = load i64, i64* %303, align 8, !tbaa !5021
  %305 = trunc i64 %304 to i32
  %306 = icmp eq i32 %305, 8
  br i1 %306, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %307 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %307(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.156, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %308 = getelementptr inbounds i64, i64* %63, i64 2
  %309 = load i64, i64* %308, align 8, !tbaa !5023
  %310 = trunc i64 %309 to i32
  %311 = icmp eq i32 %310, 1
  br i1 %311, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %312 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %312(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %313 = getelementptr inbounds i64, i64* %63, i64 3
  %314 = load i64, i64* %313, align 8, !tbaa !5026
  %315 = trunc i64 %314 to i32
  %316 = icmp eq i32 %315, 1
  br i1 %316, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %317 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %317(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %318 = getelementptr inbounds i64, i64* %63, i64 4
  %319 = load i64, i64* %318, align 8, !tbaa !5028
  %320 = trunc i64 %319 to i32
  %321 = icmp eq i32 %320, 8
  br i1 %321, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %322 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %322(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.430, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %323 = icmp eq i64* %65, null
  br i1 %323, label %if_end98, label %if_then97, !prof !50

if_then97:                                        ; preds = %assert_end96
  %324 = getelementptr inbounds i64, i64* %65, i64 1
  %325 = bitcast i64* %324 to <4 x i64>*
  %326 = load <4 x i64>, <4 x i64>* %325, align 8, !tbaa !5032
  %327 = trunc <4 x i64> %326 to <4 x i32>
  %328 = icmp eq <4 x i32> %327, <i32 8, i32 8, i32 8, i32 1>
  %329 = load i64, i64* %65, align 8, !tbaa !5043
  %330 = trunc i64 %329 to i32
  %331 = icmp eq i32 %330, 64
  %rdx.shuf161 = shufflevector <4 x i1> %328, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx162 = and <4 x i1> %328, %rdx.shuf161
  %rdx.shuf163 = shufflevector <4 x i1> %bin.rdx162, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx164 = and <4 x i1> %bin.rdx162, %rdx.shuf163
  %332 = extractelement <4 x i1> %bin.rdx164, i32 0
  %333 = and i1 %332, %331
  br i1 %333, label %if_end98, label %assert_fail99, !prof !5

if_end98:                                         ; preds = %assert_end96, %if_then97
  %334 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %335 = load i64, i64* %334, align 8
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %assert_end102, label %assert_fail101, !prof !5

assert_fail99:                                    ; preds = %if_then97
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([228 x i8], [228 x i8]* @.str.431, i64 0, i64 0))
  ret i32 -1

assert_fail101:                                   ; preds = %if_end98
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %338(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %if_end98
  %339 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %340 = load i32, i32* %339, align 4
  %341 = icmp eq i32 %340, 1
  br i1 %341, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %342 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %342(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %343 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %344 = load i32, i32* %343, align 4
  %345 = icmp eq i32 %47, %344
  br i1 %345, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %346 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %346(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %347 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %348 = load i32, i32* %347, align 4
  %349 = icmp eq i32 %348, 5
  br i1 %349, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %350(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %351 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %352 = load i8, i8* %351, align 1
  %353 = icmp eq i8 %352, 2
  %354 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %355 = load i8, i8* %354, align 1
  %356 = icmp eq i8 %355, 32
  %357 = and i1 %353, %356
  %358 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %359 = load i16, i16* %358, align 2
  %360 = icmp eq i16 %359, 1
  %361 = and i1 %357, %360
  br i1 %361, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %362 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %362(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %363 = load i64, i64* %69, align 8, !tbaa !5047
  %364 = trunc i64 %363 to i32
  %365 = icmp eq i32 %364, 1
  br i1 %365, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %366 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %366(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %367 = getelementptr inbounds i64, i64* %69, i64 1
  %368 = load i64, i64* %367, align 8, !tbaa !5061
  %369 = trunc i64 %368 to i32
  %370 = icmp eq i32 %369, 8
  br i1 %370, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %371 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %371(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.158, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %372 = getelementptr inbounds i64, i64* %69, i64 2
  %373 = load i64, i64* %372, align 8, !tbaa !5063
  %374 = trunc i64 %373 to i32
  %375 = icmp eq i32 %374, 1
  br i1 %375, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %376(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %377 = getelementptr inbounds i64, i64* %69, i64 3
  %378 = load i64, i64* %377, align 8, !tbaa !5066
  %379 = trunc i64 %378 to i32
  %380 = icmp eq i32 %379, 1
  br i1 %380, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %381 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %381(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %382 = getelementptr inbounds i64, i64* %69, i64 4
  %383 = load i64, i64* %382, align 8, !tbaa !5068
  %384 = trunc i64 %383 to i32
  %385 = icmp eq i32 %384, 8
  br i1 %385, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %386 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %386(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.432, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %387 = icmp eq i64* %71, null
  br i1 %387, label %if_end122, label %if_then121, !prof !50

if_then121:                                       ; preds = %assert_end120
  %388 = getelementptr inbounds i64, i64* %71, i64 1
  %389 = bitcast i64* %388 to <4 x i64>*
  %390 = load <4 x i64>, <4 x i64>* %389, align 8, !tbaa !5072
  %391 = trunc <4 x i64> %390 to <4 x i32>
  %392 = icmp eq <4 x i32> %391, <i32 8, i32 8, i32 8, i32 1>
  %393 = load i64, i64* %71, align 8, !tbaa !5083
  %394 = trunc i64 %393 to i32
  %395 = icmp eq i32 %394, 64
  %rdx.shuf157 = shufflevector <4 x i1> %392, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx158 = and <4 x i1> %392, %rdx.shuf157
  %rdx.shuf159 = shufflevector <4 x i1> %bin.rdx158, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx160 = and <4 x i1> %bin.rdx158, %rdx.shuf159
  %396 = extractelement <4 x i1> %bin.rdx160, i32 0
  %397 = and i1 %396, %395
  br i1 %397, label %if_end122, label %assert_fail123, !prof !5

if_end122:                                        ; preds = %assert_end120, %if_then121
  %398 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %399 = load i64, i64* %398, align 8
  %400 = icmp eq i64 %399, 0
  br i1 %400, label %assert_end126, label %assert_fail125, !prof !5

assert_fail123:                                   ; preds = %if_then121
  %401 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %401(i8* getelementptr inbounds ([228 x i8], [228 x i8]* @.str.433, i64 0, i64 0))
  ret i32 -1

assert_fail125:                                   ; preds = %if_end122
  %402 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %402(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %if_end122
  %403 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %404 = load i32, i32* %403, align 4
  %405 = icmp eq i32 %404, 1
  br i1 %405, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %406 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %406(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %407 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %408 = load i32, i32* %407, align 4
  %409 = icmp eq i32 %47, %408
  br i1 %409, label %assert_end130, label %assert_fail129, !prof !5

assert_fail129:                                   ; preds = %assert_end128
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %410(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end130:                                    ; preds = %assert_end128
  %411 = getelementptr inbounds %1, %1* %34, i64 0, i32 2
  %412 = load i32, i32* %411, align 4
  %413 = icmp eq i32 %412, 5
  br i1 %413, label %assert_end132, label %assert_fail131, !prof !5

assert_fail131:                                   ; preds = %assert_end130
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %414(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end132:                                    ; preds = %assert_end130
  %415 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 0
  %416 = load i8, i8* %415, align 1
  %417 = icmp eq i8 %416, 2
  %418 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 1
  %419 = load i8, i8* %418, align 1
  %420 = icmp eq i8 %419, 32
  %421 = and i1 %417, %420
  %422 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 2
  %423 = load i16, i16* %422, align 2
  %424 = icmp eq i16 %423, 1
  %425 = and i1 %421, %424
  br i1 %425, label %assert_end134, label %assert_fail133, !prof !5

assert_fail133:                                   ; preds = %assert_end132
  %426 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %426(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %assert_end132
  %427 = load i64, i64* %75, align 8, !tbaa !5087
  %428 = trunc i64 %427 to i32
  %429 = icmp eq i32 %428, 1
  br i1 %429, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %430 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %430(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.116, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %431 = getelementptr inbounds i64, i64* %75, i64 1
  %432 = load i64, i64* %431, align 8, !tbaa !5101
  %433 = trunc i64 %432 to i32
  %434 = icmp eq i32 %433, 8
  br i1 %434, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %435 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %435(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.160, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %436 = getelementptr inbounds i64, i64* %75, i64 2
  %437 = load i64, i64* %436, align 8, !tbaa !5103
  %438 = trunc i64 %437 to i32
  %439 = icmp eq i32 %438, 112
  br i1 %439, label %assert_end140, label %assert_fail139, !prof !5

assert_fail139:                                   ; preds = %assert_end138
  %440 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %440(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.434, i64 0, i64 0))
  ret i32 -1

assert_end140:                                    ; preds = %assert_end138
  %441 = getelementptr inbounds i64, i64* %75, i64 3
  %442 = load i64, i64* %441, align 8, !tbaa !5106
  %443 = trunc i64 %442 to i32
  %444 = icmp eq i32 %443, 112
  br i1 %444, label %assert_end142, label %assert_fail141, !prof !5

assert_fail141:                                   ; preds = %assert_end140
  %445 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %445(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.435, i64 0, i64 0))
  ret i32 -1

assert_end142:                                    ; preds = %assert_end140
  %446 = getelementptr inbounds i64, i64* %75, i64 4
  %447 = load i64, i64* %446, align 8, !tbaa !5108
  %448 = trunc i64 %447 to i32
  %449 = icmp eq i32 %448, 8
  br i1 %449, label %assert_end144, label %assert_fail143, !prof !5

assert_fail143:                                   ; preds = %assert_end142
  %450 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %450(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.436, i64 0, i64 0))
  ret i32 -1

assert_end144:                                    ; preds = %assert_end142
  %451 = icmp eq i64* %77, null
  br i1 %451, label %if_end146, label %if_then145, !prof !50

if_then145:                                       ; preds = %assert_end144
  %452 = getelementptr inbounds i64, i64* %77, i64 1
  %453 = bitcast i64* %452 to <4 x i64>*
  %454 = load <4 x i64>, <4 x i64>* %453, align 8, !tbaa !5112
  %455 = trunc <4 x i64> %454 to <4 x i32>
  %456 = icmp eq <4 x i32> %455, <i32 100352, i32 896, i32 8, i32 1>
  %457 = load i64, i64* %77, align 8, !tbaa !5123
  %458 = trunc i64 %457 to i32
  %459 = icmp eq i32 %458, 802816
  %rdx.shuf = shufflevector <4 x i1> %456, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %456, %rdx.shuf
  %rdx.shuf155 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx156 = and <4 x i1> %bin.rdx, %rdx.shuf155
  %460 = extractelement <4 x i1> %bin.rdx156, i32 0
  %461 = and i1 %460, %459
  br i1 %461, label %if_end146, label %assert_fail147, !prof !5

if_end146:                                        ; preds = %assert_end144, %if_then145
  %462 = getelementptr inbounds %1, %1* %34, i64 0, i32 6
  %463 = load i64, i64* %462, align 8
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %assert_end150, label %assert_fail149, !prof !5

assert_fail147:                                   ; preds = %if_then145
  %465 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %465(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.437, i64 0, i64 0))
  ret i32 -1

assert_fail149:                                   ; preds = %if_end146
  %466 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %466(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end150:                                    ; preds = %if_end146
  %467 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 0
  %468 = load i32, i32* %467, align 4
  %469 = icmp eq i32 %468, 1
  br i1 %469, label %assert_end152, label %assert_fail151, !prof !5

assert_fail151:                                   ; preds = %assert_end150
  %470 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %470(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end152:                                    ; preds = %assert_end150
  %471 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 1
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %47, %472
  br i1 %473, label %assert_end154, label %assert_fail153, !prof !5

assert_fail153:                                   ; preds = %assert_end152
  %474 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %474(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end154:                                    ; preds = %assert_end152
  %475 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu_compute_(i8* %39, i8* %49, i8* %73, i8* %55, i8* %61, i8* %67, i32 %47)
  ret i32 %475
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_nn_relu_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %7 = alloca %32, align 8
  %8 = getelementptr inbounds %32, %32* %7, i64 0, i32 0
  store i8* %0, i8** %8, align 8
  %9 = getelementptr inbounds %32, %32* %7, i64 0, i32 1
  store i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %32, %32* %7, i64 0, i32 2
  store i8* %2, i8** %10, align 8
  %11 = getelementptr inbounds %32, %32* %7, i64 0, i32 3
  store i8* %3, i8** %11, align 8
  %12 = getelementptr inbounds %32, %32* %7, i64 0, i32 4
  store i8* %4, i8** %12, align 8
  %13 = getelementptr inbounds %32, %32* %7, i64 0, i32 5
  store i8* %5, i8** %13, align 8
  %14 = getelementptr inbounds %32, %32* %7, i64 0, i32 6
  store i32 %6, i32* %14, align 8
  %15 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %16 = bitcast %32* %7 to i8*
  %17 = call i32 %15(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.438, i8* nonnull %16, i32 0)
  ret i32 %17
}

define private i32 @__tvm_parallel_lambda.438(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = alloca [28 x <8 x float>], align 16
  %.sub = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0
  %4 = bitcast i8* %2 to float**
  %5 = load float*, float** %4, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to float**
  %8 = load float*, float** %7, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 16
  %10 = bitcast i8* %9 to float**
  %11 = load float*, float** %10, align 8
  %12 = getelementptr inbounds i8, i8* %2, i64 24
  %13 = bitcast i8* %12 to float**
  %14 = load float*, float** %13, align 8
  %15 = getelementptr inbounds i8, i8* %2, i64 32
  %16 = bitcast i8* %15 to float**
  %17 = load float*, float** %16, align 8
  %18 = getelementptr inbounds i8, i8* %2, i64 40
  %19 = bitcast i8* %18 to float**
  %20 = load float*, float** %19, align 8
  %21 = getelementptr inbounds i8, i8* %2, i64 48
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, 895
  %27 = sdiv i32 %26, %25
  %28 = mul nsw i32 %27, %0
  %29 = icmp slt i32 %28, 896
  %30 = select i1 %29, i32 %28, i32 896
  %31 = add nsw i32 %0, 1
  %32 = mul nsw i32 %27, %31
  %33 = icmp slt i32 %32, 896
  %34 = select i1 %33, i32 %32, i32 896
  %35 = icmp slt i32 %30, %34
  br i1 %35, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %36 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 8
  %37 = bitcast float* %36 to <8 x float>*
  %38 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 16
  %39 = bitcast float* %38 to <8 x float>*
  %40 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 24
  %41 = bitcast float* %40 to <8 x float>*
  %42 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 32
  %43 = bitcast float* %42 to <8 x float>*
  %44 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 40
  %45 = bitcast float* %44 to <8 x float>*
  %46 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 48
  %47 = bitcast float* %46 to <8 x float>*
  %48 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 56
  %49 = bitcast float* %48 to <8 x float>*
  %50 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 64
  %51 = bitcast float* %50 to <8 x float>*
  %52 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 72
  %53 = bitcast float* %52 to <8 x float>*
  %54 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 80
  %55 = bitcast float* %54 to <8 x float>*
  %56 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 88
  %57 = bitcast float* %56 to <8 x float>*
  %58 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 96
  %59 = bitcast float* %58 to <8 x float>*
  %60 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 104
  %61 = bitcast float* %60 to <8 x float>*
  %62 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 112
  %63 = bitcast float* %62 to <8 x float>*
  %64 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 120
  %65 = bitcast float* %64 to <8 x float>*
  %66 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 128
  %67 = bitcast float* %66 to <8 x float>*
  %68 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 136
  %69 = bitcast float* %68 to <8 x float>*
  %70 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 144
  %71 = bitcast float* %70 to <8 x float>*
  %72 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 152
  %73 = bitcast float* %72 to <8 x float>*
  %74 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 160
  %75 = bitcast float* %74 to <8 x float>*
  %76 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 168
  %77 = bitcast float* %76 to <8 x float>*
  %78 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 176
  %79 = bitcast float* %78 to <8 x float>*
  %80 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 184
  %81 = bitcast float* %80 to <8 x float>*
  %82 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 192
  %83 = bitcast float* %82 to <8 x float>*
  %84 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 200
  %85 = bitcast float* %84 to <8 x float>*
  %86 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 208
  %87 = bitcast float* %86 to <8 x float>*
  %88 = getelementptr inbounds [28 x <8 x float>], [28 x <8 x float>]* %3, i64 0, i64 0, i64 216
  %89 = bitcast float* %88 to <8 x float>*
  %90 = bitcast [28 x <8 x float>]* %3 to i8*
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_end21.3
  %91 = phi i32 [ %30, %for_body.lr.ph ], [ %762, %for_end21.3 ]
  %92 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %93 = tail call i8* %92(i32 1, i32 %23, i64 3584, i32 2, i32 32)
  %94 = srem i32 %91, 112
  %95 = mul nsw i32 %94, 1380
  %96 = sdiv i32 %91, 112
  %97 = mul nsw i32 %96, 1176
  %98 = bitcast i8* %93 to float*
  %99 = sext i32 %97 to i64
  %100 = sext i32 %95 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end21.3, %entry
  ret i32 0

for_begin16.preheader:                            ; preds = %for_begin13.preheader
  %101 = mul nsw i32 %91, 896
  %102 = shl nsw i32 %96, 3
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %14, i64 %103
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 32, !tbaa !5127
  %107 = getelementptr inbounds float, float* %17, i64 %103
  %108 = bitcast float* %107 to <8 x float>*
  %109 = load <8 x float>, <8 x float>* %108, align 32, !tbaa !5130
  %110 = getelementptr inbounds float, float* %20, i64 %103
  %111 = bitcast float* %110 to <8 x float>*
  %112 = load <8 x float>, <8 x float>* %111, align 32, !tbaa !5133
  %113 = bitcast i8* %93 to <8 x float>*
  %114 = load <8 x float>, <8 x float>* %113, align 32, !tbaa !5136
  %115 = fadd <8 x float> %114, %106
  %116 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %115, <8 x float> %109, <8 x float> %112)
  %117 = fcmp ogt <8 x float> %116, zeroinitializer
  %118 = select <8 x i1> %117, <8 x float> %116, <8 x float> zeroinitializer
  %119 = sext i32 %101 to i64
  %120 = getelementptr inbounds float, float* %11, i64 %119
  %121 = bitcast float* %120 to <8 x float>*
  store <8 x float> %118, <8 x float>* %121, align 32, !tbaa !5139
  %122 = or i32 %101, 8
  %123 = getelementptr inbounds i8, i8* %93, i64 32
  %124 = bitcast i8* %123 to <8 x float>*
  %125 = load <8 x float>, <8 x float>* %124, align 32, !tbaa !5136
  %126 = fadd <8 x float> %125, %106
  %127 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %126, <8 x float> %109, <8 x float> %112)
  %128 = fcmp ogt <8 x float> %127, zeroinitializer
  %129 = select <8 x i1> %128, <8 x float> %127, <8 x float> zeroinitializer
  %130 = sext i32 %122 to i64
  %131 = getelementptr inbounds float, float* %11, i64 %130
  %132 = bitcast float* %131 to <8 x float>*
  store <8 x float> %129, <8 x float>* %132, align 32, !tbaa !5139
  %133 = or i32 %101, 16
  %134 = getelementptr inbounds i8, i8* %93, i64 64
  %135 = bitcast i8* %134 to <8 x float>*
  %136 = load <8 x float>, <8 x float>* %135, align 32, !tbaa !5136
  %137 = fadd <8 x float> %136, %106
  %138 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %137, <8 x float> %109, <8 x float> %112)
  %139 = fcmp ogt <8 x float> %138, zeroinitializer
  %140 = select <8 x i1> %139, <8 x float> %138, <8 x float> zeroinitializer
  %141 = sext i32 %133 to i64
  %142 = getelementptr inbounds float, float* %11, i64 %141
  %143 = bitcast float* %142 to <8 x float>*
  store <8 x float> %140, <8 x float>* %143, align 32, !tbaa !5139
  %144 = or i32 %101, 24
  %145 = getelementptr inbounds i8, i8* %93, i64 96
  %146 = bitcast i8* %145 to <8 x float>*
  %147 = load <8 x float>, <8 x float>* %146, align 32, !tbaa !5136
  %148 = fadd <8 x float> %147, %106
  %149 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %148, <8 x float> %109, <8 x float> %112)
  %150 = fcmp ogt <8 x float> %149, zeroinitializer
  %151 = select <8 x i1> %150, <8 x float> %149, <8 x float> zeroinitializer
  %152 = sext i32 %144 to i64
  %153 = getelementptr inbounds float, float* %11, i64 %152
  %154 = bitcast float* %153 to <8 x float>*
  store <8 x float> %151, <8 x float>* %154, align 32, !tbaa !5139
  %155 = or i32 %101, 32
  %156 = getelementptr inbounds i8, i8* %93, i64 128
  %157 = bitcast i8* %156 to <8 x float>*
  %158 = load <8 x float>, <8 x float>* %157, align 32, !tbaa !5136
  %159 = fadd <8 x float> %158, %106
  %160 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %159, <8 x float> %109, <8 x float> %112)
  %161 = fcmp ogt <8 x float> %160, zeroinitializer
  %162 = select <8 x i1> %161, <8 x float> %160, <8 x float> zeroinitializer
  %163 = sext i32 %155 to i64
  %164 = getelementptr inbounds float, float* %11, i64 %163
  %165 = bitcast float* %164 to <8 x float>*
  store <8 x float> %162, <8 x float>* %165, align 32, !tbaa !5139
  %166 = or i32 %101, 40
  %167 = getelementptr inbounds i8, i8* %93, i64 160
  %168 = bitcast i8* %167 to <8 x float>*
  %169 = load <8 x float>, <8 x float>* %168, align 32, !tbaa !5136
  %170 = fadd <8 x float> %169, %106
  %171 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %170, <8 x float> %109, <8 x float> %112)
  %172 = fcmp ogt <8 x float> %171, zeroinitializer
  %173 = select <8 x i1> %172, <8 x float> %171, <8 x float> zeroinitializer
  %174 = sext i32 %166 to i64
  %175 = getelementptr inbounds float, float* %11, i64 %174
  %176 = bitcast float* %175 to <8 x float>*
  store <8 x float> %173, <8 x float>* %176, align 32, !tbaa !5139
  %177 = or i32 %101, 48
  %178 = getelementptr inbounds i8, i8* %93, i64 192
  %179 = bitcast i8* %178 to <8 x float>*
  %180 = load <8 x float>, <8 x float>* %179, align 32, !tbaa !5136
  %181 = fadd <8 x float> %180, %106
  %182 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %181, <8 x float> %109, <8 x float> %112)
  %183 = fcmp ogt <8 x float> %182, zeroinitializer
  %184 = select <8 x i1> %183, <8 x float> %182, <8 x float> zeroinitializer
  %185 = sext i32 %177 to i64
  %186 = getelementptr inbounds float, float* %11, i64 %185
  %187 = bitcast float* %186 to <8 x float>*
  store <8 x float> %184, <8 x float>* %187, align 32, !tbaa !5139
  %188 = or i32 %101, 56
  %189 = getelementptr inbounds i8, i8* %93, i64 224
  %190 = bitcast i8* %189 to <8 x float>*
  %191 = load <8 x float>, <8 x float>* %190, align 32, !tbaa !5136
  %192 = fadd <8 x float> %191, %106
  %193 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %192, <8 x float> %109, <8 x float> %112)
  %194 = fcmp ogt <8 x float> %193, zeroinitializer
  %195 = select <8 x i1> %194, <8 x float> %193, <8 x float> zeroinitializer
  %196 = sext i32 %188 to i64
  %197 = getelementptr inbounds float, float* %11, i64 %196
  %198 = bitcast float* %197 to <8 x float>*
  store <8 x float> %195, <8 x float>* %198, align 32, !tbaa !5139
  %199 = or i32 %101, 64
  %200 = getelementptr inbounds i8, i8* %93, i64 256
  %201 = bitcast i8* %200 to <8 x float>*
  %202 = load <8 x float>, <8 x float>* %201, align 32, !tbaa !5136
  %203 = fadd <8 x float> %202, %106
  %204 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %203, <8 x float> %109, <8 x float> %112)
  %205 = fcmp ogt <8 x float> %204, zeroinitializer
  %206 = select <8 x i1> %205, <8 x float> %204, <8 x float> zeroinitializer
  %207 = sext i32 %199 to i64
  %208 = getelementptr inbounds float, float* %11, i64 %207
  %209 = bitcast float* %208 to <8 x float>*
  store <8 x float> %206, <8 x float>* %209, align 32, !tbaa !5139
  %210 = or i32 %101, 72
  %211 = getelementptr inbounds i8, i8* %93, i64 288
  %212 = bitcast i8* %211 to <8 x float>*
  %213 = load <8 x float>, <8 x float>* %212, align 32, !tbaa !5136
  %214 = fadd <8 x float> %213, %106
  %215 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %214, <8 x float> %109, <8 x float> %112)
  %216 = fcmp ogt <8 x float> %215, zeroinitializer
  %217 = select <8 x i1> %216, <8 x float> %215, <8 x float> zeroinitializer
  %218 = sext i32 %210 to i64
  %219 = getelementptr inbounds float, float* %11, i64 %218
  %220 = bitcast float* %219 to <8 x float>*
  store <8 x float> %217, <8 x float>* %220, align 32, !tbaa !5139
  %221 = or i32 %101, 80
  %222 = getelementptr inbounds i8, i8* %93, i64 320
  %223 = bitcast i8* %222 to <8 x float>*
  %224 = load <8 x float>, <8 x float>* %223, align 32, !tbaa !5136
  %225 = fadd <8 x float> %224, %106
  %226 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %225, <8 x float> %109, <8 x float> %112)
  %227 = fcmp ogt <8 x float> %226, zeroinitializer
  %228 = select <8 x i1> %227, <8 x float> %226, <8 x float> zeroinitializer
  %229 = sext i32 %221 to i64
  %230 = getelementptr inbounds float, float* %11, i64 %229
  %231 = bitcast float* %230 to <8 x float>*
  store <8 x float> %228, <8 x float>* %231, align 32, !tbaa !5139
  %232 = or i32 %101, 88
  %233 = getelementptr inbounds i8, i8* %93, i64 352
  %234 = bitcast i8* %233 to <8 x float>*
  %235 = load <8 x float>, <8 x float>* %234, align 32, !tbaa !5136
  %236 = fadd <8 x float> %235, %106
  %237 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %236, <8 x float> %109, <8 x float> %112)
  %238 = fcmp ogt <8 x float> %237, zeroinitializer
  %239 = select <8 x i1> %238, <8 x float> %237, <8 x float> zeroinitializer
  %240 = sext i32 %232 to i64
  %241 = getelementptr inbounds float, float* %11, i64 %240
  %242 = bitcast float* %241 to <8 x float>*
  store <8 x float> %239, <8 x float>* %242, align 32, !tbaa !5139
  %243 = or i32 %101, 96
  %244 = getelementptr inbounds i8, i8* %93, i64 384
  %245 = bitcast i8* %244 to <8 x float>*
  %246 = load <8 x float>, <8 x float>* %245, align 32, !tbaa !5136
  %247 = fadd <8 x float> %246, %106
  %248 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %247, <8 x float> %109, <8 x float> %112)
  %249 = fcmp ogt <8 x float> %248, zeroinitializer
  %250 = select <8 x i1> %249, <8 x float> %248, <8 x float> zeroinitializer
  %251 = sext i32 %243 to i64
  %252 = getelementptr inbounds float, float* %11, i64 %251
  %253 = bitcast float* %252 to <8 x float>*
  store <8 x float> %250, <8 x float>* %253, align 32, !tbaa !5139
  %254 = or i32 %101, 104
  %255 = getelementptr inbounds i8, i8* %93, i64 416
  %256 = bitcast i8* %255 to <8 x float>*
  %257 = load <8 x float>, <8 x float>* %256, align 32, !tbaa !5136
  %258 = fadd <8 x float> %257, %106
  %259 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %258, <8 x float> %109, <8 x float> %112)
  %260 = fcmp ogt <8 x float> %259, zeroinitializer
  %261 = select <8 x i1> %260, <8 x float> %259, <8 x float> zeroinitializer
  %262 = sext i32 %254 to i64
  %263 = getelementptr inbounds float, float* %11, i64 %262
  %264 = bitcast float* %263 to <8 x float>*
  store <8 x float> %261, <8 x float>* %264, align 32, !tbaa !5139
  %265 = or i32 %101, 112
  %266 = getelementptr inbounds i8, i8* %93, i64 448
  %267 = bitcast i8* %266 to <8 x float>*
  %268 = load <8 x float>, <8 x float>* %267, align 32, !tbaa !5136
  %269 = fadd <8 x float> %268, %106
  %270 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %269, <8 x float> %109, <8 x float> %112)
  %271 = fcmp ogt <8 x float> %270, zeroinitializer
  %272 = select <8 x i1> %271, <8 x float> %270, <8 x float> zeroinitializer
  %273 = sext i32 %265 to i64
  %274 = getelementptr inbounds float, float* %11, i64 %273
  %275 = bitcast float* %274 to <8 x float>*
  store <8 x float> %272, <8 x float>* %275, align 32, !tbaa !5139
  %276 = or i32 %101, 120
  %277 = getelementptr inbounds i8, i8* %93, i64 480
  %278 = bitcast i8* %277 to <8 x float>*
  %279 = load <8 x float>, <8 x float>* %278, align 32, !tbaa !5136
  %280 = fadd <8 x float> %279, %106
  %281 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %280, <8 x float> %109, <8 x float> %112)
  %282 = fcmp ogt <8 x float> %281, zeroinitializer
  %283 = select <8 x i1> %282, <8 x float> %281, <8 x float> zeroinitializer
  %284 = sext i32 %276 to i64
  %285 = getelementptr inbounds float, float* %11, i64 %284
  %286 = bitcast float* %285 to <8 x float>*
  store <8 x float> %283, <8 x float>* %286, align 32, !tbaa !5139
  %287 = add i32 %101, 128
  %288 = getelementptr inbounds i8, i8* %93, i64 512
  %289 = bitcast i8* %288 to <8 x float>*
  %290 = load <8 x float>, <8 x float>* %289, align 32, !tbaa !5136
  %291 = fadd <8 x float> %290, %106
  %292 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %291, <8 x float> %109, <8 x float> %112)
  %293 = fcmp ogt <8 x float> %292, zeroinitializer
  %294 = select <8 x i1> %293, <8 x float> %292, <8 x float> zeroinitializer
  %295 = sext i32 %287 to i64
  %296 = getelementptr inbounds float, float* %11, i64 %295
  %297 = bitcast float* %296 to <8 x float>*
  store <8 x float> %294, <8 x float>* %297, align 32, !tbaa !5139
  %298 = add i32 %101, 136
  %299 = getelementptr inbounds i8, i8* %93, i64 544
  %300 = bitcast i8* %299 to <8 x float>*
  %301 = load <8 x float>, <8 x float>* %300, align 32, !tbaa !5136
  %302 = fadd <8 x float> %301, %106
  %303 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %302, <8 x float> %109, <8 x float> %112)
  %304 = fcmp ogt <8 x float> %303, zeroinitializer
  %305 = select <8 x i1> %304, <8 x float> %303, <8 x float> zeroinitializer
  %306 = sext i32 %298 to i64
  %307 = getelementptr inbounds float, float* %11, i64 %306
  %308 = bitcast float* %307 to <8 x float>*
  store <8 x float> %305, <8 x float>* %308, align 32, !tbaa !5139
  %309 = add i32 %101, 144
  %310 = getelementptr inbounds i8, i8* %93, i64 576
  %311 = bitcast i8* %310 to <8 x float>*
  %312 = load <8 x float>, <8 x float>* %311, align 32, !tbaa !5136
  %313 = fadd <8 x float> %312, %106
  %314 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %313, <8 x float> %109, <8 x float> %112)
  %315 = fcmp ogt <8 x float> %314, zeroinitializer
  %316 = select <8 x i1> %315, <8 x float> %314, <8 x float> zeroinitializer
  %317 = sext i32 %309 to i64
  %318 = getelementptr inbounds float, float* %11, i64 %317
  %319 = bitcast float* %318 to <8 x float>*
  store <8 x float> %316, <8 x float>* %319, align 32, !tbaa !5139
  %320 = add i32 %101, 152
  %321 = getelementptr inbounds i8, i8* %93, i64 608
  %322 = bitcast i8* %321 to <8 x float>*
  %323 = load <8 x float>, <8 x float>* %322, align 32, !tbaa !5136
  %324 = fadd <8 x float> %323, %106
  %325 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %324, <8 x float> %109, <8 x float> %112)
  %326 = fcmp ogt <8 x float> %325, zeroinitializer
  %327 = select <8 x i1> %326, <8 x float> %325, <8 x float> zeroinitializer
  %328 = sext i32 %320 to i64
  %329 = getelementptr inbounds float, float* %11, i64 %328
  %330 = bitcast float* %329 to <8 x float>*
  store <8 x float> %327, <8 x float>* %330, align 32, !tbaa !5139
  %331 = add i32 %101, 160
  %332 = getelementptr inbounds i8, i8* %93, i64 640
  %333 = bitcast i8* %332 to <8 x float>*
  %334 = load <8 x float>, <8 x float>* %333, align 32, !tbaa !5136
  %335 = fadd <8 x float> %334, %106
  %336 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %335, <8 x float> %109, <8 x float> %112)
  %337 = fcmp ogt <8 x float> %336, zeroinitializer
  %338 = select <8 x i1> %337, <8 x float> %336, <8 x float> zeroinitializer
  %339 = sext i32 %331 to i64
  %340 = getelementptr inbounds float, float* %11, i64 %339
  %341 = bitcast float* %340 to <8 x float>*
  store <8 x float> %338, <8 x float>* %341, align 32, !tbaa !5139
  %342 = add i32 %101, 168
  %343 = getelementptr inbounds i8, i8* %93, i64 672
  %344 = bitcast i8* %343 to <8 x float>*
  %345 = load <8 x float>, <8 x float>* %344, align 32, !tbaa !5136
  %346 = fadd <8 x float> %345, %106
  %347 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %346, <8 x float> %109, <8 x float> %112)
  %348 = fcmp ogt <8 x float> %347, zeroinitializer
  %349 = select <8 x i1> %348, <8 x float> %347, <8 x float> zeroinitializer
  %350 = sext i32 %342 to i64
  %351 = getelementptr inbounds float, float* %11, i64 %350
  %352 = bitcast float* %351 to <8 x float>*
  store <8 x float> %349, <8 x float>* %352, align 32, !tbaa !5139
  %353 = add i32 %101, 176
  %354 = getelementptr inbounds i8, i8* %93, i64 704
  %355 = bitcast i8* %354 to <8 x float>*
  %356 = load <8 x float>, <8 x float>* %355, align 32, !tbaa !5136
  %357 = fadd <8 x float> %356, %106
  %358 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %357, <8 x float> %109, <8 x float> %112)
  %359 = fcmp ogt <8 x float> %358, zeroinitializer
  %360 = select <8 x i1> %359, <8 x float> %358, <8 x float> zeroinitializer
  %361 = sext i32 %353 to i64
  %362 = getelementptr inbounds float, float* %11, i64 %361
  %363 = bitcast float* %362 to <8 x float>*
  store <8 x float> %360, <8 x float>* %363, align 32, !tbaa !5139
  %364 = add i32 %101, 184
  %365 = getelementptr inbounds i8, i8* %93, i64 736
  %366 = bitcast i8* %365 to <8 x float>*
  %367 = load <8 x float>, <8 x float>* %366, align 32, !tbaa !5136
  %368 = fadd <8 x float> %367, %106
  %369 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %368, <8 x float> %109, <8 x float> %112)
  %370 = fcmp ogt <8 x float> %369, zeroinitializer
  %371 = select <8 x i1> %370, <8 x float> %369, <8 x float> zeroinitializer
  %372 = sext i32 %364 to i64
  %373 = getelementptr inbounds float, float* %11, i64 %372
  %374 = bitcast float* %373 to <8 x float>*
  store <8 x float> %371, <8 x float>* %374, align 32, !tbaa !5139
  %375 = add i32 %101, 192
  %376 = getelementptr inbounds i8, i8* %93, i64 768
  %377 = bitcast i8* %376 to <8 x float>*
  %378 = load <8 x float>, <8 x float>* %377, align 32, !tbaa !5136
  %379 = fadd <8 x float> %378, %106
  %380 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %379, <8 x float> %109, <8 x float> %112)
  %381 = fcmp ogt <8 x float> %380, zeroinitializer
  %382 = select <8 x i1> %381, <8 x float> %380, <8 x float> zeroinitializer
  %383 = sext i32 %375 to i64
  %384 = getelementptr inbounds float, float* %11, i64 %383
  %385 = bitcast float* %384 to <8 x float>*
  store <8 x float> %382, <8 x float>* %385, align 32, !tbaa !5139
  %386 = add i32 %101, 200
  %387 = getelementptr inbounds i8, i8* %93, i64 800
  %388 = bitcast i8* %387 to <8 x float>*
  %389 = load <8 x float>, <8 x float>* %388, align 32, !tbaa !5136
  %390 = fadd <8 x float> %389, %106
  %391 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %390, <8 x float> %109, <8 x float> %112)
  %392 = fcmp ogt <8 x float> %391, zeroinitializer
  %393 = select <8 x i1> %392, <8 x float> %391, <8 x float> zeroinitializer
  %394 = sext i32 %386 to i64
  %395 = getelementptr inbounds float, float* %11, i64 %394
  %396 = bitcast float* %395 to <8 x float>*
  store <8 x float> %393, <8 x float>* %396, align 32, !tbaa !5139
  %397 = add i32 %101, 208
  %398 = getelementptr inbounds i8, i8* %93, i64 832
  %399 = bitcast i8* %398 to <8 x float>*
  %400 = load <8 x float>, <8 x float>* %399, align 32, !tbaa !5136
  %401 = fadd <8 x float> %400, %106
  %402 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %401, <8 x float> %109, <8 x float> %112)
  %403 = fcmp ogt <8 x float> %402, zeroinitializer
  %404 = select <8 x i1> %403, <8 x float> %402, <8 x float> zeroinitializer
  %405 = sext i32 %397 to i64
  %406 = getelementptr inbounds float, float* %11, i64 %405
  %407 = bitcast float* %406 to <8 x float>*
  store <8 x float> %404, <8 x float>* %407, align 32, !tbaa !5139
  %408 = add i32 %101, 216
  %409 = getelementptr inbounds i8, i8* %93, i64 864
  %410 = bitcast i8* %409 to <8 x float>*
  %411 = load <8 x float>, <8 x float>* %410, align 32, !tbaa !5136
  %412 = fadd <8 x float> %411, %106
  %413 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %412, <8 x float> %109, <8 x float> %112)
  %414 = fcmp ogt <8 x float> %413, zeroinitializer
  %415 = select <8 x i1> %414, <8 x float> %413, <8 x float> zeroinitializer
  %416 = sext i32 %408 to i64
  %417 = getelementptr inbounds float, float* %11, i64 %416
  %418 = bitcast float* %417 to <8 x float>*
  store <8 x float> %415, <8 x float>* %418, align 32, !tbaa !5139
  br label %for_body20.1

for_body2:                                        ; preds = %for_begin13.preheader, %for_body
  %indvar = phi i64 [ 0, %for_body ], [ %indvar.next, %for_begin13.preheader ]
  %419 = mul nuw nsw i64 %indvar, 168
  %420 = add nsw i64 %419, %100
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %90, i8 0, i64 896, i1 false)
  br label %for_begin7.preheader

for_begin13.preheader:                            ; preds = %for_end9
  store <8 x float> %555, <8 x float>* %.sub, align 16, !tbaa !5142
  store <8 x float> %561, <8 x float>* %37, align 16, !tbaa !5142
  store <8 x float> %567, <8 x float>* %39, align 16, !tbaa !5142
  store <8 x float> %573, <8 x float>* %41, align 16, !tbaa !5142
  store <8 x float> %579, <8 x float>* %43, align 16, !tbaa !5142
  store <8 x float> %585, <8 x float>* %45, align 16, !tbaa !5142
  store <8 x float> %591, <8 x float>* %47, align 16, !tbaa !5142
  store <8 x float> %597, <8 x float>* %49, align 16, !tbaa !5142
  store <8 x float> %603, <8 x float>* %51, align 16, !tbaa !5142
  store <8 x float> %609, <8 x float>* %53, align 16, !tbaa !5142
  store <8 x float> %615, <8 x float>* %55, align 16, !tbaa !5142
  store <8 x float> %621, <8 x float>* %57, align 16, !tbaa !5142
  store <8 x float> %627, <8 x float>* %59, align 16, !tbaa !5142
  store <8 x float> %633, <8 x float>* %61, align 16, !tbaa !5142
  store <8 x float> %639, <8 x float>* %63, align 16, !tbaa !5142
  store <8 x float> %645, <8 x float>* %65, align 16, !tbaa !5142
  store <8 x float> %651, <8 x float>* %67, align 16, !tbaa !5142
  store <8 x float> %657, <8 x float>* %69, align 16, !tbaa !5142
  store <8 x float> %663, <8 x float>* %71, align 16, !tbaa !5142
  store <8 x float> %669, <8 x float>* %73, align 16, !tbaa !5142
  store <8 x float> %675, <8 x float>* %75, align 16, !tbaa !5142
  store <8 x float> %681, <8 x float>* %77, align 16, !tbaa !5142
  store <8 x float> %687, <8 x float>* %79, align 16, !tbaa !5142
  store <8 x float> %693, <8 x float>* %81, align 16, !tbaa !5142
  store <8 x float> %699, <8 x float>* %83, align 16, !tbaa !5142
  store <8 x float> %705, <8 x float>* %85, align 16, !tbaa !5142
  store <8 x float> %711, <8 x float>* %87, align 16, !tbaa !5142
  store <8 x float> %717, <8 x float>* %89, align 16, !tbaa !5142
  %421 = mul nuw nsw i64 %indvar, 224
  %422 = getelementptr inbounds float, float* %98, i64 %421
  %423 = bitcast float* %422 to <8 x float>*
  store <8 x float> %555, <8 x float>* %423, align 32, !tbaa !5136
  %424 = or i64 %421, 8
  %425 = getelementptr inbounds float, float* %98, i64 %424
  %426 = bitcast float* %425 to <8 x float>*
  store <8 x float> %561, <8 x float>* %426, align 32, !tbaa !5136
  %427 = or i64 %421, 16
  %428 = getelementptr inbounds float, float* %98, i64 %427
  %429 = bitcast float* %428 to <8 x float>*
  store <8 x float> %567, <8 x float>* %429, align 32, !tbaa !5136
  %430 = or i64 %421, 24
  %431 = getelementptr inbounds float, float* %98, i64 %430
  %432 = bitcast float* %431 to <8 x float>*
  store <8 x float> %573, <8 x float>* %432, align 32, !tbaa !5136
  %433 = add nuw nsw i64 %421, 32
  %434 = getelementptr inbounds float, float* %98, i64 %433
  %435 = bitcast float* %434 to <8 x float>*
  store <8 x float> %579, <8 x float>* %435, align 32, !tbaa !5136
  %436 = add nuw nsw i64 %421, 40
  %437 = getelementptr inbounds float, float* %98, i64 %436
  %438 = bitcast float* %437 to <8 x float>*
  store <8 x float> %585, <8 x float>* %438, align 32, !tbaa !5136
  %439 = add nuw nsw i64 %421, 48
  %440 = getelementptr inbounds float, float* %98, i64 %439
  %441 = bitcast float* %440 to <8 x float>*
  store <8 x float> %591, <8 x float>* %441, align 32, !tbaa !5136
  %442 = add nuw nsw i64 %421, 56
  %443 = getelementptr inbounds float, float* %98, i64 %442
  %444 = bitcast float* %443 to <8 x float>*
  store <8 x float> %597, <8 x float>* %444, align 32, !tbaa !5136
  %445 = add nuw nsw i64 %421, 64
  %446 = getelementptr inbounds float, float* %98, i64 %445
  %447 = bitcast float* %446 to <8 x float>*
  store <8 x float> %603, <8 x float>* %447, align 32, !tbaa !5136
  %448 = add nuw nsw i64 %421, 72
  %449 = getelementptr inbounds float, float* %98, i64 %448
  %450 = bitcast float* %449 to <8 x float>*
  store <8 x float> %609, <8 x float>* %450, align 32, !tbaa !5136
  %451 = add nuw nsw i64 %421, 80
  %452 = getelementptr inbounds float, float* %98, i64 %451
  %453 = bitcast float* %452 to <8 x float>*
  store <8 x float> %615, <8 x float>* %453, align 32, !tbaa !5136
  %454 = add nuw nsw i64 %421, 88
  %455 = getelementptr inbounds float, float* %98, i64 %454
  %456 = bitcast float* %455 to <8 x float>*
  store <8 x float> %621, <8 x float>* %456, align 32, !tbaa !5136
  %457 = add nuw nsw i64 %421, 96
  %458 = getelementptr inbounds float, float* %98, i64 %457
  %459 = bitcast float* %458 to <8 x float>*
  store <8 x float> %627, <8 x float>* %459, align 32, !tbaa !5136
  %460 = add nuw nsw i64 %421, 104
  %461 = getelementptr inbounds float, float* %98, i64 %460
  %462 = bitcast float* %461 to <8 x float>*
  store <8 x float> %633, <8 x float>* %462, align 32, !tbaa !5136
  %463 = add nuw nsw i64 %421, 112
  %464 = getelementptr inbounds float, float* %98, i64 %463
  %465 = bitcast float* %464 to <8 x float>*
  store <8 x float> %639, <8 x float>* %465, align 32, !tbaa !5136
  %466 = add nuw nsw i64 %421, 120
  %467 = getelementptr inbounds float, float* %98, i64 %466
  %468 = bitcast float* %467 to <8 x float>*
  store <8 x float> %645, <8 x float>* %468, align 32, !tbaa !5136
  %469 = add nuw nsw i64 %421, 128
  %470 = getelementptr inbounds float, float* %98, i64 %469
  %471 = bitcast float* %470 to <8 x float>*
  store <8 x float> %651, <8 x float>* %471, align 32, !tbaa !5136
  %472 = add nuw nsw i64 %421, 136
  %473 = getelementptr inbounds float, float* %98, i64 %472
  %474 = bitcast float* %473 to <8 x float>*
  store <8 x float> %657, <8 x float>* %474, align 32, !tbaa !5136
  %475 = add nuw nsw i64 %421, 144
  %476 = getelementptr inbounds float, float* %98, i64 %475
  %477 = bitcast float* %476 to <8 x float>*
  store <8 x float> %663, <8 x float>* %477, align 32, !tbaa !5136
  %478 = add nuw nsw i64 %421, 152
  %479 = getelementptr inbounds float, float* %98, i64 %478
  %480 = bitcast float* %479 to <8 x float>*
  store <8 x float> %669, <8 x float>* %480, align 32, !tbaa !5136
  %481 = add nuw nsw i64 %421, 160
  %482 = getelementptr inbounds float, float* %98, i64 %481
  %483 = bitcast float* %482 to <8 x float>*
  store <8 x float> %675, <8 x float>* %483, align 32, !tbaa !5136
  %484 = add nuw nsw i64 %421, 168
  %485 = getelementptr inbounds float, float* %98, i64 %484
  %486 = bitcast float* %485 to <8 x float>*
  store <8 x float> %681, <8 x float>* %486, align 32, !tbaa !5136
  %487 = add nuw nsw i64 %421, 176
  %488 = getelementptr inbounds float, float* %98, i64 %487
  %489 = bitcast float* %488 to <8 x float>*
  store <8 x float> %687, <8 x float>* %489, align 32, !tbaa !5136
  %490 = add nuw nsw i64 %421, 184
  %491 = getelementptr inbounds float, float* %98, i64 %490
  %492 = bitcast float* %491 to <8 x float>*
  store <8 x float> %693, <8 x float>* %492, align 32, !tbaa !5136
  %493 = add nuw nsw i64 %421, 192
  %494 = load <8 x float>, <8 x float>* %83, align 16, !tbaa !5153
  %495 = getelementptr inbounds float, float* %98, i64 %493
  %496 = bitcast float* %495 to <8 x float>*
  store <8 x float> %494, <8 x float>* %496, align 32, !tbaa !5136
  %497 = add nuw nsw i64 %421, 200
  %498 = load <8 x float>, <8 x float>* %85, align 16, !tbaa !5153
  %499 = getelementptr inbounds float, float* %98, i64 %497
  %500 = bitcast float* %499 to <8 x float>*
  store <8 x float> %498, <8 x float>* %500, align 32, !tbaa !5136
  %501 = add nuw nsw i64 %421, 208
  %502 = load <8 x float>, <8 x float>* %87, align 16, !tbaa !5153
  %503 = getelementptr inbounds float, float* %98, i64 %501
  %504 = bitcast float* %503 to <8 x float>*
  store <8 x float> %502, <8 x float>* %504, align 32, !tbaa !5136
  %505 = add nuw nsw i64 %421, 216
  %506 = load <8 x float>, <8 x float>* %89, align 16, !tbaa !5153
  %507 = getelementptr inbounds float, float* %98, i64 %505
  %508 = bitcast float* %507 to <8 x float>*
  store <8 x float> %506, <8 x float>* %508, align 32, !tbaa !5136
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond226 = icmp eq i64 %indvar.next, 4
  br i1 %exitcond226, label %for_begin16.preheader, label %for_body2, !prof !50

for_begin7.preheader:                             ; preds = %for_end9, %for_body2
  %indvars.iv220 = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next221, %for_end9 ]
  %.lcssa80.lcssa189 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %717, %for_end9 ]
  %.lcssa78.lcssa187 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %711, %for_end9 ]
  %.lcssa76.lcssa185 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %705, %for_end9 ]
  %.lcssa74.lcssa183 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %699, %for_end9 ]
  %.lcssa72.lcssa181 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %693, %for_end9 ]
  %.lcssa70.lcssa179 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %687, %for_end9 ]
  %.lcssa68.lcssa177 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %681, %for_end9 ]
  %.lcssa66.lcssa175 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %675, %for_end9 ]
  %.lcssa64.lcssa173 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %669, %for_end9 ]
  %.lcssa62.lcssa171 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %663, %for_end9 ]
  %.lcssa60.lcssa169 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %657, %for_end9 ]
  %.lcssa58.lcssa167 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %651, %for_end9 ]
  %.lcssa56.lcssa165 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %645, %for_end9 ]
  %.lcssa54.lcssa163 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %639, %for_end9 ]
  %.lcssa52.lcssa161 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %633, %for_end9 ]
  %.lcssa50.lcssa159 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %627, %for_end9 ]
  %.lcssa48.lcssa157 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %621, %for_end9 ]
  %.lcssa46.lcssa155 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %615, %for_end9 ]
  %.lcssa44.lcssa153 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %609, %for_end9 ]
  %.lcssa42.lcssa151 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %603, %for_end9 ]
  %.lcssa40.lcssa149 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %597, %for_end9 ]
  %.lcssa38.lcssa147 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %591, %for_end9 ]
  %.lcssa36.lcssa145 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %585, %for_end9 ]
  %.lcssa34.lcssa143 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %579, %for_end9 ]
  %.lcssa32.lcssa141 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %573, %for_end9 ]
  %.lcssa30.lcssa140 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %567, %for_end9 ]
  %.lcssa28.lcssa138 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %561, %for_end9 ]
  %.lcssa.lcssa136 = phi <8 x float> [ zeroinitializer, %for_body2 ], [ %555, %for_end9 ]
  %509 = mul nuw nsw i64 %indvars.iv220, 690
  %510 = add nsw i64 %420, %509
  %511 = mul nuw nsw i64 %indvars.iv220, 168
  %512 = add nsw i64 %511, %99
  br label %for_begin10.preheader

for_begin10.preheader:                            ; preds = %for_end12, %for_begin7.preheader
  %indvars.iv217 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next218, %for_end12 ]
  %.lcssa80135 = phi <8 x float> [ %.lcssa80.lcssa189, %for_begin7.preheader ], [ %717, %for_end12 ]
  %.lcssa78133 = phi <8 x float> [ %.lcssa78.lcssa187, %for_begin7.preheader ], [ %711, %for_end12 ]
  %.lcssa76131 = phi <8 x float> [ %.lcssa76.lcssa185, %for_begin7.preheader ], [ %705, %for_end12 ]
  %.lcssa74129 = phi <8 x float> [ %.lcssa74.lcssa183, %for_begin7.preheader ], [ %699, %for_end12 ]
  %.lcssa72127 = phi <8 x float> [ %.lcssa72.lcssa181, %for_begin7.preheader ], [ %693, %for_end12 ]
  %.lcssa70125 = phi <8 x float> [ %.lcssa70.lcssa179, %for_begin7.preheader ], [ %687, %for_end12 ]
  %.lcssa68123 = phi <8 x float> [ %.lcssa68.lcssa177, %for_begin7.preheader ], [ %681, %for_end12 ]
  %.lcssa66121 = phi <8 x float> [ %.lcssa66.lcssa175, %for_begin7.preheader ], [ %675, %for_end12 ]
  %.lcssa64119 = phi <8 x float> [ %.lcssa64.lcssa173, %for_begin7.preheader ], [ %669, %for_end12 ]
  %.lcssa62117 = phi <8 x float> [ %.lcssa62.lcssa171, %for_begin7.preheader ], [ %663, %for_end12 ]
  %.lcssa60115 = phi <8 x float> [ %.lcssa60.lcssa169, %for_begin7.preheader ], [ %657, %for_end12 ]
  %.lcssa58113 = phi <8 x float> [ %.lcssa58.lcssa167, %for_begin7.preheader ], [ %651, %for_end12 ]
  %.lcssa56111 = phi <8 x float> [ %.lcssa56.lcssa165, %for_begin7.preheader ], [ %645, %for_end12 ]
  %.lcssa54109 = phi <8 x float> [ %.lcssa54.lcssa163, %for_begin7.preheader ], [ %639, %for_end12 ]
  %.lcssa52107 = phi <8 x float> [ %.lcssa52.lcssa161, %for_begin7.preheader ], [ %633, %for_end12 ]
  %.lcssa50105 = phi <8 x float> [ %.lcssa50.lcssa159, %for_begin7.preheader ], [ %627, %for_end12 ]
  %.lcssa48103 = phi <8 x float> [ %.lcssa48.lcssa157, %for_begin7.preheader ], [ %621, %for_end12 ]
  %.lcssa46101 = phi <8 x float> [ %.lcssa46.lcssa155, %for_begin7.preheader ], [ %615, %for_end12 ]
  %.lcssa4499 = phi <8 x float> [ %.lcssa44.lcssa153, %for_begin7.preheader ], [ %609, %for_end12 ]
  %.lcssa4297 = phi <8 x float> [ %.lcssa42.lcssa151, %for_begin7.preheader ], [ %603, %for_end12 ]
  %.lcssa4095 = phi <8 x float> [ %.lcssa40.lcssa149, %for_begin7.preheader ], [ %597, %for_end12 ]
  %.lcssa3893 = phi <8 x float> [ %.lcssa38.lcssa147, %for_begin7.preheader ], [ %591, %for_end12 ]
  %.lcssa3691 = phi <8 x float> [ %.lcssa36.lcssa145, %for_begin7.preheader ], [ %585, %for_end12 ]
  %.lcssa3489 = phi <8 x float> [ %.lcssa34.lcssa143, %for_begin7.preheader ], [ %579, %for_end12 ]
  %.lcssa3287 = phi <8 x float> [ %.lcssa32.lcssa141, %for_begin7.preheader ], [ %573, %for_end12 ]
  %.lcssa3085 = phi <8 x float> [ %.lcssa30.lcssa140, %for_begin7.preheader ], [ %567, %for_end12 ]
  %.lcssa2884 = phi <8 x float> [ %.lcssa28.lcssa138, %for_begin7.preheader ], [ %561, %for_end12 ]
  %.lcssa82 = phi <8 x float> [ %.lcssa.lcssa136, %for_begin7.preheader ], [ %555, %for_end12 ]
  %513 = mul nuw nsw i64 %indvars.iv217, 3
  %514 = add nsw i64 %510, %513
  %515 = mul nuw nsw i64 %indvars.iv217, 24
  %516 = add nsw i64 %512, %515
  br label %for_body11

for_end9:                                         ; preds = %for_end12
  %indvars.iv.next221 = add nuw nsw i64 %indvars.iv220, 1
  %exitcond222 = icmp eq i64 %indvars.iv.next221, 7
  br i1 %exitcond222, label %for_begin13.preheader, label %for_begin7.preheader, !prof !50

for_body11:                                       ; preds = %for_body11, %for_begin10.preheader
  %indvars.iv = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next, %for_body11 ]
  %517 = phi <8 x float> [ %.lcssa80135, %for_begin10.preheader ], [ %717, %for_body11 ]
  %518 = phi <8 x float> [ %.lcssa78133, %for_begin10.preheader ], [ %711, %for_body11 ]
  %519 = phi <8 x float> [ %.lcssa76131, %for_begin10.preheader ], [ %705, %for_body11 ]
  %520 = phi <8 x float> [ %.lcssa74129, %for_begin10.preheader ], [ %699, %for_body11 ]
  %521 = phi <8 x float> [ %.lcssa72127, %for_begin10.preheader ], [ %693, %for_body11 ]
  %522 = phi <8 x float> [ %.lcssa70125, %for_begin10.preheader ], [ %687, %for_body11 ]
  %523 = phi <8 x float> [ %.lcssa68123, %for_begin10.preheader ], [ %681, %for_body11 ]
  %524 = phi <8 x float> [ %.lcssa66121, %for_begin10.preheader ], [ %675, %for_body11 ]
  %525 = phi <8 x float> [ %.lcssa64119, %for_begin10.preheader ], [ %669, %for_body11 ]
  %526 = phi <8 x float> [ %.lcssa62117, %for_begin10.preheader ], [ %663, %for_body11 ]
  %527 = phi <8 x float> [ %.lcssa60115, %for_begin10.preheader ], [ %657, %for_body11 ]
  %528 = phi <8 x float> [ %.lcssa58113, %for_begin10.preheader ], [ %651, %for_body11 ]
  %529 = phi <8 x float> [ %.lcssa56111, %for_begin10.preheader ], [ %645, %for_body11 ]
  %530 = phi <8 x float> [ %.lcssa54109, %for_begin10.preheader ], [ %639, %for_body11 ]
  %531 = phi <8 x float> [ %.lcssa52107, %for_begin10.preheader ], [ %633, %for_body11 ]
  %532 = phi <8 x float> [ %.lcssa50105, %for_begin10.preheader ], [ %627, %for_body11 ]
  %533 = phi <8 x float> [ %.lcssa48103, %for_begin10.preheader ], [ %621, %for_body11 ]
  %534 = phi <8 x float> [ %.lcssa46101, %for_begin10.preheader ], [ %615, %for_body11 ]
  %535 = phi <8 x float> [ %.lcssa4499, %for_begin10.preheader ], [ %609, %for_body11 ]
  %536 = phi <8 x float> [ %.lcssa4297, %for_begin10.preheader ], [ %603, %for_body11 ]
  %537 = phi <8 x float> [ %.lcssa4095, %for_begin10.preheader ], [ %597, %for_body11 ]
  %538 = phi <8 x float> [ %.lcssa3893, %for_begin10.preheader ], [ %591, %for_body11 ]
  %539 = phi <8 x float> [ %.lcssa3691, %for_begin10.preheader ], [ %585, %for_body11 ]
  %540 = phi <8 x float> [ %.lcssa3489, %for_begin10.preheader ], [ %579, %for_body11 ]
  %541 = phi <8 x float> [ %.lcssa3287, %for_begin10.preheader ], [ %573, %for_body11 ]
  %542 = phi <8 x float> [ %.lcssa3085, %for_begin10.preheader ], [ %567, %for_body11 ]
  %543 = phi <8 x float> [ %.lcssa2884, %for_begin10.preheader ], [ %561, %for_body11 ]
  %544 = phi <8 x float> [ %.lcssa82, %for_begin10.preheader ], [ %555, %for_body11 ]
  %545 = add nsw i64 %514, %indvars.iv
  %546 = getelementptr inbounds float, float* %5, i64 %545
  %547 = load float, float* %546, align 4, !tbaa !5154
  %548 = insertelement <8 x float> undef, float %547, i32 0
  %549 = shufflevector <8 x float> %548, <8 x float> undef, <8 x i32> zeroinitializer
  %550 = shl i64 %indvars.iv, 3
  %551 = add nsw i64 %516, %550
  %552 = getelementptr inbounds float, float* %8, i64 %551
  %553 = bitcast float* %552 to <8 x float>*
  %554 = load <8 x float>, <8 x float>* %553, align 32, !tbaa !5157
  %555 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %549, <8 x float> %554, <8 x float> %544)
  %556 = add nsw i64 %545, 6
  %557 = getelementptr inbounds float, float* %5, i64 %556
  %558 = load float, float* %557, align 4, !tbaa !5154
  %559 = insertelement <8 x float> undef, float %558, i32 0
  %560 = shufflevector <8 x float> %559, <8 x float> undef, <8 x i32> zeroinitializer
  %561 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %560, <8 x float> %554, <8 x float> %543)
  %562 = add nsw i64 %545, 12
  %563 = getelementptr inbounds float, float* %5, i64 %562
  %564 = load float, float* %563, align 4, !tbaa !5154
  %565 = insertelement <8 x float> undef, float %564, i32 0
  %566 = shufflevector <8 x float> %565, <8 x float> undef, <8 x i32> zeroinitializer
  %567 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %566, <8 x float> %554, <8 x float> %542)
  %568 = add nsw i64 %545, 18
  %569 = getelementptr inbounds float, float* %5, i64 %568
  %570 = load float, float* %569, align 4, !tbaa !5154
  %571 = insertelement <8 x float> undef, float %570, i32 0
  %572 = shufflevector <8 x float> %571, <8 x float> undef, <8 x i32> zeroinitializer
  %573 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %572, <8 x float> %554, <8 x float> %541)
  %574 = add nsw i64 %545, 24
  %575 = getelementptr inbounds float, float* %5, i64 %574
  %576 = load float, float* %575, align 4, !tbaa !5154
  %577 = insertelement <8 x float> undef, float %576, i32 0
  %578 = shufflevector <8 x float> %577, <8 x float> undef, <8 x i32> zeroinitializer
  %579 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %578, <8 x float> %554, <8 x float> %540)
  %580 = add nsw i64 %545, 30
  %581 = getelementptr inbounds float, float* %5, i64 %580
  %582 = load float, float* %581, align 4, !tbaa !5154
  %583 = insertelement <8 x float> undef, float %582, i32 0
  %584 = shufflevector <8 x float> %583, <8 x float> undef, <8 x i32> zeroinitializer
  %585 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %584, <8 x float> %554, <8 x float> %539)
  %586 = add nsw i64 %545, 36
  %587 = getelementptr inbounds float, float* %5, i64 %586
  %588 = load float, float* %587, align 4, !tbaa !5154
  %589 = insertelement <8 x float> undef, float %588, i32 0
  %590 = shufflevector <8 x float> %589, <8 x float> undef, <8 x i32> zeroinitializer
  %591 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %590, <8 x float> %554, <8 x float> %538)
  %592 = add nsw i64 %545, 42
  %593 = getelementptr inbounds float, float* %5, i64 %592
  %594 = load float, float* %593, align 4, !tbaa !5154
  %595 = insertelement <8 x float> undef, float %594, i32 0
  %596 = shufflevector <8 x float> %595, <8 x float> undef, <8 x i32> zeroinitializer
  %597 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %596, <8 x float> %554, <8 x float> %537)
  %598 = add nsw i64 %545, 48
  %599 = getelementptr inbounds float, float* %5, i64 %598
  %600 = load float, float* %599, align 4, !tbaa !5154
  %601 = insertelement <8 x float> undef, float %600, i32 0
  %602 = shufflevector <8 x float> %601, <8 x float> undef, <8 x i32> zeroinitializer
  %603 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %602, <8 x float> %554, <8 x float> %536)
  %604 = add nsw i64 %545, 54
  %605 = getelementptr inbounds float, float* %5, i64 %604
  %606 = load float, float* %605, align 4, !tbaa !5154
  %607 = insertelement <8 x float> undef, float %606, i32 0
  %608 = shufflevector <8 x float> %607, <8 x float> undef, <8 x i32> zeroinitializer
  %609 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %608, <8 x float> %554, <8 x float> %535)
  %610 = add nsw i64 %545, 60
  %611 = getelementptr inbounds float, float* %5, i64 %610
  %612 = load float, float* %611, align 4, !tbaa !5154
  %613 = insertelement <8 x float> undef, float %612, i32 0
  %614 = shufflevector <8 x float> %613, <8 x float> undef, <8 x i32> zeroinitializer
  %615 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %614, <8 x float> %554, <8 x float> %534)
  %616 = add nsw i64 %545, 66
  %617 = getelementptr inbounds float, float* %5, i64 %616
  %618 = load float, float* %617, align 4, !tbaa !5154
  %619 = insertelement <8 x float> undef, float %618, i32 0
  %620 = shufflevector <8 x float> %619, <8 x float> undef, <8 x i32> zeroinitializer
  %621 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %620, <8 x float> %554, <8 x float> %533)
  %622 = add nsw i64 %545, 72
  %623 = getelementptr inbounds float, float* %5, i64 %622
  %624 = load float, float* %623, align 4, !tbaa !5154
  %625 = insertelement <8 x float> undef, float %624, i32 0
  %626 = shufflevector <8 x float> %625, <8 x float> undef, <8 x i32> zeroinitializer
  %627 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %626, <8 x float> %554, <8 x float> %532)
  %628 = add nsw i64 %545, 78
  %629 = getelementptr inbounds float, float* %5, i64 %628
  %630 = load float, float* %629, align 4, !tbaa !5154
  %631 = insertelement <8 x float> undef, float %630, i32 0
  %632 = shufflevector <8 x float> %631, <8 x float> undef, <8 x i32> zeroinitializer
  %633 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %632, <8 x float> %554, <8 x float> %531)
  %634 = add nsw i64 %545, 84
  %635 = getelementptr inbounds float, float* %5, i64 %634
  %636 = load float, float* %635, align 4, !tbaa !5154
  %637 = insertelement <8 x float> undef, float %636, i32 0
  %638 = shufflevector <8 x float> %637, <8 x float> undef, <8 x i32> zeroinitializer
  %639 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %638, <8 x float> %554, <8 x float> %530)
  %640 = add nsw i64 %545, 90
  %641 = getelementptr inbounds float, float* %5, i64 %640
  %642 = load float, float* %641, align 4, !tbaa !5154
  %643 = insertelement <8 x float> undef, float %642, i32 0
  %644 = shufflevector <8 x float> %643, <8 x float> undef, <8 x i32> zeroinitializer
  %645 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %644, <8 x float> %554, <8 x float> %529)
  %646 = add nsw i64 %545, 96
  %647 = getelementptr inbounds float, float* %5, i64 %646
  %648 = load float, float* %647, align 4, !tbaa !5154
  %649 = insertelement <8 x float> undef, float %648, i32 0
  %650 = shufflevector <8 x float> %649, <8 x float> undef, <8 x i32> zeroinitializer
  %651 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %650, <8 x float> %554, <8 x float> %528)
  %652 = add nsw i64 %545, 102
  %653 = getelementptr inbounds float, float* %5, i64 %652
  %654 = load float, float* %653, align 4, !tbaa !5154
  %655 = insertelement <8 x float> undef, float %654, i32 0
  %656 = shufflevector <8 x float> %655, <8 x float> undef, <8 x i32> zeroinitializer
  %657 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %656, <8 x float> %554, <8 x float> %527)
  %658 = add nsw i64 %545, 108
  %659 = getelementptr inbounds float, float* %5, i64 %658
  %660 = load float, float* %659, align 4, !tbaa !5154
  %661 = insertelement <8 x float> undef, float %660, i32 0
  %662 = shufflevector <8 x float> %661, <8 x float> undef, <8 x i32> zeroinitializer
  %663 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %662, <8 x float> %554, <8 x float> %526)
  %664 = add nsw i64 %545, 114
  %665 = getelementptr inbounds float, float* %5, i64 %664
  %666 = load float, float* %665, align 4, !tbaa !5154
  %667 = insertelement <8 x float> undef, float %666, i32 0
  %668 = shufflevector <8 x float> %667, <8 x float> undef, <8 x i32> zeroinitializer
  %669 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %668, <8 x float> %554, <8 x float> %525)
  %670 = add nsw i64 %545, 120
  %671 = getelementptr inbounds float, float* %5, i64 %670
  %672 = load float, float* %671, align 4, !tbaa !5154
  %673 = insertelement <8 x float> undef, float %672, i32 0
  %674 = shufflevector <8 x float> %673, <8 x float> undef, <8 x i32> zeroinitializer
  %675 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %674, <8 x float> %554, <8 x float> %524)
  %676 = add nsw i64 %545, 126
  %677 = getelementptr inbounds float, float* %5, i64 %676
  %678 = load float, float* %677, align 4, !tbaa !5154
  %679 = insertelement <8 x float> undef, float %678, i32 0
  %680 = shufflevector <8 x float> %679, <8 x float> undef, <8 x i32> zeroinitializer
  %681 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %680, <8 x float> %554, <8 x float> %523)
  %682 = add nsw i64 %545, 132
  %683 = getelementptr inbounds float, float* %5, i64 %682
  %684 = load float, float* %683, align 4, !tbaa !5154
  %685 = insertelement <8 x float> undef, float %684, i32 0
  %686 = shufflevector <8 x float> %685, <8 x float> undef, <8 x i32> zeroinitializer
  %687 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %686, <8 x float> %554, <8 x float> %522)
  %688 = add nsw i64 %545, 138
  %689 = getelementptr inbounds float, float* %5, i64 %688
  %690 = load float, float* %689, align 4, !tbaa !5154
  %691 = insertelement <8 x float> undef, float %690, i32 0
  %692 = shufflevector <8 x float> %691, <8 x float> undef, <8 x i32> zeroinitializer
  %693 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %692, <8 x float> %554, <8 x float> %521)
  %694 = add nsw i64 %545, 144
  %695 = getelementptr inbounds float, float* %5, i64 %694
  %696 = load float, float* %695, align 4, !tbaa !5154
  %697 = insertelement <8 x float> undef, float %696, i32 0
  %698 = shufflevector <8 x float> %697, <8 x float> undef, <8 x i32> zeroinitializer
  %699 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %698, <8 x float> %554, <8 x float> %520)
  %700 = add nsw i64 %545, 150
  %701 = getelementptr inbounds float, float* %5, i64 %700
  %702 = load float, float* %701, align 4, !tbaa !5154
  %703 = insertelement <8 x float> undef, float %702, i32 0
  %704 = shufflevector <8 x float> %703, <8 x float> undef, <8 x i32> zeroinitializer
  %705 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %704, <8 x float> %554, <8 x float> %519)
  %706 = add nsw i64 %545, 156
  %707 = getelementptr inbounds float, float* %5, i64 %706
  %708 = load float, float* %707, align 4, !tbaa !5154
  %709 = insertelement <8 x float> undef, float %708, i32 0
  %710 = shufflevector <8 x float> %709, <8 x float> undef, <8 x i32> zeroinitializer
  %711 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %710, <8 x float> %554, <8 x float> %518)
  %712 = add nsw i64 %545, 162
  %713 = getelementptr inbounds float, float* %5, i64 %712
  %714 = load float, float* %713, align 4, !tbaa !5154
  %715 = insertelement <8 x float> undef, float %714, i32 0
  %716 = shufflevector <8 x float> %715, <8 x float> undef, <8 x i32> zeroinitializer
  %717 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %716, <8 x float> %554, <8 x float> %517)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %for_end12, label %for_body11, !prof !50

for_end12:                                        ; preds = %for_body11
  %indvars.iv.next218 = add nuw nsw i64 %indvars.iv217, 1
  %exitcond219 = icmp eq i64 %indvars.iv.next218, 7
  br i1 %exitcond219, label %for_end9, label %for_begin10.preheader, !prof !50

for_body20.1:                                     ; preds = %for_begin16.preheader, %for_body20.1
  %indvars.iv227.1 = phi i64 [ %indvars.iv.next228.1, %for_body20.1 ], [ 0, %for_begin16.preheader ]
  %718 = shl nsw i64 %indvars.iv227.1, 3
  %719 = add nuw nsw i64 %718, 224
  %720 = trunc i64 %719 to i32
  %721 = add i32 %101, %720
  %722 = getelementptr inbounds float, float* %98, i64 %719
  %723 = bitcast float* %722 to <8 x float>*
  %724 = load <8 x float>, <8 x float>* %723, align 32, !tbaa !5136
  %725 = fadd <8 x float> %724, %106
  %726 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %725, <8 x float> %109, <8 x float> %112)
  %727 = fcmp ogt <8 x float> %726, zeroinitializer
  %728 = select <8 x i1> %727, <8 x float> %726, <8 x float> zeroinitializer
  %729 = sext i32 %721 to i64
  %730 = getelementptr inbounds float, float* %11, i64 %729
  %731 = bitcast float* %730 to <8 x float>*
  store <8 x float> %728, <8 x float>* %731, align 32, !tbaa !5139
  %indvars.iv.next228.1 = add nuw nsw i64 %indvars.iv227.1, 1
  %exitcond229.1 = icmp eq i64 %indvars.iv.next228.1, 28
  br i1 %exitcond229.1, label %for_body20.2, label %for_body20.1, !prof !50

for_body20.2:                                     ; preds = %for_body20.1, %for_body20.2
  %indvars.iv227.2 = phi i64 [ %indvars.iv.next228.2, %for_body20.2 ], [ 0, %for_body20.1 ]
  %732 = shl nsw i64 %indvars.iv227.2, 3
  %733 = add nuw nsw i64 %732, 448
  %734 = trunc i64 %733 to i32
  %735 = add i32 %101, %734
  %736 = getelementptr inbounds float, float* %98, i64 %733
  %737 = bitcast float* %736 to <8 x float>*
  %738 = load <8 x float>, <8 x float>* %737, align 32, !tbaa !5136
  %739 = fadd <8 x float> %738, %106
  %740 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %739, <8 x float> %109, <8 x float> %112)
  %741 = fcmp ogt <8 x float> %740, zeroinitializer
  %742 = select <8 x i1> %741, <8 x float> %740, <8 x float> zeroinitializer
  %743 = sext i32 %735 to i64
  %744 = getelementptr inbounds float, float* %11, i64 %743
  %745 = bitcast float* %744 to <8 x float>*
  store <8 x float> %742, <8 x float>* %745, align 32, !tbaa !5139
  %indvars.iv.next228.2 = add nuw nsw i64 %indvars.iv227.2, 1
  %exitcond229.2 = icmp eq i64 %indvars.iv.next228.2, 28
  br i1 %exitcond229.2, label %for_body20.3, label %for_body20.2, !prof !50

for_body20.3:                                     ; preds = %for_body20.2, %for_body20.3
  %indvars.iv227.3 = phi i64 [ %indvars.iv.next228.3, %for_body20.3 ], [ 0, %for_body20.2 ]
  %746 = shl nsw i64 %indvars.iv227.3, 3
  %747 = add nuw nsw i64 %746, 672
  %748 = trunc i64 %747 to i32
  %749 = add i32 %101, %748
  %750 = getelementptr inbounds float, float* %98, i64 %747
  %751 = bitcast float* %750 to <8 x float>*
  %752 = load <8 x float>, <8 x float>* %751, align 32, !tbaa !5136
  %753 = fadd <8 x float> %752, %106
  %754 = tail call <8 x float> @llvm.fmuladd.v8f32(<8 x float> %753, <8 x float> %109, <8 x float> %112)
  %755 = fcmp ogt <8 x float> %754, zeroinitializer
  %756 = select <8 x i1> %755, <8 x float> %754, <8 x float> zeroinitializer
  %757 = sext i32 %749 to i64
  %758 = getelementptr inbounds float, float* %11, i64 %757
  %759 = bitcast float* %758 to <8 x float>*
  store <8 x float> %756, <8 x float>* %759, align 32, !tbaa !5139
  %indvars.iv.next228.3 = add nuw nsw i64 %indvars.iv227.3, 1
  %exitcond229.3 = icmp eq i64 %indvars.iv.next228.3, 28
  br i1 %exitcond229.3, label %for_end21.3, label %for_body20.3, !prof !50

for_end21.3:                                      ; preds = %for_body20.3
  %760 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %761 = tail call i32 %760(i32 1, i32 %23, i8* nonnull %93)
  %762 = add nsw i32 %91, 1
  %763 = icmp slt i32 %762, %34
  br i1 %763, label %for_body, label %for_end, !prof !5
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fmuladd.v8f32(<8 x float>, <8 x float>, <8 x float>) #3

define dllexport i32 @fused_add_nn_relu_layout_transform(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 3
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.439, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5160
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !5174
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %23 = load i64*, i64** %22, align 8
  %24 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %42 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %42(i8* getelementptr inbounds ([162 x i8], [162 x i8]* @.str.440, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %43 = getelementptr inbounds i8, i8* %1, i64 4
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !5177
  switch i32 %45, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %46(i8* getelementptr inbounds ([162 x i8], [162 x i8]* @.str.441, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %47(i8* getelementptr inbounds ([162 x i8], [162 x i8]* @.str.442, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  %48 = icmp eq i32 %27, 1
  br i1 %48, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %49(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %50 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 5
  br i1 %52, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %53(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %54 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 2
  %57 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 32
  %60 = and i1 %56, %59
  %61 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %62 = load i16, i16* %61, align 2
  %63 = icmp eq i16 %62, 1
  %64 = and i1 %60, %63
  br i1 %64, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %65(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %66 = load i64, i64* %23, align 8, !tbaa !5179
  %67 = trunc i64 %66 to i32
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %69(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %70 = getelementptr inbounds i64, i64* %23, i64 1
  %71 = load i64, i64* %70, align 8, !tbaa !5193
  %72 = trunc i64 %71 to i32
  %73 = icmp eq i32 %72, 8
  br i1 %73, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %75 = getelementptr inbounds i64, i64* %23, i64 2
  %76 = load i64, i64* %75, align 8, !tbaa !5195
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %77, 56
  br i1 %78, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %80 = getelementptr inbounds i64, i64* %23, i64 3
  %81 = load i64, i64* %80, align 8, !tbaa !5198
  %82 = trunc i64 %81 to i32
  %83 = icmp eq i32 %82, 56
  br i1 %83, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %85 = getelementptr inbounds i64, i64* %23, i64 4
  %86 = load i64, i64* %85, align 8, !tbaa !5200
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 32
  br i1 %88, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %89 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %89(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %90 = icmp eq i64* %25, null
  br i1 %90, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end22
  %91 = getelementptr inbounds i64, i64* %25, i64 1
  %92 = bitcast i64* %91 to <4 x i64>*
  %93 = load <4 x i64>, <4 x i64>* %92, align 8, !tbaa !5204
  %94 = trunc <4 x i64> %93 to <4 x i32>
  %95 = icmp eq <4 x i32> %94, <i32 100352, i32 1792, i32 32, i32 1>
  %96 = load i64, i64* %25, align 8, !tbaa !5215
  %97 = trunc i64 %96 to i32
  %98 = icmp eq i32 %97, 802816
  %rdx.shuf81 = shufflevector <4 x i1> %95, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx82 = and <4 x i1> %95, %rdx.shuf81
  %rdx.shuf83 = shufflevector <4 x i1> %bin.rdx82, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx84 = and <4 x i1> %bin.rdx82, %rdx.shuf83
  %99 = extractelement <4 x i1> %bin.rdx84, i32 0
  %100 = and i1 %99, %98
  br i1 %100, label %if_end, label %assert_fail23, !prof !5

if_end:                                           ; preds = %assert_end22, %if_then
  %101 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %102 = load i64, i64* %101, align 8
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %assert_end26, label %assert_fail25, !prof !5

assert_fail23:                                    ; preds = %if_then
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.244, i64 0, i64 0))
  ret i32 -1

assert_fail25:                                    ; preds = %if_end
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %if_end
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 2
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = and i1 %112, %115
  %117 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %118 = load i16, i16* %117, align 2
  %119 = icmp eq i16 %118, 1
  %120 = and i1 %116, %119
  br i1 %120, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %122 = load i64, i64* %33, align 8, !tbaa !5219
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %126 = getelementptr inbounds i64, i64* %33, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !5233
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 8
  br i1 %129, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %131 = getelementptr inbounds i64, i64* %33, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !5235
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 56
  br i1 %134, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %136 = getelementptr inbounds i64, i64* %33, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !5238
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 56
  br i1 %139, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %141 = getelementptr inbounds i64, i64* %33, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !5240
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 32
  br i1 %144, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.183, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %146 = icmp eq i64* %35, null
  br i1 %146, label %if_end42, label %if_then41, !prof !50

if_then41:                                        ; preds = %assert_end40
  %147 = getelementptr inbounds i64, i64* %35, i64 1
  %148 = bitcast i64* %147 to <4 x i64>*
  %149 = load <4 x i64>, <4 x i64>* %148, align 8, !tbaa !5244
  %150 = trunc <4 x i64> %149 to <4 x i32>
  %151 = icmp eq <4 x i32> %150, <i32 100352, i32 1792, i32 32, i32 1>
  %152 = load i64, i64* %35, align 8, !tbaa !5255
  %153 = trunc i64 %152 to i32
  %154 = icmp eq i32 %153, 802816
  %rdx.shuf77 = shufflevector <4 x i1> %151, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx78 = and <4 x i1> %151, %rdx.shuf77
  %rdx.shuf79 = shufflevector <4 x i1> %bin.rdx78, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx80 = and <4 x i1> %bin.rdx78, %rdx.shuf79
  %155 = extractelement <4 x i1> %bin.rdx80, i32 0
  %156 = and i1 %155, %154
  br i1 %156, label %if_end42, label %assert_fail43, !prof !5

if_end42:                                         ; preds = %assert_end40, %if_then41
  %157 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %158 = load i64, i64* %157, align 8
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %assert_end46, label %assert_fail45, !prof !5

assert_fail43:                                    ; preds = %if_then41
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.247, i64 0, i64 0))
  ret i32 -1

assert_fail45:                                    ; preds = %if_end42
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %if_end42
  %162 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %165(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %166 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %29, %167
  br i1 %168, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %170 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, 5
  br i1 %172, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %174 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %175 = load i8, i8* %174, align 1
  %176 = icmp eq i8 %175, 2
  %177 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %178 = load i8, i8* %177, align 1
  %179 = icmp eq i8 %178, 32
  %180 = and i1 %176, %179
  %181 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %182 = load i16, i16* %181, align 2
  %183 = icmp eq i16 %182, 1
  %184 = and i1 %180, %183
  br i1 %184, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %185(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %186 = load i64, i64* %39, align 8, !tbaa !5259
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 1
  br i1 %188, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %190 = getelementptr inbounds i64, i64* %39, i64 1
  %191 = load i64, i64* %190, align 8, !tbaa !5273
  %192 = trunc i64 %191 to i32
  %193 = icmp eq i32 %192, 1
  br i1 %193, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %194 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %194(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.443, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %195 = getelementptr inbounds i64, i64* %39, i64 2
  %196 = load i64, i64* %195, align 8, !tbaa !5275
  %197 = trunc i64 %196 to i32
  %198 = icmp eq i32 %197, 56
  br i1 %198, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %199(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.248, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %200 = getelementptr inbounds i64, i64* %39, i64 3
  %201 = load i64, i64* %200, align 8, !tbaa !5278
  %202 = trunc i64 %201 to i32
  %203 = icmp eq i32 %202, 56
  br i1 %203, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %204(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.249, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %205 = getelementptr inbounds i64, i64* %39, i64 4
  %206 = load i64, i64* %205, align 8, !tbaa !5280
  %207 = trunc i64 %206 to i32
  %208 = icmp eq i32 %207, 256
  br i1 %208, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.444, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %210 = icmp eq i64* %41, null
  br i1 %210, label %if_end66, label %if_then65, !prof !50

if_then65:                                        ; preds = %assert_end64
  %211 = getelementptr inbounds i64, i64* %41, i64 1
  %212 = bitcast i64* %211 to <4 x i64>*
  %213 = load <4 x i64>, <4 x i64>* %212, align 8, !tbaa !5284
  %214 = trunc <4 x i64> %213 to <4 x i32>
  %215 = icmp eq <4 x i32> %214, <i32 802816, i32 14336, i32 256, i32 1>
  %216 = load i64, i64* %41, align 8, !tbaa !5295
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 802816
  %rdx.shuf = shufflevector <4 x i1> %215, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %215, %rdx.shuf
  %rdx.shuf75 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx76 = and <4 x i1> %bin.rdx, %rdx.shuf75
  %219 = extractelement <4 x i1> %bin.rdx76, i32 0
  %220 = and i1 %219, %218
  br i1 %220, label %if_end66, label %assert_fail67, !prof !5

if_end66:                                         ; preds = %assert_end64, %if_then65
  %221 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %222 = load i64, i64* %221, align 8
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %assert_end70, label %assert_fail69, !prof !5

assert_fail67:                                    ; preds = %if_then65
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.445, i64 0, i64 0))
  ret i32 -1

assert_fail69:                                    ; preds = %if_end66
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %if_end66
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 1
  br i1 %228, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %229 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %229(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %29, %231
  br i1 %232, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %233 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %233(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %234 = tail call fastcc i32 @fused_add_nn_relu_layout_transform_compute_(i8* %37, i8* %21, i8* %31)
  ret i32 %234
}

; Function Attrs: noinline
define private fastcc i32 @fused_add_nn_relu_layout_transform_compute_(i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %3 = alloca %33, align 8
  %4 = getelementptr inbounds %33, %33* %3, i64 0, i32 0
  store i8* %0, i8** %4, align 8
  %5 = getelementptr inbounds %33, %33* %3, i64 0, i32 1
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %33, %33* %3, i64 0, i32 2
  store i8* %2, i8** %6, align 8
  %7 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %8 = bitcast %33* %3 to i8*
  %9 = call i32 %7(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.446, i8* nonnull %8, i32 0)
  ret i32 %9
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.446(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 55
  %14 = sdiv i32 %13, %12
  %15 = mul nsw i32 %14, %0
  %16 = icmp slt i32 %15, 56
  %17 = select i1 %16, i32 %15, i32 56
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %14, %18
  %20 = icmp slt i32 %19, 56
  %21 = select i1 %20, i32 %19, i32 56
  %22 = icmp slt i32 %17, %21
  br i1 %22, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %23 = add i32 %17, 1
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, -1
  %26 = sext i32 %21 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %25, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %27 = mul nsw i64 %indvars.iv10, 14336
  %28 = trunc i64 %indvars.iv10 to i32
  %29 = mul i32 %28, 1792
  %30 = insertelement <16 x i32> undef, i32 %29, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %31 = shl i64 %indvars.iv7, 8
  %32 = add nsw i64 %31, %27
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %33 = shl i32 %indvars.iv7.tr, 5
  %34 = insertelement <16 x i32> undef, i32 %33, i32 0
  %35 = add <16 x i32> %34, %30
  %36 = shufflevector <16 x i32> %35, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %37 = icmp slt i64 %indvars.iv.next11, %26
  br i1 %37, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %38 = shl nsw i64 %indvars.iv, 4
  %39 = add nsw i64 %32, %38
  %40 = trunc i64 %38 to i32
  %41 = insertelement <16 x i32> undef, i32 %40, i32 0
  %42 = trunc i64 %38 to i32
  %43 = or i32 %42, 1
  %44 = insertelement <16 x i32> %41, i32 %43, i32 1
  %45 = trunc i64 %38 to i32
  %46 = or i32 %45, 2
  %47 = insertelement <16 x i32> %44, i32 %46, i32 2
  %48 = trunc i64 %38 to i32
  %49 = or i32 %48, 3
  %50 = insertelement <16 x i32> %47, i32 %49, i32 3
  %51 = trunc i64 %38 to i32
  %52 = or i32 %51, 4
  %53 = insertelement <16 x i32> %50, i32 %52, i32 4
  %54 = trunc i64 %38 to i32
  %55 = or i32 %54, 5
  %56 = insertelement <16 x i32> %53, i32 %55, i32 5
  %57 = trunc i64 %38 to i32
  %58 = or i32 %57, 6
  %59 = insertelement <16 x i32> %56, i32 %58, i32 6
  %60 = trunc i64 %38 to i32
  %61 = or i32 %60, 7
  %62 = insertelement <16 x i32> %59, i32 %61, i32 7
  %63 = trunc i64 %38 to i32
  %64 = or i32 %63, 8
  %65 = insertelement <16 x i32> %62, i32 %64, i32 8
  %66 = trunc i64 %38 to i32
  %67 = or i32 %66, 9
  %68 = insertelement <16 x i32> %65, i32 %67, i32 9
  %69 = trunc i64 %38 to i32
  %70 = or i32 %69, 10
  %71 = insertelement <16 x i32> %68, i32 %70, i32 10
  %72 = trunc i64 %38 to i32
  %73 = or i32 %72, 11
  %74 = insertelement <16 x i32> %71, i32 %73, i32 11
  %75 = trunc i64 %38 to i32
  %76 = or i32 %75, 12
  %77 = insertelement <16 x i32> %74, i32 %76, i32 12
  %78 = trunc i64 %38 to i32
  %79 = or i32 %78, 13
  %80 = insertelement <16 x i32> %77, i32 %79, i32 13
  %81 = trunc i64 %38 to i32
  %82 = or i32 %81, 14
  %83 = insertelement <16 x i32> %80, i32 %82, i32 14
  %84 = trunc i64 %38 to i32
  %85 = or i32 %84, 15
  %86 = insertelement <16 x i32> %83, i32 %85, i32 15
  %87 = sdiv <16 x i32> %86, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %88 = mul <16 x i32> %87, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %89 = sub <16 x i32> %86, %88
  %90 = icmp sgt <16 x i32> %89, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %90, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %91 = sext <16 x i1> %not. to <16 x i32>
  %92 = add nsw <16 x i32> %87, %91
  %93 = mul nsw <16 x i32> %92, <i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352>
  %94 = add nsw <16 x i32> %89, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %95 = select <16 x i1> %90, <16 x i32> %89, <16 x i32> %94
  %96 = add <16 x i32> %36, %95
  %97 = add <16 x i32> %96, %93
  %98 = extractelement <16 x i32> %97, i64 0
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float* %7, i64 %99
  %101 = load float, float* %100, align 4, !tbaa !5299
  %102 = insertelement <16 x float> undef, float %101, i32 0
  %103 = extractelement <16 x i32> %97, i64 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds float, float* %7, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !5299
  %107 = insertelement <16 x float> %102, float %106, i32 1
  %108 = extractelement <16 x i32> %97, i64 2
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %7, i64 %109
  %111 = load float, float* %110, align 4, !tbaa !5299
  %112 = insertelement <16 x float> %107, float %111, i32 2
  %113 = extractelement <16 x i32> %97, i64 3
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds float, float* %7, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !5299
  %117 = insertelement <16 x float> %112, float %116, i32 3
  %118 = extractelement <16 x i32> %97, i64 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds float, float* %7, i64 %119
  %121 = load float, float* %120, align 4, !tbaa !5299
  %122 = insertelement <16 x float> %117, float %121, i32 4
  %123 = extractelement <16 x i32> %97, i64 5
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds float, float* %7, i64 %124
  %126 = load float, float* %125, align 4, !tbaa !5299
  %127 = insertelement <16 x float> %122, float %126, i32 5
  %128 = extractelement <16 x i32> %97, i64 6
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds float, float* %7, i64 %129
  %131 = load float, float* %130, align 4, !tbaa !5299
  %132 = insertelement <16 x float> %127, float %131, i32 6
  %133 = extractelement <16 x i32> %97, i64 7
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds float, float* %7, i64 %134
  %136 = load float, float* %135, align 4, !tbaa !5299
  %137 = insertelement <16 x float> %132, float %136, i32 7
  %138 = extractelement <16 x i32> %97, i64 8
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds float, float* %7, i64 %139
  %141 = load float, float* %140, align 4, !tbaa !5299
  %142 = insertelement <16 x float> %137, float %141, i32 8
  %143 = extractelement <16 x i32> %97, i64 9
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds float, float* %7, i64 %144
  %146 = load float, float* %145, align 4, !tbaa !5299
  %147 = insertelement <16 x float> %142, float %146, i32 9
  %148 = extractelement <16 x i32> %97, i64 10
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds float, float* %7, i64 %149
  %151 = load float, float* %150, align 4, !tbaa !5299
  %152 = insertelement <16 x float> %147, float %151, i32 10
  %153 = extractelement <16 x i32> %97, i64 11
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds float, float* %7, i64 %154
  %156 = load float, float* %155, align 4, !tbaa !5299
  %157 = insertelement <16 x float> %152, float %156, i32 11
  %158 = extractelement <16 x i32> %97, i64 12
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds float, float* %7, i64 %159
  %161 = load float, float* %160, align 4, !tbaa !5299
  %162 = insertelement <16 x float> %157, float %161, i32 12
  %163 = extractelement <16 x i32> %97, i64 13
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds float, float* %7, i64 %164
  %166 = load float, float* %165, align 4, !tbaa !5299
  %167 = insertelement <16 x float> %162, float %166, i32 13
  %168 = extractelement <16 x i32> %97, i64 14
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds float, float* %7, i64 %169
  %171 = load float, float* %170, align 4, !tbaa !5299
  %172 = insertelement <16 x float> %167, float %171, i32 14
  %173 = extractelement <16 x i32> %97, i64 15
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds float, float* %7, i64 %174
  %176 = load float, float* %175, align 4, !tbaa !5299
  %177 = insertelement <16 x float> %172, float %176, i32 15
  %178 = getelementptr inbounds float, float* %10, i64 %99
  %179 = load float, float* %178, align 4, !tbaa !5302
  %180 = insertelement <16 x float> undef, float %179, i32 0
  %181 = getelementptr inbounds float, float* %10, i64 %104
  %182 = load float, float* %181, align 4, !tbaa !5302
  %183 = insertelement <16 x float> %180, float %182, i32 1
  %184 = getelementptr inbounds float, float* %10, i64 %109
  %185 = load float, float* %184, align 4, !tbaa !5302
  %186 = insertelement <16 x float> %183, float %185, i32 2
  %187 = getelementptr inbounds float, float* %10, i64 %114
  %188 = load float, float* %187, align 4, !tbaa !5302
  %189 = insertelement <16 x float> %186, float %188, i32 3
  %190 = getelementptr inbounds float, float* %10, i64 %119
  %191 = load float, float* %190, align 4, !tbaa !5302
  %192 = insertelement <16 x float> %189, float %191, i32 4
  %193 = getelementptr inbounds float, float* %10, i64 %124
  %194 = load float, float* %193, align 4, !tbaa !5302
  %195 = insertelement <16 x float> %192, float %194, i32 5
  %196 = getelementptr inbounds float, float* %10, i64 %129
  %197 = load float, float* %196, align 4, !tbaa !5302
  %198 = insertelement <16 x float> %195, float %197, i32 6
  %199 = getelementptr inbounds float, float* %10, i64 %134
  %200 = load float, float* %199, align 4, !tbaa !5302
  %201 = insertelement <16 x float> %198, float %200, i32 7
  %202 = getelementptr inbounds float, float* %10, i64 %139
  %203 = load float, float* %202, align 4, !tbaa !5302
  %204 = insertelement <16 x float> %201, float %203, i32 8
  %205 = getelementptr inbounds float, float* %10, i64 %144
  %206 = load float, float* %205, align 4, !tbaa !5302
  %207 = insertelement <16 x float> %204, float %206, i32 9
  %208 = getelementptr inbounds float, float* %10, i64 %149
  %209 = load float, float* %208, align 4, !tbaa !5302
  %210 = insertelement <16 x float> %207, float %209, i32 10
  %211 = getelementptr inbounds float, float* %10, i64 %154
  %212 = load float, float* %211, align 4, !tbaa !5302
  %213 = insertelement <16 x float> %210, float %212, i32 11
  %214 = getelementptr inbounds float, float* %10, i64 %159
  %215 = load float, float* %214, align 4, !tbaa !5302
  %216 = insertelement <16 x float> %213, float %215, i32 12
  %217 = getelementptr inbounds float, float* %10, i64 %164
  %218 = load float, float* %217, align 4, !tbaa !5302
  %219 = insertelement <16 x float> %216, float %218, i32 13
  %220 = getelementptr inbounds float, float* %10, i64 %169
  %221 = load float, float* %220, align 4, !tbaa !5302
  %222 = insertelement <16 x float> %219, float %221, i32 14
  %223 = getelementptr inbounds float, float* %10, i64 %174
  %224 = load float, float* %223, align 4, !tbaa !5302
  %225 = insertelement <16 x float> %222, float %224, i32 15
  %226 = fadd <16 x float> %177, %225
  %227 = fcmp ogt <16 x float> %226, zeroinitializer
  %228 = select <16 x i1> %227, <16 x float> %226, <16 x float> zeroinitializer
  %229 = getelementptr inbounds float, float* %4, i64 %39
  %230 = bitcast float* %229 to <16 x float>*
  store <16 x float> %228, <16 x float>* %230, align 64, !tbaa !5305
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 56
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_35(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.447, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5308
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.448, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !5322
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.449, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !5324
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !5338
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 2
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !5340
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 56
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !5343
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 56
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !5345
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !5349
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 100352, i32 1792, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !5360
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 200704
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.450, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !5364
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !5378
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 16
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.152, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !5380
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 56
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !5383
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 56
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !5385
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 4
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !5389
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 12544, i32 224, i32 4, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !5400
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 200704
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.451, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_35_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_35_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %34, align 8
  %3 = getelementptr inbounds %34, %34* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %34, %34* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %34* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.452, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.452(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 895
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 896
  %14 = select i1 %13, i32 %12, i32 896
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 896
  %18 = select i1 %17, i32 %16, i32 896
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv4, 224
  %25 = trunc i64 %indvars.iv4 to i32
  %26 = sdiv i32 %25, 56
  %27 = shl nsw i32 %26, 2
  %28 = insertelement <4 x i32> undef, i32 %27, i32 0
  %29 = or i32 %27, 1
  %30 = insertelement <4 x i32> %28, i32 %29, i32 1
  %31 = or i32 %27, 2
  %32 = insertelement <4 x i32> %30, i32 %31, i32 2
  %33 = or i32 %27, 3
  %34 = insertelement <4 x i32> %32, i32 %33, i32 3
  %35 = sdiv <4 x i32> %34, <i32 32, i32 32, i32 32, i32 32>
  %36 = mul <4 x i32> %35, <i32 32, i32 32, i32 32, i32 32>
  %37 = sub <4 x i32> %34, %36
  %38 = icmp sgt <4 x i32> %37, <i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <4 x i1> %38, <i1 true, i1 true, i1 true, i1 true>
  %39 = sext <4 x i1> %not. to <4 x i32>
  %40 = add nsw <4 x i32> %35, %39
  %41 = mul nsw <4 x i32> %40, <i32 100352, i32 100352, i32 100352, i32 100352>
  %42 = srem i32 %25, 56
  %43 = mul nsw i32 %42, 1792
  %44 = insertelement <4 x i32> undef, i32 %43, i32 0
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> zeroinitializer
  %46 = add nsw <4 x i32> %37, <i32 32, i32 32, i32 32, i32 32>
  %47 = select <4 x i1> %38, <4 x i32> %37, <4 x i32> %46
  %48 = add <4 x i32> %47, %45
  %49 = add <4 x i32> %48, %41
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %50 = shl i64 %indvars.iv, 2
  %51 = add nsw i64 %50, %24
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %52 = shl i32 %indvars.iv.tr, 5
  %53 = insertelement <4 x i32> undef, i32 %52, i32 0
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> zeroinitializer
  %55 = add <4 x i32> %49, %54
  %56 = extractelement <4 x i32> %55, i64 0
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds float, float* %7, i64 %57
  %59 = load float, float* %58, align 4, !tbaa !5404
  %60 = insertelement <4 x float> undef, float %59, i32 0
  %61 = extractelement <4 x i32> %55, i64 1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds float, float* %7, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !5404
  %65 = insertelement <4 x float> %60, float %64, i32 1
  %66 = extractelement <4 x i32> %55, i64 2
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %7, i64 %67
  %69 = load float, float* %68, align 4, !tbaa !5404
  %70 = insertelement <4 x float> %65, float %69, i32 2
  %71 = extractelement <4 x i32> %55, i64 3
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float* %7, i64 %72
  %74 = load float, float* %73, align 4, !tbaa !5404
  %75 = insertelement <4 x float> %70, float %74, i32 3
  %76 = getelementptr inbounds float, float* %4, i64 %51
  %77 = bitcast float* %76 to <4 x float>*
  store <4 x float> %75, <4 x float>* %77, align 16, !tbaa !5407
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %78 = icmp slt i64 %indvars.iv.next5, %23
  br i1 %78, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_48(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.453, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5410
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.454, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !5424
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.455, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !5426
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !5440
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 16
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !5442
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 7
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.178, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !5445
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 7
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !5447
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !5451
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 1568, i32 224, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !5462
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 25088
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.357, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !5466
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !5480
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !5482
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 7
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.358, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !5485
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 7
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.359, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !5487
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 512
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !5491
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 25088, i32 3584, i32 512, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !5502
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 25088
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.456, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_48_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_48_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %35, align 8
  %3 = getelementptr inbounds %35, %35* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %35, %35* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %35* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.457, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.457(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 6
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 7
  %14 = select i1 %13, i32 %12, i32 7
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 7
  %18 = select i1 %17, i32 %16, i32 7
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 3584
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = mul i32 %25, 224
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %28 = shl i64 %indvars.iv7, 9
  %29 = add nsw i64 %28, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %30 = shl i32 %indvars.iv7.tr, 5
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %27
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %34 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %35 = shl nsw i64 %indvars.iv, 4
  %36 = add nsw i64 %29, %35
  %37 = trunc i64 %35 to i32
  %38 = insertelement <16 x i32> undef, i32 %37, i32 0
  %39 = trunc i64 %35 to i32
  %40 = or i32 %39, 1
  %41 = insertelement <16 x i32> %38, i32 %40, i32 1
  %42 = trunc i64 %35 to i32
  %43 = or i32 %42, 2
  %44 = insertelement <16 x i32> %41, i32 %43, i32 2
  %45 = trunc i64 %35 to i32
  %46 = or i32 %45, 3
  %47 = insertelement <16 x i32> %44, i32 %46, i32 3
  %48 = trunc i64 %35 to i32
  %49 = or i32 %48, 4
  %50 = insertelement <16 x i32> %47, i32 %49, i32 4
  %51 = trunc i64 %35 to i32
  %52 = or i32 %51, 5
  %53 = insertelement <16 x i32> %50, i32 %52, i32 5
  %54 = trunc i64 %35 to i32
  %55 = or i32 %54, 6
  %56 = insertelement <16 x i32> %53, i32 %55, i32 6
  %57 = trunc i64 %35 to i32
  %58 = or i32 %57, 7
  %59 = insertelement <16 x i32> %56, i32 %58, i32 7
  %60 = trunc i64 %35 to i32
  %61 = or i32 %60, 8
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  %63 = trunc i64 %35 to i32
  %64 = or i32 %63, 9
  %65 = insertelement <16 x i32> %62, i32 %64, i32 9
  %66 = trunc i64 %35 to i32
  %67 = or i32 %66, 10
  %68 = insertelement <16 x i32> %65, i32 %67, i32 10
  %69 = trunc i64 %35 to i32
  %70 = or i32 %69, 11
  %71 = insertelement <16 x i32> %68, i32 %70, i32 11
  %72 = trunc i64 %35 to i32
  %73 = or i32 %72, 12
  %74 = insertelement <16 x i32> %71, i32 %73, i32 12
  %75 = trunc i64 %35 to i32
  %76 = or i32 %75, 13
  %77 = insertelement <16 x i32> %74, i32 %76, i32 13
  %78 = trunc i64 %35 to i32
  %79 = or i32 %78, 14
  %80 = insertelement <16 x i32> %77, i32 %79, i32 14
  %81 = trunc i64 %35 to i32
  %82 = or i32 %81, 15
  %83 = insertelement <16 x i32> %80, i32 %82, i32 15
  %84 = sdiv <16 x i32> %83, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %85 = mul <16 x i32> %84, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %86 = sub <16 x i32> %83, %85
  %87 = icmp sgt <16 x i32> %86, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %87, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %88 = sext <16 x i1> %not. to <16 x i32>
  %89 = add nsw <16 x i32> %84, %88
  %90 = mul nsw <16 x i32> %89, <i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568, i32 1568>
  %91 = add nsw <16 x i32> %86, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %92 = select <16 x i1> %87, <16 x i32> %86, <16 x i32> %91
  %93 = add <16 x i32> %33, %92
  %94 = add <16 x i32> %93, %90
  %95 = extractelement <16 x i32> %94, i64 0
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !5506
  %99 = insertelement <16 x float> undef, float %98, i32 0
  %100 = extractelement <16 x i32> %94, i64 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !5506
  %104 = insertelement <16 x float> %99, float %103, i32 1
  %105 = extractelement <16 x i32> %94, i64 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !5506
  %109 = insertelement <16 x float> %104, float %108, i32 2
  %110 = extractelement <16 x i32> %94, i64 3
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !5506
  %114 = insertelement <16 x float> %109, float %113, i32 3
  %115 = extractelement <16 x i32> %94, i64 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !5506
  %119 = insertelement <16 x float> %114, float %118, i32 4
  %120 = extractelement <16 x i32> %94, i64 5
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !5506
  %124 = insertelement <16 x float> %119, float %123, i32 5
  %125 = extractelement <16 x i32> %94, i64 6
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !5506
  %129 = insertelement <16 x float> %124, float %128, i32 6
  %130 = extractelement <16 x i32> %94, i64 7
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !5506
  %134 = insertelement <16 x float> %129, float %133, i32 7
  %135 = extractelement <16 x i32> %94, i64 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !5506
  %139 = insertelement <16 x float> %134, float %138, i32 8
  %140 = extractelement <16 x i32> %94, i64 9
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !5506
  %144 = insertelement <16 x float> %139, float %143, i32 9
  %145 = extractelement <16 x i32> %94, i64 10
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !5506
  %149 = insertelement <16 x float> %144, float %148, i32 10
  %150 = extractelement <16 x i32> %94, i64 11
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !5506
  %154 = insertelement <16 x float> %149, float %153, i32 11
  %155 = extractelement <16 x i32> %94, i64 12
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !5506
  %159 = insertelement <16 x float> %154, float %158, i32 12
  %160 = extractelement <16 x i32> %94, i64 13
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !5506
  %164 = insertelement <16 x float> %159, float %163, i32 13
  %165 = extractelement <16 x i32> %94, i64 14
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !5506
  %169 = insertelement <16 x float> %164, float %168, i32 14
  %170 = extractelement <16 x i32> %94, i64 15
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !5506
  %174 = insertelement <16 x float> %169, float %173, i32 15
  %175 = getelementptr inbounds float, float* %4, i64 %36
  %176 = bitcast float* %175 to <16 x float>*
  store <16 x float> %174, <16 x float>* %176, align 64, !tbaa !5509
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 7
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_layout_transform_33(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.458, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5512
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.459, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !5526
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.460, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !5528
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !5542
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 8
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !5544
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 28
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !5547
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 28
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !5549
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 64
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !5553
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 50176, i32 1792, i32 64, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !5564
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 401408
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.271, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !5568
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !5582
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !5584
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 28
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.272, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !5587
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 28
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.273, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !5589
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 512
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !5593
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 401408, i32 14336, i32 512, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !5604
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 401408
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.461, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_33_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_33_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %36, align 8
  %3 = getelementptr inbounds %36, %36* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %36, %36* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %36* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.462, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.462(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 27
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 28
  %14 = select i1 %13, i32 %12, i32 28
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 28
  %18 = select i1 %17, i32 %16, i32 28
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 14336
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = mul i32 %25, 1792
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %28 = shl i64 %indvars.iv7, 9
  %29 = add nsw i64 %28, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %30 = shl i32 %indvars.iv7.tr, 6
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %27
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %34 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %35 = shl nsw i64 %indvars.iv, 4
  %36 = add nsw i64 %29, %35
  %37 = trunc i64 %35 to i32
  %38 = insertelement <16 x i32> undef, i32 %37, i32 0
  %39 = trunc i64 %35 to i32
  %40 = or i32 %39, 1
  %41 = insertelement <16 x i32> %38, i32 %40, i32 1
  %42 = trunc i64 %35 to i32
  %43 = or i32 %42, 2
  %44 = insertelement <16 x i32> %41, i32 %43, i32 2
  %45 = trunc i64 %35 to i32
  %46 = or i32 %45, 3
  %47 = insertelement <16 x i32> %44, i32 %46, i32 3
  %48 = trunc i64 %35 to i32
  %49 = or i32 %48, 4
  %50 = insertelement <16 x i32> %47, i32 %49, i32 4
  %51 = trunc i64 %35 to i32
  %52 = or i32 %51, 5
  %53 = insertelement <16 x i32> %50, i32 %52, i32 5
  %54 = trunc i64 %35 to i32
  %55 = or i32 %54, 6
  %56 = insertelement <16 x i32> %53, i32 %55, i32 6
  %57 = trunc i64 %35 to i32
  %58 = or i32 %57, 7
  %59 = insertelement <16 x i32> %56, i32 %58, i32 7
  %60 = trunc i64 %35 to i32
  %61 = or i32 %60, 8
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  %63 = trunc i64 %35 to i32
  %64 = or i32 %63, 9
  %65 = insertelement <16 x i32> %62, i32 %64, i32 9
  %66 = trunc i64 %35 to i32
  %67 = or i32 %66, 10
  %68 = insertelement <16 x i32> %65, i32 %67, i32 10
  %69 = trunc i64 %35 to i32
  %70 = or i32 %69, 11
  %71 = insertelement <16 x i32> %68, i32 %70, i32 11
  %72 = trunc i64 %35 to i32
  %73 = or i32 %72, 12
  %74 = insertelement <16 x i32> %71, i32 %73, i32 12
  %75 = trunc i64 %35 to i32
  %76 = or i32 %75, 13
  %77 = insertelement <16 x i32> %74, i32 %76, i32 13
  %78 = trunc i64 %35 to i32
  %79 = or i32 %78, 14
  %80 = insertelement <16 x i32> %77, i32 %79, i32 14
  %81 = trunc i64 %35 to i32
  %82 = or i32 %81, 15
  %83 = insertelement <16 x i32> %80, i32 %82, i32 15
  %84 = sdiv <16 x i32> %83, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = mul <16 x i32> %84, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %86 = sub <16 x i32> %83, %85
  %87 = icmp sgt <16 x i32> %86, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %87, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %88 = sext <16 x i1> %not. to <16 x i32>
  %89 = add nsw <16 x i32> %84, %88
  %90 = mul nsw <16 x i32> %89, <i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176>
  %91 = add nsw <16 x i32> %86, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %92 = select <16 x i1> %87, <16 x i32> %86, <16 x i32> %91
  %93 = add <16 x i32> %33, %92
  %94 = add <16 x i32> %93, %90
  %95 = extractelement <16 x i32> %94, i64 0
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !5608
  %99 = insertelement <16 x float> undef, float %98, i32 0
  %100 = extractelement <16 x i32> %94, i64 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !5608
  %104 = insertelement <16 x float> %99, float %103, i32 1
  %105 = extractelement <16 x i32> %94, i64 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !5608
  %109 = insertelement <16 x float> %104, float %108, i32 2
  %110 = extractelement <16 x i32> %94, i64 3
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !5608
  %114 = insertelement <16 x float> %109, float %113, i32 3
  %115 = extractelement <16 x i32> %94, i64 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !5608
  %119 = insertelement <16 x float> %114, float %118, i32 4
  %120 = extractelement <16 x i32> %94, i64 5
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !5608
  %124 = insertelement <16 x float> %119, float %123, i32 5
  %125 = extractelement <16 x i32> %94, i64 6
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !5608
  %129 = insertelement <16 x float> %124, float %128, i32 6
  %130 = extractelement <16 x i32> %94, i64 7
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !5608
  %134 = insertelement <16 x float> %129, float %133, i32 7
  %135 = extractelement <16 x i32> %94, i64 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !5608
  %139 = insertelement <16 x float> %134, float %138, i32 8
  %140 = extractelement <16 x i32> %94, i64 9
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !5608
  %144 = insertelement <16 x float> %139, float %143, i32 9
  %145 = extractelement <16 x i32> %94, i64 10
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !5608
  %149 = insertelement <16 x float> %144, float %148, i32 10
  %150 = extractelement <16 x i32> %94, i64 11
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !5608
  %154 = insertelement <16 x float> %149, float %153, i32 11
  %155 = extractelement <16 x i32> %94, i64 12
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !5608
  %159 = insertelement <16 x float> %154, float %158, i32 12
  %160 = extractelement <16 x i32> %94, i64 13
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !5608
  %164 = insertelement <16 x float> %159, float %163, i32 13
  %165 = extractelement <16 x i32> %94, i64 14
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !5608
  %169 = insertelement <16 x float> %164, float %168, i32 14
  %170 = extractelement <16 x i32> %94, i64 15
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !5608
  %174 = insertelement <16 x float> %169, float %173, i32 15
  %175 = getelementptr inbounds float, float* %4, i64 %36
  %176 = bitcast float* %175 to <16 x float>*
  store <16 x float> %174, <16 x float>* %176, align 64, !tbaa !5611
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 32
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 28
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_8(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.463, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5614
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !5628
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !5631
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !5633
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.464, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !5637
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.465, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.466, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.467, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.468, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !5639
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !5653
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 2
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !5655
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 14
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !5658
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 14
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !5660
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 512
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.132, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !5664
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 100352, i32 7168, i32 512, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !5675
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 200704
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.133, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !5679
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 4
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.368, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !5693
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 2
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.16, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !5695
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !5698
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !5700
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 512
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !5704
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 64
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.198, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !5706
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 32768, i32 32768, i32 64, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !5717
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 32768
  %187 = load i64, i64* %47, align 8, !tbaa !5721
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 65536
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([279 x i8], [279 x i8]* @.str.469, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !5723
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !5737
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 4
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.370, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !5739
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !5742
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !5744
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 64
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.200, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !5748
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 64, i32 64, i32 64, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !5759
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 256
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.371, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !5763
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !5777
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 4
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.372, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !5779
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !5782
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !5784
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 64
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.202, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !5788
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 64, i32 64, i32 64, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !5799
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 256
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.373, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !5803
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !5817
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 4
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.374, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !5819
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 14
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.79, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !5822
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 14
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.80, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !5824
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 64
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.204, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !5828
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 12544, i32 896, i32 64, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !5839
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 50176
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.375, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_8_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_8_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = alloca %37, align 8
  %7 = getelementptr inbounds %37, %37* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %37, %37* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %37, %37* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %37, %37* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %37, %37* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %37, %37* %6, i64 0, i32 5
  store i32 %5, i32* %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %37* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.470, i8* nonnull %14, i32 0)
  ret i32 %15
}

define private i32 @__tvm_parallel_lambda.470(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 27
  %23 = sdiv i32 %22, %21
  %24 = mul nsw i32 %23, %0
  %25 = icmp slt i32 %24, 28
  %26 = select i1 %25, i32 %24, i32 28
  %27 = add nsw i32 %0, 1
  %28 = mul nsw i32 %23, %27
  %29 = icmp slt i32 %28, 28
  %30 = select i1 %29, i32 %28, i32 28
  %31 = icmp slt i32 %26, %30
  br i1 %31, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %32 = add i32 %26, 1
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, -1
  %35 = sext i32 %30 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_begin10.preheader
  %indvars.iv56 = phi i64 [ %34, %for_body.preheader ], [ %indvars.iv.next57, %for_begin10.preheader ]
  %36 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %37 = tail call i8* %36(i32 1, i32 %19, i64 7168, i32 2, i32 32)
  %38 = bitcast i8* %37 to float*
  %39 = trunc i64 %indvars.iv56 to i32
  %40 = srem i32 %39, 7
  %41 = mul nsw i32 %40, 14336
  %42 = sdiv i32 %39, 7
  %43 = shl i32 %42, 16
  %44 = sext i32 %43 to i64
  %45 = sext i32 %41 to i64
  %46 = or i64 %44, 32768
  br label %for_body2

for_end:                                          ; preds = %for_begin10.preheader, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end9.1
  %47 = mul nsw i64 %indvars.iv56, 1792
  %48 = shl nsw i32 %42, 6
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds float, float* %13, i64 %49
  %51 = bitcast float* %50 to <64 x float>*
  %52 = load <64 x float>, <64 x float>* %51, align 64, !tbaa !5843
  %53 = getelementptr inbounds float, float* %16, i64 %49
  %54 = bitcast float* %53 to <64 x float>*
  %55 = load <64 x float>, <64 x float>* %54, align 64, !tbaa !5846
  %56 = bitcast i8* %37 to <64 x float>*
  %57 = load <64 x float>, <64 x float>* %56, align 64, !tbaa !5849
  %58 = fadd <64 x float> %57, %52
  %59 = fadd <64 x float> %58, %55
  %60 = fcmp ogt <64 x float> %59, zeroinitializer
  %61 = select <64 x i1> %60, <64 x float> %59, <64 x float> zeroinitializer
  %62 = getelementptr inbounds float, float* %10, i64 %47
  %63 = bitcast float* %62 to <64 x float>*
  store <64 x float> %61, <64 x float>* %63, align 64, !tbaa !5852
  %64 = getelementptr inbounds i8, i8* %37, i64 256
  %65 = bitcast i8* %64 to <64 x float>*
  %66 = load <64 x float>, <64 x float>* %65, align 64, !tbaa !5849
  %67 = fadd <64 x float> %66, %52
  %68 = fadd <64 x float> %67, %55
  %69 = fcmp ogt <64 x float> %68, zeroinitializer
  %70 = select <64 x i1> %69, <64 x float> %68, <64 x float> zeroinitializer
  %71 = mul i64 %indvars.iv56, 7696581394432
  %sext = ashr exact i64 %71, 32
  %72 = or i64 %sext, 64
  %73 = getelementptr inbounds float, float* %10, i64 %72
  %74 = bitcast float* %73 to <64 x float>*
  store <64 x float> %70, <64 x float>* %74, align 64, !tbaa !5852
  %75 = getelementptr inbounds i8, i8* %37, i64 3584
  %76 = bitcast i8* %75 to <64 x float>*
  %77 = load <64 x float>, <64 x float>* %76, align 64, !tbaa !5849
  %78 = fadd <64 x float> %77, %52
  %79 = fadd <64 x float> %78, %55
  %80 = fcmp ogt <64 x float> %79, zeroinitializer
  %81 = select <64 x i1> %80, <64 x float> %79, <64 x float> zeroinitializer
  %82 = mul i64 %indvars.iv56, 7696581394432
  %sext71 = add i64 %82, 3848290697216
  %83 = ashr exact i64 %sext71, 32
  %84 = getelementptr inbounds float, float* %10, i64 %83
  %85 = bitcast float* %84 to <64 x float>*
  store <64 x float> %81, <64 x float>* %85, align 64, !tbaa !5852
  %86 = getelementptr inbounds i8, i8* %37, i64 3840
  %87 = bitcast i8* %86 to <64 x float>*
  %88 = load <64 x float>, <64 x float>* %87, align 64, !tbaa !5849
  %89 = fadd <64 x float> %88, %52
  %90 = fadd <64 x float> %89, %55
  %91 = fcmp ogt <64 x float> %90, zeroinitializer
  %92 = select <64 x i1> %91, <64 x float> %90, <64 x float> zeroinitializer
  %93 = mul i64 %indvars.iv56, 7696581394432
  %sext58 = add i64 %93, 4123168604160
  %94 = ashr exact i64 %sext58, 32
  %95 = getelementptr inbounds float, float* %10, i64 %94
  %96 = bitcast float* %95 to <64 x float>*
  store <64 x float> %92, <64 x float>* %96, align 64, !tbaa !5852
  %97 = getelementptr inbounds i8, i8* %37, i64 512
  %98 = bitcast i8* %97 to <64 x float>*
  %99 = load <64 x float>, <64 x float>* %98, align 64, !tbaa !5849
  %100 = fadd <64 x float> %99, %52
  %101 = fadd <64 x float> %100, %55
  %102 = fcmp ogt <64 x float> %101, zeroinitializer
  %103 = select <64 x i1> %102, <64 x float> %101, <64 x float> zeroinitializer
  %104 = mul i64 %indvars.iv56, 7696581394432
  %sext72 = ashr exact i64 %104, 32
  %105 = or i64 %sext72, 128
  %106 = getelementptr inbounds float, float* %10, i64 %105
  %107 = bitcast float* %106 to <64 x float>*
  store <64 x float> %103, <64 x float>* %107, align 64, !tbaa !5852
  %108 = getelementptr inbounds i8, i8* %37, i64 768
  %109 = bitcast i8* %108 to <64 x float>*
  %110 = load <64 x float>, <64 x float>* %109, align 64, !tbaa !5849
  %111 = fadd <64 x float> %110, %52
  %112 = fadd <64 x float> %111, %55
  %113 = fcmp ogt <64 x float> %112, zeroinitializer
  %114 = select <64 x i1> %113, <64 x float> %112, <64 x float> zeroinitializer
  %115 = mul i64 %indvars.iv56, 7696581394432
  %sext59 = ashr exact i64 %115, 32
  %116 = or i64 %sext59, 192
  %117 = getelementptr inbounds float, float* %10, i64 %116
  %118 = bitcast float* %117 to <64 x float>*
  store <64 x float> %114, <64 x float>* %118, align 64, !tbaa !5852
  %119 = getelementptr inbounds i8, i8* %37, i64 4096
  %120 = bitcast i8* %119 to <64 x float>*
  %121 = load <64 x float>, <64 x float>* %120, align 64, !tbaa !5849
  %122 = fadd <64 x float> %121, %52
  %123 = fadd <64 x float> %122, %55
  %124 = fcmp ogt <64 x float> %123, zeroinitializer
  %125 = select <64 x i1> %124, <64 x float> %123, <64 x float> zeroinitializer
  %126 = mul i64 %indvars.iv56, 7696581394432
  %sext73 = add i64 %126, 4398046511104
  %127 = ashr exact i64 %sext73, 32
  %128 = getelementptr inbounds float, float* %10, i64 %127
  %129 = bitcast float* %128 to <64 x float>*
  store <64 x float> %125, <64 x float>* %129, align 64, !tbaa !5852
  %130 = getelementptr inbounds i8, i8* %37, i64 4352
  %131 = bitcast i8* %130 to <64 x float>*
  %132 = load <64 x float>, <64 x float>* %131, align 64, !tbaa !5849
  %133 = fadd <64 x float> %132, %52
  %134 = fadd <64 x float> %133, %55
  %135 = fcmp ogt <64 x float> %134, zeroinitializer
  %136 = select <64 x i1> %135, <64 x float> %134, <64 x float> zeroinitializer
  %137 = mul i64 %indvars.iv56, 7696581394432
  %sext60 = add i64 %137, 4672924418048
  %138 = ashr exact i64 %sext60, 32
  %139 = getelementptr inbounds float, float* %10, i64 %138
  %140 = bitcast float* %139 to <64 x float>*
  store <64 x float> %136, <64 x float>* %140, align 64, !tbaa !5852
  %141 = getelementptr inbounds i8, i8* %37, i64 1024
  %142 = bitcast i8* %141 to <64 x float>*
  %143 = load <64 x float>, <64 x float>* %142, align 64, !tbaa !5849
  %144 = fadd <64 x float> %143, %52
  %145 = fadd <64 x float> %144, %55
  %146 = fcmp ogt <64 x float> %145, zeroinitializer
  %147 = select <64 x i1> %146, <64 x float> %145, <64 x float> zeroinitializer
  %148 = mul i64 %indvars.iv56, 7696581394432
  %sext74 = add i64 %148, 1099511627776
  %149 = ashr exact i64 %sext74, 32
  %150 = getelementptr inbounds float, float* %10, i64 %149
  %151 = bitcast float* %150 to <64 x float>*
  store <64 x float> %147, <64 x float>* %151, align 64, !tbaa !5852
  %152 = getelementptr inbounds i8, i8* %37, i64 1280
  %153 = bitcast i8* %152 to <64 x float>*
  %154 = load <64 x float>, <64 x float>* %153, align 64, !tbaa !5849
  %155 = fadd <64 x float> %154, %52
  %156 = fadd <64 x float> %155, %55
  %157 = fcmp ogt <64 x float> %156, zeroinitializer
  %158 = select <64 x i1> %157, <64 x float> %156, <64 x float> zeroinitializer
  %159 = mul i64 %indvars.iv56, 7696581394432
  %sext61 = add i64 %159, 1374389534720
  %160 = ashr exact i64 %sext61, 32
  %161 = getelementptr inbounds float, float* %10, i64 %160
  %162 = bitcast float* %161 to <64 x float>*
  store <64 x float> %158, <64 x float>* %162, align 64, !tbaa !5852
  %163 = getelementptr inbounds i8, i8* %37, i64 4608
  %164 = bitcast i8* %163 to <64 x float>*
  %165 = load <64 x float>, <64 x float>* %164, align 64, !tbaa !5849
  %166 = fadd <64 x float> %165, %52
  %167 = fadd <64 x float> %166, %55
  %168 = fcmp ogt <64 x float> %167, zeroinitializer
  %169 = select <64 x i1> %168, <64 x float> %167, <64 x float> zeroinitializer
  %170 = mul i64 %indvars.iv56, 7696581394432
  %sext75 = add i64 %170, 4947802324992
  %171 = ashr exact i64 %sext75, 32
  %172 = getelementptr inbounds float, float* %10, i64 %171
  %173 = bitcast float* %172 to <64 x float>*
  store <64 x float> %169, <64 x float>* %173, align 64, !tbaa !5852
  %174 = getelementptr inbounds i8, i8* %37, i64 4864
  %175 = bitcast i8* %174 to <64 x float>*
  %176 = load <64 x float>, <64 x float>* %175, align 64, !tbaa !5849
  %177 = fadd <64 x float> %176, %52
  %178 = fadd <64 x float> %177, %55
  %179 = fcmp ogt <64 x float> %178, zeroinitializer
  %180 = select <64 x i1> %179, <64 x float> %178, <64 x float> zeroinitializer
  %181 = mul i64 %indvars.iv56, 7696581394432
  %sext62 = add i64 %181, 5222680231936
  %182 = ashr exact i64 %sext62, 32
  %183 = getelementptr inbounds float, float* %10, i64 %182
  %184 = bitcast float* %183 to <64 x float>*
  store <64 x float> %180, <64 x float>* %184, align 64, !tbaa !5852
  %185 = getelementptr inbounds i8, i8* %37, i64 1536
  %186 = bitcast i8* %185 to <64 x float>*
  %187 = load <64 x float>, <64 x float>* %186, align 64, !tbaa !5849
  %188 = fadd <64 x float> %187, %52
  %189 = fadd <64 x float> %188, %55
  %190 = fcmp ogt <64 x float> %189, zeroinitializer
  %191 = select <64 x i1> %190, <64 x float> %189, <64 x float> zeroinitializer
  %192 = mul i64 %indvars.iv56, 7696581394432
  %sext76 = add i64 %192, 1649267441664
  %193 = ashr exact i64 %sext76, 32
  %194 = getelementptr inbounds float, float* %10, i64 %193
  %195 = bitcast float* %194 to <64 x float>*
  store <64 x float> %191, <64 x float>* %195, align 64, !tbaa !5852
  %196 = getelementptr inbounds i8, i8* %37, i64 1792
  %197 = bitcast i8* %196 to <64 x float>*
  %198 = load <64 x float>, <64 x float>* %197, align 64, !tbaa !5849
  %199 = fadd <64 x float> %198, %52
  %200 = fadd <64 x float> %199, %55
  %201 = fcmp ogt <64 x float> %200, zeroinitializer
  %202 = select <64 x i1> %201, <64 x float> %200, <64 x float> zeroinitializer
  %203 = mul i64 %indvars.iv56, 7696581394432
  %sext63 = add i64 %203, 1924145348608
  %204 = ashr exact i64 %sext63, 32
  %205 = getelementptr inbounds float, float* %10, i64 %204
  %206 = bitcast float* %205 to <64 x float>*
  store <64 x float> %202, <64 x float>* %206, align 64, !tbaa !5852
  %207 = getelementptr inbounds i8, i8* %37, i64 5120
  %208 = bitcast i8* %207 to <64 x float>*
  %209 = load <64 x float>, <64 x float>* %208, align 64, !tbaa !5849
  %210 = fadd <64 x float> %209, %52
  %211 = fadd <64 x float> %210, %55
  %212 = fcmp ogt <64 x float> %211, zeroinitializer
  %213 = select <64 x i1> %212, <64 x float> %211, <64 x float> zeroinitializer
  %214 = mul i64 %indvars.iv56, 7696581394432
  %sext77 = add i64 %214, 5497558138880
  %215 = ashr exact i64 %sext77, 32
  %216 = getelementptr inbounds float, float* %10, i64 %215
  %217 = bitcast float* %216 to <64 x float>*
  store <64 x float> %213, <64 x float>* %217, align 64, !tbaa !5852
  %218 = getelementptr inbounds i8, i8* %37, i64 5376
  %219 = bitcast i8* %218 to <64 x float>*
  %220 = load <64 x float>, <64 x float>* %219, align 64, !tbaa !5849
  %221 = fadd <64 x float> %220, %52
  %222 = fadd <64 x float> %221, %55
  %223 = fcmp ogt <64 x float> %222, zeroinitializer
  %224 = select <64 x i1> %223, <64 x float> %222, <64 x float> zeroinitializer
  %225 = mul i64 %indvars.iv56, 7696581394432
  %sext64 = add i64 %225, 5772436045824
  %226 = ashr exact i64 %sext64, 32
  %227 = getelementptr inbounds float, float* %10, i64 %226
  %228 = bitcast float* %227 to <64 x float>*
  store <64 x float> %224, <64 x float>* %228, align 64, !tbaa !5852
  %229 = getelementptr inbounds i8, i8* %37, i64 2048
  %230 = bitcast i8* %229 to <64 x float>*
  %231 = load <64 x float>, <64 x float>* %230, align 64, !tbaa !5849
  %232 = fadd <64 x float> %231, %52
  %233 = fadd <64 x float> %232, %55
  %234 = fcmp ogt <64 x float> %233, zeroinitializer
  %235 = select <64 x i1> %234, <64 x float> %233, <64 x float> zeroinitializer
  %236 = mul i64 %indvars.iv56, 7696581394432
  %sext78 = add i64 %236, 2199023255552
  %237 = ashr exact i64 %sext78, 32
  %238 = getelementptr inbounds float, float* %10, i64 %237
  %239 = bitcast float* %238 to <64 x float>*
  store <64 x float> %235, <64 x float>* %239, align 64, !tbaa !5852
  %240 = getelementptr inbounds i8, i8* %37, i64 2304
  %241 = bitcast i8* %240 to <64 x float>*
  %242 = load <64 x float>, <64 x float>* %241, align 64, !tbaa !5849
  %243 = fadd <64 x float> %242, %52
  %244 = fadd <64 x float> %243, %55
  %245 = fcmp ogt <64 x float> %244, zeroinitializer
  %246 = select <64 x i1> %245, <64 x float> %244, <64 x float> zeroinitializer
  %247 = mul i64 %indvars.iv56, 7696581394432
  %sext65 = add i64 %247, 2473901162496
  %248 = ashr exact i64 %sext65, 32
  %249 = getelementptr inbounds float, float* %10, i64 %248
  %250 = bitcast float* %249 to <64 x float>*
  store <64 x float> %246, <64 x float>* %250, align 64, !tbaa !5852
  %251 = getelementptr inbounds i8, i8* %37, i64 5632
  %252 = bitcast i8* %251 to <64 x float>*
  %253 = load <64 x float>, <64 x float>* %252, align 64, !tbaa !5849
  %254 = fadd <64 x float> %253, %52
  %255 = fadd <64 x float> %254, %55
  %256 = fcmp ogt <64 x float> %255, zeroinitializer
  %257 = select <64 x i1> %256, <64 x float> %255, <64 x float> zeroinitializer
  %258 = mul i64 %indvars.iv56, 7696581394432
  %sext79 = add i64 %258, 6047313952768
  %259 = ashr exact i64 %sext79, 32
  %260 = getelementptr inbounds float, float* %10, i64 %259
  %261 = bitcast float* %260 to <64 x float>*
  store <64 x float> %257, <64 x float>* %261, align 64, !tbaa !5852
  %262 = getelementptr inbounds i8, i8* %37, i64 5888
  %263 = bitcast i8* %262 to <64 x float>*
  %264 = load <64 x float>, <64 x float>* %263, align 64, !tbaa !5849
  %265 = fadd <64 x float> %264, %52
  %266 = fadd <64 x float> %265, %55
  %267 = fcmp ogt <64 x float> %266, zeroinitializer
  %268 = select <64 x i1> %267, <64 x float> %266, <64 x float> zeroinitializer
  %269 = mul i64 %indvars.iv56, 7696581394432
  %sext66 = add i64 %269, 6322191859712
  %270 = ashr exact i64 %sext66, 32
  %271 = getelementptr inbounds float, float* %10, i64 %270
  %272 = bitcast float* %271 to <64 x float>*
  store <64 x float> %268, <64 x float>* %272, align 64, !tbaa !5852
  %273 = getelementptr inbounds i8, i8* %37, i64 2560
  %274 = bitcast i8* %273 to <64 x float>*
  %275 = load <64 x float>, <64 x float>* %274, align 64, !tbaa !5849
  %276 = fadd <64 x float> %275, %52
  %277 = fadd <64 x float> %276, %55
  %278 = fcmp ogt <64 x float> %277, zeroinitializer
  %279 = select <64 x i1> %278, <64 x float> %277, <64 x float> zeroinitializer
  %280 = mul i64 %indvars.iv56, 7696581394432
  %sext80 = add i64 %280, 2748779069440
  %281 = ashr exact i64 %sext80, 32
  %282 = getelementptr inbounds float, float* %10, i64 %281
  %283 = bitcast float* %282 to <64 x float>*
  store <64 x float> %279, <64 x float>* %283, align 64, !tbaa !5852
  %284 = getelementptr inbounds i8, i8* %37, i64 2816
  %285 = bitcast i8* %284 to <64 x float>*
  %286 = load <64 x float>, <64 x float>* %285, align 64, !tbaa !5849
  %287 = fadd <64 x float> %286, %52
  %288 = fadd <64 x float> %287, %55
  %289 = fcmp ogt <64 x float> %288, zeroinitializer
  %290 = select <64 x i1> %289, <64 x float> %288, <64 x float> zeroinitializer
  %291 = mul i64 %indvars.iv56, 7696581394432
  %sext67 = add i64 %291, 3023656976384
  %292 = ashr exact i64 %sext67, 32
  %293 = getelementptr inbounds float, float* %10, i64 %292
  %294 = bitcast float* %293 to <64 x float>*
  store <64 x float> %290, <64 x float>* %294, align 64, !tbaa !5852
  %295 = getelementptr inbounds i8, i8* %37, i64 6144
  %296 = bitcast i8* %295 to <64 x float>*
  %297 = load <64 x float>, <64 x float>* %296, align 64, !tbaa !5849
  %298 = fadd <64 x float> %297, %52
  %299 = fadd <64 x float> %298, %55
  %300 = fcmp ogt <64 x float> %299, zeroinitializer
  %301 = select <64 x i1> %300, <64 x float> %299, <64 x float> zeroinitializer
  %302 = mul i64 %indvars.iv56, 7696581394432
  %sext81 = add i64 %302, 6597069766656
  %303 = ashr exact i64 %sext81, 32
  %304 = getelementptr inbounds float, float* %10, i64 %303
  %305 = bitcast float* %304 to <64 x float>*
  store <64 x float> %301, <64 x float>* %305, align 64, !tbaa !5852
  %306 = getelementptr inbounds i8, i8* %37, i64 6400
  %307 = bitcast i8* %306 to <64 x float>*
  %308 = load <64 x float>, <64 x float>* %307, align 64, !tbaa !5849
  %309 = fadd <64 x float> %308, %52
  %310 = fadd <64 x float> %309, %55
  %311 = fcmp ogt <64 x float> %310, zeroinitializer
  %312 = select <64 x i1> %311, <64 x float> %310, <64 x float> zeroinitializer
  %313 = mul i64 %indvars.iv56, 7696581394432
  %sext68 = add i64 %313, 6871947673600
  %314 = ashr exact i64 %sext68, 32
  %315 = getelementptr inbounds float, float* %10, i64 %314
  %316 = bitcast float* %315 to <64 x float>*
  store <64 x float> %312, <64 x float>* %316, align 64, !tbaa !5852
  %317 = getelementptr inbounds i8, i8* %37, i64 3072
  %318 = bitcast i8* %317 to <64 x float>*
  %319 = load <64 x float>, <64 x float>* %318, align 64, !tbaa !5849
  %320 = fadd <64 x float> %319, %52
  %321 = fadd <64 x float> %320, %55
  %322 = fcmp ogt <64 x float> %321, zeroinitializer
  %323 = select <64 x i1> %322, <64 x float> %321, <64 x float> zeroinitializer
  %324 = mul i64 %indvars.iv56, 7696581394432
  %sext82 = add i64 %324, 3298534883328
  %325 = ashr exact i64 %sext82, 32
  %326 = getelementptr inbounds float, float* %10, i64 %325
  %327 = bitcast float* %326 to <64 x float>*
  store <64 x float> %323, <64 x float>* %327, align 64, !tbaa !5852
  %328 = getelementptr inbounds i8, i8* %37, i64 3328
  %329 = bitcast i8* %328 to <64 x float>*
  %330 = load <64 x float>, <64 x float>* %329, align 64, !tbaa !5849
  %331 = fadd <64 x float> %330, %52
  %332 = fadd <64 x float> %331, %55
  %333 = fcmp ogt <64 x float> %332, zeroinitializer
  %334 = select <64 x i1> %333, <64 x float> %332, <64 x float> zeroinitializer
  %335 = mul i64 %indvars.iv56, 7696581394432
  %sext69 = add i64 %335, 3573412790272
  %336 = ashr exact i64 %sext69, 32
  %337 = getelementptr inbounds float, float* %10, i64 %336
  %338 = bitcast float* %337 to <64 x float>*
  store <64 x float> %334, <64 x float>* %338, align 64, !tbaa !5852
  %339 = getelementptr inbounds i8, i8* %37, i64 6656
  %340 = bitcast i8* %339 to <64 x float>*
  %341 = load <64 x float>, <64 x float>* %340, align 64, !tbaa !5849
  %342 = fadd <64 x float> %341, %52
  %343 = fadd <64 x float> %342, %55
  %344 = fcmp ogt <64 x float> %343, zeroinitializer
  %345 = select <64 x i1> %344, <64 x float> %343, <64 x float> zeroinitializer
  %346 = mul i64 %indvars.iv56, 7696581394432
  %sext83 = add i64 %346, 7146825580544
  %347 = ashr exact i64 %sext83, 32
  %348 = getelementptr inbounds float, float* %10, i64 %347
  %349 = bitcast float* %348 to <64 x float>*
  store <64 x float> %345, <64 x float>* %349, align 64, !tbaa !5852
  %350 = getelementptr inbounds i8, i8* %37, i64 6912
  %351 = bitcast i8* %350 to <64 x float>*
  %352 = load <64 x float>, <64 x float>* %351, align 64, !tbaa !5849
  %353 = fadd <64 x float> %352, %52
  %354 = fadd <64 x float> %353, %55
  %355 = fcmp ogt <64 x float> %354, zeroinitializer
  %356 = select <64 x i1> %355, <64 x float> %354, <64 x float> zeroinitializer
  %357 = mul i64 %indvars.iv56, 7696581394432
  %sext70 = add i64 %357, 7421703487488
  %358 = ashr exact i64 %sext70, 32
  %359 = getelementptr inbounds float, float* %10, i64 %358
  %360 = bitcast float* %359 to <64 x float>*
  store <64 x float> %356, <64 x float>* %360, align 64, !tbaa !5852
  %361 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %362 = tail call i32 %361(i32 1, i32 %19, i8* nonnull %37)
  %indvars.iv.next57 = add nsw i64 %indvars.iv56, 1
  %363 = icmp slt i64 %indvars.iv.next57, %35
  br i1 %363, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_end9.1, %for_body
  %indvars.iv43 = phi i64 [ 0, %for_body ], [ %indvars.iv.next44, %for_end9.1 ]
  %364 = shl nsw i64 %indvars.iv43, 7
  %365 = getelementptr inbounds float, float* %38, i64 %364
  %366 = bitcast float* %365 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %366, align 64, !tbaa !5849
  %367 = or i64 %364, 64
  %368 = getelementptr inbounds float, float* %38, i64 %367
  %369 = bitcast float* %368 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %369, align 64, !tbaa !5849
  %370 = add nuw nsw i64 %364, 896
  %371 = getelementptr inbounds float, float* %38, i64 %370
  %372 = bitcast float* %371 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %372, align 64, !tbaa !5849
  %373 = add nuw nsw i64 %364, 960
  %374 = getelementptr inbounds float, float* %38, i64 %373
  %375 = bitcast float* %374 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %375, align 64, !tbaa !5849
  %376 = shl i64 %indvars.iv43, 10
  %377 = add nsw i64 %376, %45
  br label %for_body8

for_body8:                                        ; preds = %for_body8, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_body8 ]
  %378 = phi <64 x float> [ zeroinitializer, %for_body2 ], [ %410, %for_body8 ]
  %379 = phi <64 x float> [ zeroinitializer, %for_body2 ], [ %404, %for_body8 ]
  %380 = phi <64 x float> [ zeroinitializer, %for_body2 ], [ %398, %for_body8 ]
  %381 = phi <64 x float> [ zeroinitializer, %for_body2 ], [ %392, %for_body8 ]
  %382 = add nsw i64 %377, %indvars.iv
  %383 = getelementptr inbounds float, float* %4, i64 %382
  %384 = load float, float* %383, align 4, !tbaa !5855
  %385 = insertelement <64 x float> undef, float %384, i32 0
  %386 = shufflevector <64 x float> %385, <64 x float> undef, <64 x i32> zeroinitializer
  %387 = shl i64 %indvars.iv, 6
  %388 = add nuw nsw i64 %387, %44
  %389 = getelementptr inbounds float, float* %7, i64 %388
  %390 = bitcast float* %389 to <64 x float>*
  %391 = load <64 x float>, <64 x float>* %390, align 64, !tbaa !5858
  %392 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %386, <64 x float> %391, <64 x float> %381)
  %393 = add nsw i64 %382, 512
  %394 = getelementptr inbounds float, float* %4, i64 %393
  %395 = load float, float* %394, align 4, !tbaa !5855
  %396 = insertelement <64 x float> undef, float %395, i32 0
  %397 = shufflevector <64 x float> %396, <64 x float> undef, <64 x i32> zeroinitializer
  %398 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %397, <64 x float> %391, <64 x float> %380)
  %399 = add nsw i64 %382, 7168
  %400 = getelementptr inbounds float, float* %4, i64 %399
  %401 = load float, float* %400, align 4, !tbaa !5855
  %402 = insertelement <64 x float> undef, float %401, i32 0
  %403 = shufflevector <64 x float> %402, <64 x float> undef, <64 x i32> zeroinitializer
  %404 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %403, <64 x float> %391, <64 x float> %379)
  %405 = add nsw i64 %382, 7680
  %406 = getelementptr inbounds float, float* %4, i64 %405
  %407 = load float, float* %406, align 4, !tbaa !5855
  %408 = insertelement <64 x float> undef, float %407, i32 0
  %409 = shufflevector <64 x float> %408, <64 x float> undef, <64 x i32> zeroinitializer
  %410 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %409, <64 x float> %391, <64 x float> %378)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %411 = add nsw i64 %377, 100352
  br label %for_body8.1

for_body8.1:                                      ; preds = %for_body8.1, %for_end9
  %indvars.iv.1 = phi i64 [ 0, %for_end9 ], [ %indvars.iv.next.1, %for_body8.1 ]
  %412 = phi <64 x float> [ %410, %for_end9 ], [ %444, %for_body8.1 ]
  %413 = phi <64 x float> [ %404, %for_end9 ], [ %438, %for_body8.1 ]
  %414 = phi <64 x float> [ %398, %for_end9 ], [ %432, %for_body8.1 ]
  %415 = phi <64 x float> [ %392, %for_end9 ], [ %426, %for_body8.1 ]
  %416 = add nsw i64 %411, %indvars.iv.1
  %417 = getelementptr inbounds float, float* %4, i64 %416
  %418 = load float, float* %417, align 4, !tbaa !5855
  %419 = insertelement <64 x float> undef, float %418, i32 0
  %420 = shufflevector <64 x float> %419, <64 x float> undef, <64 x i32> zeroinitializer
  %421 = shl i64 %indvars.iv.1, 6
  %422 = add nuw nsw i64 %46, %421
  %423 = getelementptr inbounds float, float* %7, i64 %422
  %424 = bitcast float* %423 to <64 x float>*
  %425 = load <64 x float>, <64 x float>* %424, align 64, !tbaa !5858
  %426 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %420, <64 x float> %425, <64 x float> %415)
  %427 = add nsw i64 %416, 512
  %428 = getelementptr inbounds float, float* %4, i64 %427
  %429 = load float, float* %428, align 4, !tbaa !5855
  %430 = insertelement <64 x float> undef, float %429, i32 0
  %431 = shufflevector <64 x float> %430, <64 x float> undef, <64 x i32> zeroinitializer
  %432 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %431, <64 x float> %425, <64 x float> %414)
  %433 = add nsw i64 %416, 7168
  %434 = getelementptr inbounds float, float* %4, i64 %433
  %435 = load float, float* %434, align 4, !tbaa !5855
  %436 = insertelement <64 x float> undef, float %435, i32 0
  %437 = shufflevector <64 x float> %436, <64 x float> undef, <64 x i32> zeroinitializer
  %438 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %437, <64 x float> %425, <64 x float> %413)
  %439 = add nsw i64 %416, 7680
  %440 = getelementptr inbounds float, float* %4, i64 %439
  %441 = load float, float* %440, align 4, !tbaa !5855
  %442 = insertelement <64 x float> undef, float %441, i32 0
  %443 = shufflevector <64 x float> %442, <64 x float> undef, <64 x i32> zeroinitializer
  %444 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %443, <64 x float> %425, <64 x float> %412)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 512
  br i1 %exitcond.1, label %for_end9.1, label %for_body8.1, !prof !50

for_end9.1:                                       ; preds = %for_body8.1
  store <64 x float> %426, <64 x float>* %366, align 64, !tbaa !5849
  store <64 x float> %432, <64 x float>* %369, align 64, !tbaa !5849
  store <64 x float> %438, <64 x float>* %372, align 64, !tbaa !5849
  store <64 x float> %444, <64 x float>* %375, align 64, !tbaa !5849
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  %exitcond45 = icmp eq i64 %indvars.iv.next44, 7
  br i1 %exitcond45, label %for_begin10.preheader, label %for_body2, !prof !50
}

define dllexport i32 @fused_layout_transform_49(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.471, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5861
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.472, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !5875
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.473, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !5877
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !5891
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 64
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.177, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !5893
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 7
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.178, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !5896
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 7
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !5898
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !5902
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 1568, i32 224, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !5913
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 100352
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.181, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !5917
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !5931
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 512
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.308, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !5933
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 7
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.358, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !5936
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 7
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.359, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !5938
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 4
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !5942
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 196, i32 28, i32 4, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !5953
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 100352
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.474, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_49_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_49_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %38, align 8
  %3 = getelementptr inbounds %38, %38* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %38, %38* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %38* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.475, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.475(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 3583
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 3584
  %14 = select i1 %13, i32 %12, i32 3584
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 3584
  %18 = select i1 %17, i32 %16, i32 3584
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_begin1.preheader ]
  %24 = mul nsw i64 %indvars.iv, 28
  %25 = trunc i64 %indvars.iv to i32
  %26 = sdiv i32 %25, 7
  %27 = shl nsw i32 %26, 2
  %28 = insertelement <4 x i32> undef, i32 %27, i32 0
  %29 = or i32 %27, 1
  %30 = insertelement <4 x i32> %28, i32 %29, i32 1
  %31 = or i32 %27, 2
  %32 = insertelement <4 x i32> %30, i32 %31, i32 2
  %33 = or i32 %27, 3
  %34 = insertelement <4 x i32> %32, i32 %33, i32 3
  %35 = sdiv <4 x i32> %34, <i32 32, i32 32, i32 32, i32 32>
  %36 = mul <4 x i32> %35, <i32 32, i32 32, i32 32, i32 32>
  %37 = sub <4 x i32> %34, %36
  %38 = icmp sgt <4 x i32> %37, <i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <4 x i1> %38, <i1 true, i1 true, i1 true, i1 true>
  %39 = sext <4 x i1> %not. to <4 x i32>
  %40 = add nsw <4 x i32> %35, %39
  %41 = mul nsw <4 x i32> %40, <i32 1568, i32 1568, i32 1568, i32 1568>
  %42 = srem i32 %25, 7
  %43 = mul nsw i32 %42, 224
  %44 = insertelement <4 x i32> undef, i32 %43, i32 0
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> zeroinitializer
  %46 = add nsw <4 x i32> %37, <i32 32, i32 32, i32 32, i32 32>
  %47 = select <4 x i1> %38, <4 x i32> %37, <4 x i32> %46
  %48 = add <4 x i32> %47, %45
  %49 = add <4 x i32> %48, %41
  %50 = extractelement <4 x i32> %49, i64 0
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %7, i64 %51
  %53 = load float, float* %52, align 4, !tbaa !5957
  %54 = insertelement <4 x float> undef, float %53, i32 0
  %55 = extractelement <4 x i32> %49, i64 1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds float, float* %7, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !5957
  %59 = insertelement <4 x float> %54, float %58, i32 1
  %60 = extractelement <4 x i32> %49, i64 2
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds float, float* %7, i64 %61
  %63 = load float, float* %62, align 4, !tbaa !5957
  %64 = insertelement <4 x float> %59, float %63, i32 2
  %65 = extractelement <4 x i32> %49, i64 3
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %7, i64 %66
  %68 = load float, float* %67, align 4, !tbaa !5957
  %69 = insertelement <4 x float> %64, float %68, i32 3
  %70 = getelementptr inbounds float, float* %4, i64 %24
  %71 = bitcast float* %70 to <4 x float>*
  store <4 x float> %69, <4 x float>* %71, align 16, !tbaa !5960
  %72 = add nsw i64 %24, 4
  %73 = add <4 x i32> %49, <i32 32, i32 32, i32 32, i32 32>
  %74 = extractelement <4 x i32> %73, i64 0
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %7, i64 %75
  %77 = load float, float* %76, align 4, !tbaa !5957
  %78 = insertelement <4 x float> undef, float %77, i32 0
  %79 = extractelement <4 x i32> %73, i64 1
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds float, float* %7, i64 %80
  %82 = load float, float* %81, align 4, !tbaa !5957
  %83 = insertelement <4 x float> %78, float %82, i32 1
  %84 = extractelement <4 x i32> %73, i64 2
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds float, float* %7, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !5957
  %88 = insertelement <4 x float> %83, float %87, i32 2
  %89 = extractelement <4 x i32> %73, i64 3
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float* %7, i64 %90
  %92 = load float, float* %91, align 4, !tbaa !5957
  %93 = insertelement <4 x float> %88, float %92, i32 3
  %94 = getelementptr inbounds float, float* %4, i64 %72
  %95 = bitcast float* %94 to <4 x float>*
  store <4 x float> %93, <4 x float>* %95, align 16, !tbaa !5960
  %96 = add nsw i64 %24, 8
  %97 = add <4 x i32> %49, <i32 64, i32 64, i32 64, i32 64>
  %98 = extractelement <4 x i32> %97, i64 0
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float* %7, i64 %99
  %101 = load float, float* %100, align 4, !tbaa !5957
  %102 = insertelement <4 x float> undef, float %101, i32 0
  %103 = extractelement <4 x i32> %97, i64 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds float, float* %7, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !5957
  %107 = insertelement <4 x float> %102, float %106, i32 1
  %108 = extractelement <4 x i32> %97, i64 2
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds float, float* %7, i64 %109
  %111 = load float, float* %110, align 4, !tbaa !5957
  %112 = insertelement <4 x float> %107, float %111, i32 2
  %113 = extractelement <4 x i32> %97, i64 3
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds float, float* %7, i64 %114
  %116 = load float, float* %115, align 4, !tbaa !5957
  %117 = insertelement <4 x float> %112, float %116, i32 3
  %118 = getelementptr inbounds float, float* %4, i64 %96
  %119 = bitcast float* %118 to <4 x float>*
  store <4 x float> %117, <4 x float>* %119, align 16, !tbaa !5960
  %120 = add nsw i64 %24, 12
  %121 = add <4 x i32> %49, <i32 96, i32 96, i32 96, i32 96>
  %122 = extractelement <4 x i32> %121, i64 0
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds float, float* %7, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !5957
  %126 = insertelement <4 x float> undef, float %125, i32 0
  %127 = extractelement <4 x i32> %121, i64 1
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %7, i64 %128
  %130 = load float, float* %129, align 4, !tbaa !5957
  %131 = insertelement <4 x float> %126, float %130, i32 1
  %132 = extractelement <4 x i32> %121, i64 2
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds float, float* %7, i64 %133
  %135 = load float, float* %134, align 4, !tbaa !5957
  %136 = insertelement <4 x float> %131, float %135, i32 2
  %137 = extractelement <4 x i32> %121, i64 3
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds float, float* %7, i64 %138
  %140 = load float, float* %139, align 4, !tbaa !5957
  %141 = insertelement <4 x float> %136, float %140, i32 3
  %142 = getelementptr inbounds float, float* %4, i64 %120
  %143 = bitcast float* %142 to <4 x float>*
  store <4 x float> %141, <4 x float>* %143, align 16, !tbaa !5960
  %144 = add nsw i64 %24, 16
  %145 = add <4 x i32> %49, <i32 128, i32 128, i32 128, i32 128>
  %146 = extractelement <4 x i32> %145, i64 0
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds float, float* %7, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !5957
  %150 = insertelement <4 x float> undef, float %149, i32 0
  %151 = extractelement <4 x i32> %145, i64 1
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds float, float* %7, i64 %152
  %154 = load float, float* %153, align 4, !tbaa !5957
  %155 = insertelement <4 x float> %150, float %154, i32 1
  %156 = extractelement <4 x i32> %145, i64 2
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds float, float* %7, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !5957
  %160 = insertelement <4 x float> %155, float %159, i32 2
  %161 = extractelement <4 x i32> %145, i64 3
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds float, float* %7, i64 %162
  %164 = load float, float* %163, align 4, !tbaa !5957
  %165 = insertelement <4 x float> %160, float %164, i32 3
  %166 = getelementptr inbounds float, float* %4, i64 %144
  %167 = bitcast float* %166 to <4 x float>*
  store <4 x float> %165, <4 x float>* %167, align 16, !tbaa !5960
  %168 = add nsw i64 %24, 20
  %169 = add <4 x i32> %49, <i32 160, i32 160, i32 160, i32 160>
  %170 = extractelement <4 x i32> %169, i64 0
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !5957
  %174 = insertelement <4 x float> undef, float %173, i32 0
  %175 = extractelement <4 x i32> %169, i64 1
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds float, float* %7, i64 %176
  %178 = load float, float* %177, align 4, !tbaa !5957
  %179 = insertelement <4 x float> %174, float %178, i32 1
  %180 = extractelement <4 x i32> %169, i64 2
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds float, float* %7, i64 %181
  %183 = load float, float* %182, align 4, !tbaa !5957
  %184 = insertelement <4 x float> %179, float %183, i32 2
  %185 = extractelement <4 x i32> %169, i64 3
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds float, float* %7, i64 %186
  %188 = load float, float* %187, align 4, !tbaa !5957
  %189 = insertelement <4 x float> %184, float %188, i32 3
  %190 = getelementptr inbounds float, float* %4, i64 %168
  %191 = bitcast float* %190 to <4 x float>*
  store <4 x float> %189, <4 x float>* %191, align 16, !tbaa !5960
  %192 = add nsw i64 %24, 24
  %193 = add <4 x i32> %49, <i32 192, i32 192, i32 192, i32 192>
  %194 = extractelement <4 x i32> %193, i64 0
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds float, float* %7, i64 %195
  %197 = load float, float* %196, align 4, !tbaa !5957
  %198 = insertelement <4 x float> undef, float %197, i32 0
  %199 = extractelement <4 x i32> %193, i64 1
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds float, float* %7, i64 %200
  %202 = load float, float* %201, align 4, !tbaa !5957
  %203 = insertelement <4 x float> %198, float %202, i32 1
  %204 = extractelement <4 x i32> %193, i64 2
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds float, float* %7, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !5957
  %208 = insertelement <4 x float> %203, float %207, i32 2
  %209 = extractelement <4 x i32> %193, i64 3
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds float, float* %7, i64 %210
  %212 = load float, float* %211, align 4, !tbaa !5957
  %213 = insertelement <4 x float> %208, float %212, i32 3
  %214 = getelementptr inbounds float, float* %4, i64 %192
  %215 = bitcast float* %214 to <4 x float>*
  store <4 x float> %213, <4 x float>* %215, align 16, !tbaa !5960
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %216 = icmp slt i64 %indvars.iv.next, %23
  br i1 %216, label %for_begin1.preheader, label %for_end, !prof !5

for_end:                                          ; preds = %for_begin1.preheader, %entry
  ret i32 0
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 7
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.476, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !5963
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !5977
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !5980
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !5982
  %32 = getelementptr inbounds i8, i8* %0, i64 40
  %33 = bitcast i8* %32 to %1**
  %34 = load %1*, %1** %33, align 8
  %35 = getelementptr inbounds i8, i8* %1, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4, !tbaa !5986
  %38 = getelementptr inbounds i8, i8* %0, i64 48
  %39 = bitcast i8* %38 to %1**
  %40 = load %1*, %1** %39, align 8
  %41 = getelementptr inbounds i8, i8* %1, i64 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 4, !tbaa !5988
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  %66 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %77 = load i64*, i64** %76, align 8
  %78 = getelementptr inbounds %1, %1* %34, i64 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds %1, %1* %34, i64 0, i32 4
  %81 = load i64*, i64** %80, align 8
  %82 = getelementptr inbounds %1, %1* %34, i64 0, i32 5
  %83 = load i64*, i64** %82, align 8
  %84 = getelementptr inbounds %1, %1* %40, i64 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %1, %1* %40, i64 0, i32 4
  %87 = load i64*, i64** %86, align 8
  %88 = getelementptr inbounds %1, %1* %40, i64 0, i32 5
  %89 = load i64*, i64** %88, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %90(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.477, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %91 = getelementptr inbounds i8, i8* %1, i64 4
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 4, !tbaa !5991
  switch i32 %93, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %94 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %94(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.478, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.479, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.480, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %97(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.481, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %37, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ]

assert_fail11:                                    ; preds = %assert_end10
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.482, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  switch i32 %43, label %assert_fail13 [
    i32 13, label %assert_end14
    i32 7, label %assert_end14
    i32 4, label %assert_end14
    i32 3, label %assert_end14
  ]

assert_fail13:                                    ; preds = %assert_end12
  %99 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %99(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.483, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12, %assert_end12, %assert_end12, %assert_end12
  %100 = icmp eq i32 %51, 1
  br i1 %100, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 5
  br i1 %104, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %106 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 2
  %109 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 32
  %112 = and i1 %108, %111
  %113 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %114 = load i16, i16* %113, align 2
  %115 = icmp eq i16 %114, 1
  %116 = and i1 %112, %115
  br i1 %116, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %118 = load i64, i64* %47, align 8, !tbaa !5993
  %119 = trunc i64 %118 to i32
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %122 = getelementptr inbounds i64, i64* %47, i64 1
  %123 = load i64, i64* %122, align 8, !tbaa !6007
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %127 = getelementptr inbounds i64, i64* %47, i64 2
  %128 = load i64, i64* %127, align 8, !tbaa !6009
  %129 = trunc i64 %128 to i32
  %130 = icmp eq i32 %129, 14
  br i1 %130, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %132 = getelementptr inbounds i64, i64* %47, i64 3
  %133 = load i64, i64* %132, align 8, !tbaa !6012
  %134 = trunc i64 %133 to i32
  %135 = icmp eq i32 %134, 14
  br i1 %135, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %136 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %136(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %137 = getelementptr inbounds i64, i64* %47, i64 4
  %138 = load i64, i64* %137, align 8, !tbaa !6014
  %139 = trunc i64 %138 to i32
  %140 = icmp eq i32 %139, 1024
  br i1 %140, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %141 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %141(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.484, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %142 = icmp eq i64* %49, null
  br i1 %142, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end30
  %143 = getelementptr inbounds i64, i64* %49, i64 1
  %144 = bitcast i64* %143 to <4 x i64>*
  %145 = load <4 x i64>, <4 x i64>* %144, align 8, !tbaa !6018
  %146 = trunc <4 x i64> %145 to <4 x i32>
  %147 = icmp eq <4 x i32> %146, <i32 200704, i32 14336, i32 1024, i32 1>
  %148 = load i64, i64* %49, align 8, !tbaa !6029
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 200704
  %rdx.shuf203 = shufflevector <4 x i1> %147, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx204 = and <4 x i1> %147, %rdx.shuf203
  %rdx.shuf205 = shufflevector <4 x i1> %bin.rdx204, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx206 = and <4 x i1> %bin.rdx204, %rdx.shuf205
  %151 = extractelement <4 x i1> %bin.rdx206, i32 0
  %152 = and i1 %151, %150
  br i1 %152, label %if_end, label %assert_fail31, !prof !5

if_end:                                           ; preds = %assert_end30, %if_then
  %153 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %154 = load i64, i64* %153, align 8
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %assert_end34, label %assert_fail33, !prof !5

assert_fail31:                                    ; preds = %if_then
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([244 x i8], [244 x i8]* @.str.485, i64 0, i64 0))
  ret i32 -1

assert_fail33:                                    ; preds = %if_end
  %157 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %157(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %if_end
  %158 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 6
  br i1 %160, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %162 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 2
  %165 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %166 = load i8, i8* %165, align 1
  %167 = icmp eq i8 %166, 32
  %168 = and i1 %164, %167
  %169 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %170 = load i16, i16* %169, align 2
  %171 = icmp eq i16 %170, 1
  %172 = and i1 %168, %171
  br i1 %172, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %174 = load i64, i64* %57, align 8, !tbaa !6033
  %175 = trunc i64 %174 to i32
  %176 = icmp eq i32 %175, 64
  br i1 %176, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %177(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.334, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %178 = getelementptr inbounds i64, i64* %57, i64 1
  %179 = load i64, i64* %178, align 8, !tbaa !6047
  %180 = trunc i64 %179 to i32
  %181 = icmp eq i32 %180, 1
  br i1 %181, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %183 = getelementptr inbounds i64, i64* %57, i64 2
  %184 = load i64, i64* %183, align 8, !tbaa !6049
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 1
  br i1 %186, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %187 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %187(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %188 = getelementptr inbounds i64, i64* %57, i64 3
  %189 = load i64, i64* %188, align 8, !tbaa !6052
  %190 = trunc i64 %189 to i32
  %191 = icmp eq i32 %190, 1
  br i1 %191, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %192 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %192(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %193 = getelementptr inbounds i64, i64* %57, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !6054
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 1024
  br i1 %196, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.224, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %198 = getelementptr inbounds i64, i64* %57, i64 5
  %199 = load i64, i64* %198, align 8, !tbaa !6058
  %200 = trunc i64 %199 to i32
  %201 = icmp eq i32 %200, 32
  br i1 %201, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %202 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %202(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %203 = icmp eq i64* %59, null
  br i1 %203, label %if_end52, label %if_then51, !prof !50

if_then51:                                        ; preds = %assert_end50
  %204 = getelementptr inbounds i64, i64* %59, i64 2
  %205 = bitcast i64* %204 to <4 x i64>*
  %206 = load <4 x i64>, <4 x i64>* %205, align 8, !tbaa !6060
  %207 = trunc <4 x i64> %206 to <4 x i32>
  %208 = icmp eq <4 x i32> %207, <i32 32768, i32 32768, i32 32, i32 1>
  %209 = getelementptr inbounds i64, i64* %59, i64 1
  %210 = load i64, i64* %209, align 8, !tbaa !6071
  %211 = trunc i64 %210 to i32
  %212 = icmp eq i32 %211, 32768
  %213 = load i64, i64* %59, align 8, !tbaa !6075
  %214 = trunc i64 %213 to i32
  %215 = icmp eq i32 %214, 32768
  %rdx.shuf199 = shufflevector <4 x i1> %208, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx200 = and <4 x i1> %208, %rdx.shuf199
  %rdx.shuf201 = shufflevector <4 x i1> %bin.rdx200, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx202 = and <4 x i1> %bin.rdx200, %rdx.shuf201
  %216 = extractelement <4 x i1> %bin.rdx202, i32 0
  %217 = and i1 %216, %212
  %218 = and i1 %217, %215
  br i1 %218, label %if_end52, label %assert_fail53, !prof !5

if_end52:                                         ; preds = %assert_end50, %if_then51
  %219 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %220 = load i64, i64* %219, align 8
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %assert_end56, label %assert_fail55, !prof !5

assert_fail53:                                    ; preds = %if_then51
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([279 x i8], [279 x i8]* @.str.486, i64 0, i64 0))
  ret i32 -1

assert_fail55:                                    ; preds = %if_end52
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %if_end52
  %224 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 1
  br i1 %226, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %227(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %228 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %53, %229
  br i1 %230, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %231(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %232 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, 5
  br i1 %234, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %236 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %237 = load i8, i8* %236, align 1
  %238 = icmp eq i8 %237, 2
  %239 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 32
  %242 = and i1 %238, %241
  %243 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %244 = load i16, i16* %243, align 2
  %245 = icmp eq i16 %244, 1
  %246 = and i1 %242, %245
  br i1 %246, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %247(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %248 = load i64, i64* %63, align 8, !tbaa !6077
  %249 = trunc i64 %248 to i32
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %251(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %252 = getelementptr inbounds i64, i64* %63, i64 1
  %253 = load i64, i64* %252, align 8, !tbaa !6091
  %254 = trunc i64 %253 to i32
  %255 = icmp eq i32 %254, 64
  br i1 %255, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %256(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.337, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %257 = getelementptr inbounds i64, i64* %63, i64 2
  %258 = load i64, i64* %257, align 8, !tbaa !6093
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %262 = getelementptr inbounds i64, i64* %63, i64 3
  %263 = load i64, i64* %262, align 8, !tbaa !6096
  %264 = trunc i64 %263 to i32
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %266(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %267 = getelementptr inbounds i64, i64* %63, i64 4
  %268 = load i64, i64* %267, align 8, !tbaa !6098
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 32
  br i1 %270, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %271(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %272 = icmp eq i64* %65, null
  br i1 %272, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %273 = getelementptr inbounds i64, i64* %65, i64 1
  %274 = bitcast i64* %273 to <4 x i64>*
  %275 = load <4 x i64>, <4 x i64>* %274, align 8, !tbaa !6102
  %276 = trunc <4 x i64> %275 to <4 x i32>
  %277 = icmp eq <4 x i32> %276, <i32 32, i32 32, i32 32, i32 1>
  %278 = load i64, i64* %65, align 8, !tbaa !6113
  %279 = trunc i64 %278 to i32
  %280 = icmp eq i32 %279, 2048
  %rdx.shuf195 = shufflevector <4 x i1> %277, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx196 = and <4 x i1> %277, %rdx.shuf195
  %rdx.shuf197 = shufflevector <4 x i1> %bin.rdx196, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx198 = and <4 x i1> %bin.rdx196, %rdx.shuf197
  %281 = extractelement <4 x i1> %bin.rdx198, i32 0
  %282 = and i1 %281, %280
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.338, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %53, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %301 = load i8, i8* %300, align 1
  %302 = icmp eq i8 %301, 2
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = and i1 %302, %305
  %307 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %308 = load i16, i16* %307, align 2
  %309 = icmp eq i16 %308, 1
  %310 = and i1 %306, %309
  br i1 %310, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %312 = load i64, i64* %69, align 8, !tbaa !6117
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %316 = getelementptr inbounds i64, i64* %69, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !6131
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 64
  br i1 %319, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.339, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %321 = getelementptr inbounds i64, i64* %69, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !6133
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 1
  br i1 %324, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %326 = getelementptr inbounds i64, i64* %69, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !6136
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 1
  br i1 %329, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %331 = getelementptr inbounds i64, i64* %69, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !6138
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 32
  br i1 %334, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %336 = icmp eq i64* %71, null
  br i1 %336, label %if_end100, label %if_then99, !prof !50

if_then99:                                        ; preds = %assert_end98
  %337 = getelementptr inbounds i64, i64* %71, i64 1
  %338 = bitcast i64* %337 to <4 x i64>*
  %339 = load <4 x i64>, <4 x i64>* %338, align 8, !tbaa !6142
  %340 = trunc <4 x i64> %339 to <4 x i32>
  %341 = icmp eq <4 x i32> %340, <i32 32, i32 32, i32 32, i32 1>
  %342 = load i64, i64* %71, align 8, !tbaa !6153
  %343 = trunc i64 %342 to i32
  %344 = icmp eq i32 %343, 2048
  %rdx.shuf191 = shufflevector <4 x i1> %341, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx192 = and <4 x i1> %341, %rdx.shuf191
  %rdx.shuf193 = shufflevector <4 x i1> %bin.rdx192, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx194 = and <4 x i1> %bin.rdx192, %rdx.shuf193
  %345 = extractelement <4 x i1> %bin.rdx194, i32 0
  %346 = and i1 %345, %344
  br i1 %346, label %if_end100, label %assert_fail101, !prof !5

if_end100:                                        ; preds = %assert_end98, %if_then99
  %347 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %348 = load i64, i64* %347, align 8
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %assert_end104, label %assert_fail103, !prof !5

assert_fail101:                                   ; preds = %if_then99
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %350(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.340, i64 0, i64 0))
  ret i32 -1

assert_fail103:                                   ; preds = %if_end100
  %351 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %351(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %if_end100
  %352 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %353 = load i32, i32* %352, align 4
  %354 = icmp eq i32 %353, 1
  br i1 %354, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %355 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %355(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %356 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %357 = load i32, i32* %356, align 4
  %358 = icmp eq i32 %53, %357
  br i1 %358, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %359 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %359(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %360 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %361 = load i32, i32* %360, align 4
  %362 = icmp eq i32 %361, 5
  br i1 %362, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %364 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %365 = load i8, i8* %364, align 1
  %366 = icmp eq i8 %365, 2
  %367 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %368 = load i8, i8* %367, align 1
  %369 = icmp eq i8 %368, 32
  %370 = and i1 %366, %369
  %371 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %372 = load i16, i16* %371, align 2
  %373 = icmp eq i16 %372, 1
  %374 = and i1 %370, %373
  br i1 %374, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %375 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %375(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %376 = load i64, i64* %75, align 8, !tbaa !6157
  %377 = trunc i64 %376 to i32
  %378 = icmp eq i32 %377, 1
  br i1 %378, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %379 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %379(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %380 = getelementptr inbounds i64, i64* %75, i64 1
  %381 = load i64, i64* %380, align 8, !tbaa !6171
  %382 = trunc i64 %381 to i32
  %383 = icmp eq i32 %382, 64
  br i1 %383, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %384 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %384(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.341, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %385 = getelementptr inbounds i64, i64* %75, i64 2
  %386 = load i64, i64* %385, align 8, !tbaa !6173
  %387 = trunc i64 %386 to i32
  %388 = icmp eq i32 %387, 1
  br i1 %388, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %390 = getelementptr inbounds i64, i64* %75, i64 3
  %391 = load i64, i64* %390, align 8, !tbaa !6176
  %392 = trunc i64 %391 to i32
  %393 = icmp eq i32 %392, 1
  br i1 %393, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %394 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %394(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %395 = getelementptr inbounds i64, i64* %75, i64 4
  %396 = load i64, i64* %395, align 8, !tbaa !6178
  %397 = trunc i64 %396 to i32
  %398 = icmp eq i32 %397, 32
  br i1 %398, label %assert_end122, label %assert_fail121, !prof !5

assert_fail121:                                   ; preds = %assert_end120
  %399 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %399(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end122:                                    ; preds = %assert_end120
  %400 = icmp eq i64* %77, null
  br i1 %400, label %if_end124, label %if_then123, !prof !50

if_then123:                                       ; preds = %assert_end122
  %401 = getelementptr inbounds i64, i64* %77, i64 1
  %402 = bitcast i64* %401 to <4 x i64>*
  %403 = load <4 x i64>, <4 x i64>* %402, align 8, !tbaa !6182
  %404 = trunc <4 x i64> %403 to <4 x i32>
  %405 = icmp eq <4 x i32> %404, <i32 32, i32 32, i32 32, i32 1>
  %406 = load i64, i64* %77, align 8, !tbaa !6193
  %407 = trunc i64 %406 to i32
  %408 = icmp eq i32 %407, 2048
  %rdx.shuf187 = shufflevector <4 x i1> %405, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx188 = and <4 x i1> %405, %rdx.shuf187
  %rdx.shuf189 = shufflevector <4 x i1> %bin.rdx188, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx190 = and <4 x i1> %bin.rdx188, %rdx.shuf189
  %409 = extractelement <4 x i1> %bin.rdx190, i32 0
  %410 = and i1 %409, %408
  br i1 %410, label %if_end124, label %assert_fail125, !prof !5

if_end124:                                        ; preds = %assert_end122, %if_then123
  %411 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %412 = load i64, i64* %411, align 8
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %assert_end128, label %assert_fail127, !prof !5

assert_fail125:                                   ; preds = %if_then123
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %414(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.342, i64 0, i64 0))
  ret i32 -1

assert_fail127:                                   ; preds = %if_end124
  %415 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %415(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %if_end124
  %416 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %417 = load i32, i32* %416, align 4
  %418 = icmp eq i32 %417, 1
  br i1 %418, label %assert_end130, label %assert_fail129, !prof !5

assert_fail129:                                   ; preds = %assert_end128
  %419 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %419(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end130:                                    ; preds = %assert_end128
  %420 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %421 = load i32, i32* %420, align 4
  %422 = icmp eq i32 %53, %421
  br i1 %422, label %assert_end132, label %assert_fail131, !prof !5

assert_fail131:                                   ; preds = %assert_end130
  %423 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %423(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end132:                                    ; preds = %assert_end130
  %424 = getelementptr inbounds %1, %1* %34, i64 0, i32 2
  %425 = load i32, i32* %424, align 4
  %426 = icmp eq i32 %425, 5
  br i1 %426, label %assert_end134, label %assert_fail133, !prof !5

assert_fail133:                                   ; preds = %assert_end132
  %427 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %427(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %assert_end132
  %428 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 0
  %429 = load i8, i8* %428, align 1
  %430 = icmp eq i8 %429, 2
  %431 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 1
  %432 = load i8, i8* %431, align 1
  %433 = icmp eq i8 %432, 32
  %434 = and i1 %430, %433
  %435 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 2
  %436 = load i16, i16* %435, align 2
  %437 = icmp eq i16 %436, 1
  %438 = and i1 %434, %437
  br i1 %438, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %439 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %439(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %440 = load i64, i64* %81, align 8, !tbaa !6197
  %441 = trunc i64 %440 to i32
  %442 = icmp eq i32 %441, 1
  br i1 %442, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %443 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %443(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.116, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %444 = getelementptr inbounds i64, i64* %81, i64 1
  %445 = load i64, i64* %444, align 8, !tbaa !6211
  %446 = trunc i64 %445 to i32
  %447 = icmp eq i32 %446, 64
  br i1 %447, label %assert_end140, label %assert_fail139, !prof !5

assert_fail139:                                   ; preds = %assert_end138
  %448 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %448(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.343, i64 0, i64 0))
  ret i32 -1

assert_end140:                                    ; preds = %assert_end138
  %449 = getelementptr inbounds i64, i64* %81, i64 2
  %450 = load i64, i64* %449, align 8, !tbaa !6213
  %451 = trunc i64 %450 to i32
  %452 = icmp eq i32 %451, 7
  br i1 %452, label %assert_end142, label %assert_fail141, !prof !5

assert_fail141:                                   ; preds = %assert_end140
  %453 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %453(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.344, i64 0, i64 0))
  ret i32 -1

assert_end142:                                    ; preds = %assert_end140
  %454 = getelementptr inbounds i64, i64* %81, i64 3
  %455 = load i64, i64* %454, align 8, !tbaa !6216
  %456 = trunc i64 %455 to i32
  %457 = icmp eq i32 %456, 7
  br i1 %457, label %assert_end144, label %assert_fail143, !prof !5

assert_fail143:                                   ; preds = %assert_end142
  %458 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %458(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.345, i64 0, i64 0))
  ret i32 -1

assert_end144:                                    ; preds = %assert_end142
  %459 = getelementptr inbounds i64, i64* %81, i64 4
  %460 = load i64, i64* %459, align 8, !tbaa !6218
  %461 = trunc i64 %460 to i32
  %462 = icmp eq i32 %461, 32
  br i1 %462, label %assert_end146, label %assert_fail145, !prof !5

assert_fail145:                                   ; preds = %assert_end144
  %463 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %463(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.120, i64 0, i64 0))
  ret i32 -1

assert_end146:                                    ; preds = %assert_end144
  %464 = icmp eq i64* %83, null
  br i1 %464, label %if_end148, label %if_then147, !prof !50

if_then147:                                       ; preds = %assert_end146
  %465 = getelementptr inbounds i64, i64* %83, i64 1
  %466 = bitcast i64* %465 to <4 x i64>*
  %467 = load <4 x i64>, <4 x i64>* %466, align 8, !tbaa !6222
  %468 = trunc <4 x i64> %467 to <4 x i32>
  %469 = icmp eq <4 x i32> %468, <i32 1568, i32 224, i32 32, i32 1>
  %470 = load i64, i64* %83, align 8, !tbaa !6233
  %471 = trunc i64 %470 to i32
  %472 = icmp eq i32 %471, 100352
  %rdx.shuf183 = shufflevector <4 x i1> %469, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx184 = and <4 x i1> %469, %rdx.shuf183
  %rdx.shuf185 = shufflevector <4 x i1> %bin.rdx184, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx186 = and <4 x i1> %bin.rdx184, %rdx.shuf185
  %473 = extractelement <4 x i1> %bin.rdx186, i32 0
  %474 = and i1 %473, %472
  br i1 %474, label %if_end148, label %assert_fail149, !prof !5

if_end148:                                        ; preds = %assert_end146, %if_then147
  %475 = getelementptr inbounds %1, %1* %34, i64 0, i32 6
  %476 = load i64, i64* %475, align 8
  %477 = icmp eq i64 %476, 0
  br i1 %477, label %assert_end152, label %assert_fail151, !prof !5

assert_fail149:                                   ; preds = %if_then147
  %478 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %478(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.346, i64 0, i64 0))
  ret i32 -1

assert_fail151:                                   ; preds = %if_end148
  %479 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %479(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end152:                                    ; preds = %if_end148
  %480 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 0
  %481 = load i32, i32* %480, align 4
  %482 = icmp eq i32 %481, 1
  br i1 %482, label %assert_end154, label %assert_fail153, !prof !5

assert_fail153:                                   ; preds = %assert_end152
  %483 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %483(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end154:                                    ; preds = %assert_end152
  %484 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 1
  %485 = load i32, i32* %484, align 4
  %486 = icmp eq i32 %53, %485
  br i1 %486, label %assert_end156, label %assert_fail155, !prof !5

assert_fail155:                                   ; preds = %assert_end154
  %487 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %487(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end156:                                    ; preds = %assert_end154
  %488 = getelementptr inbounds %1, %1* %40, i64 0, i32 2
  %489 = load i32, i32* %488, align 4
  %490 = icmp eq i32 %489, 5
  br i1 %490, label %assert_end158, label %assert_fail157, !prof !5

assert_fail157:                                   ; preds = %assert_end156
  %491 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %491(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.208, i64 0, i64 0))
  ret i32 -1

assert_end158:                                    ; preds = %assert_end156
  %492 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 0
  %493 = load i8, i8* %492, align 1
  %494 = icmp eq i8 %493, 2
  %495 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 1
  %496 = load i8, i8* %495, align 1
  %497 = icmp eq i8 %496, 32
  %498 = and i1 %494, %497
  %499 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 2
  %500 = load i16, i16* %499, align 2
  %501 = icmp eq i16 %500, 1
  %502 = and i1 %498, %501
  br i1 %502, label %assert_end160, label %assert_fail159, !prof !5

assert_fail159:                                   ; preds = %assert_end158
  %503 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %503(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.209, i64 0, i64 0))
  ret i32 -1

assert_end160:                                    ; preds = %assert_end158
  %504 = load i64, i64* %87, align 8, !tbaa !6237
  %505 = trunc i64 %504 to i32
  %506 = icmp eq i32 %505, 1
  br i1 %506, label %assert_end162, label %assert_fail161, !prof !5

assert_fail161:                                   ; preds = %assert_end160
  %507 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %507(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.210, i64 0, i64 0))
  ret i32 -1

assert_end162:                                    ; preds = %assert_end160
  %508 = getelementptr inbounds i64, i64* %87, i64 1
  %509 = load i64, i64* %508, align 8, !tbaa !6251
  %510 = trunc i64 %509 to i32
  %511 = icmp eq i32 %510, 64
  br i1 %511, label %assert_end164, label %assert_fail163, !prof !5

assert_fail163:                                   ; preds = %assert_end162
  %512 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %512(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.487, i64 0, i64 0))
  ret i32 -1

assert_end164:                                    ; preds = %assert_end162
  %513 = getelementptr inbounds i64, i64* %87, i64 2
  %514 = load i64, i64* %513, align 8, !tbaa !6253
  %515 = trunc i64 %514 to i32
  %516 = icmp eq i32 %515, 7
  br i1 %516, label %assert_end166, label %assert_fail165, !prof !5

assert_fail165:                                   ; preds = %assert_end164
  %517 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %517(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.488, i64 0, i64 0))
  ret i32 -1

assert_end166:                                    ; preds = %assert_end164
  %518 = getelementptr inbounds i64, i64* %87, i64 3
  %519 = load i64, i64* %518, align 8, !tbaa !6256
  %520 = trunc i64 %519 to i32
  %521 = icmp eq i32 %520, 7
  br i1 %521, label %assert_end168, label %assert_fail167, !prof !5

assert_fail167:                                   ; preds = %assert_end166
  %522 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %522(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.489, i64 0, i64 0))
  ret i32 -1

assert_end168:                                    ; preds = %assert_end166
  %523 = getelementptr inbounds i64, i64* %87, i64 4
  %524 = load i64, i64* %523, align 8, !tbaa !6258
  %525 = trunc i64 %524 to i32
  %526 = icmp eq i32 %525, 32
  br i1 %526, label %assert_end170, label %assert_fail169, !prof !5

assert_fail169:                                   ; preds = %assert_end168
  %527 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %527(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.237, i64 0, i64 0))
  ret i32 -1

assert_end170:                                    ; preds = %assert_end168
  %528 = icmp eq i64* %89, null
  br i1 %528, label %if_end172, label %if_then171, !prof !50

if_then171:                                       ; preds = %assert_end170
  %529 = getelementptr inbounds i64, i64* %89, i64 1
  %530 = bitcast i64* %529 to <4 x i64>*
  %531 = load <4 x i64>, <4 x i64>* %530, align 8, !tbaa !6262
  %532 = trunc <4 x i64> %531 to <4 x i32>
  %533 = icmp eq <4 x i32> %532, <i32 1568, i32 224, i32 32, i32 1>
  %534 = load i64, i64* %89, align 8, !tbaa !6273
  %535 = trunc i64 %534 to i32
  %536 = icmp eq i32 %535, 100352
  %rdx.shuf = shufflevector <4 x i1> %533, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %533, %rdx.shuf
  %rdx.shuf181 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx182 = and <4 x i1> %bin.rdx, %rdx.shuf181
  %537 = extractelement <4 x i1> %bin.rdx182, i32 0
  %538 = and i1 %537, %536
  br i1 %538, label %if_end172, label %assert_fail173, !prof !5

if_end172:                                        ; preds = %assert_end170, %if_then171
  %539 = getelementptr inbounds %1, %1* %40, i64 0, i32 6
  %540 = load i64, i64* %539, align 8
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %assert_end176, label %assert_fail175, !prof !5

assert_fail173:                                   ; preds = %if_then171
  %542 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %542(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.490, i64 0, i64 0))
  ret i32 -1

assert_fail175:                                   ; preds = %if_end172
  %543 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %543(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.216, i64 0, i64 0))
  ret i32 -1

assert_end176:                                    ; preds = %if_end172
  %544 = getelementptr inbounds %1, %1* %40, i64 0, i32 1, i32 0
  %545 = load i32, i32* %544, align 4
  %546 = icmp eq i32 %545, 1
  br i1 %546, label %assert_end178, label %assert_fail177, !prof !5

assert_fail177:                                   ; preds = %assert_end176
  %547 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %547(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.217, i64 0, i64 0))
  ret i32 -1

assert_end178:                                    ; preds = %assert_end176
  %548 = getelementptr inbounds %1, %1* %40, i64 0, i32 1, i32 1
  %549 = load i32, i32* %548, align 4
  %550 = icmp eq i32 %53, %549
  br i1 %550, label %assert_end180, label %assert_fail179, !prof !5

assert_fail179:                                   ; preds = %assert_end178
  %551 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %551(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.218, i64 0, i64 0))
  ret i32 -1

assert_end180:                                    ; preds = %assert_end178
  %552 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_compute_(i8* %45, i8* %55, i8* %85, i8* %61, i8* %67, i8* %73, i8* %79)
  ret i32 %552
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %7 = alloca %39, align 8
  %8 = getelementptr inbounds %39, %39* %7, i64 0, i32 0
  store i8* %0, i8** %8, align 8
  %9 = getelementptr inbounds %39, %39* %7, i64 0, i32 1
  store i8* %1, i8** %9, align 8
  %10 = getelementptr inbounds %39, %39* %7, i64 0, i32 2
  store i8* %2, i8** %10, align 8
  %11 = getelementptr inbounds %39, %39* %7, i64 0, i32 3
  store i8* %3, i8** %11, align 8
  %12 = getelementptr inbounds %39, %39* %7, i64 0, i32 4
  store i8* %4, i8** %12, align 8
  %13 = getelementptr inbounds %39, %39* %7, i64 0, i32 5
  store i8* %5, i8** %13, align 8
  %14 = getelementptr inbounds %39, %39* %7, i64 0, i32 6
  store i8* %6, i8** %14, align 8
  %15 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %16 = bitcast %39* %7 to i8*
  %17 = call i32 %15(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.491, i8* nonnull %16, i32 0)
  ret i32 %17
}

; Function Attrs: nounwind
define private i32 @__tvm_parallel_lambda.491(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %2, i64 48
  %21 = bitcast i8* %20 to float**
  %22 = load float*, float** %21, align 8
  %23 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, 447
  %26 = sdiv i32 %25, %24
  %27 = mul nsw i32 %26, %0
  %28 = icmp slt i32 %27, 448
  %29 = select i1 %28, i32 %27, i32 448
  %30 = add nsw i32 %0, 1
  %31 = mul nsw i32 %26, %30
  %32 = icmp slt i32 %31, 448
  %33 = select i1 %32, i32 %31, i32 448
  %34 = icmp slt i32 %29, %33
  br i1 %34, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %35 = add i32 %29, 1
  %36 = sext i32 %35 to i64
  %37 = add nsw i64 %36, -1
  %38 = sext i32 %33 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_begin4.preheader
  %indvars.iv29 = phi i64 [ %37, %for_body.lr.ph ], [ %indvars.iv.next30, %for_begin4.preheader ]
  %39 = trunc i64 %indvars.iv29 to i32
  %40 = srem i32 %39, 7
  %41 = mul nsw i32 %40, 28672
  %42 = sdiv i32 %39, 7
  %43 = shl i32 %42, 15
  %44 = sext i32 %41 to i64
  %45 = sext i32 %43 to i64
  br label %for_body2

for_end:                                          ; preds = %for_begin4.preheader, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_body2
  %46 = mul nsw i64 %indvars.iv29, 224
  %47 = shl nsw i32 %42, 5
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %13, i64 %48
  %50 = bitcast float* %49 to <32 x float>*
  %51 = load <32 x float>, <32 x float>* %50, align 64, !tbaa !6277
  %52 = getelementptr inbounds float, float* %16, i64 %48
  %53 = bitcast float* %52 to <32 x float>*
  %54 = load <32 x float>, <32 x float>* %53, align 64, !tbaa !6280
  %55 = getelementptr inbounds float, float* %19, i64 %48
  %56 = bitcast float* %55 to <32 x float>*
  %57 = load <32 x float>, <32 x float>* %56, align 64, !tbaa !6283
  %58 = fadd <32 x float> %152, %51
  %59 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %58, <32 x float> %54, <32 x float> %57)
  %60 = getelementptr inbounds float, float* %22, i64 %46
  %61 = bitcast float* %60 to <32 x float>*
  %62 = load <32 x float>, <32 x float>* %61, align 64, !tbaa !6286
  %63 = fadd <32 x float> %59, %62
  %64 = fcmp ogt <32 x float> %63, zeroinitializer
  %65 = select <32 x i1> %64, <32 x float> %63, <32 x float> zeroinitializer
  %66 = getelementptr inbounds float, float* %10, i64 %46
  %67 = bitcast float* %66 to <32 x float>*
  store <32 x float> %65, <32 x float>* %67, align 64, !tbaa !6289
  %68 = add nsw i64 %46, 32
  %69 = fadd <32 x float> %158, %51
  %70 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %69, <32 x float> %54, <32 x float> %57)
  %71 = getelementptr inbounds float, float* %22, i64 %68
  %72 = bitcast float* %71 to <32 x float>*
  %73 = load <32 x float>, <32 x float>* %72, align 64, !tbaa !6286
  %74 = fadd <32 x float> %70, %73
  %75 = fcmp ogt <32 x float> %74, zeroinitializer
  %76 = select <32 x i1> %75, <32 x float> %74, <32 x float> zeroinitializer
  %77 = getelementptr inbounds float, float* %10, i64 %68
  %78 = bitcast float* %77 to <32 x float>*
  store <32 x float> %76, <32 x float>* %78, align 64, !tbaa !6289
  %79 = add nsw i64 %46, 64
  %80 = fadd <32 x float> %164, %51
  %81 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %80, <32 x float> %54, <32 x float> %57)
  %82 = getelementptr inbounds float, float* %22, i64 %79
  %83 = bitcast float* %82 to <32 x float>*
  %84 = load <32 x float>, <32 x float>* %83, align 64, !tbaa !6286
  %85 = fadd <32 x float> %81, %84
  %86 = fcmp ogt <32 x float> %85, zeroinitializer
  %87 = select <32 x i1> %86, <32 x float> %85, <32 x float> zeroinitializer
  %88 = getelementptr inbounds float, float* %10, i64 %79
  %89 = bitcast float* %88 to <32 x float>*
  store <32 x float> %87, <32 x float>* %89, align 64, !tbaa !6289
  %90 = add nsw i64 %46, 96
  %91 = fadd <32 x float> %170, %51
  %92 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %91, <32 x float> %54, <32 x float> %57)
  %93 = getelementptr inbounds float, float* %22, i64 %90
  %94 = bitcast float* %93 to <32 x float>*
  %95 = load <32 x float>, <32 x float>* %94, align 64, !tbaa !6286
  %96 = fadd <32 x float> %92, %95
  %97 = fcmp ogt <32 x float> %96, zeroinitializer
  %98 = select <32 x i1> %97, <32 x float> %96, <32 x float> zeroinitializer
  %99 = getelementptr inbounds float, float* %10, i64 %90
  %100 = bitcast float* %99 to <32 x float>*
  store <32 x float> %98, <32 x float>* %100, align 64, !tbaa !6289
  %101 = add nsw i64 %46, 128
  %102 = fadd <32 x float> %176, %51
  %103 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %102, <32 x float> %54, <32 x float> %57)
  %104 = getelementptr inbounds float, float* %22, i64 %101
  %105 = bitcast float* %104 to <32 x float>*
  %106 = load <32 x float>, <32 x float>* %105, align 64, !tbaa !6286
  %107 = fadd <32 x float> %103, %106
  %108 = fcmp ogt <32 x float> %107, zeroinitializer
  %109 = select <32 x i1> %108, <32 x float> %107, <32 x float> zeroinitializer
  %110 = getelementptr inbounds float, float* %10, i64 %101
  %111 = bitcast float* %110 to <32 x float>*
  store <32 x float> %109, <32 x float>* %111, align 64, !tbaa !6289
  %112 = add nsw i64 %46, 160
  %113 = fadd <32 x float> %182, %51
  %114 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %113, <32 x float> %54, <32 x float> %57)
  %115 = getelementptr inbounds float, float* %22, i64 %112
  %116 = bitcast float* %115 to <32 x float>*
  %117 = load <32 x float>, <32 x float>* %116, align 64, !tbaa !6286
  %118 = fadd <32 x float> %114, %117
  %119 = fcmp ogt <32 x float> %118, zeroinitializer
  %120 = select <32 x i1> %119, <32 x float> %118, <32 x float> zeroinitializer
  %121 = getelementptr inbounds float, float* %10, i64 %112
  %122 = bitcast float* %121 to <32 x float>*
  store <32 x float> %120, <32 x float>* %122, align 64, !tbaa !6289
  %123 = add nsw i64 %46, 192
  %124 = fadd <32 x float> %188, %51
  %125 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %124, <32 x float> %54, <32 x float> %57)
  %126 = getelementptr inbounds float, float* %22, i64 %123
  %127 = bitcast float* %126 to <32 x float>*
  %128 = load <32 x float>, <32 x float>* %127, align 64, !tbaa !6286
  %129 = fadd <32 x float> %125, %128
  %130 = fcmp ogt <32 x float> %129, zeroinitializer
  %131 = select <32 x i1> %130, <32 x float> %129, <32 x float> zeroinitializer
  %132 = getelementptr inbounds float, float* %10, i64 %123
  %133 = bitcast float* %132 to <32 x float>*
  store <32 x float> %131, <32 x float>* %133, align 64, !tbaa !6289
  %indvars.iv.next30 = add nsw i64 %indvars.iv29, 1
  %134 = icmp slt i64 %indvars.iv.next30, %38
  br i1 %134, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_body2, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_body2 ]
  %135 = phi <32 x float> [ zeroinitializer, %for_body ], [ %188, %for_body2 ]
  %136 = phi <32 x float> [ zeroinitializer, %for_body ], [ %182, %for_body2 ]
  %137 = phi <32 x float> [ zeroinitializer, %for_body ], [ %176, %for_body2 ]
  %138 = phi <32 x float> [ zeroinitializer, %for_body ], [ %170, %for_body2 ]
  %139 = phi <32 x float> [ zeroinitializer, %for_body ], [ %164, %for_body2 ]
  %140 = phi <32 x float> [ zeroinitializer, %for_body ], [ %158, %for_body2 ]
  %141 = phi <32 x float> [ zeroinitializer, %for_body ], [ %152, %for_body2 ]
  %142 = add nuw nsw i64 %indvars.iv, %44
  %143 = getelementptr inbounds float, float* %4, i64 %142
  %144 = load float, float* %143, align 4, !tbaa !6292
  %145 = insertelement <32 x float> undef, float %144, i32 0
  %146 = shufflevector <32 x float> %145, <32 x float> undef, <32 x i32> zeroinitializer
  %147 = shl i64 %indvars.iv, 5
  %148 = add nuw nsw i64 %147, %45
  %149 = getelementptr inbounds float, float* %7, i64 %148
  %150 = bitcast float* %149 to <32 x float>*
  %151 = load <32 x float>, <32 x float>* %150, align 64, !tbaa !6295
  %152 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %146, <32 x float> %151, <32 x float> %141)
  %153 = add nuw nsw i64 %142, 2048
  %154 = getelementptr inbounds float, float* %4, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !6292
  %156 = insertelement <32 x float> undef, float %155, i32 0
  %157 = shufflevector <32 x float> %156, <32 x float> undef, <32 x i32> zeroinitializer
  %158 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %157, <32 x float> %151, <32 x float> %140)
  %159 = add nsw i64 %142, 4096
  %160 = getelementptr inbounds float, float* %4, i64 %159
  %161 = load float, float* %160, align 4, !tbaa !6292
  %162 = insertelement <32 x float> undef, float %161, i32 0
  %163 = shufflevector <32 x float> %162, <32 x float> undef, <32 x i32> zeroinitializer
  %164 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %163, <32 x float> %151, <32 x float> %139)
  %165 = add nsw i64 %142, 6144
  %166 = getelementptr inbounds float, float* %4, i64 %165
  %167 = load float, float* %166, align 4, !tbaa !6292
  %168 = insertelement <32 x float> undef, float %167, i32 0
  %169 = shufflevector <32 x float> %168, <32 x float> undef, <32 x i32> zeroinitializer
  %170 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %169, <32 x float> %151, <32 x float> %138)
  %171 = add nsw i64 %142, 8192
  %172 = getelementptr inbounds float, float* %4, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !6292
  %174 = insertelement <32 x float> undef, float %173, i32 0
  %175 = shufflevector <32 x float> %174, <32 x float> undef, <32 x i32> zeroinitializer
  %176 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %175, <32 x float> %151, <32 x float> %137)
  %177 = add nsw i64 %142, 10240
  %178 = getelementptr inbounds float, float* %4, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !6292
  %180 = insertelement <32 x float> undef, float %179, i32 0
  %181 = shufflevector <32 x float> %180, <32 x float> undef, <32 x i32> zeroinitializer
  %182 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %181, <32 x float> %151, <32 x float> %136)
  %183 = add nsw i64 %142, 12288
  %184 = getelementptr inbounds float, float* %4, i64 %183
  %185 = load float, float* %184, align 4, !tbaa !6292
  %186 = insertelement <32 x float> undef, float %185, i32 0
  %187 = shufflevector <32 x float> %186, <32 x float> undef, <32 x i32> zeroinitializer
  %188 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %187, <32 x float> %151, <32 x float> %135)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond, label %for_begin4.preheader, label %for_body2, !prof !50
}

define dllexport i32 @fused_layout_transform_34(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.492, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !6298
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.493, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !6312
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.494, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !6314
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !6328
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 8
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !6330
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 56
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !6333
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 56
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !6335
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 8
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.30, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !6339
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 25088, i32 448, i32 8, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !6350
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 200704
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.495, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !6354
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !6368
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 16
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.152, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !6370
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 56
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !6373
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 56
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !6375
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 4
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.103, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !6379
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 12544, i32 224, i32 4, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !6390
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 200704
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.451, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_34_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_34_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %40, align 8
  %3 = getelementptr inbounds %40, %40* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %40, %40* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %40* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.496, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.496(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 895
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 896
  %14 = select i1 %13, i32 %12, i32 896
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 896
  %18 = select i1 %17, i32 %16, i32 896
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv4, 224
  %25 = trunc i64 %indvars.iv4 to i32
  %26 = sdiv i32 %25, 56
  %27 = shl nsw i32 %26, 2
  %28 = insertelement <4 x i32> undef, i32 %27, i32 0
  %29 = or i32 %27, 1
  %30 = insertelement <4 x i32> %28, i32 %29, i32 1
  %31 = or i32 %27, 2
  %32 = insertelement <4 x i32> %30, i32 %31, i32 2
  %33 = or i32 %27, 3
  %34 = insertelement <4 x i32> %32, i32 %33, i32 3
  %35 = sdiv <4 x i32> %34, <i32 8, i32 8, i32 8, i32 8>
  %36 = mul <4 x i32> %35, <i32 8, i32 8, i32 8, i32 8>
  %37 = sub <4 x i32> %34, %36
  %38 = icmp sgt <4 x i32> %37, <i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <4 x i1> %38, <i1 true, i1 true, i1 true, i1 true>
  %39 = sext <4 x i1> %not. to <4 x i32>
  %40 = add nsw <4 x i32> %35, %39
  %41 = mul nsw <4 x i32> %40, <i32 25088, i32 25088, i32 25088, i32 25088>
  %42 = srem i32 %25, 56
  %43 = mul nsw i32 %42, 448
  %44 = insertelement <4 x i32> undef, i32 %43, i32 0
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> zeroinitializer
  %46 = add nsw <4 x i32> %37, <i32 8, i32 8, i32 8, i32 8>
  %47 = select <4 x i1> %38, <4 x i32> %37, <4 x i32> %46
  %48 = add <4 x i32> %47, %45
  %49 = add <4 x i32> %48, %41
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %50 = shl i64 %indvars.iv, 2
  %51 = add nsw i64 %50, %24
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %52 = shl i32 %indvars.iv.tr, 3
  %53 = insertelement <4 x i32> undef, i32 %52, i32 0
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> zeroinitializer
  %55 = add <4 x i32> %49, %54
  %56 = extractelement <4 x i32> %55, i64 0
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds float, float* %7, i64 %57
  %59 = load float, float* %58, align 4, !tbaa !6394
  %60 = insertelement <4 x float> undef, float %59, i32 0
  %61 = extractelement <4 x i32> %55, i64 1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds float, float* %7, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !6394
  %65 = insertelement <4 x float> %60, float %64, i32 1
  %66 = extractelement <4 x i32> %55, i64 2
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %7, i64 %67
  %69 = load float, float* %68, align 4, !tbaa !6394
  %70 = insertelement <4 x float> %65, float %69, i32 2
  %71 = extractelement <4 x i32> %55, i64 3
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds float, float* %7, i64 %72
  %74 = load float, float* %73, align 4, !tbaa !6394
  %75 = insertelement <4 x float> %70, float %74, i32 3
  %76 = getelementptr inbounds float, float* %4, i64 %51
  %77 = bitcast float* %76 to <4 x float>*
  store <4 x float> %75, <4 x float>* %77, align 16, !tbaa !6397
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %78 = icmp slt i64 %indvars.iv.next5, %23
  br i1 %78, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_add_nn_relu_1(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 3
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.497, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !6400
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !6414
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %23 = load i64*, i64** %22, align 8
  %24 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %33 = load i64*, i64** %32, align 8
  %34 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %39 = load i64*, i64** %38, align 8
  %40 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %41 = load i64*, i64** %40, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %42 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %42(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.498, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %43 = getelementptr inbounds i8, i8* %1, i64 4
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 4, !tbaa !6417
  switch i32 %45, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %46(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.499, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %47(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.500, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  %48 = icmp eq i32 %27, 1
  br i1 %48, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %49(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %50 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 5
  br i1 %52, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %53(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %54 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = icmp eq i8 %55, 2
  %57 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = icmp eq i8 %58, 32
  %60 = and i1 %56, %59
  %61 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %62 = load i16, i16* %61, align 2
  %63 = icmp eq i16 %62, 1
  %64 = and i1 %60, %63
  br i1 %64, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %65(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %66 = load i64, i64* %23, align 8, !tbaa !6419
  %67 = trunc i64 %66 to i32
  %68 = icmp eq i32 %67, 1
  br i1 %68, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %69(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %70 = getelementptr inbounds i64, i64* %23, i64 1
  %71 = load i64, i64* %70, align 8, !tbaa !6433
  %72 = trunc i64 %71 to i32
  %73 = icmp eq i32 %72, 16
  br i1 %73, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %74(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.147, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %75 = getelementptr inbounds i64, i64* %23, i64 2
  %76 = load i64, i64* %75, align 8, !tbaa !6435
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %77, 14
  br i1 %78, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.8, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %80 = getelementptr inbounds i64, i64* %23, i64 3
  %81 = load i64, i64* %80, align 8, !tbaa !6438
  %82 = trunc i64 %81 to i32
  %83 = icmp eq i32 %82, 14
  br i1 %83, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %84(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.9, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %85 = getelementptr inbounds i64, i64* %23, i64 4
  %86 = load i64, i64* %85, align 8, !tbaa !6440
  %87 = trunc i64 %86 to i32
  %88 = icmp eq i32 %87, 64
  br i1 %88, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %89 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %89(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %90 = icmp eq i64* %25, null
  br i1 %90, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end22
  %91 = getelementptr inbounds i64, i64* %25, i64 1
  %92 = bitcast i64* %91 to <4 x i64>*
  %93 = load <4 x i64>, <4 x i64>* %92, align 8, !tbaa !6444
  %94 = trunc <4 x i64> %93 to <4 x i32>
  %95 = icmp eq <4 x i32> %94, <i32 12544, i32 896, i32 64, i32 1>
  %96 = load i64, i64* %25, align 8, !tbaa !6455
  %97 = trunc i64 %96 to i32
  %98 = icmp eq i32 %97, 200704
  %rdx.shuf81 = shufflevector <4 x i1> %95, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx82 = and <4 x i1> %95, %rdx.shuf81
  %rdx.shuf83 = shufflevector <4 x i1> %bin.rdx82, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx84 = and <4 x i1> %bin.rdx82, %rdx.shuf83
  %99 = extractelement <4 x i1> %bin.rdx84, i32 0
  %100 = and i1 %99, %98
  br i1 %100, label %if_end, label %assert_fail23, !prof !5

if_end:                                           ; preds = %assert_end22, %if_then
  %101 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %102 = load i64, i64* %101, align 8
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %assert_end26, label %assert_fail25, !prof !5

assert_fail23:                                    ; preds = %if_then
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %104(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.223, i64 0, i64 0))
  ret i32 -1

assert_fail25:                                    ; preds = %if_end
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %if_end
  %106 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %107 = load i32, i32* %106, align 4
  %108 = icmp eq i32 %107, 5
  br i1 %108, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %109(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %110 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %111 = load i8, i8* %110, align 1
  %112 = icmp eq i8 %111, 2
  %113 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp eq i8 %114, 32
  %116 = and i1 %112, %115
  %117 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %118 = load i16, i16* %117, align 2
  %119 = icmp eq i16 %118, 1
  %120 = and i1 %116, %119
  br i1 %120, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %122 = load i64, i64* %33, align 8, !tbaa !6459
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 1
  br i1 %124, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %125(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %126 = getelementptr inbounds i64, i64* %33, i64 1
  %127 = load i64, i64* %126, align 8, !tbaa !6473
  %128 = trunc i64 %127 to i32
  %129 = icmp eq i32 %128, 16
  br i1 %129, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.152, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %131 = getelementptr inbounds i64, i64* %33, i64 2
  %132 = load i64, i64* %131, align 8, !tbaa !6475
  %133 = trunc i64 %132 to i32
  %134 = icmp eq i32 %133, 14
  br i1 %134, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.17, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %136 = getelementptr inbounds i64, i64* %33, i64 3
  %137 = load i64, i64* %136, align 8, !tbaa !6478
  %138 = trunc i64 %137 to i32
  %139 = icmp eq i32 %138, 14
  br i1 %139, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %140(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.18, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %141 = getelementptr inbounds i64, i64* %33, i64 4
  %142 = load i64, i64* %141, align 8, !tbaa !6480
  %143 = trunc i64 %142 to i32
  %144 = icmp eq i32 %143, 64
  br i1 %144, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %145(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.291, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %146 = icmp eq i64* %35, null
  br i1 %146, label %if_end42, label %if_then41, !prof !50

if_then41:                                        ; preds = %assert_end40
  %147 = getelementptr inbounds i64, i64* %35, i64 1
  %148 = bitcast i64* %147 to <4 x i64>*
  %149 = load <4 x i64>, <4 x i64>* %148, align 8, !tbaa !6484
  %150 = trunc <4 x i64> %149 to <4 x i32>
  %151 = icmp eq <4 x i32> %150, <i32 12544, i32 896, i32 64, i32 1>
  %152 = load i64, i64* %35, align 8, !tbaa !6495
  %153 = trunc i64 %152 to i32
  %154 = icmp eq i32 %153, 200704
  %rdx.shuf77 = shufflevector <4 x i1> %151, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx78 = and <4 x i1> %151, %rdx.shuf77
  %rdx.shuf79 = shufflevector <4 x i1> %bin.rdx78, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx80 = and <4 x i1> %bin.rdx78, %rdx.shuf79
  %155 = extractelement <4 x i1> %bin.rdx80, i32 0
  %156 = and i1 %155, %154
  br i1 %156, label %if_end42, label %assert_fail43, !prof !5

if_end42:                                         ; preds = %assert_end40, %if_then41
  %157 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %158 = load i64, i64* %157, align 8
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %assert_end46, label %assert_fail45, !prof !5

assert_fail43:                                    ; preds = %if_then41
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %160(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.501, i64 0, i64 0))
  ret i32 -1

assert_fail45:                                    ; preds = %if_end42
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %if_end42
  %162 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %165(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %166 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %167 = load i32, i32* %166, align 4
  %168 = icmp eq i32 %29, %167
  br i1 %168, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %169 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %169(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %170 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %171 = load i32, i32* %170, align 4
  %172 = icmp eq i32 %171, 5
  br i1 %172, label %assert_end52, label %assert_fail51, !prof !5

assert_fail51:                                    ; preds = %assert_end50
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %assert_end50
  %174 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %175 = load i8, i8* %174, align 1
  %176 = icmp eq i8 %175, 2
  %177 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %178 = load i8, i8* %177, align 1
  %179 = icmp eq i8 %178, 32
  %180 = and i1 %176, %179
  %181 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %182 = load i16, i16* %181, align 2
  %183 = icmp eq i16 %182, 1
  %184 = and i1 %180, %183
  br i1 %184, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %185(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %186 = load i64, i64* %39, align 8, !tbaa !6499
  %187 = trunc i64 %186 to i32
  %188 = icmp eq i32 %187, 1
  br i1 %188, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %189(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %190 = getelementptr inbounds i64, i64* %39, i64 1
  %191 = load i64, i64* %190, align 8, !tbaa !6513
  %192 = trunc i64 %191 to i32
  %193 = icmp eq i32 %192, 16
  br i1 %193, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %194 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %194(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %195 = getelementptr inbounds i64, i64* %39, i64 2
  %196 = load i64, i64* %195, align 8, !tbaa !6515
  %197 = trunc i64 %196 to i32
  %198 = icmp eq i32 %197, 14
  br i1 %198, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %199(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.502, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %200 = getelementptr inbounds i64, i64* %39, i64 3
  %201 = load i64, i64* %200, align 8, !tbaa !6518
  %202 = trunc i64 %201 to i32
  %203 = icmp eq i32 %202, 14
  br i1 %203, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %204(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.503, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %205 = getelementptr inbounds i64, i64* %39, i64 4
  %206 = load i64, i64* %205, align 8, !tbaa !6520
  %207 = trunc i64 %206 to i32
  %208 = icmp eq i32 %207, 64
  br i1 %208, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.200, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %210 = icmp eq i64* %41, null
  br i1 %210, label %if_end66, label %if_then65, !prof !50

if_then65:                                        ; preds = %assert_end64
  %211 = getelementptr inbounds i64, i64* %41, i64 1
  %212 = bitcast i64* %211 to <4 x i64>*
  %213 = load <4 x i64>, <4 x i64>* %212, align 8, !tbaa !6524
  %214 = trunc <4 x i64> %213 to <4 x i32>
  %215 = icmp eq <4 x i32> %214, <i32 12544, i32 896, i32 64, i32 1>
  %216 = load i64, i64* %41, align 8, !tbaa !6535
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 200704
  %rdx.shuf = shufflevector <4 x i1> %215, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %215, %rdx.shuf
  %rdx.shuf75 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx76 = and <4 x i1> %bin.rdx, %rdx.shuf75
  %219 = extractelement <4 x i1> %bin.rdx76, i32 0
  %220 = and i1 %219, %218
  br i1 %220, label %if_end66, label %assert_fail67, !prof !5

if_end66:                                         ; preds = %assert_end64, %if_then65
  %221 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %222 = load i64, i64* %221, align 8
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %assert_end70, label %assert_fail69, !prof !5

assert_fail67:                                    ; preds = %if_then65
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %224(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.504, i64 0, i64 0))
  ret i32 -1

assert_fail69:                                    ; preds = %if_end66
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %if_end66
  %226 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 1
  br i1 %228, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %229 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %229(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %230 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %29, %231
  br i1 %232, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %233 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %233(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %234 = tail call fastcc i32 @fused_add_nn_relu_1_compute_(i8* %37, i8* %21, i8* %31)
  ret i32 %234
}

; Function Attrs: noinline
define private fastcc i32 @fused_add_nn_relu_1_compute_(i8* noalias, i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %3 = alloca %41, align 8
  %4 = getelementptr inbounds %41, %41* %3, i64 0, i32 0
  store i8* %0, i8** %4, align 8
  %5 = getelementptr inbounds %41, %41* %3, i64 0, i32 1
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %41, %41* %3, i64 0, i32 2
  store i8* %2, i8** %6, align 8
  %7 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %8 = bitcast %41* %3 to i8*
  %9 = call i32 %7(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.505, i8* nonnull %8, i32 0)
  ret i32 %9
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.505(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, 223
  %14 = sdiv i32 %13, %12
  %15 = mul nsw i32 %14, %0
  %16 = icmp slt i32 %15, 224
  %17 = select i1 %16, i32 %15, i32 224
  %18 = add nsw i32 %0, 1
  %19 = mul nsw i32 %14, %18
  %20 = icmp slt i32 %19, 224
  %21 = select i1 %20, i32 %19, i32 224
  %22 = icmp slt i32 %17, %21
  br i1 %22, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %23 = add i32 %17, 1
  %24 = sext i32 %23 to i64
  %25 = add nsw i64 %24, -1
  %26 = sext i32 %21 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv7 = phi i64 [ %25, %for_begin1.preheader.preheader ], [ %indvars.iv.next8, %for_end3 ]
  %27 = mul nsw i64 %indvars.iv7, 896
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_begin4.preheader, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_begin4.preheader ]
  %28 = shl i64 %indvars.iv, 6
  %29 = add nsw i64 %28, %27
  %30 = getelementptr inbounds float, float* %7, i64 %29
  %31 = bitcast float* %30 to <16 x float>*
  %32 = load <16 x float>, <16 x float>* %31, align 64, !tbaa !6539
  %33 = getelementptr inbounds float, float* %10, i64 %29
  %34 = bitcast float* %33 to <16 x float>*
  %35 = load <16 x float>, <16 x float>* %34, align 64, !tbaa !6542
  %36 = fadd <16 x float> %32, %35
  %37 = fcmp ogt <16 x float> %36, zeroinitializer
  %38 = select <16 x i1> %37, <16 x float> %36, <16 x float> zeroinitializer
  %39 = getelementptr inbounds float, float* %4, i64 %29
  %40 = bitcast float* %39 to <16 x float>*
  store <16 x float> %38, <16 x float>* %40, align 64, !tbaa !6545
  %41 = or i64 %29, 16
  %42 = getelementptr inbounds float, float* %7, i64 %41
  %43 = bitcast float* %42 to <16 x float>*
  %44 = load <16 x float>, <16 x float>* %43, align 64, !tbaa !6539
  %45 = getelementptr inbounds float, float* %10, i64 %41
  %46 = bitcast float* %45 to <16 x float>*
  %47 = load <16 x float>, <16 x float>* %46, align 64, !tbaa !6542
  %48 = fadd <16 x float> %44, %47
  %49 = fcmp ogt <16 x float> %48, zeroinitializer
  %50 = select <16 x i1> %49, <16 x float> %48, <16 x float> zeroinitializer
  %51 = getelementptr inbounds float, float* %4, i64 %41
  %52 = bitcast float* %51 to <16 x float>*
  store <16 x float> %50, <16 x float>* %52, align 64, !tbaa !6545
  %53 = or i64 %29, 32
  %54 = getelementptr inbounds float, float* %7, i64 %53
  %55 = bitcast float* %54 to <16 x float>*
  %56 = load <16 x float>, <16 x float>* %55, align 64, !tbaa !6539
  %57 = getelementptr inbounds float, float* %10, i64 %53
  %58 = bitcast float* %57 to <16 x float>*
  %59 = load <16 x float>, <16 x float>* %58, align 64, !tbaa !6542
  %60 = fadd <16 x float> %56, %59
  %61 = fcmp ogt <16 x float> %60, zeroinitializer
  %62 = select <16 x i1> %61, <16 x float> %60, <16 x float> zeroinitializer
  %63 = getelementptr inbounds float, float* %4, i64 %53
  %64 = bitcast float* %63 to <16 x float>*
  store <16 x float> %62, <16 x float>* %64, align 64, !tbaa !6545
  %65 = or i64 %29, 48
  %66 = getelementptr inbounds float, float* %7, i64 %65
  %67 = bitcast float* %66 to <16 x float>*
  %68 = load <16 x float>, <16 x float>* %67, align 64, !tbaa !6539
  %69 = getelementptr inbounds float, float* %10, i64 %65
  %70 = bitcast float* %69 to <16 x float>*
  %71 = load <16 x float>, <16 x float>* %70, align 64, !tbaa !6542
  %72 = fadd <16 x float> %68, %71
  %73 = fcmp ogt <16 x float> %72, zeroinitializer
  %74 = select <16 x i1> %73, <16 x float> %72, <16 x float> zeroinitializer
  %75 = getelementptr inbounds float, float* %4, i64 %65
  %76 = bitcast float* %75 to <16 x float>*
  store <16 x float> %74, <16 x float>* %76, align 64, !tbaa !6545
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 14
  br i1 %exitcond, label %for_end3, label %for_begin4.preheader, !prof !50

for_end3:                                         ; preds = %for_begin4.preheader
  %indvars.iv.next8 = add nsw i64 %indvars.iv7, 1
  %77 = icmp slt i64 %indvars.iv.next8, %26
  br i1 %77, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 7
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.506, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !6548
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !6562
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !6565
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !6567
  %32 = getelementptr inbounds i8, i8* %0, i64 40
  %33 = bitcast i8* %32 to %1**
  %34 = load %1*, %1** %33, align 8
  %35 = getelementptr inbounds i8, i8* %1, i64 20
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 4, !tbaa !6571
  %38 = getelementptr inbounds i8, i8* %0, i64 48
  %39 = bitcast i8* %38 to %1**
  %40 = load %1*, %1** %39, align 8
  %41 = getelementptr inbounds i8, i8* %1, i64 24
  %42 = bitcast i8* %41 to i32*
  %43 = load i32, i32* %42, align 4, !tbaa !6573
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  %66 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %69 = load i64*, i64** %68, align 8
  %70 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %71 = load i64*, i64** %70, align 8
  %72 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %77 = load i64*, i64** %76, align 8
  %78 = getelementptr inbounds %1, %1* %34, i64 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr inbounds %1, %1* %34, i64 0, i32 4
  %81 = load i64*, i64** %80, align 8
  %82 = getelementptr inbounds %1, %1* %34, i64 0, i32 5
  %83 = load i64*, i64** %82, align 8
  %84 = getelementptr inbounds %1, %1* %40, i64 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %1, %1* %40, i64 0, i32 4
  %87 = load i64*, i64** %86, align 8
  %88 = getelementptr inbounds %1, %1* %40, i64 0, i32 5
  %89 = load i64*, i64** %88, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %90(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.507, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %91 = getelementptr inbounds i8, i8* %1, i64 4
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 4, !tbaa !6576
  switch i32 %93, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %94 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %94(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.508, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.509, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.510, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %97(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.511, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  switch i32 %37, label %assert_fail11 [
    i32 13, label %assert_end12
    i32 7, label %assert_end12
    i32 4, label %assert_end12
    i32 3, label %assert_end12
  ]

assert_fail11:                                    ; preds = %assert_end10
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.512, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10, %assert_end10, %assert_end10, %assert_end10
  switch i32 %43, label %assert_fail13 [
    i32 13, label %assert_end14
    i32 7, label %assert_end14
    i32 4, label %assert_end14
    i32 3, label %assert_end14
  ]

assert_fail13:                                    ; preds = %assert_end12
  %99 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %99(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.513, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12, %assert_end12, %assert_end12, %assert_end12
  %100 = icmp eq i32 %51, 1
  br i1 %100, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %101(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %102 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 5
  br i1 %104, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %106 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %107 = load i8, i8* %106, align 1
  %108 = icmp eq i8 %107, 2
  %109 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %110 = load i8, i8* %109, align 1
  %111 = icmp eq i8 %110, 32
  %112 = and i1 %108, %111
  %113 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %114 = load i16, i16* %113, align 2
  %115 = icmp eq i16 %114, 1
  %116 = and i1 %112, %115
  br i1 %116, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %118 = load i64, i64* %47, align 8, !tbaa !6578
  %119 = trunc i64 %118 to i32
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %121(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %122 = getelementptr inbounds i64, i64* %47, i64 1
  %123 = load i64, i64* %122, align 8, !tbaa !6592
  %124 = trunc i64 %123 to i32
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %126(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %127 = getelementptr inbounds i64, i64* %47, i64 2
  %128 = load i64, i64* %127, align 8, !tbaa !6594
  %129 = trunc i64 %128 to i32
  %130 = icmp eq i32 %129, 28
  br i1 %130, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %132 = getelementptr inbounds i64, i64* %47, i64 3
  %133 = load i64, i64* %132, align 8, !tbaa !6597
  %134 = trunc i64 %133 to i32
  %135 = icmp eq i32 %134, 28
  br i1 %135, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %136 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %136(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %137 = getelementptr inbounds i64, i64* %47, i64 4
  %138 = load i64, i64* %137, align 8, !tbaa !6599
  %139 = trunc i64 %138 to i32
  %140 = icmp eq i32 %139, 512
  br i1 %140, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %141 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %141(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.132, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %142 = icmp eq i64* %49, null
  br i1 %142, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end30
  %143 = getelementptr inbounds i64, i64* %49, i64 1
  %144 = bitcast i64* %143 to <4 x i64>*
  %145 = load <4 x i64>, <4 x i64>* %144, align 8, !tbaa !6603
  %146 = trunc <4 x i64> %145 to <4 x i32>
  %147 = icmp eq <4 x i32> %146, <i32 401408, i32 14336, i32 512, i32 1>
  %148 = load i64, i64* %49, align 8, !tbaa !6614
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 401408
  %rdx.shuf203 = shufflevector <4 x i1> %147, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx204 = and <4 x i1> %147, %rdx.shuf203
  %rdx.shuf205 = shufflevector <4 x i1> %bin.rdx204, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx206 = and <4 x i1> %bin.rdx204, %rdx.shuf205
  %151 = extractelement <4 x i1> %bin.rdx206, i32 0
  %152 = and i1 %151, %150
  br i1 %152, label %if_end, label %assert_fail31, !prof !5

if_end:                                           ; preds = %assert_end30, %if_then
  %153 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %154 = load i64, i64* %153, align 8
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %assert_end34, label %assert_fail33, !prof !5

assert_fail31:                                    ; preds = %if_then
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.514, i64 0, i64 0))
  ret i32 -1

assert_fail33:                                    ; preds = %if_end
  %157 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %157(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %if_end
  %158 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 6
  br i1 %160, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %162 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 2
  %165 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %166 = load i8, i8* %165, align 1
  %167 = icmp eq i8 %166, 32
  %168 = and i1 %164, %167
  %169 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %170 = load i16, i16* %169, align 2
  %171 = icmp eq i16 %170, 1
  %172 = and i1 %168, %171
  br i1 %172, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %173 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %173(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %174 = load i64, i64* %57, align 8, !tbaa !6618
  %175 = trunc i64 %174 to i32
  %176 = icmp eq i32 %175, 16
  br i1 %176, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %177(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %178 = getelementptr inbounds i64, i64* %57, i64 1
  %179 = load i64, i64* %178, align 8, !tbaa !6632
  %180 = trunc i64 %179 to i32
  %181 = icmp eq i32 %180, 1
  br i1 %181, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %182(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %183 = getelementptr inbounds i64, i64* %57, i64 2
  %184 = load i64, i64* %183, align 8, !tbaa !6634
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 1
  br i1 %186, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %187 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %187(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %188 = getelementptr inbounds i64, i64* %57, i64 3
  %189 = load i64, i64* %188, align 8, !tbaa !6637
  %190 = trunc i64 %189 to i32
  %191 = icmp eq i32 %190, 1
  br i1 %191, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %192 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %192(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %193 = getelementptr inbounds i64, i64* %57, i64 4
  %194 = load i64, i64* %193, align 8, !tbaa !6639
  %195 = trunc i64 %194 to i32
  %196 = icmp eq i32 %195, 512
  br i1 %196, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %198 = getelementptr inbounds i64, i64* %57, i64 5
  %199 = load i64, i64* %198, align 8, !tbaa !6643
  %200 = trunc i64 %199 to i32
  %201 = icmp eq i32 %200, 64
  br i1 %201, label %assert_end50, label %assert_fail49, !prof !5

assert_fail49:                                    ; preds = %assert_end48
  %202 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %202(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.198, i64 0, i64 0))
  ret i32 -1

assert_end50:                                     ; preds = %assert_end48
  %203 = icmp eq i64* %59, null
  br i1 %203, label %if_end52, label %if_then51, !prof !50

if_then51:                                        ; preds = %assert_end50
  %204 = getelementptr inbounds i64, i64* %59, i64 2
  %205 = bitcast i64* %204 to <4 x i64>*
  %206 = load <4 x i64>, <4 x i64>* %205, align 8, !tbaa !6645
  %207 = trunc <4 x i64> %206 to <4 x i32>
  %208 = icmp eq <4 x i32> %207, <i32 32768, i32 32768, i32 64, i32 1>
  %209 = getelementptr inbounds i64, i64* %59, i64 1
  %210 = load i64, i64* %209, align 8, !tbaa !6656
  %211 = trunc i64 %210 to i32
  %212 = icmp eq i32 %211, 32768
  %213 = load i64, i64* %59, align 8, !tbaa !6660
  %214 = trunc i64 %213 to i32
  %215 = icmp eq i32 %214, 32768
  %rdx.shuf199 = shufflevector <4 x i1> %208, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx200 = and <4 x i1> %208, %rdx.shuf199
  %rdx.shuf201 = shufflevector <4 x i1> %bin.rdx200, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx202 = and <4 x i1> %bin.rdx200, %rdx.shuf201
  %216 = extractelement <4 x i1> %bin.rdx202, i32 0
  %217 = and i1 %216, %212
  %218 = and i1 %217, %215
  br i1 %218, label %if_end52, label %assert_fail53, !prof !5

if_end52:                                         ; preds = %assert_end50, %if_then51
  %219 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %220 = load i64, i64* %219, align 8
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %assert_end56, label %assert_fail55, !prof !5

assert_fail53:                                    ; preds = %if_then51
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %222(i8* getelementptr inbounds ([279 x i8], [279 x i8]* @.str.515, i64 0, i64 0))
  ret i32 -1

assert_fail55:                                    ; preds = %if_end52
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %223(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %if_end52
  %224 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %225 = load i32, i32* %224, align 4
  %226 = icmp eq i32 %225, 1
  br i1 %226, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %227(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %228 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %229 = load i32, i32* %228, align 4
  %230 = icmp eq i32 %53, %229
  br i1 %230, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %231(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %232 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = icmp eq i32 %233, 5
  br i1 %234, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %236 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %237 = load i8, i8* %236, align 1
  %238 = icmp eq i8 %237, 2
  %239 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %240 = load i8, i8* %239, align 1
  %241 = icmp eq i8 %240, 32
  %242 = and i1 %238, %241
  %243 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %244 = load i16, i16* %243, align 2
  %245 = icmp eq i16 %244, 1
  %246 = and i1 %242, %245
  br i1 %246, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %247(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %248 = load i64, i64* %63, align 8, !tbaa !6662
  %249 = trunc i64 %248 to i32
  %250 = icmp eq i32 %249, 1
  br i1 %250, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %251(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %252 = getelementptr inbounds i64, i64* %63, i64 1
  %253 = load i64, i64* %252, align 8, !tbaa !6676
  %254 = trunc i64 %253 to i32
  %255 = icmp eq i32 %254, 16
  br i1 %255, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %256(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %257 = getelementptr inbounds i64, i64* %63, i64 2
  %258 = load i64, i64* %257, align 8, !tbaa !6678
  %259 = trunc i64 %258 to i32
  %260 = icmp eq i32 %259, 1
  br i1 %260, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %262 = getelementptr inbounds i64, i64* %63, i64 3
  %263 = load i64, i64* %262, align 8, !tbaa !6681
  %264 = trunc i64 %263 to i32
  %265 = icmp eq i32 %264, 1
  br i1 %265, label %assert_end72, label %assert_fail71, !prof !5

assert_fail71:                                    ; preds = %assert_end70
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %266(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end72:                                     ; preds = %assert_end70
  %267 = getelementptr inbounds i64, i64* %63, i64 4
  %268 = load i64, i64* %267, align 8, !tbaa !6683
  %269 = trunc i64 %268 to i32
  %270 = icmp eq i32 %269, 64
  br i1 %270, label %assert_end74, label %assert_fail73, !prof !5

assert_fail73:                                    ; preds = %assert_end72
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %271(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.200, i64 0, i64 0))
  ret i32 -1

assert_end74:                                     ; preds = %assert_end72
  %272 = icmp eq i64* %65, null
  br i1 %272, label %if_end76, label %if_then75, !prof !50

if_then75:                                        ; preds = %assert_end74
  %273 = getelementptr inbounds i64, i64* %65, i64 1
  %274 = bitcast i64* %273 to <4 x i64>*
  %275 = load <4 x i64>, <4 x i64>* %274, align 8, !tbaa !6687
  %276 = trunc <4 x i64> %275 to <4 x i32>
  %277 = icmp eq <4 x i32> %276, <i32 64, i32 64, i32 64, i32 1>
  %278 = load i64, i64* %65, align 8, !tbaa !6698
  %279 = trunc i64 %278 to i32
  %280 = icmp eq i32 %279, 1024
  %rdx.shuf195 = shufflevector <4 x i1> %277, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx196 = and <4 x i1> %277, %rdx.shuf195
  %rdx.shuf197 = shufflevector <4 x i1> %bin.rdx196, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx198 = and <4 x i1> %bin.rdx196, %rdx.shuf197
  %281 = extractelement <4 x i1> %bin.rdx198, i32 0
  %282 = and i1 %281, %280
  br i1 %282, label %if_end76, label %assert_fail77, !prof !5

if_end76:                                         ; preds = %assert_end74, %if_then75
  %283 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %284 = load i64, i64* %283, align 8
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %assert_end80, label %assert_fail79, !prof !5

assert_fail77:                                    ; preds = %if_then75
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %286(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.260, i64 0, i64 0))
  ret i32 -1

assert_fail79:                                    ; preds = %if_end76
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %287(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %if_end76
  %288 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %289 = load i32, i32* %288, align 4
  %290 = icmp eq i32 %289, 1
  br i1 %290, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %291(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %292 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %293 = load i32, i32* %292, align 4
  %294 = icmp eq i32 %53, %293
  br i1 %294, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %295 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %295(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %296 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 5
  br i1 %298, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %300 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %301 = load i8, i8* %300, align 1
  %302 = icmp eq i8 %301, 2
  %303 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %304 = load i8, i8* %303, align 1
  %305 = icmp eq i8 %304, 32
  %306 = and i1 %302, %305
  %307 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %308 = load i16, i16* %307, align 2
  %309 = icmp eq i16 %308, 1
  %310 = and i1 %306, %309
  br i1 %310, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %311 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %311(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %312 = load i64, i64* %69, align 8, !tbaa !6702
  %313 = trunc i64 %312 to i32
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %315(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %316 = getelementptr inbounds i64, i64* %69, i64 1
  %317 = load i64, i64* %316, align 8, !tbaa !6716
  %318 = trunc i64 %317 to i32
  %319 = icmp eq i32 %318, 16
  br i1 %319, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %320 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %320(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %321 = getelementptr inbounds i64, i64* %69, i64 2
  %322 = load i64, i64* %321, align 8, !tbaa !6718
  %323 = trunc i64 %322 to i32
  %324 = icmp eq i32 %323, 1
  br i1 %324, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %326 = getelementptr inbounds i64, i64* %69, i64 3
  %327 = load i64, i64* %326, align 8, !tbaa !6721
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 1
  br i1 %329, label %assert_end96, label %assert_fail95, !prof !5

assert_fail95:                                    ; preds = %assert_end94
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %330(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end96:                                     ; preds = %assert_end94
  %331 = getelementptr inbounds i64, i64* %69, i64 4
  %332 = load i64, i64* %331, align 8, !tbaa !6723
  %333 = trunc i64 %332 to i32
  %334 = icmp eq i32 %333, 64
  br i1 %334, label %assert_end98, label %assert_fail97, !prof !5

assert_fail97:                                    ; preds = %assert_end96
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %335(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.202, i64 0, i64 0))
  ret i32 -1

assert_end98:                                     ; preds = %assert_end96
  %336 = icmp eq i64* %71, null
  br i1 %336, label %if_end100, label %if_then99, !prof !50

if_then99:                                        ; preds = %assert_end98
  %337 = getelementptr inbounds i64, i64* %71, i64 1
  %338 = bitcast i64* %337 to <4 x i64>*
  %339 = load <4 x i64>, <4 x i64>* %338, align 8, !tbaa !6727
  %340 = trunc <4 x i64> %339 to <4 x i32>
  %341 = icmp eq <4 x i32> %340, <i32 64, i32 64, i32 64, i32 1>
  %342 = load i64, i64* %71, align 8, !tbaa !6738
  %343 = trunc i64 %342 to i32
  %344 = icmp eq i32 %343, 1024
  %rdx.shuf191 = shufflevector <4 x i1> %341, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx192 = and <4 x i1> %341, %rdx.shuf191
  %rdx.shuf193 = shufflevector <4 x i1> %bin.rdx192, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx194 = and <4 x i1> %bin.rdx192, %rdx.shuf193
  %345 = extractelement <4 x i1> %bin.rdx194, i32 0
  %346 = and i1 %345, %344
  br i1 %346, label %if_end100, label %assert_fail101, !prof !5

if_end100:                                        ; preds = %assert_end98, %if_then99
  %347 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %348 = load i64, i64* %347, align 8
  %349 = icmp eq i64 %348, 0
  br i1 %349, label %assert_end104, label %assert_fail103, !prof !5

assert_fail101:                                   ; preds = %if_then99
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %350(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.261, i64 0, i64 0))
  ret i32 -1

assert_fail103:                                   ; preds = %if_end100
  %351 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %351(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %if_end100
  %352 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %353 = load i32, i32* %352, align 4
  %354 = icmp eq i32 %353, 1
  br i1 %354, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %355 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %355(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %356 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %357 = load i32, i32* %356, align 4
  %358 = icmp eq i32 %53, %357
  br i1 %358, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %359 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %359(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %360 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %361 = load i32, i32* %360, align 4
  %362 = icmp eq i32 %361, 5
  br i1 %362, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %364 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %365 = load i8, i8* %364, align 1
  %366 = icmp eq i8 %365, 2
  %367 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %368 = load i8, i8* %367, align 1
  %369 = icmp eq i8 %368, 32
  %370 = and i1 %366, %369
  %371 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %372 = load i16, i16* %371, align 2
  %373 = icmp eq i16 %372, 1
  %374 = and i1 %370, %373
  br i1 %374, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %375 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %375(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %376 = load i64, i64* %75, align 8, !tbaa !6742
  %377 = trunc i64 %376 to i32
  %378 = icmp eq i32 %377, 1
  br i1 %378, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %379 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %379(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %380 = getelementptr inbounds i64, i64* %75, i64 1
  %381 = load i64, i64* %380, align 8, !tbaa !6756
  %382 = trunc i64 %381 to i32
  %383 = icmp eq i32 %382, 16
  br i1 %383, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %384 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %384(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %385 = getelementptr inbounds i64, i64* %75, i64 2
  %386 = load i64, i64* %385, align 8, !tbaa !6758
  %387 = trunc i64 %386 to i32
  %388 = icmp eq i32 %387, 1
  br i1 %388, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.110, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %390 = getelementptr inbounds i64, i64* %75, i64 3
  %391 = load i64, i64* %390, align 8, !tbaa !6761
  %392 = trunc i64 %391 to i32
  %393 = icmp eq i32 %392, 1
  br i1 %393, label %assert_end120, label %assert_fail119, !prof !5

assert_fail119:                                   ; preds = %assert_end118
  %394 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %394(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.111, i64 0, i64 0))
  ret i32 -1

assert_end120:                                    ; preds = %assert_end118
  %395 = getelementptr inbounds i64, i64* %75, i64 4
  %396 = load i64, i64* %395, align 8, !tbaa !6763
  %397 = trunc i64 %396 to i32
  %398 = icmp eq i32 %397, 64
  br i1 %398, label %assert_end122, label %assert_fail121, !prof !5

assert_fail121:                                   ; preds = %assert_end120
  %399 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %399(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.204, i64 0, i64 0))
  ret i32 -1

assert_end122:                                    ; preds = %assert_end120
  %400 = icmp eq i64* %77, null
  br i1 %400, label %if_end124, label %if_then123, !prof !50

if_then123:                                       ; preds = %assert_end122
  %401 = getelementptr inbounds i64, i64* %77, i64 1
  %402 = bitcast i64* %401 to <4 x i64>*
  %403 = load <4 x i64>, <4 x i64>* %402, align 8, !tbaa !6767
  %404 = trunc <4 x i64> %403 to <4 x i32>
  %405 = icmp eq <4 x i32> %404, <i32 64, i32 64, i32 64, i32 1>
  %406 = load i64, i64* %77, align 8, !tbaa !6778
  %407 = trunc i64 %406 to i32
  %408 = icmp eq i32 %407, 1024
  %rdx.shuf187 = shufflevector <4 x i1> %405, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx188 = and <4 x i1> %405, %rdx.shuf187
  %rdx.shuf189 = shufflevector <4 x i1> %bin.rdx188, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx190 = and <4 x i1> %bin.rdx188, %rdx.shuf189
  %409 = extractelement <4 x i1> %bin.rdx190, i32 0
  %410 = and i1 %409, %408
  br i1 %410, label %if_end124, label %assert_fail125, !prof !5

if_end124:                                        ; preds = %assert_end122, %if_then123
  %411 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %412 = load i64, i64* %411, align 8
  %413 = icmp eq i64 %412, 0
  br i1 %413, label %assert_end128, label %assert_fail127, !prof !5

assert_fail125:                                   ; preds = %if_then123
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %414(i8* getelementptr inbounds ([233 x i8], [233 x i8]* @.str.262, i64 0, i64 0))
  ret i32 -1

assert_fail127:                                   ; preds = %if_end124
  %415 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %415(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %if_end124
  %416 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %417 = load i32, i32* %416, align 4
  %418 = icmp eq i32 %417, 1
  br i1 %418, label %assert_end130, label %assert_fail129, !prof !5

assert_fail129:                                   ; preds = %assert_end128
  %419 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %419(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end130:                                    ; preds = %assert_end128
  %420 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %421 = load i32, i32* %420, align 4
  %422 = icmp eq i32 %53, %421
  br i1 %422, label %assert_end132, label %assert_fail131, !prof !5

assert_fail131:                                   ; preds = %assert_end130
  %423 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %423(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end132:                                    ; preds = %assert_end130
  %424 = getelementptr inbounds %1, %1* %34, i64 0, i32 2
  %425 = load i32, i32* %424, align 4
  %426 = icmp eq i32 %425, 5
  br i1 %426, label %assert_end134, label %assert_fail133, !prof !5

assert_fail133:                                   ; preds = %assert_end132
  %427 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %427(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.114, i64 0, i64 0))
  ret i32 -1

assert_end134:                                    ; preds = %assert_end132
  %428 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 0
  %429 = load i8, i8* %428, align 1
  %430 = icmp eq i8 %429, 2
  %431 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 1
  %432 = load i8, i8* %431, align 1
  %433 = icmp eq i8 %432, 32
  %434 = and i1 %430, %433
  %435 = getelementptr inbounds %1, %1* %34, i64 0, i32 3, i32 2
  %436 = load i16, i16* %435, align 2
  %437 = icmp eq i16 %436, 1
  %438 = and i1 %434, %437
  br i1 %438, label %assert_end136, label %assert_fail135, !prof !5

assert_fail135:                                   ; preds = %assert_end134
  %439 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %439(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.115, i64 0, i64 0))
  ret i32 -1

assert_end136:                                    ; preds = %assert_end134
  %440 = load i64, i64* %81, align 8, !tbaa !6782
  %441 = trunc i64 %440 to i32
  %442 = icmp eq i32 %441, 1
  br i1 %442, label %assert_end138, label %assert_fail137, !prof !5

assert_fail137:                                   ; preds = %assert_end136
  %443 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %443(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.116, i64 0, i64 0))
  ret i32 -1

assert_end138:                                    ; preds = %assert_end136
  %444 = getelementptr inbounds i64, i64* %81, i64 1
  %445 = load i64, i64* %444, align 8, !tbaa !6796
  %446 = trunc i64 %445 to i32
  %447 = icmp eq i32 %446, 16
  br i1 %447, label %assert_end140, label %assert_fail139, !prof !5

assert_fail139:                                   ; preds = %assert_end138
  %448 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %448(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.117, i64 0, i64 0))
  ret i32 -1

assert_end140:                                    ; preds = %assert_end138
  %449 = getelementptr inbounds i64, i64* %81, i64 2
  %450 = load i64, i64* %449, align 8, !tbaa !6798
  %451 = trunc i64 %450 to i32
  %452 = icmp eq i32 %451, 14
  br i1 %452, label %assert_end142, label %assert_fail141, !prof !5

assert_fail141:                                   ; preds = %assert_end140
  %453 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %453(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.263, i64 0, i64 0))
  ret i32 -1

assert_end142:                                    ; preds = %assert_end140
  %454 = getelementptr inbounds i64, i64* %81, i64 3
  %455 = load i64, i64* %454, align 8, !tbaa !6801
  %456 = trunc i64 %455 to i32
  %457 = icmp eq i32 %456, 14
  br i1 %457, label %assert_end144, label %assert_fail143, !prof !5

assert_fail143:                                   ; preds = %assert_end142
  %458 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %458(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.264, i64 0, i64 0))
  ret i32 -1

assert_end144:                                    ; preds = %assert_end142
  %459 = getelementptr inbounds i64, i64* %81, i64 4
  %460 = load i64, i64* %459, align 8, !tbaa !6803
  %461 = trunc i64 %460 to i32
  %462 = icmp eq i32 %461, 64
  br i1 %462, label %assert_end146, label %assert_fail145, !prof !5

assert_fail145:                                   ; preds = %assert_end144
  %463 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %463(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.206, i64 0, i64 0))
  ret i32 -1

assert_end146:                                    ; preds = %assert_end144
  %464 = icmp eq i64* %83, null
  br i1 %464, label %if_end148, label %if_then147, !prof !50

if_then147:                                       ; preds = %assert_end146
  %465 = getelementptr inbounds i64, i64* %83, i64 1
  %466 = bitcast i64* %465 to <4 x i64>*
  %467 = load <4 x i64>, <4 x i64>* %466, align 8, !tbaa !6807
  %468 = trunc <4 x i64> %467 to <4 x i32>
  %469 = icmp eq <4 x i32> %468, <i32 12544, i32 896, i32 64, i32 1>
  %470 = load i64, i64* %83, align 8, !tbaa !6818
  %471 = trunc i64 %470 to i32
  %472 = icmp eq i32 %471, 200704
  %rdx.shuf183 = shufflevector <4 x i1> %469, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx184 = and <4 x i1> %469, %rdx.shuf183
  %rdx.shuf185 = shufflevector <4 x i1> %bin.rdx184, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx186 = and <4 x i1> %bin.rdx184, %rdx.shuf185
  %473 = extractelement <4 x i1> %bin.rdx186, i32 0
  %474 = and i1 %473, %472
  br i1 %474, label %if_end148, label %assert_fail149, !prof !5

if_end148:                                        ; preds = %assert_end146, %if_then147
  %475 = getelementptr inbounds %1, %1* %34, i64 0, i32 6
  %476 = load i64, i64* %475, align 8
  %477 = icmp eq i64 %476, 0
  br i1 %477, label %assert_end152, label %assert_fail151, !prof !5

assert_fail149:                                   ; preds = %if_then147
  %478 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %478(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.265, i64 0, i64 0))
  ret i32 -1

assert_fail151:                                   ; preds = %if_end148
  %479 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %479(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.122, i64 0, i64 0))
  ret i32 -1

assert_end152:                                    ; preds = %if_end148
  %480 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 0
  %481 = load i32, i32* %480, align 4
  %482 = icmp eq i32 %481, 1
  br i1 %482, label %assert_end154, label %assert_fail153, !prof !5

assert_fail153:                                   ; preds = %assert_end152
  %483 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %483(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.123, i64 0, i64 0))
  ret i32 -1

assert_end154:                                    ; preds = %assert_end152
  %484 = getelementptr inbounds %1, %1* %34, i64 0, i32 1, i32 1
  %485 = load i32, i32* %484, align 4
  %486 = icmp eq i32 %53, %485
  br i1 %486, label %assert_end156, label %assert_fail155, !prof !5

assert_fail155:                                   ; preds = %assert_end154
  %487 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %487(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.124, i64 0, i64 0))
  ret i32 -1

assert_end156:                                    ; preds = %assert_end154
  %488 = getelementptr inbounds %1, %1* %40, i64 0, i32 2
  %489 = load i32, i32* %488, align 4
  %490 = icmp eq i32 %489, 5
  br i1 %490, label %assert_end158, label %assert_fail157, !prof !5

assert_fail157:                                   ; preds = %assert_end156
  %491 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %491(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.208, i64 0, i64 0))
  ret i32 -1

assert_end158:                                    ; preds = %assert_end156
  %492 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 0
  %493 = load i8, i8* %492, align 1
  %494 = icmp eq i8 %493, 2
  %495 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 1
  %496 = load i8, i8* %495, align 1
  %497 = icmp eq i8 %496, 32
  %498 = and i1 %494, %497
  %499 = getelementptr inbounds %1, %1* %40, i64 0, i32 3, i32 2
  %500 = load i16, i16* %499, align 2
  %501 = icmp eq i16 %500, 1
  %502 = and i1 %498, %501
  br i1 %502, label %assert_end160, label %assert_fail159, !prof !5

assert_fail159:                                   ; preds = %assert_end158
  %503 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %503(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.209, i64 0, i64 0))
  ret i32 -1

assert_end160:                                    ; preds = %assert_end158
  %504 = load i64, i64* %87, align 8, !tbaa !6822
  %505 = trunc i64 %504 to i32
  %506 = icmp eq i32 %505, 1
  br i1 %506, label %assert_end162, label %assert_fail161, !prof !5

assert_fail161:                                   ; preds = %assert_end160
  %507 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %507(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.210, i64 0, i64 0))
  ret i32 -1

assert_end162:                                    ; preds = %assert_end160
  %508 = getelementptr inbounds i64, i64* %87, i64 1
  %509 = load i64, i64* %508, align 8, !tbaa !6836
  %510 = trunc i64 %509 to i32
  %511 = icmp eq i32 %510, 16
  br i1 %511, label %assert_end164, label %assert_fail163, !prof !5

assert_fail163:                                   ; preds = %assert_end162
  %512 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %512(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.516, i64 0, i64 0))
  ret i32 -1

assert_end164:                                    ; preds = %assert_end162
  %513 = getelementptr inbounds i64, i64* %87, i64 2
  %514 = load i64, i64* %513, align 8, !tbaa !6838
  %515 = trunc i64 %514 to i32
  %516 = icmp eq i32 %515, 14
  br i1 %516, label %assert_end166, label %assert_fail165, !prof !5

assert_fail165:                                   ; preds = %assert_end164
  %517 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %517(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.517, i64 0, i64 0))
  ret i32 -1

assert_end166:                                    ; preds = %assert_end164
  %518 = getelementptr inbounds i64, i64* %87, i64 3
  %519 = load i64, i64* %518, align 8, !tbaa !6841
  %520 = trunc i64 %519 to i32
  %521 = icmp eq i32 %520, 14
  br i1 %521, label %assert_end168, label %assert_fail167, !prof !5

assert_fail167:                                   ; preds = %assert_end166
  %522 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %522(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.518, i64 0, i64 0))
  ret i32 -1

assert_end168:                                    ; preds = %assert_end166
  %523 = getelementptr inbounds i64, i64* %87, i64 4
  %524 = load i64, i64* %523, align 8, !tbaa !6843
  %525 = trunc i64 %524 to i32
  %526 = icmp eq i32 %525, 64
  br i1 %526, label %assert_end170, label %assert_fail169, !prof !5

assert_fail169:                                   ; preds = %assert_end168
  %527 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %527(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.214, i64 0, i64 0))
  ret i32 -1

assert_end170:                                    ; preds = %assert_end168
  %528 = icmp eq i64* %89, null
  br i1 %528, label %if_end172, label %if_then171, !prof !50

if_then171:                                       ; preds = %assert_end170
  %529 = getelementptr inbounds i64, i64* %89, i64 1
  %530 = bitcast i64* %529 to <4 x i64>*
  %531 = load <4 x i64>, <4 x i64>* %530, align 8, !tbaa !6847
  %532 = trunc <4 x i64> %531 to <4 x i32>
  %533 = icmp eq <4 x i32> %532, <i32 12544, i32 896, i32 64, i32 1>
  %534 = load i64, i64* %89, align 8, !tbaa !6858
  %535 = trunc i64 %534 to i32
  %536 = icmp eq i32 %535, 200704
  %rdx.shuf = shufflevector <4 x i1> %533, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %533, %rdx.shuf
  %rdx.shuf181 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx182 = and <4 x i1> %bin.rdx, %rdx.shuf181
  %537 = extractelement <4 x i1> %bin.rdx182, i32 0
  %538 = and i1 %537, %536
  br i1 %538, label %if_end172, label %assert_fail173, !prof !5

if_end172:                                        ; preds = %assert_end170, %if_then171
  %539 = getelementptr inbounds %1, %1* %40, i64 0, i32 6
  %540 = load i64, i64* %539, align 8
  %541 = icmp eq i64 %540, 0
  br i1 %541, label %assert_end176, label %assert_fail175, !prof !5

assert_fail173:                                   ; preds = %if_then171
  %542 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %542(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.519, i64 0, i64 0))
  ret i32 -1

assert_fail175:                                   ; preds = %if_end172
  %543 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %543(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.216, i64 0, i64 0))
  ret i32 -1

assert_end176:                                    ; preds = %if_end172
  %544 = getelementptr inbounds %1, %1* %40, i64 0, i32 1, i32 0
  %545 = load i32, i32* %544, align 4
  %546 = icmp eq i32 %545, 1
  br i1 %546, label %assert_end178, label %assert_fail177, !prof !5

assert_fail177:                                   ; preds = %assert_end176
  %547 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %547(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.217, i64 0, i64 0))
  ret i32 -1

assert_end178:                                    ; preds = %assert_end176
  %548 = getelementptr inbounds %1, %1* %40, i64 0, i32 1, i32 1
  %549 = load i32, i32* %548, align 4
  %550 = icmp eq i32 %53, %549
  br i1 %550, label %assert_end180, label %assert_fail179, !prof !5

assert_fail179:                                   ; preds = %assert_end178
  %551 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %551(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.218, i64 0, i64 0))
  ret i32 -1

assert_end180:                                    ; preds = %assert_end178
  %552 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1_compute_(i8* %45, i8* %55, i8* %85, i8* %61, i8* %67, i8* %73, i8* %79, i32 %53)
  ret i32 %552
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_multiply_add_add_nn_relu_1_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %8 = alloca %42, align 8
  %9 = getelementptr inbounds %42, %42* %8, i64 0, i32 0
  store i8* %0, i8** %9, align 8
  %10 = getelementptr inbounds %42, %42* %8, i64 0, i32 1
  store i8* %1, i8** %10, align 8
  %11 = getelementptr inbounds %42, %42* %8, i64 0, i32 2
  store i8* %2, i8** %11, align 8
  %12 = getelementptr inbounds %42, %42* %8, i64 0, i32 3
  store i8* %3, i8** %12, align 8
  %13 = getelementptr inbounds %42, %42* %8, i64 0, i32 4
  store i8* %4, i8** %13, align 8
  %14 = getelementptr inbounds %42, %42* %8, i64 0, i32 5
  store i8* %5, i8** %14, align 8
  %15 = getelementptr inbounds %42, %42* %8, i64 0, i32 6
  store i8* %6, i8** %15, align 8
  %16 = getelementptr inbounds %42, %42* %8, i64 0, i32 7
  store i32 %7, i32* %16, align 8
  %17 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %18 = bitcast %42* %8 to i8*
  %19 = call i32 %17(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.520, i8* nonnull %18, i32 0)
  ret i32 %19
}

define private i32 @__tvm_parallel_lambda.520(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to float**
  %19 = load float*, float** %18, align 8
  %20 = getelementptr inbounds i8, i8* %2, i64 48
  %21 = bitcast i8* %20 to float**
  %22 = load float*, float** %21, align 8
  %23 = getelementptr inbounds i8, i8* %2, i64 56
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, 111
  %29 = sdiv i32 %28, %27
  %30 = mul nsw i32 %29, %0
  %31 = icmp slt i32 %30, 112
  %32 = select i1 %31, i32 %30, i32 112
  %33 = add nsw i32 %0, 1
  %34 = mul nsw i32 %29, %33
  %35 = icmp slt i32 %34, 112
  %36 = select i1 %35, i32 %34, i32 112
  %37 = icmp slt i32 %32, %36
  br i1 %37, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %38 = add i32 %32, 1
  %39 = sext i32 %38 to i64
  %40 = add nsw i64 %39, -1
  %41 = sext i32 %36 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_end6.6
  %indvars.iv43 = phi i64 [ %40, %for_body.preheader ], [ %indvars.iv.next44, %for_end6.6 ]
  %42 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %43 = tail call i8* %42(i32 1, i32 %25, i64 7168, i32 2, i32 32)
  %44 = trunc i64 %indvars.iv43 to i32
  %45 = srem i32 %44, 7
  %46 = mul nsw i32 %45, 57344
  %47 = sdiv i32 %44, 7
  %48 = shl i32 %47, 15
  %49 = sext i32 %48 to i64
  %50 = sext i32 %46 to i64
  %51 = bitcast i8* %43 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %51, align 64, !tbaa !6862
  %52 = getelementptr inbounds i8, i8* %43, i64 256
  %53 = bitcast i8* %52 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %53, align 64, !tbaa !6862
  %54 = getelementptr inbounds i8, i8* %43, i64 3584
  %55 = bitcast i8* %54 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %55, align 64, !tbaa !6862
  %56 = getelementptr inbounds i8, i8* %43, i64 3840
  %57 = bitcast i8* %56 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %57, align 64, !tbaa !6862
  br label %for_body5

for_end:                                          ; preds = %for_end6.6, %entry
  ret i32 0

for_body5:                                        ; preds = %for_body5, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_body5 ]
  %58 = phi <64 x float> [ zeroinitializer, %for_body ], [ %90, %for_body5 ]
  %59 = phi <64 x float> [ zeroinitializer, %for_body ], [ %84, %for_body5 ]
  %60 = phi <64 x float> [ zeroinitializer, %for_body ], [ %78, %for_body5 ]
  %61 = phi <64 x float> [ zeroinitializer, %for_body ], [ %72, %for_body5 ]
  %62 = add nsw i64 %indvars.iv, %50
  %63 = getelementptr inbounds float, float* %4, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !6865
  %65 = insertelement <64 x float> undef, float %64, i32 0
  %66 = shufflevector <64 x float> %65, <64 x float> undef, <64 x i32> zeroinitializer
  %67 = shl i64 %indvars.iv, 6
  %68 = add nuw nsw i64 %67, %49
  %69 = getelementptr inbounds float, float* %7, i64 %68
  %70 = bitcast float* %69 to <64 x float>*
  %71 = load <64 x float>, <64 x float>* %70, align 64, !tbaa !6868
  %72 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %66, <64 x float> %71, <64 x float> %61)
  %73 = add nsw i64 %62, 1024
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !6865
  %76 = insertelement <64 x float> undef, float %75, i32 0
  %77 = shufflevector <64 x float> %76, <64 x float> undef, <64 x i32> zeroinitializer
  %78 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %77, <64 x float> %71, <64 x float> %60)
  %79 = add nsw i64 %62, 28672
  %80 = getelementptr inbounds float, float* %4, i64 %79
  %81 = load float, float* %80, align 4, !tbaa !6865
  %82 = insertelement <64 x float> undef, float %81, i32 0
  %83 = shufflevector <64 x float> %82, <64 x float> undef, <64 x i32> zeroinitializer
  %84 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %83, <64 x float> %71, <64 x float> %59)
  %85 = add nsw i64 %62, 29696
  %86 = getelementptr inbounds float, float* %4, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !6865
  %88 = insertelement <64 x float> undef, float %87, i32 0
  %89 = shufflevector <64 x float> %88, <64 x float> undef, <64 x i32> zeroinitializer
  %90 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %89, <64 x float> %71, <64 x float> %58)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  store <64 x float> %72, <64 x float>* %51, align 64, !tbaa !6862
  store <64 x float> %78, <64 x float>* %53, align 64, !tbaa !6862
  store <64 x float> %84, <64 x float>* %55, align 64, !tbaa !6862
  store <64 x float> %90, <64 x float>* %57, align 64, !tbaa !6862
  %91 = getelementptr inbounds i8, i8* %43, i64 512
  %92 = bitcast i8* %91 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %92, align 64, !tbaa !6862
  %93 = getelementptr inbounds i8, i8* %43, i64 768
  %94 = bitcast i8* %93 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %94, align 64, !tbaa !6862
  %95 = getelementptr inbounds i8, i8* %43, i64 4096
  %96 = bitcast i8* %95 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %96, align 64, !tbaa !6862
  %97 = getelementptr inbounds i8, i8* %43, i64 4352
  %98 = bitcast i8* %97 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %98, align 64, !tbaa !6862
  %99 = or i64 %50, 2048
  br label %for_body5.1

for_body5.1:                                      ; preds = %for_body5.1, %for_end6
  %indvars.iv.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next.1, %for_body5.1 ]
  %100 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %132, %for_body5.1 ]
  %101 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %126, %for_body5.1 ]
  %102 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %120, %for_body5.1 ]
  %103 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %114, %for_body5.1 ]
  %104 = add nsw i64 %99, %indvars.iv.1
  %105 = getelementptr inbounds float, float* %4, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !6865
  %107 = insertelement <64 x float> undef, float %106, i32 0
  %108 = shufflevector <64 x float> %107, <64 x float> undef, <64 x i32> zeroinitializer
  %109 = shl i64 %indvars.iv.1, 6
  %110 = add nuw nsw i64 %109, %49
  %111 = getelementptr inbounds float, float* %7, i64 %110
  %112 = bitcast float* %111 to <64 x float>*
  %113 = load <64 x float>, <64 x float>* %112, align 64, !tbaa !6868
  %114 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %108, <64 x float> %113, <64 x float> %103)
  %115 = add nsw i64 %104, 1024
  %116 = getelementptr inbounds float, float* %4, i64 %115
  %117 = load float, float* %116, align 4, !tbaa !6865
  %118 = insertelement <64 x float> undef, float %117, i32 0
  %119 = shufflevector <64 x float> %118, <64 x float> undef, <64 x i32> zeroinitializer
  %120 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %119, <64 x float> %113, <64 x float> %102)
  %121 = add nsw i64 %104, 28672
  %122 = getelementptr inbounds float, float* %4, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !6865
  %124 = insertelement <64 x float> undef, float %123, i32 0
  %125 = shufflevector <64 x float> %124, <64 x float> undef, <64 x i32> zeroinitializer
  %126 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %125, <64 x float> %113, <64 x float> %101)
  %127 = add nsw i64 %104, 29696
  %128 = getelementptr inbounds float, float* %4, i64 %127
  %129 = load float, float* %128, align 4, !tbaa !6865
  %130 = insertelement <64 x float> undef, float %129, i32 0
  %131 = shufflevector <64 x float> %130, <64 x float> undef, <64 x i32> zeroinitializer
  %132 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %131, <64 x float> %113, <64 x float> %100)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 512
  br i1 %exitcond.1, label %for_end6.1, label %for_body5.1, !prof !50

for_end6.1:                                       ; preds = %for_body5.1
  store <64 x float> %114, <64 x float>* %92, align 64, !tbaa !6862
  store <64 x float> %120, <64 x float>* %94, align 64, !tbaa !6862
  store <64 x float> %126, <64 x float>* %96, align 64, !tbaa !6862
  store <64 x float> %132, <64 x float>* %98, align 64, !tbaa !6862
  %133 = getelementptr inbounds i8, i8* %43, i64 1024
  %134 = bitcast i8* %133 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %134, align 64, !tbaa !6862
  %135 = getelementptr inbounds i8, i8* %43, i64 1280
  %136 = bitcast i8* %135 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %136, align 64, !tbaa !6862
  %137 = getelementptr inbounds i8, i8* %43, i64 4608
  %138 = bitcast i8* %137 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %138, align 64, !tbaa !6862
  %139 = getelementptr inbounds i8, i8* %43, i64 4864
  %140 = bitcast i8* %139 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %140, align 64, !tbaa !6862
  %141 = or i64 %50, 4096
  br label %for_body5.2

for_body5.2:                                      ; preds = %for_body5.2, %for_end6.1
  %indvars.iv.2 = phi i64 [ 0, %for_end6.1 ], [ %indvars.iv.next.2, %for_body5.2 ]
  %142 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %174, %for_body5.2 ]
  %143 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %168, %for_body5.2 ]
  %144 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %162, %for_body5.2 ]
  %145 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %156, %for_body5.2 ]
  %146 = add nsw i64 %141, %indvars.iv.2
  %147 = getelementptr inbounds float, float* %4, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !6865
  %149 = insertelement <64 x float> undef, float %148, i32 0
  %150 = shufflevector <64 x float> %149, <64 x float> undef, <64 x i32> zeroinitializer
  %151 = shl i64 %indvars.iv.2, 6
  %152 = add nuw nsw i64 %151, %49
  %153 = getelementptr inbounds float, float* %7, i64 %152
  %154 = bitcast float* %153 to <64 x float>*
  %155 = load <64 x float>, <64 x float>* %154, align 64, !tbaa !6868
  %156 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %150, <64 x float> %155, <64 x float> %145)
  %157 = add nsw i64 %146, 1024
  %158 = getelementptr inbounds float, float* %4, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !6865
  %160 = insertelement <64 x float> undef, float %159, i32 0
  %161 = shufflevector <64 x float> %160, <64 x float> undef, <64 x i32> zeroinitializer
  %162 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %161, <64 x float> %155, <64 x float> %144)
  %163 = add nsw i64 %146, 28672
  %164 = getelementptr inbounds float, float* %4, i64 %163
  %165 = load float, float* %164, align 4, !tbaa !6865
  %166 = insertelement <64 x float> undef, float %165, i32 0
  %167 = shufflevector <64 x float> %166, <64 x float> undef, <64 x i32> zeroinitializer
  %168 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %167, <64 x float> %155, <64 x float> %143)
  %169 = add nsw i64 %146, 29696
  %170 = getelementptr inbounds float, float* %4, i64 %169
  %171 = load float, float* %170, align 4, !tbaa !6865
  %172 = insertelement <64 x float> undef, float %171, i32 0
  %173 = shufflevector <64 x float> %172, <64 x float> undef, <64 x i32> zeroinitializer
  %174 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %173, <64 x float> %155, <64 x float> %142)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 512
  br i1 %exitcond.2, label %for_end6.2, label %for_body5.2, !prof !50

for_end6.2:                                       ; preds = %for_body5.2
  store <64 x float> %156, <64 x float>* %134, align 64, !tbaa !6862
  store <64 x float> %162, <64 x float>* %136, align 64, !tbaa !6862
  store <64 x float> %168, <64 x float>* %138, align 64, !tbaa !6862
  store <64 x float> %174, <64 x float>* %140, align 64, !tbaa !6862
  %175 = getelementptr inbounds i8, i8* %43, i64 1536
  %176 = bitcast i8* %175 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %176, align 64, !tbaa !6862
  %177 = getelementptr inbounds i8, i8* %43, i64 1792
  %178 = bitcast i8* %177 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %178, align 64, !tbaa !6862
  %179 = getelementptr inbounds i8, i8* %43, i64 5120
  %180 = bitcast i8* %179 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %180, align 64, !tbaa !6862
  %181 = getelementptr inbounds i8, i8* %43, i64 5376
  %182 = bitcast i8* %181 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %182, align 64, !tbaa !6862
  %183 = or i64 %50, 6144
  br label %for_body5.3

for_body5.3:                                      ; preds = %for_body5.3, %for_end6.2
  %indvars.iv.3 = phi i64 [ 0, %for_end6.2 ], [ %indvars.iv.next.3, %for_body5.3 ]
  %184 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %216, %for_body5.3 ]
  %185 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %210, %for_body5.3 ]
  %186 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %204, %for_body5.3 ]
  %187 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %198, %for_body5.3 ]
  %188 = add nsw i64 %183, %indvars.iv.3
  %189 = getelementptr inbounds float, float* %4, i64 %188
  %190 = load float, float* %189, align 4, !tbaa !6865
  %191 = insertelement <64 x float> undef, float %190, i32 0
  %192 = shufflevector <64 x float> %191, <64 x float> undef, <64 x i32> zeroinitializer
  %193 = shl i64 %indvars.iv.3, 6
  %194 = add nuw nsw i64 %193, %49
  %195 = getelementptr inbounds float, float* %7, i64 %194
  %196 = bitcast float* %195 to <64 x float>*
  %197 = load <64 x float>, <64 x float>* %196, align 64, !tbaa !6868
  %198 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %192, <64 x float> %197, <64 x float> %187)
  %199 = add nsw i64 %188, 1024
  %200 = getelementptr inbounds float, float* %4, i64 %199
  %201 = load float, float* %200, align 4, !tbaa !6865
  %202 = insertelement <64 x float> undef, float %201, i32 0
  %203 = shufflevector <64 x float> %202, <64 x float> undef, <64 x i32> zeroinitializer
  %204 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %203, <64 x float> %197, <64 x float> %186)
  %205 = add nsw i64 %188, 28672
  %206 = getelementptr inbounds float, float* %4, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !6865
  %208 = insertelement <64 x float> undef, float %207, i32 0
  %209 = shufflevector <64 x float> %208, <64 x float> undef, <64 x i32> zeroinitializer
  %210 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %209, <64 x float> %197, <64 x float> %185)
  %211 = add nsw i64 %188, 29696
  %212 = getelementptr inbounds float, float* %4, i64 %211
  %213 = load float, float* %212, align 4, !tbaa !6865
  %214 = insertelement <64 x float> undef, float %213, i32 0
  %215 = shufflevector <64 x float> %214, <64 x float> undef, <64 x i32> zeroinitializer
  %216 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %215, <64 x float> %197, <64 x float> %184)
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, 512
  br i1 %exitcond.3, label %for_end6.3, label %for_body5.3, !prof !50

for_end6.3:                                       ; preds = %for_body5.3
  store <64 x float> %198, <64 x float>* %176, align 64, !tbaa !6862
  store <64 x float> %204, <64 x float>* %178, align 64, !tbaa !6862
  store <64 x float> %210, <64 x float>* %180, align 64, !tbaa !6862
  store <64 x float> %216, <64 x float>* %182, align 64, !tbaa !6862
  %217 = getelementptr inbounds i8, i8* %43, i64 2048
  %218 = bitcast i8* %217 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %218, align 64, !tbaa !6862
  %219 = getelementptr inbounds i8, i8* %43, i64 2304
  %220 = bitcast i8* %219 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %220, align 64, !tbaa !6862
  %221 = getelementptr inbounds i8, i8* %43, i64 5632
  %222 = bitcast i8* %221 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %222, align 64, !tbaa !6862
  %223 = getelementptr inbounds i8, i8* %43, i64 5888
  %224 = bitcast i8* %223 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %224, align 64, !tbaa !6862
  %225 = add nsw i64 %50, 8192
  br label %for_body5.4

for_body5.4:                                      ; preds = %for_body5.4, %for_end6.3
  %indvars.iv.4 = phi i64 [ 0, %for_end6.3 ], [ %indvars.iv.next.4, %for_body5.4 ]
  %226 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %258, %for_body5.4 ]
  %227 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %252, %for_body5.4 ]
  %228 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %246, %for_body5.4 ]
  %229 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %240, %for_body5.4 ]
  %230 = add nsw i64 %225, %indvars.iv.4
  %231 = getelementptr inbounds float, float* %4, i64 %230
  %232 = load float, float* %231, align 4, !tbaa !6865
  %233 = insertelement <64 x float> undef, float %232, i32 0
  %234 = shufflevector <64 x float> %233, <64 x float> undef, <64 x i32> zeroinitializer
  %235 = shl i64 %indvars.iv.4, 6
  %236 = add nuw nsw i64 %235, %49
  %237 = getelementptr inbounds float, float* %7, i64 %236
  %238 = bitcast float* %237 to <64 x float>*
  %239 = load <64 x float>, <64 x float>* %238, align 64, !tbaa !6868
  %240 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %234, <64 x float> %239, <64 x float> %229)
  %241 = add nsw i64 %230, 1024
  %242 = getelementptr inbounds float, float* %4, i64 %241
  %243 = load float, float* %242, align 4, !tbaa !6865
  %244 = insertelement <64 x float> undef, float %243, i32 0
  %245 = shufflevector <64 x float> %244, <64 x float> undef, <64 x i32> zeroinitializer
  %246 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %245, <64 x float> %239, <64 x float> %228)
  %247 = add nsw i64 %230, 28672
  %248 = getelementptr inbounds float, float* %4, i64 %247
  %249 = load float, float* %248, align 4, !tbaa !6865
  %250 = insertelement <64 x float> undef, float %249, i32 0
  %251 = shufflevector <64 x float> %250, <64 x float> undef, <64 x i32> zeroinitializer
  %252 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %251, <64 x float> %239, <64 x float> %227)
  %253 = add nsw i64 %230, 29696
  %254 = getelementptr inbounds float, float* %4, i64 %253
  %255 = load float, float* %254, align 4, !tbaa !6865
  %256 = insertelement <64 x float> undef, float %255, i32 0
  %257 = shufflevector <64 x float> %256, <64 x float> undef, <64 x i32> zeroinitializer
  %258 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %257, <64 x float> %239, <64 x float> %226)
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv.4, 1
  %exitcond.4 = icmp eq i64 %indvars.iv.next.4, 512
  br i1 %exitcond.4, label %for_end6.4, label %for_body5.4, !prof !50

for_end6.4:                                       ; preds = %for_body5.4
  store <64 x float> %240, <64 x float>* %218, align 64, !tbaa !6862
  store <64 x float> %246, <64 x float>* %220, align 64, !tbaa !6862
  store <64 x float> %252, <64 x float>* %222, align 64, !tbaa !6862
  store <64 x float> %258, <64 x float>* %224, align 64, !tbaa !6862
  %259 = getelementptr inbounds i8, i8* %43, i64 2560
  %260 = bitcast i8* %259 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %260, align 64, !tbaa !6862
  %261 = getelementptr inbounds i8, i8* %43, i64 2816
  %262 = bitcast i8* %261 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %262, align 64, !tbaa !6862
  %263 = getelementptr inbounds i8, i8* %43, i64 6144
  %264 = bitcast i8* %263 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %264, align 64, !tbaa !6862
  %265 = getelementptr inbounds i8, i8* %43, i64 6400
  %266 = bitcast i8* %265 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %266, align 64, !tbaa !6862
  %267 = add nsw i64 %50, 10240
  br label %for_body5.5

for_body5.5:                                      ; preds = %for_body5.5, %for_end6.4
  %indvars.iv.5 = phi i64 [ 0, %for_end6.4 ], [ %indvars.iv.next.5, %for_body5.5 ]
  %268 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %300, %for_body5.5 ]
  %269 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %294, %for_body5.5 ]
  %270 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %288, %for_body5.5 ]
  %271 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %282, %for_body5.5 ]
  %272 = add nsw i64 %267, %indvars.iv.5
  %273 = getelementptr inbounds float, float* %4, i64 %272
  %274 = load float, float* %273, align 4, !tbaa !6865
  %275 = insertelement <64 x float> undef, float %274, i32 0
  %276 = shufflevector <64 x float> %275, <64 x float> undef, <64 x i32> zeroinitializer
  %277 = shl i64 %indvars.iv.5, 6
  %278 = add nuw nsw i64 %277, %49
  %279 = getelementptr inbounds float, float* %7, i64 %278
  %280 = bitcast float* %279 to <64 x float>*
  %281 = load <64 x float>, <64 x float>* %280, align 64, !tbaa !6868
  %282 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %276, <64 x float> %281, <64 x float> %271)
  %283 = add nsw i64 %272, 1024
  %284 = getelementptr inbounds float, float* %4, i64 %283
  %285 = load float, float* %284, align 4, !tbaa !6865
  %286 = insertelement <64 x float> undef, float %285, i32 0
  %287 = shufflevector <64 x float> %286, <64 x float> undef, <64 x i32> zeroinitializer
  %288 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %287, <64 x float> %281, <64 x float> %270)
  %289 = add nsw i64 %272, 28672
  %290 = getelementptr inbounds float, float* %4, i64 %289
  %291 = load float, float* %290, align 4, !tbaa !6865
  %292 = insertelement <64 x float> undef, float %291, i32 0
  %293 = shufflevector <64 x float> %292, <64 x float> undef, <64 x i32> zeroinitializer
  %294 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %293, <64 x float> %281, <64 x float> %269)
  %295 = add nsw i64 %272, 29696
  %296 = getelementptr inbounds float, float* %4, i64 %295
  %297 = load float, float* %296, align 4, !tbaa !6865
  %298 = insertelement <64 x float> undef, float %297, i32 0
  %299 = shufflevector <64 x float> %298, <64 x float> undef, <64 x i32> zeroinitializer
  %300 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %299, <64 x float> %281, <64 x float> %268)
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv.5, 1
  %exitcond.5 = icmp eq i64 %indvars.iv.next.5, 512
  br i1 %exitcond.5, label %for_end6.5, label %for_body5.5, !prof !50

for_end6.5:                                       ; preds = %for_body5.5
  store <64 x float> %282, <64 x float>* %260, align 64, !tbaa !6862
  store <64 x float> %288, <64 x float>* %262, align 64, !tbaa !6862
  store <64 x float> %294, <64 x float>* %264, align 64, !tbaa !6862
  store <64 x float> %300, <64 x float>* %266, align 64, !tbaa !6862
  %301 = getelementptr inbounds i8, i8* %43, i64 3072
  %302 = bitcast i8* %301 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %302, align 64, !tbaa !6862
  %303 = getelementptr inbounds i8, i8* %43, i64 3328
  %304 = bitcast i8* %303 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %304, align 64, !tbaa !6862
  %305 = getelementptr inbounds i8, i8* %43, i64 6656
  %306 = bitcast i8* %305 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %306, align 64, !tbaa !6862
  %307 = getelementptr inbounds i8, i8* %43, i64 6912
  %308 = bitcast i8* %307 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %308, align 64, !tbaa !6862
  %309 = add nsw i64 %50, 12288
  br label %for_body5.6

for_body5.6:                                      ; preds = %for_body5.6, %for_end6.5
  %indvars.iv.6 = phi i64 [ 0, %for_end6.5 ], [ %indvars.iv.next.6, %for_body5.6 ]
  %310 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %342, %for_body5.6 ]
  %311 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %336, %for_body5.6 ]
  %312 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %330, %for_body5.6 ]
  %313 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %324, %for_body5.6 ]
  %314 = add nsw i64 %309, %indvars.iv.6
  %315 = getelementptr inbounds float, float* %4, i64 %314
  %316 = load float, float* %315, align 4, !tbaa !6865
  %317 = insertelement <64 x float> undef, float %316, i32 0
  %318 = shufflevector <64 x float> %317, <64 x float> undef, <64 x i32> zeroinitializer
  %319 = shl i64 %indvars.iv.6, 6
  %320 = add nuw nsw i64 %319, %49
  %321 = getelementptr inbounds float, float* %7, i64 %320
  %322 = bitcast float* %321 to <64 x float>*
  %323 = load <64 x float>, <64 x float>* %322, align 64, !tbaa !6868
  %324 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %318, <64 x float> %323, <64 x float> %313)
  %325 = add nsw i64 %314, 1024
  %326 = getelementptr inbounds float, float* %4, i64 %325
  %327 = load float, float* %326, align 4, !tbaa !6865
  %328 = insertelement <64 x float> undef, float %327, i32 0
  %329 = shufflevector <64 x float> %328, <64 x float> undef, <64 x i32> zeroinitializer
  %330 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %329, <64 x float> %323, <64 x float> %312)
  %331 = add nsw i64 %314, 28672
  %332 = getelementptr inbounds float, float* %4, i64 %331
  %333 = load float, float* %332, align 4, !tbaa !6865
  %334 = insertelement <64 x float> undef, float %333, i32 0
  %335 = shufflevector <64 x float> %334, <64 x float> undef, <64 x i32> zeroinitializer
  %336 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %335, <64 x float> %323, <64 x float> %311)
  %337 = add nsw i64 %314, 29696
  %338 = getelementptr inbounds float, float* %4, i64 %337
  %339 = load float, float* %338, align 4, !tbaa !6865
  %340 = insertelement <64 x float> undef, float %339, i32 0
  %341 = shufflevector <64 x float> %340, <64 x float> undef, <64 x i32> zeroinitializer
  %342 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %341, <64 x float> %323, <64 x float> %310)
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv.6, 1
  %exitcond.6 = icmp eq i64 %indvars.iv.next.6, 512
  br i1 %exitcond.6, label %for_end6.6, label %for_body5.6, !prof !50

for_end6.6:                                       ; preds = %for_body5.6
  store <64 x float> %324, <64 x float>* %302, align 64, !tbaa !6862
  store <64 x float> %330, <64 x float>* %304, align 64, !tbaa !6862
  store <64 x float> %336, <64 x float>* %306, align 64, !tbaa !6862
  store <64 x float> %342, <64 x float>* %308, align 64, !tbaa !6862
  %343 = mul nsw i64 %indvars.iv43, 1792
  %344 = shl nsw i32 %47, 6
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds float, float* %13, i64 %345
  %347 = bitcast float* %346 to <64 x float>*
  %348 = load <64 x float>, <64 x float>* %347, align 64, !tbaa !6871
  %349 = getelementptr inbounds float, float* %16, i64 %345
  %350 = bitcast float* %349 to <64 x float>*
  %351 = load <64 x float>, <64 x float>* %350, align 64, !tbaa !6874
  %352 = getelementptr inbounds float, float* %19, i64 %345
  %353 = bitcast float* %352 to <64 x float>*
  %354 = load <64 x float>, <64 x float>* %353, align 64, !tbaa !6877
  %355 = bitcast i8* %43 to <64 x float>*
  %356 = load <64 x float>, <64 x float>* %355, align 64, !tbaa !6862
  %357 = fadd <64 x float> %356, %348
  %358 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %357, <64 x float> %351, <64 x float> %354)
  %359 = getelementptr inbounds float, float* %22, i64 %343
  %360 = bitcast float* %359 to <64 x float>*
  %361 = load <64 x float>, <64 x float>* %360, align 64, !tbaa !6880
  %362 = fadd <64 x float> %358, %361
  %363 = fcmp ogt <64 x float> %362, zeroinitializer
  %364 = select <64 x i1> %363, <64 x float> %362, <64 x float> zeroinitializer
  %365 = getelementptr inbounds float, float* %10, i64 %343
  %366 = bitcast float* %365 to <64 x float>*
  store <64 x float> %364, <64 x float>* %366, align 64, !tbaa !6883
  %367 = getelementptr inbounds i8, i8* %43, i64 256
  %368 = bitcast i8* %367 to <64 x float>*
  %369 = load <64 x float>, <64 x float>* %368, align 64, !tbaa !6862
  %370 = fadd <64 x float> %369, %348
  %371 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %370, <64 x float> %351, <64 x float> %354)
  %372 = mul i64 %indvars.iv43, 7696581394432
  %sext = ashr exact i64 %372, 32
  %373 = or i64 %sext, 64
  %374 = getelementptr inbounds float, float* %22, i64 %373
  %375 = bitcast float* %374 to <64 x float>*
  %376 = load <64 x float>, <64 x float>* %375, align 64, !tbaa !6880
  %377 = fadd <64 x float> %371, %376
  %378 = fcmp ogt <64 x float> %377, zeroinitializer
  %379 = select <64 x i1> %378, <64 x float> %377, <64 x float> zeroinitializer
  %380 = getelementptr inbounds float, float* %10, i64 %373
  %381 = bitcast float* %380 to <64 x float>*
  store <64 x float> %379, <64 x float>* %381, align 64, !tbaa !6883
  %382 = getelementptr inbounds i8, i8* %43, i64 3584
  %383 = bitcast i8* %382 to <64 x float>*
  %384 = load <64 x float>, <64 x float>* %383, align 64, !tbaa !6862
  %385 = fadd <64 x float> %384, %348
  %386 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %385, <64 x float> %351, <64 x float> %354)
  %387 = mul i64 %indvars.iv43, 7696581394432
  %sext58 = add i64 %387, 3848290697216
  %388 = ashr exact i64 %sext58, 32
  %389 = getelementptr inbounds float, float* %22, i64 %388
  %390 = bitcast float* %389 to <64 x float>*
  %391 = load <64 x float>, <64 x float>* %390, align 64, !tbaa !6880
  %392 = fadd <64 x float> %386, %391
  %393 = fcmp ogt <64 x float> %392, zeroinitializer
  %394 = select <64 x i1> %393, <64 x float> %392, <64 x float> zeroinitializer
  %395 = getelementptr inbounds float, float* %10, i64 %388
  %396 = bitcast float* %395 to <64 x float>*
  store <64 x float> %394, <64 x float>* %396, align 64, !tbaa !6883
  %397 = getelementptr inbounds i8, i8* %43, i64 3840
  %398 = bitcast i8* %397 to <64 x float>*
  %399 = load <64 x float>, <64 x float>* %398, align 64, !tbaa !6862
  %400 = fadd <64 x float> %399, %348
  %401 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %400, <64 x float> %351, <64 x float> %354)
  %402 = mul i64 %indvars.iv43, 7696581394432
  %sext45 = add i64 %402, 4123168604160
  %403 = ashr exact i64 %sext45, 32
  %404 = getelementptr inbounds float, float* %22, i64 %403
  %405 = bitcast float* %404 to <64 x float>*
  %406 = load <64 x float>, <64 x float>* %405, align 64, !tbaa !6880
  %407 = fadd <64 x float> %401, %406
  %408 = fcmp ogt <64 x float> %407, zeroinitializer
  %409 = select <64 x i1> %408, <64 x float> %407, <64 x float> zeroinitializer
  %410 = getelementptr inbounds float, float* %10, i64 %403
  %411 = bitcast float* %410 to <64 x float>*
  store <64 x float> %409, <64 x float>* %411, align 64, !tbaa !6883
  %412 = getelementptr inbounds i8, i8* %43, i64 512
  %413 = bitcast i8* %412 to <64 x float>*
  %414 = load <64 x float>, <64 x float>* %413, align 64, !tbaa !6862
  %415 = fadd <64 x float> %414, %348
  %416 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %415, <64 x float> %351, <64 x float> %354)
  %417 = mul i64 %indvars.iv43, 7696581394432
  %sext59 = ashr exact i64 %417, 32
  %418 = or i64 %sext59, 128
  %419 = getelementptr inbounds float, float* %22, i64 %418
  %420 = bitcast float* %419 to <64 x float>*
  %421 = load <64 x float>, <64 x float>* %420, align 64, !tbaa !6880
  %422 = fadd <64 x float> %416, %421
  %423 = fcmp ogt <64 x float> %422, zeroinitializer
  %424 = select <64 x i1> %423, <64 x float> %422, <64 x float> zeroinitializer
  %425 = getelementptr inbounds float, float* %10, i64 %418
  %426 = bitcast float* %425 to <64 x float>*
  store <64 x float> %424, <64 x float>* %426, align 64, !tbaa !6883
  %427 = getelementptr inbounds i8, i8* %43, i64 768
  %428 = bitcast i8* %427 to <64 x float>*
  %429 = load <64 x float>, <64 x float>* %428, align 64, !tbaa !6862
  %430 = fadd <64 x float> %429, %348
  %431 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %430, <64 x float> %351, <64 x float> %354)
  %432 = mul i64 %indvars.iv43, 7696581394432
  %sext46 = ashr exact i64 %432, 32
  %433 = or i64 %sext46, 192
  %434 = getelementptr inbounds float, float* %22, i64 %433
  %435 = bitcast float* %434 to <64 x float>*
  %436 = load <64 x float>, <64 x float>* %435, align 64, !tbaa !6880
  %437 = fadd <64 x float> %431, %436
  %438 = fcmp ogt <64 x float> %437, zeroinitializer
  %439 = select <64 x i1> %438, <64 x float> %437, <64 x float> zeroinitializer
  %440 = getelementptr inbounds float, float* %10, i64 %433
  %441 = bitcast float* %440 to <64 x float>*
  store <64 x float> %439, <64 x float>* %441, align 64, !tbaa !6883
  %442 = getelementptr inbounds i8, i8* %43, i64 4096
  %443 = bitcast i8* %442 to <64 x float>*
  %444 = load <64 x float>, <64 x float>* %443, align 64, !tbaa !6862
  %445 = fadd <64 x float> %444, %348
  %446 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %445, <64 x float> %351, <64 x float> %354)
  %447 = mul i64 %indvars.iv43, 7696581394432
  %sext60 = add i64 %447, 4398046511104
  %448 = ashr exact i64 %sext60, 32
  %449 = getelementptr inbounds float, float* %22, i64 %448
  %450 = bitcast float* %449 to <64 x float>*
  %451 = load <64 x float>, <64 x float>* %450, align 64, !tbaa !6880
  %452 = fadd <64 x float> %446, %451
  %453 = fcmp ogt <64 x float> %452, zeroinitializer
  %454 = select <64 x i1> %453, <64 x float> %452, <64 x float> zeroinitializer
  %455 = getelementptr inbounds float, float* %10, i64 %448
  %456 = bitcast float* %455 to <64 x float>*
  store <64 x float> %454, <64 x float>* %456, align 64, !tbaa !6883
  %457 = getelementptr inbounds i8, i8* %43, i64 4352
  %458 = bitcast i8* %457 to <64 x float>*
  %459 = load <64 x float>, <64 x float>* %458, align 64, !tbaa !6862
  %460 = fadd <64 x float> %459, %348
  %461 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %460, <64 x float> %351, <64 x float> %354)
  %462 = mul i64 %indvars.iv43, 7696581394432
  %sext47 = add i64 %462, 4672924418048
  %463 = ashr exact i64 %sext47, 32
  %464 = getelementptr inbounds float, float* %22, i64 %463
  %465 = bitcast float* %464 to <64 x float>*
  %466 = load <64 x float>, <64 x float>* %465, align 64, !tbaa !6880
  %467 = fadd <64 x float> %461, %466
  %468 = fcmp ogt <64 x float> %467, zeroinitializer
  %469 = select <64 x i1> %468, <64 x float> %467, <64 x float> zeroinitializer
  %470 = getelementptr inbounds float, float* %10, i64 %463
  %471 = bitcast float* %470 to <64 x float>*
  store <64 x float> %469, <64 x float>* %471, align 64, !tbaa !6883
  %472 = getelementptr inbounds i8, i8* %43, i64 1024
  %473 = bitcast i8* %472 to <64 x float>*
  %474 = load <64 x float>, <64 x float>* %473, align 64, !tbaa !6862
  %475 = fadd <64 x float> %474, %348
  %476 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %475, <64 x float> %351, <64 x float> %354)
  %477 = mul i64 %indvars.iv43, 7696581394432
  %sext61 = add i64 %477, 1099511627776
  %478 = ashr exact i64 %sext61, 32
  %479 = getelementptr inbounds float, float* %22, i64 %478
  %480 = bitcast float* %479 to <64 x float>*
  %481 = load <64 x float>, <64 x float>* %480, align 64, !tbaa !6880
  %482 = fadd <64 x float> %476, %481
  %483 = fcmp ogt <64 x float> %482, zeroinitializer
  %484 = select <64 x i1> %483, <64 x float> %482, <64 x float> zeroinitializer
  %485 = getelementptr inbounds float, float* %10, i64 %478
  %486 = bitcast float* %485 to <64 x float>*
  store <64 x float> %484, <64 x float>* %486, align 64, !tbaa !6883
  %487 = getelementptr inbounds i8, i8* %43, i64 1280
  %488 = bitcast i8* %487 to <64 x float>*
  %489 = load <64 x float>, <64 x float>* %488, align 64, !tbaa !6862
  %490 = fadd <64 x float> %489, %348
  %491 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %490, <64 x float> %351, <64 x float> %354)
  %492 = mul i64 %indvars.iv43, 7696581394432
  %sext48 = add i64 %492, 1374389534720
  %493 = ashr exact i64 %sext48, 32
  %494 = getelementptr inbounds float, float* %22, i64 %493
  %495 = bitcast float* %494 to <64 x float>*
  %496 = load <64 x float>, <64 x float>* %495, align 64, !tbaa !6880
  %497 = fadd <64 x float> %491, %496
  %498 = fcmp ogt <64 x float> %497, zeroinitializer
  %499 = select <64 x i1> %498, <64 x float> %497, <64 x float> zeroinitializer
  %500 = getelementptr inbounds float, float* %10, i64 %493
  %501 = bitcast float* %500 to <64 x float>*
  store <64 x float> %499, <64 x float>* %501, align 64, !tbaa !6883
  %502 = getelementptr inbounds i8, i8* %43, i64 4608
  %503 = bitcast i8* %502 to <64 x float>*
  %504 = load <64 x float>, <64 x float>* %503, align 64, !tbaa !6862
  %505 = fadd <64 x float> %504, %348
  %506 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %505, <64 x float> %351, <64 x float> %354)
  %507 = mul i64 %indvars.iv43, 7696581394432
  %sext62 = add i64 %507, 4947802324992
  %508 = ashr exact i64 %sext62, 32
  %509 = getelementptr inbounds float, float* %22, i64 %508
  %510 = bitcast float* %509 to <64 x float>*
  %511 = load <64 x float>, <64 x float>* %510, align 64, !tbaa !6880
  %512 = fadd <64 x float> %506, %511
  %513 = fcmp ogt <64 x float> %512, zeroinitializer
  %514 = select <64 x i1> %513, <64 x float> %512, <64 x float> zeroinitializer
  %515 = getelementptr inbounds float, float* %10, i64 %508
  %516 = bitcast float* %515 to <64 x float>*
  store <64 x float> %514, <64 x float>* %516, align 64, !tbaa !6883
  %517 = getelementptr inbounds i8, i8* %43, i64 4864
  %518 = bitcast i8* %517 to <64 x float>*
  %519 = load <64 x float>, <64 x float>* %518, align 64, !tbaa !6862
  %520 = fadd <64 x float> %519, %348
  %521 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %520, <64 x float> %351, <64 x float> %354)
  %522 = mul i64 %indvars.iv43, 7696581394432
  %sext49 = add i64 %522, 5222680231936
  %523 = ashr exact i64 %sext49, 32
  %524 = getelementptr inbounds float, float* %22, i64 %523
  %525 = bitcast float* %524 to <64 x float>*
  %526 = load <64 x float>, <64 x float>* %525, align 64, !tbaa !6880
  %527 = fadd <64 x float> %521, %526
  %528 = fcmp ogt <64 x float> %527, zeroinitializer
  %529 = select <64 x i1> %528, <64 x float> %527, <64 x float> zeroinitializer
  %530 = getelementptr inbounds float, float* %10, i64 %523
  %531 = bitcast float* %530 to <64 x float>*
  store <64 x float> %529, <64 x float>* %531, align 64, !tbaa !6883
  %532 = getelementptr inbounds i8, i8* %43, i64 1536
  %533 = bitcast i8* %532 to <64 x float>*
  %534 = load <64 x float>, <64 x float>* %533, align 64, !tbaa !6862
  %535 = fadd <64 x float> %534, %348
  %536 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %535, <64 x float> %351, <64 x float> %354)
  %537 = mul i64 %indvars.iv43, 7696581394432
  %sext63 = add i64 %537, 1649267441664
  %538 = ashr exact i64 %sext63, 32
  %539 = getelementptr inbounds float, float* %22, i64 %538
  %540 = bitcast float* %539 to <64 x float>*
  %541 = load <64 x float>, <64 x float>* %540, align 64, !tbaa !6880
  %542 = fadd <64 x float> %536, %541
  %543 = fcmp ogt <64 x float> %542, zeroinitializer
  %544 = select <64 x i1> %543, <64 x float> %542, <64 x float> zeroinitializer
  %545 = getelementptr inbounds float, float* %10, i64 %538
  %546 = bitcast float* %545 to <64 x float>*
  store <64 x float> %544, <64 x float>* %546, align 64, !tbaa !6883
  %547 = getelementptr inbounds i8, i8* %43, i64 1792
  %548 = bitcast i8* %547 to <64 x float>*
  %549 = load <64 x float>, <64 x float>* %548, align 64, !tbaa !6862
  %550 = fadd <64 x float> %549, %348
  %551 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %550, <64 x float> %351, <64 x float> %354)
  %552 = mul i64 %indvars.iv43, 7696581394432
  %sext50 = add i64 %552, 1924145348608
  %553 = ashr exact i64 %sext50, 32
  %554 = getelementptr inbounds float, float* %22, i64 %553
  %555 = bitcast float* %554 to <64 x float>*
  %556 = load <64 x float>, <64 x float>* %555, align 64, !tbaa !6880
  %557 = fadd <64 x float> %551, %556
  %558 = fcmp ogt <64 x float> %557, zeroinitializer
  %559 = select <64 x i1> %558, <64 x float> %557, <64 x float> zeroinitializer
  %560 = getelementptr inbounds float, float* %10, i64 %553
  %561 = bitcast float* %560 to <64 x float>*
  store <64 x float> %559, <64 x float>* %561, align 64, !tbaa !6883
  %562 = getelementptr inbounds i8, i8* %43, i64 5120
  %563 = bitcast i8* %562 to <64 x float>*
  %564 = load <64 x float>, <64 x float>* %563, align 64, !tbaa !6862
  %565 = fadd <64 x float> %564, %348
  %566 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %565, <64 x float> %351, <64 x float> %354)
  %567 = mul i64 %indvars.iv43, 7696581394432
  %sext64 = add i64 %567, 5497558138880
  %568 = ashr exact i64 %sext64, 32
  %569 = getelementptr inbounds float, float* %22, i64 %568
  %570 = bitcast float* %569 to <64 x float>*
  %571 = load <64 x float>, <64 x float>* %570, align 64, !tbaa !6880
  %572 = fadd <64 x float> %566, %571
  %573 = fcmp ogt <64 x float> %572, zeroinitializer
  %574 = select <64 x i1> %573, <64 x float> %572, <64 x float> zeroinitializer
  %575 = getelementptr inbounds float, float* %10, i64 %568
  %576 = bitcast float* %575 to <64 x float>*
  store <64 x float> %574, <64 x float>* %576, align 64, !tbaa !6883
  %577 = getelementptr inbounds i8, i8* %43, i64 5376
  %578 = bitcast i8* %577 to <64 x float>*
  %579 = load <64 x float>, <64 x float>* %578, align 64, !tbaa !6862
  %580 = fadd <64 x float> %579, %348
  %581 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %580, <64 x float> %351, <64 x float> %354)
  %582 = mul i64 %indvars.iv43, 7696581394432
  %sext51 = add i64 %582, 5772436045824
  %583 = ashr exact i64 %sext51, 32
  %584 = getelementptr inbounds float, float* %22, i64 %583
  %585 = bitcast float* %584 to <64 x float>*
  %586 = load <64 x float>, <64 x float>* %585, align 64, !tbaa !6880
  %587 = fadd <64 x float> %581, %586
  %588 = fcmp ogt <64 x float> %587, zeroinitializer
  %589 = select <64 x i1> %588, <64 x float> %587, <64 x float> zeroinitializer
  %590 = getelementptr inbounds float, float* %10, i64 %583
  %591 = bitcast float* %590 to <64 x float>*
  store <64 x float> %589, <64 x float>* %591, align 64, !tbaa !6883
  %592 = getelementptr inbounds i8, i8* %43, i64 2048
  %593 = bitcast i8* %592 to <64 x float>*
  %594 = load <64 x float>, <64 x float>* %593, align 64, !tbaa !6862
  %595 = fadd <64 x float> %594, %348
  %596 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %595, <64 x float> %351, <64 x float> %354)
  %597 = mul i64 %indvars.iv43, 7696581394432
  %sext65 = add i64 %597, 2199023255552
  %598 = ashr exact i64 %sext65, 32
  %599 = getelementptr inbounds float, float* %22, i64 %598
  %600 = bitcast float* %599 to <64 x float>*
  %601 = load <64 x float>, <64 x float>* %600, align 64, !tbaa !6880
  %602 = fadd <64 x float> %596, %601
  %603 = fcmp ogt <64 x float> %602, zeroinitializer
  %604 = select <64 x i1> %603, <64 x float> %602, <64 x float> zeroinitializer
  %605 = getelementptr inbounds float, float* %10, i64 %598
  %606 = bitcast float* %605 to <64 x float>*
  store <64 x float> %604, <64 x float>* %606, align 64, !tbaa !6883
  %607 = getelementptr inbounds i8, i8* %43, i64 2304
  %608 = bitcast i8* %607 to <64 x float>*
  %609 = load <64 x float>, <64 x float>* %608, align 64, !tbaa !6862
  %610 = fadd <64 x float> %609, %348
  %611 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %610, <64 x float> %351, <64 x float> %354)
  %612 = mul i64 %indvars.iv43, 7696581394432
  %sext52 = add i64 %612, 2473901162496
  %613 = ashr exact i64 %sext52, 32
  %614 = getelementptr inbounds float, float* %22, i64 %613
  %615 = bitcast float* %614 to <64 x float>*
  %616 = load <64 x float>, <64 x float>* %615, align 64, !tbaa !6880
  %617 = fadd <64 x float> %611, %616
  %618 = fcmp ogt <64 x float> %617, zeroinitializer
  %619 = select <64 x i1> %618, <64 x float> %617, <64 x float> zeroinitializer
  %620 = getelementptr inbounds float, float* %10, i64 %613
  %621 = bitcast float* %620 to <64 x float>*
  store <64 x float> %619, <64 x float>* %621, align 64, !tbaa !6883
  %622 = getelementptr inbounds i8, i8* %43, i64 5632
  %623 = bitcast i8* %622 to <64 x float>*
  %624 = load <64 x float>, <64 x float>* %623, align 64, !tbaa !6862
  %625 = fadd <64 x float> %624, %348
  %626 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %625, <64 x float> %351, <64 x float> %354)
  %627 = mul i64 %indvars.iv43, 7696581394432
  %sext66 = add i64 %627, 6047313952768
  %628 = ashr exact i64 %sext66, 32
  %629 = getelementptr inbounds float, float* %22, i64 %628
  %630 = bitcast float* %629 to <64 x float>*
  %631 = load <64 x float>, <64 x float>* %630, align 64, !tbaa !6880
  %632 = fadd <64 x float> %626, %631
  %633 = fcmp ogt <64 x float> %632, zeroinitializer
  %634 = select <64 x i1> %633, <64 x float> %632, <64 x float> zeroinitializer
  %635 = getelementptr inbounds float, float* %10, i64 %628
  %636 = bitcast float* %635 to <64 x float>*
  store <64 x float> %634, <64 x float>* %636, align 64, !tbaa !6883
  %637 = getelementptr inbounds i8, i8* %43, i64 5888
  %638 = bitcast i8* %637 to <64 x float>*
  %639 = load <64 x float>, <64 x float>* %638, align 64, !tbaa !6862
  %640 = fadd <64 x float> %639, %348
  %641 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %640, <64 x float> %351, <64 x float> %354)
  %642 = mul i64 %indvars.iv43, 7696581394432
  %sext53 = add i64 %642, 6322191859712
  %643 = ashr exact i64 %sext53, 32
  %644 = getelementptr inbounds float, float* %22, i64 %643
  %645 = bitcast float* %644 to <64 x float>*
  %646 = load <64 x float>, <64 x float>* %645, align 64, !tbaa !6880
  %647 = fadd <64 x float> %641, %646
  %648 = fcmp ogt <64 x float> %647, zeroinitializer
  %649 = select <64 x i1> %648, <64 x float> %647, <64 x float> zeroinitializer
  %650 = getelementptr inbounds float, float* %10, i64 %643
  %651 = bitcast float* %650 to <64 x float>*
  store <64 x float> %649, <64 x float>* %651, align 64, !tbaa !6883
  %652 = getelementptr inbounds i8, i8* %43, i64 2560
  %653 = bitcast i8* %652 to <64 x float>*
  %654 = load <64 x float>, <64 x float>* %653, align 64, !tbaa !6862
  %655 = fadd <64 x float> %654, %348
  %656 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %655, <64 x float> %351, <64 x float> %354)
  %657 = mul i64 %indvars.iv43, 7696581394432
  %sext67 = add i64 %657, 2748779069440
  %658 = ashr exact i64 %sext67, 32
  %659 = getelementptr inbounds float, float* %22, i64 %658
  %660 = bitcast float* %659 to <64 x float>*
  %661 = load <64 x float>, <64 x float>* %660, align 64, !tbaa !6880
  %662 = fadd <64 x float> %656, %661
  %663 = fcmp ogt <64 x float> %662, zeroinitializer
  %664 = select <64 x i1> %663, <64 x float> %662, <64 x float> zeroinitializer
  %665 = getelementptr inbounds float, float* %10, i64 %658
  %666 = bitcast float* %665 to <64 x float>*
  store <64 x float> %664, <64 x float>* %666, align 64, !tbaa !6883
  %667 = getelementptr inbounds i8, i8* %43, i64 2816
  %668 = bitcast i8* %667 to <64 x float>*
  %669 = load <64 x float>, <64 x float>* %668, align 64, !tbaa !6862
  %670 = fadd <64 x float> %669, %348
  %671 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %670, <64 x float> %351, <64 x float> %354)
  %672 = mul i64 %indvars.iv43, 7696581394432
  %sext54 = add i64 %672, 3023656976384
  %673 = ashr exact i64 %sext54, 32
  %674 = getelementptr inbounds float, float* %22, i64 %673
  %675 = bitcast float* %674 to <64 x float>*
  %676 = load <64 x float>, <64 x float>* %675, align 64, !tbaa !6880
  %677 = fadd <64 x float> %671, %676
  %678 = fcmp ogt <64 x float> %677, zeroinitializer
  %679 = select <64 x i1> %678, <64 x float> %677, <64 x float> zeroinitializer
  %680 = getelementptr inbounds float, float* %10, i64 %673
  %681 = bitcast float* %680 to <64 x float>*
  store <64 x float> %679, <64 x float>* %681, align 64, !tbaa !6883
  %682 = getelementptr inbounds i8, i8* %43, i64 6144
  %683 = bitcast i8* %682 to <64 x float>*
  %684 = load <64 x float>, <64 x float>* %683, align 64, !tbaa !6862
  %685 = fadd <64 x float> %684, %348
  %686 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %685, <64 x float> %351, <64 x float> %354)
  %687 = mul i64 %indvars.iv43, 7696581394432
  %sext68 = add i64 %687, 6597069766656
  %688 = ashr exact i64 %sext68, 32
  %689 = getelementptr inbounds float, float* %22, i64 %688
  %690 = bitcast float* %689 to <64 x float>*
  %691 = load <64 x float>, <64 x float>* %690, align 64, !tbaa !6880
  %692 = fadd <64 x float> %686, %691
  %693 = fcmp ogt <64 x float> %692, zeroinitializer
  %694 = select <64 x i1> %693, <64 x float> %692, <64 x float> zeroinitializer
  %695 = getelementptr inbounds float, float* %10, i64 %688
  %696 = bitcast float* %695 to <64 x float>*
  store <64 x float> %694, <64 x float>* %696, align 64, !tbaa !6883
  %697 = getelementptr inbounds i8, i8* %43, i64 6400
  %698 = bitcast i8* %697 to <64 x float>*
  %699 = load <64 x float>, <64 x float>* %698, align 64, !tbaa !6862
  %700 = fadd <64 x float> %699, %348
  %701 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %700, <64 x float> %351, <64 x float> %354)
  %702 = mul i64 %indvars.iv43, 7696581394432
  %sext55 = add i64 %702, 6871947673600
  %703 = ashr exact i64 %sext55, 32
  %704 = getelementptr inbounds float, float* %22, i64 %703
  %705 = bitcast float* %704 to <64 x float>*
  %706 = load <64 x float>, <64 x float>* %705, align 64, !tbaa !6880
  %707 = fadd <64 x float> %701, %706
  %708 = fcmp ogt <64 x float> %707, zeroinitializer
  %709 = select <64 x i1> %708, <64 x float> %707, <64 x float> zeroinitializer
  %710 = getelementptr inbounds float, float* %10, i64 %703
  %711 = bitcast float* %710 to <64 x float>*
  store <64 x float> %709, <64 x float>* %711, align 64, !tbaa !6883
  %712 = getelementptr inbounds i8, i8* %43, i64 3072
  %713 = bitcast i8* %712 to <64 x float>*
  %714 = load <64 x float>, <64 x float>* %713, align 64, !tbaa !6862
  %715 = fadd <64 x float> %714, %348
  %716 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %715, <64 x float> %351, <64 x float> %354)
  %717 = mul i64 %indvars.iv43, 7696581394432
  %sext69 = add i64 %717, 3298534883328
  %718 = ashr exact i64 %sext69, 32
  %719 = getelementptr inbounds float, float* %22, i64 %718
  %720 = bitcast float* %719 to <64 x float>*
  %721 = load <64 x float>, <64 x float>* %720, align 64, !tbaa !6880
  %722 = fadd <64 x float> %716, %721
  %723 = fcmp ogt <64 x float> %722, zeroinitializer
  %724 = select <64 x i1> %723, <64 x float> %722, <64 x float> zeroinitializer
  %725 = getelementptr inbounds float, float* %10, i64 %718
  %726 = bitcast float* %725 to <64 x float>*
  store <64 x float> %724, <64 x float>* %726, align 64, !tbaa !6883
  %727 = getelementptr inbounds i8, i8* %43, i64 3328
  %728 = bitcast i8* %727 to <64 x float>*
  %729 = load <64 x float>, <64 x float>* %728, align 64, !tbaa !6862
  %730 = fadd <64 x float> %729, %348
  %731 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %730, <64 x float> %351, <64 x float> %354)
  %732 = mul i64 %indvars.iv43, 7696581394432
  %sext56 = add i64 %732, 3573412790272
  %733 = ashr exact i64 %sext56, 32
  %734 = getelementptr inbounds float, float* %22, i64 %733
  %735 = bitcast float* %734 to <64 x float>*
  %736 = load <64 x float>, <64 x float>* %735, align 64, !tbaa !6880
  %737 = fadd <64 x float> %731, %736
  %738 = fcmp ogt <64 x float> %737, zeroinitializer
  %739 = select <64 x i1> %738, <64 x float> %737, <64 x float> zeroinitializer
  %740 = getelementptr inbounds float, float* %10, i64 %733
  %741 = bitcast float* %740 to <64 x float>*
  store <64 x float> %739, <64 x float>* %741, align 64, !tbaa !6883
  %742 = getelementptr inbounds i8, i8* %43, i64 6656
  %743 = bitcast i8* %742 to <64 x float>*
  %744 = load <64 x float>, <64 x float>* %743, align 64, !tbaa !6862
  %745 = fadd <64 x float> %744, %348
  %746 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %745, <64 x float> %351, <64 x float> %354)
  %747 = mul i64 %indvars.iv43, 7696581394432
  %sext70 = add i64 %747, 7146825580544
  %748 = ashr exact i64 %sext70, 32
  %749 = getelementptr inbounds float, float* %22, i64 %748
  %750 = bitcast float* %749 to <64 x float>*
  %751 = load <64 x float>, <64 x float>* %750, align 64, !tbaa !6880
  %752 = fadd <64 x float> %746, %751
  %753 = fcmp ogt <64 x float> %752, zeroinitializer
  %754 = select <64 x i1> %753, <64 x float> %752, <64 x float> zeroinitializer
  %755 = getelementptr inbounds float, float* %10, i64 %748
  %756 = bitcast float* %755 to <64 x float>*
  store <64 x float> %754, <64 x float>* %756, align 64, !tbaa !6883
  %757 = getelementptr inbounds i8, i8* %43, i64 6912
  %758 = bitcast i8* %757 to <64 x float>*
  %759 = load <64 x float>, <64 x float>* %758, align 64, !tbaa !6862
  %760 = fadd <64 x float> %759, %348
  %761 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %760, <64 x float> %351, <64 x float> %354)
  %762 = mul i64 %indvars.iv43, 7696581394432
  %sext57 = add i64 %762, 7421703487488
  %763 = ashr exact i64 %sext57, 32
  %764 = getelementptr inbounds float, float* %22, i64 %763
  %765 = bitcast float* %764 to <64 x float>*
  %766 = load <64 x float>, <64 x float>* %765, align 64, !tbaa !6880
  %767 = fadd <64 x float> %761, %766
  %768 = fcmp ogt <64 x float> %767, zeroinitializer
  %769 = select <64 x i1> %768, <64 x float> %767, <64 x float> zeroinitializer
  %770 = getelementptr inbounds float, float* %10, i64 %763
  %771 = bitcast float* %770 to <64 x float>*
  store <64 x float> %769, <64 x float>* %771, align 64, !tbaa !6883
  %772 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %773 = tail call i32 %772(i32 1, i32 %25, i8* nonnull %43)
  %indvars.iv.next44 = add nsw i64 %indvars.iv43, 1
  %774 = icmp slt i64 %indvars.iv.next44, %41
  br i1 %774, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_43(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.521, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !6886
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.522, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !6900
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.523, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !6902
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !6916
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 2
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !6918
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 28
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !6921
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 28
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !6923
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 64
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !6927
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 50176, i32 1792, i32 64, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !6938
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 100352
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.524, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !6942
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !6956
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !6958
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 28
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.272, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !6961
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 28
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.273, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !6963
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 128
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !6967
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 100352, i32 3584, i32 128, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !6978
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 100352
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.314, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_43_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_43_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %43, align 8
  %3 = getelementptr inbounds %43, %43* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %43, %43* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %43* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.525, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.525(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 27
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 28
  %14 = select i1 %13, i32 %12, i32 28
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 28
  %18 = select i1 %17, i32 %16, i32 28
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 3584
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = mul i32 %25, 1792
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %28 = shl i64 %indvars.iv7, 7
  %29 = add nsw i64 %28, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %30 = shl i32 %indvars.iv7.tr, 6
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %27
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %34 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %35 = shl nsw i64 %indvars.iv, 4
  %36 = add nsw i64 %29, %35
  %37 = trunc i64 %35 to i32
  %38 = insertelement <16 x i32> undef, i32 %37, i32 0
  %39 = trunc i64 %35 to i32
  %40 = or i32 %39, 1
  %41 = insertelement <16 x i32> %38, i32 %40, i32 1
  %42 = trunc i64 %35 to i32
  %43 = or i32 %42, 2
  %44 = insertelement <16 x i32> %41, i32 %43, i32 2
  %45 = trunc i64 %35 to i32
  %46 = or i32 %45, 3
  %47 = insertelement <16 x i32> %44, i32 %46, i32 3
  %48 = trunc i64 %35 to i32
  %49 = or i32 %48, 4
  %50 = insertelement <16 x i32> %47, i32 %49, i32 4
  %51 = trunc i64 %35 to i32
  %52 = or i32 %51, 5
  %53 = insertelement <16 x i32> %50, i32 %52, i32 5
  %54 = trunc i64 %35 to i32
  %55 = or i32 %54, 6
  %56 = insertelement <16 x i32> %53, i32 %55, i32 6
  %57 = trunc i64 %35 to i32
  %58 = or i32 %57, 7
  %59 = insertelement <16 x i32> %56, i32 %58, i32 7
  %60 = trunc i64 %35 to i32
  %61 = or i32 %60, 8
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  %63 = trunc i64 %35 to i32
  %64 = or i32 %63, 9
  %65 = insertelement <16 x i32> %62, i32 %64, i32 9
  %66 = trunc i64 %35 to i32
  %67 = or i32 %66, 10
  %68 = insertelement <16 x i32> %65, i32 %67, i32 10
  %69 = trunc i64 %35 to i32
  %70 = or i32 %69, 11
  %71 = insertelement <16 x i32> %68, i32 %70, i32 11
  %72 = trunc i64 %35 to i32
  %73 = or i32 %72, 12
  %74 = insertelement <16 x i32> %71, i32 %73, i32 12
  %75 = trunc i64 %35 to i32
  %76 = or i32 %75, 13
  %77 = insertelement <16 x i32> %74, i32 %76, i32 13
  %78 = trunc i64 %35 to i32
  %79 = or i32 %78, 14
  %80 = insertelement <16 x i32> %77, i32 %79, i32 14
  %81 = trunc i64 %35 to i32
  %82 = or i32 %81, 15
  %83 = insertelement <16 x i32> %80, i32 %82, i32 15
  %84 = sdiv <16 x i32> %83, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %85 = mul <16 x i32> %84, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %86 = sub <16 x i32> %83, %85
  %87 = icmp sgt <16 x i32> %86, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %87, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %88 = sext <16 x i1> %not. to <16 x i32>
  %89 = add nsw <16 x i32> %84, %88
  %90 = mul nsw <16 x i32> %89, <i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176, i32 50176>
  %91 = add nsw <16 x i32> %86, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %92 = select <16 x i1> %87, <16 x i32> %86, <16 x i32> %91
  %93 = add <16 x i32> %33, %92
  %94 = add <16 x i32> %93, %90
  %95 = extractelement <16 x i32> %94, i64 0
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !6982
  %99 = insertelement <16 x float> undef, float %98, i32 0
  %100 = extractelement <16 x i32> %94, i64 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !6982
  %104 = insertelement <16 x float> %99, float %103, i32 1
  %105 = extractelement <16 x i32> %94, i64 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !6982
  %109 = insertelement <16 x float> %104, float %108, i32 2
  %110 = extractelement <16 x i32> %94, i64 3
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !6982
  %114 = insertelement <16 x float> %109, float %113, i32 3
  %115 = extractelement <16 x i32> %94, i64 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !6982
  %119 = insertelement <16 x float> %114, float %118, i32 4
  %120 = extractelement <16 x i32> %94, i64 5
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !6982
  %124 = insertelement <16 x float> %119, float %123, i32 5
  %125 = extractelement <16 x i32> %94, i64 6
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !6982
  %129 = insertelement <16 x float> %124, float %128, i32 6
  %130 = extractelement <16 x i32> %94, i64 7
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !6982
  %134 = insertelement <16 x float> %129, float %133, i32 7
  %135 = extractelement <16 x i32> %94, i64 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !6982
  %139 = insertelement <16 x float> %134, float %138, i32 8
  %140 = extractelement <16 x i32> %94, i64 9
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !6982
  %144 = insertelement <16 x float> %139, float %143, i32 9
  %145 = extractelement <16 x i32> %94, i64 10
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !6982
  %149 = insertelement <16 x float> %144, float %148, i32 10
  %150 = extractelement <16 x i32> %94, i64 11
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !6982
  %154 = insertelement <16 x float> %149, float %153, i32 11
  %155 = extractelement <16 x i32> %94, i64 12
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !6982
  %159 = insertelement <16 x float> %154, float %158, i32 12
  %160 = extractelement <16 x i32> %94, i64 13
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !6982
  %164 = insertelement <16 x float> %159, float %163, i32 13
  %165 = extractelement <16 x i32> %94, i64 14
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !6982
  %169 = insertelement <16 x float> %164, float %168, i32 14
  %170 = extractelement <16 x i32> %94, i64 15
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !6982
  %174 = insertelement <16 x float> %169, float %173, i32 15
  %175 = getelementptr inbounds float, float* %4, i64 %36
  %176 = bitcast float* %175 to <16 x float>*
  store <16 x float> %174, <16 x float>* %176, align 64, !tbaa !6985
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 8
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 28
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_4(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.526, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !6988
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !7002
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !7005
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !7007
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.527, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !7011
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.528, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.529, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.530, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.531, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !7013
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !7027
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !7029
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 56
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !7032
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 56
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !7034
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 256
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.196, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !7038
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 802816, i32 14336, i32 256, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !7049
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 802816
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.197, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !7053
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 4
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.368, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !7067
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !7069
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !7072
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !7074
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 256
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.171, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !7078
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !7080
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 8192, i32 8192, i32 32, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !7091
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 8192
  %187 = load i64, i64* %47, align 8, !tbaa !7095
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 8192
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.532, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !7097
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !7111
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 4
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.370, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !7113
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !7116
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !7118
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !7122
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 32, i32 32, i32 32, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !7133
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 128
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.533, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !7137
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !7151
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 4
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.372, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !7153
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !7156
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !7158
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 32
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !7162
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 32, i32 32, i32 32, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !7173
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 128
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.534, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !7177
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !7191
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 4
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.374, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !7193
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 28
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.535, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !7196
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 28
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.536, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !7198
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 32
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !7202
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 25088, i32 896, i32 32, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !7213
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 100352
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.537, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_4_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_4_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = alloca %44, align 8
  %7 = getelementptr inbounds %44, %44* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %44, %44* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %44, %44* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %44, %44* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %44, %44* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %44, %44* %6, i64 0, i32 5
  store i32 %5, i32* %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %44* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.538, i8* nonnull %14, i32 0)
  ret i32 %15
}

define private i32 @__tvm_parallel_lambda.538(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 111
  %23 = sdiv i32 %22, %21
  %24 = mul nsw i32 %23, %0
  %25 = icmp slt i32 %24, 112
  %26 = select i1 %25, i32 %24, i32 112
  %27 = add nsw i32 %0, 1
  %28 = mul nsw i32 %23, %27
  %29 = icmp slt i32 %28, 112
  %30 = select i1 %29, i32 %28, i32 112
  %31 = icmp slt i32 %26, %30
  br i1 %31, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %32 = add i32 %26, 1
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, -1
  %35 = sext i32 %30 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_end6.3
  %indvars.iv45 = phi i64 [ %34, %for_body.preheader ], [ %indvars.iv.next46, %for_end6.3 ]
  %36 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %37 = tail call i8* %36(i32 1, i32 %19, i64 3584, i32 2, i32 32)
  %38 = trunc i64 %indvars.iv45 to i32
  %39 = srem i32 %38, 28
  %40 = mul nsw i32 %39, 28672
  %41 = sdiv i32 %38, 28
  %42 = shl i32 %41, 13
  %43 = sext i32 %42 to i64
  %44 = sext i32 %40 to i64
  %45 = bitcast i8* %37 to <32 x float>*
  %46 = getelementptr inbounds i8, i8* %37, i64 128
  %47 = bitcast i8* %46 to <32 x float>*
  %48 = getelementptr inbounds i8, i8* %37, i64 256
  %49 = bitcast i8* %48 to <32 x float>*
  %50 = getelementptr inbounds i8, i8* %37, i64 384
  %51 = bitcast i8* %50 to <32 x float>*
  %52 = getelementptr inbounds i8, i8* %37, i64 512
  %53 = bitcast i8* %52 to <32 x float>*
  %54 = getelementptr inbounds i8, i8* %37, i64 640
  %55 = bitcast i8* %54 to <32 x float>*
  %56 = getelementptr inbounds i8, i8* %37, i64 768
  %57 = bitcast i8* %56 to <32 x float>*
  call void @llvm.memset.p0i8.i64(i8* align 64 %37, i8 0, i64 896, i1 false)
  br label %for_body5

for_end:                                          ; preds = %for_end6.3, %entry
  ret i32 0

for_body5:                                        ; preds = %for_body5, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_body5 ]
  %58 = phi <32 x float> [ zeroinitializer, %for_body ], [ %111, %for_body5 ]
  %59 = phi <32 x float> [ zeroinitializer, %for_body ], [ %105, %for_body5 ]
  %60 = phi <32 x float> [ zeroinitializer, %for_body ], [ %99, %for_body5 ]
  %61 = phi <32 x float> [ zeroinitializer, %for_body ], [ %93, %for_body5 ]
  %62 = phi <32 x float> [ zeroinitializer, %for_body ], [ %87, %for_body5 ]
  %63 = phi <32 x float> [ zeroinitializer, %for_body ], [ %81, %for_body5 ]
  %64 = phi <32 x float> [ zeroinitializer, %for_body ], [ %75, %for_body5 ]
  %65 = add nsw i64 %indvars.iv, %44
  %66 = getelementptr inbounds float, float* %4, i64 %65
  %67 = load float, float* %66, align 4, !tbaa !7217
  %68 = insertelement <32 x float> undef, float %67, i32 0
  %69 = shufflevector <32 x float> %68, <32 x float> undef, <32 x i32> zeroinitializer
  %70 = shl i64 %indvars.iv, 5
  %71 = add nuw nsw i64 %70, %43
  %72 = getelementptr inbounds float, float* %7, i64 %71
  %73 = bitcast float* %72 to <32 x float>*
  %74 = load <32 x float>, <32 x float>* %73, align 64, !tbaa !7220
  %75 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %69, <32 x float> %74, <32 x float> %64)
  %76 = add nsw i64 %65, 512
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !7217
  %79 = insertelement <32 x float> undef, float %78, i32 0
  %80 = shufflevector <32 x float> %79, <32 x float> undef, <32 x i32> zeroinitializer
  %81 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %80, <32 x float> %74, <32 x float> %63)
  %82 = add nsw i64 %65, 1024
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = load float, float* %83, align 4, !tbaa !7217
  %85 = insertelement <32 x float> undef, float %84, i32 0
  %86 = shufflevector <32 x float> %85, <32 x float> undef, <32 x i32> zeroinitializer
  %87 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %86, <32 x float> %74, <32 x float> %62)
  %88 = add nsw i64 %65, 1536
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !7217
  %91 = insertelement <32 x float> undef, float %90, i32 0
  %92 = shufflevector <32 x float> %91, <32 x float> undef, <32 x i32> zeroinitializer
  %93 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %92, <32 x float> %74, <32 x float> %61)
  %94 = add nsw i64 %65, 2048
  %95 = getelementptr inbounds float, float* %4, i64 %94
  %96 = load float, float* %95, align 4, !tbaa !7217
  %97 = insertelement <32 x float> undef, float %96, i32 0
  %98 = shufflevector <32 x float> %97, <32 x float> undef, <32 x i32> zeroinitializer
  %99 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %98, <32 x float> %74, <32 x float> %60)
  %100 = add nsw i64 %65, 2560
  %101 = getelementptr inbounds float, float* %4, i64 %100
  %102 = load float, float* %101, align 4, !tbaa !7217
  %103 = insertelement <32 x float> undef, float %102, i32 0
  %104 = shufflevector <32 x float> %103, <32 x float> undef, <32 x i32> zeroinitializer
  %105 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %104, <32 x float> %74, <32 x float> %59)
  %106 = add nsw i64 %65, 3072
  %107 = getelementptr inbounds float, float* %4, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !7217
  %109 = insertelement <32 x float> undef, float %108, i32 0
  %110 = shufflevector <32 x float> %109, <32 x float> undef, <32 x i32> zeroinitializer
  %111 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %110, <32 x float> %74, <32 x float> %58)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  store <32 x float> %75, <32 x float>* %45, align 64, !tbaa !7223
  store <32 x float> %81, <32 x float>* %47, align 64, !tbaa !7223
  store <32 x float> %87, <32 x float>* %49, align 64, !tbaa !7223
  store <32 x float> %93, <32 x float>* %51, align 64, !tbaa !7223
  store <32 x float> %99, <32 x float>* %53, align 64, !tbaa !7223
  store <32 x float> %105, <32 x float>* %55, align 64, !tbaa !7223
  store <32 x float> %111, <32 x float>* %57, align 64, !tbaa !7223
  %112 = getelementptr inbounds i8, i8* %37, i64 896
  %113 = bitcast i8* %112 to <32 x float>*
  %114 = getelementptr inbounds i8, i8* %37, i64 1024
  %115 = bitcast i8* %114 to <32 x float>*
  %116 = getelementptr inbounds i8, i8* %37, i64 1152
  %117 = bitcast i8* %116 to <32 x float>*
  %118 = getelementptr inbounds i8, i8* %37, i64 1280
  %119 = bitcast i8* %118 to <32 x float>*
  %120 = getelementptr inbounds i8, i8* %37, i64 1408
  %121 = bitcast i8* %120 to <32 x float>*
  %122 = getelementptr inbounds i8, i8* %37, i64 1536
  %123 = bitcast i8* %122 to <32 x float>*
  %124 = getelementptr inbounds i8, i8* %37, i64 1664
  %125 = bitcast i8* %124 to <32 x float>*
  %126 = or i64 %44, 3584
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %112, i8 0, i64 896, i1 false)
  br label %for_body5.1

for_body5.1:                                      ; preds = %for_body5.1, %for_end6
  %indvars.iv.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next.1, %for_body5.1 ]
  %127 = phi <32 x float> [ zeroinitializer, %for_end6 ], [ %180, %for_body5.1 ]
  %128 = phi <32 x float> [ zeroinitializer, %for_end6 ], [ %174, %for_body5.1 ]
  %129 = phi <32 x float> [ zeroinitializer, %for_end6 ], [ %168, %for_body5.1 ]
  %130 = phi <32 x float> [ zeroinitializer, %for_end6 ], [ %162, %for_body5.1 ]
  %131 = phi <32 x float> [ zeroinitializer, %for_end6 ], [ %156, %for_body5.1 ]
  %132 = phi <32 x float> [ zeroinitializer, %for_end6 ], [ %150, %for_body5.1 ]
  %133 = phi <32 x float> [ zeroinitializer, %for_end6 ], [ %144, %for_body5.1 ]
  %134 = add nsw i64 %126, %indvars.iv.1
  %135 = getelementptr inbounds float, float* %4, i64 %134
  %136 = load float, float* %135, align 4, !tbaa !7217
  %137 = insertelement <32 x float> undef, float %136, i32 0
  %138 = shufflevector <32 x float> %137, <32 x float> undef, <32 x i32> zeroinitializer
  %139 = shl i64 %indvars.iv.1, 5
  %140 = add nuw nsw i64 %139, %43
  %141 = getelementptr inbounds float, float* %7, i64 %140
  %142 = bitcast float* %141 to <32 x float>*
  %143 = load <32 x float>, <32 x float>* %142, align 64, !tbaa !7220
  %144 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %138, <32 x float> %143, <32 x float> %133)
  %145 = add nsw i64 %134, 512
  %146 = getelementptr inbounds float, float* %4, i64 %145
  %147 = load float, float* %146, align 4, !tbaa !7217
  %148 = insertelement <32 x float> undef, float %147, i32 0
  %149 = shufflevector <32 x float> %148, <32 x float> undef, <32 x i32> zeroinitializer
  %150 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %149, <32 x float> %143, <32 x float> %132)
  %151 = add nsw i64 %134, 1024
  %152 = getelementptr inbounds float, float* %4, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !7217
  %154 = insertelement <32 x float> undef, float %153, i32 0
  %155 = shufflevector <32 x float> %154, <32 x float> undef, <32 x i32> zeroinitializer
  %156 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %155, <32 x float> %143, <32 x float> %131)
  %157 = add nsw i64 %134, 1536
  %158 = getelementptr inbounds float, float* %4, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !7217
  %160 = insertelement <32 x float> undef, float %159, i32 0
  %161 = shufflevector <32 x float> %160, <32 x float> undef, <32 x i32> zeroinitializer
  %162 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %161, <32 x float> %143, <32 x float> %130)
  %163 = add nsw i64 %134, 2048
  %164 = getelementptr inbounds float, float* %4, i64 %163
  %165 = load float, float* %164, align 4, !tbaa !7217
  %166 = insertelement <32 x float> undef, float %165, i32 0
  %167 = shufflevector <32 x float> %166, <32 x float> undef, <32 x i32> zeroinitializer
  %168 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %167, <32 x float> %143, <32 x float> %129)
  %169 = add nsw i64 %134, 2560
  %170 = getelementptr inbounds float, float* %4, i64 %169
  %171 = load float, float* %170, align 4, !tbaa !7217
  %172 = insertelement <32 x float> undef, float %171, i32 0
  %173 = shufflevector <32 x float> %172, <32 x float> undef, <32 x i32> zeroinitializer
  %174 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %173, <32 x float> %143, <32 x float> %128)
  %175 = add nsw i64 %134, 3072
  %176 = getelementptr inbounds float, float* %4, i64 %175
  %177 = load float, float* %176, align 4, !tbaa !7217
  %178 = insertelement <32 x float> undef, float %177, i32 0
  %179 = shufflevector <32 x float> %178, <32 x float> undef, <32 x i32> zeroinitializer
  %180 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %179, <32 x float> %143, <32 x float> %127)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 256
  br i1 %exitcond.1, label %for_end6.1, label %for_body5.1, !prof !50

for_end6.1:                                       ; preds = %for_body5.1
  store <32 x float> %144, <32 x float>* %113, align 64, !tbaa !7223
  store <32 x float> %150, <32 x float>* %115, align 64, !tbaa !7223
  store <32 x float> %156, <32 x float>* %117, align 64, !tbaa !7223
  store <32 x float> %162, <32 x float>* %119, align 64, !tbaa !7223
  store <32 x float> %168, <32 x float>* %121, align 64, !tbaa !7223
  store <32 x float> %174, <32 x float>* %123, align 64, !tbaa !7223
  store <32 x float> %180, <32 x float>* %125, align 64, !tbaa !7223
  %181 = getelementptr inbounds i8, i8* %37, i64 1792
  %182 = bitcast i8* %181 to <32 x float>*
  %183 = getelementptr inbounds i8, i8* %37, i64 1920
  %184 = bitcast i8* %183 to <32 x float>*
  %185 = getelementptr inbounds i8, i8* %37, i64 2048
  %186 = bitcast i8* %185 to <32 x float>*
  %187 = getelementptr inbounds i8, i8* %37, i64 2176
  %188 = bitcast i8* %187 to <32 x float>*
  %189 = getelementptr inbounds i8, i8* %37, i64 2304
  %190 = bitcast i8* %189 to <32 x float>*
  %191 = getelementptr inbounds i8, i8* %37, i64 2432
  %192 = bitcast i8* %191 to <32 x float>*
  %193 = getelementptr inbounds i8, i8* %37, i64 2560
  %194 = bitcast i8* %193 to <32 x float>*
  %195 = add nsw i64 %44, 7168
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %181, i8 0, i64 896, i1 false)
  br label %for_body5.2

for_body5.2:                                      ; preds = %for_body5.2, %for_end6.1
  %indvars.iv.2 = phi i64 [ 0, %for_end6.1 ], [ %indvars.iv.next.2, %for_body5.2 ]
  %196 = phi <32 x float> [ zeroinitializer, %for_end6.1 ], [ %249, %for_body5.2 ]
  %197 = phi <32 x float> [ zeroinitializer, %for_end6.1 ], [ %243, %for_body5.2 ]
  %198 = phi <32 x float> [ zeroinitializer, %for_end6.1 ], [ %237, %for_body5.2 ]
  %199 = phi <32 x float> [ zeroinitializer, %for_end6.1 ], [ %231, %for_body5.2 ]
  %200 = phi <32 x float> [ zeroinitializer, %for_end6.1 ], [ %225, %for_body5.2 ]
  %201 = phi <32 x float> [ zeroinitializer, %for_end6.1 ], [ %219, %for_body5.2 ]
  %202 = phi <32 x float> [ zeroinitializer, %for_end6.1 ], [ %213, %for_body5.2 ]
  %203 = add nsw i64 %195, %indvars.iv.2
  %204 = getelementptr inbounds float, float* %4, i64 %203
  %205 = load float, float* %204, align 4, !tbaa !7217
  %206 = insertelement <32 x float> undef, float %205, i32 0
  %207 = shufflevector <32 x float> %206, <32 x float> undef, <32 x i32> zeroinitializer
  %208 = shl i64 %indvars.iv.2, 5
  %209 = add nuw nsw i64 %208, %43
  %210 = getelementptr inbounds float, float* %7, i64 %209
  %211 = bitcast float* %210 to <32 x float>*
  %212 = load <32 x float>, <32 x float>* %211, align 64, !tbaa !7220
  %213 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %207, <32 x float> %212, <32 x float> %202)
  %214 = add nsw i64 %203, 512
  %215 = getelementptr inbounds float, float* %4, i64 %214
  %216 = load float, float* %215, align 4, !tbaa !7217
  %217 = insertelement <32 x float> undef, float %216, i32 0
  %218 = shufflevector <32 x float> %217, <32 x float> undef, <32 x i32> zeroinitializer
  %219 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %218, <32 x float> %212, <32 x float> %201)
  %220 = add nsw i64 %203, 1024
  %221 = getelementptr inbounds float, float* %4, i64 %220
  %222 = load float, float* %221, align 4, !tbaa !7217
  %223 = insertelement <32 x float> undef, float %222, i32 0
  %224 = shufflevector <32 x float> %223, <32 x float> undef, <32 x i32> zeroinitializer
  %225 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %224, <32 x float> %212, <32 x float> %200)
  %226 = add nsw i64 %203, 1536
  %227 = getelementptr inbounds float, float* %4, i64 %226
  %228 = load float, float* %227, align 4, !tbaa !7217
  %229 = insertelement <32 x float> undef, float %228, i32 0
  %230 = shufflevector <32 x float> %229, <32 x float> undef, <32 x i32> zeroinitializer
  %231 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %230, <32 x float> %212, <32 x float> %199)
  %232 = add nsw i64 %203, 2048
  %233 = getelementptr inbounds float, float* %4, i64 %232
  %234 = load float, float* %233, align 4, !tbaa !7217
  %235 = insertelement <32 x float> undef, float %234, i32 0
  %236 = shufflevector <32 x float> %235, <32 x float> undef, <32 x i32> zeroinitializer
  %237 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %236, <32 x float> %212, <32 x float> %198)
  %238 = add nsw i64 %203, 2560
  %239 = getelementptr inbounds float, float* %4, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !7217
  %241 = insertelement <32 x float> undef, float %240, i32 0
  %242 = shufflevector <32 x float> %241, <32 x float> undef, <32 x i32> zeroinitializer
  %243 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %212, <32 x float> %197)
  %244 = add nsw i64 %203, 3072
  %245 = getelementptr inbounds float, float* %4, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !7217
  %247 = insertelement <32 x float> undef, float %246, i32 0
  %248 = shufflevector <32 x float> %247, <32 x float> undef, <32 x i32> zeroinitializer
  %249 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %212, <32 x float> %196)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 256
  br i1 %exitcond.2, label %for_end6.2, label %for_body5.2, !prof !50

for_end6.2:                                       ; preds = %for_body5.2
  store <32 x float> %213, <32 x float>* %182, align 64, !tbaa !7223
  store <32 x float> %219, <32 x float>* %184, align 64, !tbaa !7223
  store <32 x float> %225, <32 x float>* %186, align 64, !tbaa !7223
  store <32 x float> %231, <32 x float>* %188, align 64, !tbaa !7223
  store <32 x float> %237, <32 x float>* %190, align 64, !tbaa !7223
  store <32 x float> %243, <32 x float>* %192, align 64, !tbaa !7223
  store <32 x float> %249, <32 x float>* %194, align 64, !tbaa !7223
  %250 = getelementptr inbounds i8, i8* %37, i64 2688
  %251 = bitcast i8* %250 to <32 x float>*
  %252 = getelementptr inbounds i8, i8* %37, i64 2816
  %253 = bitcast i8* %252 to <32 x float>*
  %254 = getelementptr inbounds i8, i8* %37, i64 2944
  %255 = bitcast i8* %254 to <32 x float>*
  %256 = getelementptr inbounds i8, i8* %37, i64 3072
  %257 = bitcast i8* %256 to <32 x float>*
  %258 = getelementptr inbounds i8, i8* %37, i64 3200
  %259 = bitcast i8* %258 to <32 x float>*
  %260 = getelementptr inbounds i8, i8* %37, i64 3328
  %261 = bitcast i8* %260 to <32 x float>*
  %262 = getelementptr inbounds i8, i8* %37, i64 3456
  %263 = bitcast i8* %262 to <32 x float>*
  %264 = add nsw i64 %44, 10752
  call void @llvm.memset.p0i8.i64(i8* nonnull align 64 %250, i8 0, i64 896, i1 false)
  br label %for_body5.3

for_body5.3:                                      ; preds = %for_body5.3, %for_end6.2
  %indvars.iv.3 = phi i64 [ 0, %for_end6.2 ], [ %indvars.iv.next.3, %for_body5.3 ]
  %265 = phi <32 x float> [ zeroinitializer, %for_end6.2 ], [ %318, %for_body5.3 ]
  %266 = phi <32 x float> [ zeroinitializer, %for_end6.2 ], [ %312, %for_body5.3 ]
  %267 = phi <32 x float> [ zeroinitializer, %for_end6.2 ], [ %306, %for_body5.3 ]
  %268 = phi <32 x float> [ zeroinitializer, %for_end6.2 ], [ %300, %for_body5.3 ]
  %269 = phi <32 x float> [ zeroinitializer, %for_end6.2 ], [ %294, %for_body5.3 ]
  %270 = phi <32 x float> [ zeroinitializer, %for_end6.2 ], [ %288, %for_body5.3 ]
  %271 = phi <32 x float> [ zeroinitializer, %for_end6.2 ], [ %282, %for_body5.3 ]
  %272 = add nsw i64 %264, %indvars.iv.3
  %273 = getelementptr inbounds float, float* %4, i64 %272
  %274 = load float, float* %273, align 4, !tbaa !7217
  %275 = insertelement <32 x float> undef, float %274, i32 0
  %276 = shufflevector <32 x float> %275, <32 x float> undef, <32 x i32> zeroinitializer
  %277 = shl i64 %indvars.iv.3, 5
  %278 = add nuw nsw i64 %277, %43
  %279 = getelementptr inbounds float, float* %7, i64 %278
  %280 = bitcast float* %279 to <32 x float>*
  %281 = load <32 x float>, <32 x float>* %280, align 64, !tbaa !7220
  %282 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %276, <32 x float> %281, <32 x float> %271)
  %283 = add nsw i64 %272, 512
  %284 = getelementptr inbounds float, float* %4, i64 %283
  %285 = load float, float* %284, align 4, !tbaa !7217
  %286 = insertelement <32 x float> undef, float %285, i32 0
  %287 = shufflevector <32 x float> %286, <32 x float> undef, <32 x i32> zeroinitializer
  %288 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %287, <32 x float> %281, <32 x float> %270)
  %289 = add nsw i64 %272, 1024
  %290 = getelementptr inbounds float, float* %4, i64 %289
  %291 = load float, float* %290, align 4, !tbaa !7217
  %292 = insertelement <32 x float> undef, float %291, i32 0
  %293 = shufflevector <32 x float> %292, <32 x float> undef, <32 x i32> zeroinitializer
  %294 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %293, <32 x float> %281, <32 x float> %269)
  %295 = add nsw i64 %272, 1536
  %296 = getelementptr inbounds float, float* %4, i64 %295
  %297 = load float, float* %296, align 4, !tbaa !7217
  %298 = insertelement <32 x float> undef, float %297, i32 0
  %299 = shufflevector <32 x float> %298, <32 x float> undef, <32 x i32> zeroinitializer
  %300 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %299, <32 x float> %281, <32 x float> %268)
  %301 = add nsw i64 %272, 2048
  %302 = getelementptr inbounds float, float* %4, i64 %301
  %303 = load float, float* %302, align 4, !tbaa !7217
  %304 = insertelement <32 x float> undef, float %303, i32 0
  %305 = shufflevector <32 x float> %304, <32 x float> undef, <32 x i32> zeroinitializer
  %306 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %305, <32 x float> %281, <32 x float> %267)
  %307 = add nsw i64 %272, 2560
  %308 = getelementptr inbounds float, float* %4, i64 %307
  %309 = load float, float* %308, align 4, !tbaa !7217
  %310 = insertelement <32 x float> undef, float %309, i32 0
  %311 = shufflevector <32 x float> %310, <32 x float> undef, <32 x i32> zeroinitializer
  %312 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %311, <32 x float> %281, <32 x float> %266)
  %313 = add nsw i64 %272, 3072
  %314 = getelementptr inbounds float, float* %4, i64 %313
  %315 = load float, float* %314, align 4, !tbaa !7217
  %316 = insertelement <32 x float> undef, float %315, i32 0
  %317 = shufflevector <32 x float> %316, <32 x float> undef, <32 x i32> zeroinitializer
  %318 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %317, <32 x float> %281, <32 x float> %265)
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, 256
  br i1 %exitcond.3, label %for_end6.3, label %for_body5.3, !prof !50

for_end6.3:                                       ; preds = %for_body5.3
  store <32 x float> %282, <32 x float>* %251, align 64, !tbaa !7223
  store <32 x float> %288, <32 x float>* %253, align 64, !tbaa !7223
  store <32 x float> %294, <32 x float>* %255, align 64, !tbaa !7223
  store <32 x float> %300, <32 x float>* %257, align 64, !tbaa !7223
  store <32 x float> %306, <32 x float>* %259, align 64, !tbaa !7223
  store <32 x float> %312, <32 x float>* %261, align 64, !tbaa !7223
  store <32 x float> %318, <32 x float>* %263, align 64, !tbaa !7223
  %319 = mul nsw i64 %indvars.iv45, 896
  %320 = shl nsw i32 %41, 5
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds float, float* %13, i64 %321
  %323 = bitcast float* %322 to <32 x float>*
  %324 = load <32 x float>, <32 x float>* %323, align 64, !tbaa !7226
  %325 = getelementptr inbounds float, float* %16, i64 %321
  %326 = bitcast float* %325 to <32 x float>*
  %327 = load <32 x float>, <32 x float>* %326, align 64, !tbaa !7229
  %328 = fadd <32 x float> %75, %324
  %329 = fadd <32 x float> %328, %327
  %330 = fcmp ogt <32 x float> %329, zeroinitializer
  %331 = select <32 x i1> %330, <32 x float> %329, <32 x float> zeroinitializer
  %332 = getelementptr inbounds float, float* %10, i64 %319
  %333 = bitcast float* %332 to <32 x float>*
  store <32 x float> %331, <32 x float>* %333, align 64, !tbaa !7232
  %334 = fadd <32 x float> %81, %324
  %335 = fadd <32 x float> %334, %327
  %336 = fcmp ogt <32 x float> %335, zeroinitializer
  %337 = select <32 x i1> %336, <32 x float> %335, <32 x float> zeroinitializer
  %338 = mul i64 %indvars.iv45, 3848290697216
  %sext = ashr exact i64 %338, 32
  %339 = or i64 %sext, 32
  %340 = getelementptr inbounds float, float* %10, i64 %339
  %341 = bitcast float* %340 to <32 x float>*
  store <32 x float> %337, <32 x float>* %341, align 64, !tbaa !7232
  %342 = fadd <32 x float> %87, %324
  %343 = fadd <32 x float> %342, %327
  %344 = fcmp ogt <32 x float> %343, zeroinitializer
  %345 = select <32 x i1> %344, <32 x float> %343, <32 x float> zeroinitializer
  %346 = mul i64 %indvars.iv45, 3848290697216
  %sext47 = ashr exact i64 %346, 32
  %347 = or i64 %sext47, 64
  %348 = getelementptr inbounds float, float* %10, i64 %347
  %349 = bitcast float* %348 to <32 x float>*
  store <32 x float> %345, <32 x float>* %349, align 64, !tbaa !7232
  %350 = fadd <32 x float> %93, %324
  %351 = fadd <32 x float> %350, %327
  %352 = fcmp ogt <32 x float> %351, zeroinitializer
  %353 = select <32 x i1> %352, <32 x float> %351, <32 x float> zeroinitializer
  %354 = mul i64 %indvars.iv45, 3848290697216
  %sext48 = ashr exact i64 %354, 32
  %355 = or i64 %sext48, 96
  %356 = getelementptr inbounds float, float* %10, i64 %355
  %357 = bitcast float* %356 to <32 x float>*
  store <32 x float> %353, <32 x float>* %357, align 64, !tbaa !7232
  %358 = fadd <32 x float> %99, %324
  %359 = fadd <32 x float> %358, %327
  %360 = fcmp ogt <32 x float> %359, zeroinitializer
  %361 = select <32 x i1> %360, <32 x float> %359, <32 x float> zeroinitializer
  %362 = mul i64 %indvars.iv45, 3848290697216
  %sext49 = add i64 %362, 549755813888
  %363 = ashr exact i64 %sext49, 32
  %364 = getelementptr inbounds float, float* %10, i64 %363
  %365 = bitcast float* %364 to <32 x float>*
  store <32 x float> %361, <32 x float>* %365, align 64, !tbaa !7232
  %366 = fadd <32 x float> %105, %324
  %367 = fadd <32 x float> %366, %327
  %368 = fcmp ogt <32 x float> %367, zeroinitializer
  %369 = select <32 x i1> %368, <32 x float> %367, <32 x float> zeroinitializer
  %370 = mul i64 %indvars.iv45, 3848290697216
  %sext50 = add i64 %370, 687194767360
  %371 = ashr exact i64 %sext50, 32
  %372 = getelementptr inbounds float, float* %10, i64 %371
  %373 = bitcast float* %372 to <32 x float>*
  store <32 x float> %369, <32 x float>* %373, align 64, !tbaa !7232
  %374 = fadd <32 x float> %111, %324
  %375 = fadd <32 x float> %374, %327
  %376 = fcmp ogt <32 x float> %375, zeroinitializer
  %377 = select <32 x i1> %376, <32 x float> %375, <32 x float> zeroinitializer
  %378 = mul i64 %indvars.iv45, 3848290697216
  %sext51 = add i64 %378, 824633720832
  %379 = ashr exact i64 %sext51, 32
  %380 = getelementptr inbounds float, float* %10, i64 %379
  %381 = bitcast float* %380 to <32 x float>*
  store <32 x float> %377, <32 x float>* %381, align 64, !tbaa !7232
  %382 = fadd <32 x float> %144, %324
  %383 = fadd <32 x float> %382, %327
  %384 = fcmp ogt <32 x float> %383, zeroinitializer
  %385 = select <32 x i1> %384, <32 x float> %383, <32 x float> zeroinitializer
  %386 = mul i64 %indvars.iv45, 3848290697216
  %sext52 = add i64 %386, 962072674304
  %387 = ashr exact i64 %sext52, 32
  %388 = getelementptr inbounds float, float* %10, i64 %387
  %389 = bitcast float* %388 to <32 x float>*
  store <32 x float> %385, <32 x float>* %389, align 64, !tbaa !7232
  %390 = fadd <32 x float> %150, %324
  %391 = fadd <32 x float> %390, %327
  %392 = fcmp ogt <32 x float> %391, zeroinitializer
  %393 = select <32 x i1> %392, <32 x float> %391, <32 x float> zeroinitializer
  %394 = mul i64 %indvars.iv45, 3848290697216
  %sext53 = add i64 %394, 1099511627776
  %395 = ashr exact i64 %sext53, 32
  %396 = getelementptr inbounds float, float* %10, i64 %395
  %397 = bitcast float* %396 to <32 x float>*
  store <32 x float> %393, <32 x float>* %397, align 64, !tbaa !7232
  %398 = fadd <32 x float> %156, %324
  %399 = fadd <32 x float> %398, %327
  %400 = fcmp ogt <32 x float> %399, zeroinitializer
  %401 = select <32 x i1> %400, <32 x float> %399, <32 x float> zeroinitializer
  %402 = mul i64 %indvars.iv45, 3848290697216
  %sext54 = add i64 %402, 1236950581248
  %403 = ashr exact i64 %sext54, 32
  %404 = getelementptr inbounds float, float* %10, i64 %403
  %405 = bitcast float* %404 to <32 x float>*
  store <32 x float> %401, <32 x float>* %405, align 64, !tbaa !7232
  %406 = load <32 x float>, <32 x float>* %119, align 64, !tbaa !7223
  %407 = fadd <32 x float> %406, %324
  %408 = fadd <32 x float> %407, %327
  %409 = fcmp ogt <32 x float> %408, zeroinitializer
  %410 = select <32 x i1> %409, <32 x float> %408, <32 x float> zeroinitializer
  %411 = mul i64 %indvars.iv45, 3848290697216
  %sext55 = add i64 %411, 1374389534720
  %412 = ashr exact i64 %sext55, 32
  %413 = getelementptr inbounds float, float* %10, i64 %412
  %414 = bitcast float* %413 to <32 x float>*
  store <32 x float> %410, <32 x float>* %414, align 64, !tbaa !7232
  %415 = load <32 x float>, <32 x float>* %121, align 64, !tbaa !7223
  %416 = fadd <32 x float> %415, %324
  %417 = fadd <32 x float> %416, %327
  %418 = fcmp ogt <32 x float> %417, zeroinitializer
  %419 = select <32 x i1> %418, <32 x float> %417, <32 x float> zeroinitializer
  %420 = mul i64 %indvars.iv45, 3848290697216
  %sext56 = add i64 %420, 1511828488192
  %421 = ashr exact i64 %sext56, 32
  %422 = getelementptr inbounds float, float* %10, i64 %421
  %423 = bitcast float* %422 to <32 x float>*
  store <32 x float> %419, <32 x float>* %423, align 64, !tbaa !7232
  %424 = load <32 x float>, <32 x float>* %123, align 64, !tbaa !7223
  %425 = fadd <32 x float> %424, %324
  %426 = fadd <32 x float> %425, %327
  %427 = fcmp ogt <32 x float> %426, zeroinitializer
  %428 = select <32 x i1> %427, <32 x float> %426, <32 x float> zeroinitializer
  %429 = mul i64 %indvars.iv45, 3848290697216
  %sext57 = add i64 %429, 1649267441664
  %430 = ashr exact i64 %sext57, 32
  %431 = getelementptr inbounds float, float* %10, i64 %430
  %432 = bitcast float* %431 to <32 x float>*
  store <32 x float> %428, <32 x float>* %432, align 64, !tbaa !7232
  %433 = load <32 x float>, <32 x float>* %125, align 64, !tbaa !7223
  %434 = fadd <32 x float> %433, %324
  %435 = fadd <32 x float> %434, %327
  %436 = fcmp ogt <32 x float> %435, zeroinitializer
  %437 = select <32 x i1> %436, <32 x float> %435, <32 x float> zeroinitializer
  %438 = mul i64 %indvars.iv45, 3848290697216
  %sext58 = add i64 %438, 1786706395136
  %439 = ashr exact i64 %sext58, 32
  %440 = getelementptr inbounds float, float* %10, i64 %439
  %441 = bitcast float* %440 to <32 x float>*
  store <32 x float> %437, <32 x float>* %441, align 64, !tbaa !7232
  %442 = load <32 x float>, <32 x float>* %182, align 64, !tbaa !7223
  %443 = fadd <32 x float> %442, %324
  %444 = fadd <32 x float> %443, %327
  %445 = fcmp ogt <32 x float> %444, zeroinitializer
  %446 = select <32 x i1> %445, <32 x float> %444, <32 x float> zeroinitializer
  %447 = mul i64 %indvars.iv45, 3848290697216
  %sext59 = add i64 %447, 1924145348608
  %448 = ashr exact i64 %sext59, 32
  %449 = getelementptr inbounds float, float* %10, i64 %448
  %450 = bitcast float* %449 to <32 x float>*
  store <32 x float> %446, <32 x float>* %450, align 64, !tbaa !7232
  %451 = load <32 x float>, <32 x float>* %184, align 64, !tbaa !7223
  %452 = fadd <32 x float> %451, %324
  %453 = fadd <32 x float> %452, %327
  %454 = fcmp ogt <32 x float> %453, zeroinitializer
  %455 = select <32 x i1> %454, <32 x float> %453, <32 x float> zeroinitializer
  %456 = mul i64 %indvars.iv45, 3848290697216
  %sext60 = add i64 %456, 2061584302080
  %457 = ashr exact i64 %sext60, 32
  %458 = getelementptr inbounds float, float* %10, i64 %457
  %459 = bitcast float* %458 to <32 x float>*
  store <32 x float> %455, <32 x float>* %459, align 64, !tbaa !7232
  %460 = load <32 x float>, <32 x float>* %186, align 64, !tbaa !7223
  %461 = fadd <32 x float> %460, %324
  %462 = fadd <32 x float> %461, %327
  %463 = fcmp ogt <32 x float> %462, zeroinitializer
  %464 = select <32 x i1> %463, <32 x float> %462, <32 x float> zeroinitializer
  %465 = mul i64 %indvars.iv45, 3848290697216
  %sext61 = add i64 %465, 2199023255552
  %466 = ashr exact i64 %sext61, 32
  %467 = getelementptr inbounds float, float* %10, i64 %466
  %468 = bitcast float* %467 to <32 x float>*
  store <32 x float> %464, <32 x float>* %468, align 64, !tbaa !7232
  %469 = load <32 x float>, <32 x float>* %188, align 64, !tbaa !7223
  %470 = fadd <32 x float> %469, %324
  %471 = fadd <32 x float> %470, %327
  %472 = fcmp ogt <32 x float> %471, zeroinitializer
  %473 = select <32 x i1> %472, <32 x float> %471, <32 x float> zeroinitializer
  %474 = mul i64 %indvars.iv45, 3848290697216
  %sext62 = add i64 %474, 2336462209024
  %475 = ashr exact i64 %sext62, 32
  %476 = getelementptr inbounds float, float* %10, i64 %475
  %477 = bitcast float* %476 to <32 x float>*
  store <32 x float> %473, <32 x float>* %477, align 64, !tbaa !7232
  %478 = load <32 x float>, <32 x float>* %190, align 64, !tbaa !7223
  %479 = fadd <32 x float> %478, %324
  %480 = fadd <32 x float> %479, %327
  %481 = fcmp ogt <32 x float> %480, zeroinitializer
  %482 = select <32 x i1> %481, <32 x float> %480, <32 x float> zeroinitializer
  %483 = mul i64 %indvars.iv45, 3848290697216
  %sext63 = add i64 %483, 2473901162496
  %484 = ashr exact i64 %sext63, 32
  %485 = getelementptr inbounds float, float* %10, i64 %484
  %486 = bitcast float* %485 to <32 x float>*
  store <32 x float> %482, <32 x float>* %486, align 64, !tbaa !7232
  %487 = load <32 x float>, <32 x float>* %192, align 64, !tbaa !7223
  %488 = fadd <32 x float> %487, %324
  %489 = fadd <32 x float> %488, %327
  %490 = fcmp ogt <32 x float> %489, zeroinitializer
  %491 = select <32 x i1> %490, <32 x float> %489, <32 x float> zeroinitializer
  %492 = mul i64 %indvars.iv45, 3848290697216
  %sext64 = add i64 %492, 2611340115968
  %493 = ashr exact i64 %sext64, 32
  %494 = getelementptr inbounds float, float* %10, i64 %493
  %495 = bitcast float* %494 to <32 x float>*
  store <32 x float> %491, <32 x float>* %495, align 64, !tbaa !7232
  %496 = load <32 x float>, <32 x float>* %194, align 64, !tbaa !7223
  %497 = fadd <32 x float> %496, %324
  %498 = fadd <32 x float> %497, %327
  %499 = fcmp ogt <32 x float> %498, zeroinitializer
  %500 = select <32 x i1> %499, <32 x float> %498, <32 x float> zeroinitializer
  %501 = mul i64 %indvars.iv45, 3848290697216
  %sext65 = add i64 %501, 2748779069440
  %502 = ashr exact i64 %sext65, 32
  %503 = getelementptr inbounds float, float* %10, i64 %502
  %504 = bitcast float* %503 to <32 x float>*
  store <32 x float> %500, <32 x float>* %504, align 64, !tbaa !7232
  %505 = load <32 x float>, <32 x float>* %251, align 64, !tbaa !7223
  %506 = fadd <32 x float> %505, %324
  %507 = fadd <32 x float> %506, %327
  %508 = fcmp ogt <32 x float> %507, zeroinitializer
  %509 = select <32 x i1> %508, <32 x float> %507, <32 x float> zeroinitializer
  %510 = mul i64 %indvars.iv45, 3848290697216
  %sext66 = add i64 %510, 2886218022912
  %511 = ashr exact i64 %sext66, 32
  %512 = getelementptr inbounds float, float* %10, i64 %511
  %513 = bitcast float* %512 to <32 x float>*
  store <32 x float> %509, <32 x float>* %513, align 64, !tbaa !7232
  %514 = load <32 x float>, <32 x float>* %253, align 64, !tbaa !7223
  %515 = fadd <32 x float> %514, %324
  %516 = fadd <32 x float> %515, %327
  %517 = fcmp ogt <32 x float> %516, zeroinitializer
  %518 = select <32 x i1> %517, <32 x float> %516, <32 x float> zeroinitializer
  %519 = mul i64 %indvars.iv45, 3848290697216
  %sext67 = add i64 %519, 3023656976384
  %520 = ashr exact i64 %sext67, 32
  %521 = getelementptr inbounds float, float* %10, i64 %520
  %522 = bitcast float* %521 to <32 x float>*
  store <32 x float> %518, <32 x float>* %522, align 64, !tbaa !7232
  %523 = load <32 x float>, <32 x float>* %255, align 64, !tbaa !7223
  %524 = fadd <32 x float> %523, %324
  %525 = fadd <32 x float> %524, %327
  %526 = fcmp ogt <32 x float> %525, zeroinitializer
  %527 = select <32 x i1> %526, <32 x float> %525, <32 x float> zeroinitializer
  %528 = mul i64 %indvars.iv45, 3848290697216
  %sext68 = add i64 %528, 3161095929856
  %529 = ashr exact i64 %sext68, 32
  %530 = getelementptr inbounds float, float* %10, i64 %529
  %531 = bitcast float* %530 to <32 x float>*
  store <32 x float> %527, <32 x float>* %531, align 64, !tbaa !7232
  %532 = load <32 x float>, <32 x float>* %257, align 64, !tbaa !7223
  %533 = fadd <32 x float> %532, %324
  %534 = fadd <32 x float> %533, %327
  %535 = fcmp ogt <32 x float> %534, zeroinitializer
  %536 = select <32 x i1> %535, <32 x float> %534, <32 x float> zeroinitializer
  %537 = mul i64 %indvars.iv45, 3848290697216
  %sext69 = add i64 %537, 3298534883328
  %538 = ashr exact i64 %sext69, 32
  %539 = getelementptr inbounds float, float* %10, i64 %538
  %540 = bitcast float* %539 to <32 x float>*
  store <32 x float> %536, <32 x float>* %540, align 64, !tbaa !7232
  %541 = load <32 x float>, <32 x float>* %259, align 64, !tbaa !7223
  %542 = fadd <32 x float> %541, %324
  %543 = fadd <32 x float> %542, %327
  %544 = fcmp ogt <32 x float> %543, zeroinitializer
  %545 = select <32 x i1> %544, <32 x float> %543, <32 x float> zeroinitializer
  %546 = mul i64 %indvars.iv45, 3848290697216
  %sext70 = add i64 %546, 3435973836800
  %547 = ashr exact i64 %sext70, 32
  %548 = getelementptr inbounds float, float* %10, i64 %547
  %549 = bitcast float* %548 to <32 x float>*
  store <32 x float> %545, <32 x float>* %549, align 64, !tbaa !7232
  %550 = load <32 x float>, <32 x float>* %261, align 64, !tbaa !7223
  %551 = fadd <32 x float> %550, %324
  %552 = fadd <32 x float> %551, %327
  %553 = fcmp ogt <32 x float> %552, zeroinitializer
  %554 = select <32 x i1> %553, <32 x float> %552, <32 x float> zeroinitializer
  %555 = mul i64 %indvars.iv45, 3848290697216
  %sext71 = add i64 %555, 3573412790272
  %556 = ashr exact i64 %sext71, 32
  %557 = getelementptr inbounds float, float* %10, i64 %556
  %558 = bitcast float* %557 to <32 x float>*
  store <32 x float> %554, <32 x float>* %558, align 64, !tbaa !7232
  %559 = load <32 x float>, <32 x float>* %263, align 64, !tbaa !7223
  %560 = fadd <32 x float> %559, %324
  %561 = fadd <32 x float> %560, %327
  %562 = fcmp ogt <32 x float> %561, zeroinitializer
  %563 = select <32 x i1> %562, <32 x float> %561, <32 x float> zeroinitializer
  %564 = mul i64 %indvars.iv45, 3848290697216
  %sext72 = add i64 %564, 3710851743744
  %565 = ashr exact i64 %sext72, 32
  %566 = getelementptr inbounds float, float* %10, i64 %565
  %567 = bitcast float* %566 to <32 x float>*
  store <32 x float> %563, <32 x float>* %567, align 64, !tbaa !7232
  %568 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %569 = tail call i32 %568(i32 1, i32 %19, i8* %37)
  %indvars.iv.next46 = add nsw i64 %indvars.iv45, 1
  %570 = icmp slt i64 %indvars.iv.next46, %35
  br i1 %570, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_39(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.539, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7235
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.540, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !7249
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.541, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !7251
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !7265
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 8
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !7267
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 56
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !7270
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 56
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !7272
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !7276
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 100352, i32 1792, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !7287
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 802816
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.244, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !7291
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !7305
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !7307
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 56
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !7310
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 56
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !7312
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 256
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.171, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !7316
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 802816, i32 14336, i32 256, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !7327
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 802816
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.542, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_39_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_39_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %45, align 8
  %3 = getelementptr inbounds %45, %45* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %45, %45* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %45* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.543, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.543(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 55
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 56
  %14 = select i1 %13, i32 %12, i32 56
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 56
  %18 = select i1 %17, i32 %16, i32 56
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 14336
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = mul i32 %25, 1792
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %28 = shl i64 %indvars.iv7, 8
  %29 = add nsw i64 %28, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %30 = shl i32 %indvars.iv7.tr, 5
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %27
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %34 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %35 = shl nsw i64 %indvars.iv, 4
  %36 = add nsw i64 %29, %35
  %37 = trunc i64 %35 to i32
  %38 = insertelement <16 x i32> undef, i32 %37, i32 0
  %39 = trunc i64 %35 to i32
  %40 = or i32 %39, 1
  %41 = insertelement <16 x i32> %38, i32 %40, i32 1
  %42 = trunc i64 %35 to i32
  %43 = or i32 %42, 2
  %44 = insertelement <16 x i32> %41, i32 %43, i32 2
  %45 = trunc i64 %35 to i32
  %46 = or i32 %45, 3
  %47 = insertelement <16 x i32> %44, i32 %46, i32 3
  %48 = trunc i64 %35 to i32
  %49 = or i32 %48, 4
  %50 = insertelement <16 x i32> %47, i32 %49, i32 4
  %51 = trunc i64 %35 to i32
  %52 = or i32 %51, 5
  %53 = insertelement <16 x i32> %50, i32 %52, i32 5
  %54 = trunc i64 %35 to i32
  %55 = or i32 %54, 6
  %56 = insertelement <16 x i32> %53, i32 %55, i32 6
  %57 = trunc i64 %35 to i32
  %58 = or i32 %57, 7
  %59 = insertelement <16 x i32> %56, i32 %58, i32 7
  %60 = trunc i64 %35 to i32
  %61 = or i32 %60, 8
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  %63 = trunc i64 %35 to i32
  %64 = or i32 %63, 9
  %65 = insertelement <16 x i32> %62, i32 %64, i32 9
  %66 = trunc i64 %35 to i32
  %67 = or i32 %66, 10
  %68 = insertelement <16 x i32> %65, i32 %67, i32 10
  %69 = trunc i64 %35 to i32
  %70 = or i32 %69, 11
  %71 = insertelement <16 x i32> %68, i32 %70, i32 11
  %72 = trunc i64 %35 to i32
  %73 = or i32 %72, 12
  %74 = insertelement <16 x i32> %71, i32 %73, i32 12
  %75 = trunc i64 %35 to i32
  %76 = or i32 %75, 13
  %77 = insertelement <16 x i32> %74, i32 %76, i32 13
  %78 = trunc i64 %35 to i32
  %79 = or i32 %78, 14
  %80 = insertelement <16 x i32> %77, i32 %79, i32 14
  %81 = trunc i64 %35 to i32
  %82 = or i32 %81, 15
  %83 = insertelement <16 x i32> %80, i32 %82, i32 15
  %84 = sdiv <16 x i32> %83, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %85 = mul <16 x i32> %84, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %86 = sub <16 x i32> %83, %85
  %87 = icmp sgt <16 x i32> %86, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %87, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %88 = sext <16 x i1> %not. to <16 x i32>
  %89 = add nsw <16 x i32> %84, %88
  %90 = mul nsw <16 x i32> %89, <i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352>
  %91 = add nsw <16 x i32> %86, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %92 = select <16 x i1> %87, <16 x i32> %86, <16 x i32> %91
  %93 = add <16 x i32> %33, %92
  %94 = add <16 x i32> %93, %90
  %95 = extractelement <16 x i32> %94, i64 0
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !7331
  %99 = insertelement <16 x float> undef, float %98, i32 0
  %100 = extractelement <16 x i32> %94, i64 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !7331
  %104 = insertelement <16 x float> %99, float %103, i32 1
  %105 = extractelement <16 x i32> %94, i64 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !7331
  %109 = insertelement <16 x float> %104, float %108, i32 2
  %110 = extractelement <16 x i32> %94, i64 3
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !7331
  %114 = insertelement <16 x float> %109, float %113, i32 3
  %115 = extractelement <16 x i32> %94, i64 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !7331
  %119 = insertelement <16 x float> %114, float %118, i32 4
  %120 = extractelement <16 x i32> %94, i64 5
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !7331
  %124 = insertelement <16 x float> %119, float %123, i32 5
  %125 = extractelement <16 x i32> %94, i64 6
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !7331
  %129 = insertelement <16 x float> %124, float %128, i32 6
  %130 = extractelement <16 x i32> %94, i64 7
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !7331
  %134 = insertelement <16 x float> %129, float %133, i32 7
  %135 = extractelement <16 x i32> %94, i64 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !7331
  %139 = insertelement <16 x float> %134, float %138, i32 8
  %140 = extractelement <16 x i32> %94, i64 9
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !7331
  %144 = insertelement <16 x float> %139, float %143, i32 9
  %145 = extractelement <16 x i32> %94, i64 10
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !7331
  %149 = insertelement <16 x float> %144, float %148, i32 10
  %150 = extractelement <16 x i32> %94, i64 11
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !7331
  %154 = insertelement <16 x float> %149, float %153, i32 11
  %155 = extractelement <16 x i32> %94, i64 12
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !7331
  %159 = insertelement <16 x float> %154, float %158, i32 12
  %160 = extractelement <16 x i32> %94, i64 13
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !7331
  %164 = insertelement <16 x float> %159, float %163, i32 13
  %165 = extractelement <16 x i32> %94, i64 14
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !7331
  %169 = insertelement <16 x float> %164, float %168, i32 14
  %170 = extractelement <16 x i32> %94, i64 15
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !7331
  %174 = insertelement <16 x float> %169, float %173, i32 15
  %175 = getelementptr inbounds float, float* %4, i64 %36
  %176 = bitcast float* %175 to <16 x float>*
  store <16 x float> %174, <16 x float>* %176, align 64, !tbaa !7334
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 56
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.544, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7337
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !7351
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !7354
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !7356
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.545, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !7360
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.546, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.547, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.548, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.549, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !7362
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !7376
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !7378
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 56
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !7381
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 56
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !7383
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 64
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.10, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !7387
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 200704, i32 3584, i32 64, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !7398
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 200704
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.550, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !7402
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 2
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.551, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !7416
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !7418
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !7421
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !7423
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 64
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.291, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !7427
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !7429
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 6144, i32 2048, i32 32, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !7440
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 18432
  %187 = load i64, i64* %47, align 8, !tbaa !7444
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 18432
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([277 x i8], [277 x i8]* @.str.552, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !7446
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !7460
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 2
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.553, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !7462
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !7465
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !7467
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !7471
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 32, i32 32, i32 32, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !7482
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 64
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.554, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !7486
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !7500
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 2
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.555, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !7502
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !7505
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !7507
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 32
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !7511
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 32, i32 32, i32 32, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !7522
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 64
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.556, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !7526
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !7540
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 2
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.557, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !7542
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 56
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.558, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !7545
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 56
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.559, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !7547
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 32
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !7551
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 100352, i32 1792, i32 32, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !7562
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 200704
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.560, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %7 = tail call i8* %6(i32 1, i32 %5, i64 861184, i32 2, i32 32)
  %8 = alloca %46, align 8
  %9 = getelementptr inbounds %46, %46* %8, i64 0, i32 0
  store i8* %7, i8** %9, align 8
  %10 = getelementptr inbounds %46, %46* %8, i64 0, i32 1
  store i8* %0, i8** %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %46* %8 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.561, i8* nonnull %12, i32 0)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %13, %entry ], [ 0, %call_end2 ], [ %24, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %15 = alloca %47, align 8
  %16 = getelementptr inbounds %47, %47* %15, i64 0, i32 0
  store i8* %7, i8** %16, align 8
  %17 = getelementptr inbounds %47, %47* %15, i64 0, i32 1
  store i8* %1, i8** %17, align 8
  %18 = getelementptr inbounds %47, %47* %15, i64 0, i32 2
  store i8* %2, i8** %18, align 8
  %19 = getelementptr inbounds %47, %47* %15, i64 0, i32 3
  store i8* %3, i8** %19, align 8
  %20 = getelementptr inbounds %47, %47* %15, i64 0, i32 4
  store i8* %4, i8** %20, align 8
  %21 = getelementptr inbounds %47, %47* %15, i64 0, i32 5
  store i32 %5, i32* %21, align 8
  %22 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %23 = bitcast %47* %15 to i8*
  %24 = call i32 %22(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.562, i8* nonnull %23, i32 0)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %26 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %27 = call i32 %26(i32 1, i32 %5, i8* %7)
  br label %call_fail
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.561(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 57
  %11 = sdiv i32 %10, %9
  %12 = mul i32 %11, %0
  %13 = icmp slt i32 %12, 58
  %14 = select i1 %13, i32 %12, i32 58
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 58
  %18 = select i1 %17, i32 %16, i32 58
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = icmp slt i32 %12, 58
  %21 = select i1 %20, i32 %12, i32 58
  %smax = xor i32 %21, -1
  %22 = mul i32 %smax, -3712
  %23 = add i32 %22, -3712
  %24 = add i32 %14, 1
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, -1
  %27 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv6 = phi i64 [ %26, %for_begin1.preheader.preheader ], [ %indvars.iv.next7, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %28 = mul nsw i64 %indvars.iv6, 3712
  %29 = trunc i64 %indvars.iv6 to i32
  %.off = add i32 %29, -1
  %30 = icmp ult i32 %.off, 56
  %31 = mul i64 %indvars.iv6, 3584
  %32 = add i64 %31, 4294963648
  br i1 %30, label %for_body2.us, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %33 = mul i32 %indvar, 3712
  %34 = add i32 %23, %33
  %35 = sext i32 %34 to i64
  %scevgep = getelementptr float, float* %4, i64 %35
  %scevgep5 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 64 %scevgep5, i8 0, i64 14848, i1 false)
  br label %for_end3

for_body2.us:                                     ; preds = %for_begin1.preheader, %if_end.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %if_end.us ], [ 0, %for_begin1.preheader ]
  %36 = shl nsw i64 %indvars.iv, 6
  %37 = add nsw i64 %36, %28
  %38 = trunc i64 %indvars.iv to i32
  switch i32 %38, label %if_then.us [
    i32 57, label %if_end.us
    i32 0, label %if_end.us
  ]

if_then.us:                                       ; preds = %for_body2.us
  %39 = add i64 %32, %36
  %sext = shl i64 %39, 32
  %40 = ashr exact i64 %sext, 32
  %41 = getelementptr inbounds float, float* %7, i64 %40
  %42 = bitcast float* %41 to <64 x float>*
  %43 = load <64 x float>, <64 x float>* %42, align 64, !tbaa !7566
  br label %if_end.us

if_end.us:                                        ; preds = %if_then.us, %for_body2.us, %for_body2.us
  %44 = phi <64 x float> [ %43, %if_then.us ], [ zeroinitializer, %for_body2.us ], [ zeroinitializer, %for_body2.us ]
  %45 = getelementptr inbounds float, float* %4, i64 %37
  %46 = bitcast float* %45 to <64 x float>*
  store <64 x float> %44, <64 x float>* %46, align 64, !tbaa !7569
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 58
  br i1 %exitcond, label %for_end3, label %for_body2.us, !prof !50

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %if_end.us, %for_body2.preheader
  %indvars.iv.next7 = add nsw i64 %indvars.iv6, 1
  %47 = icmp slt i64 %indvars.iv.next7, %27
  %indvar.next = add nuw i32 %indvar, 1
  br i1 %47, label %for_begin1.preheader, label %for_end, !prof !5
}

define private i32 @__tvm_parallel_lambda.562(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = alloca [7 x <32 x float>], align 128
  %4 = bitcast [7 x <32 x float>]* %3 to i8*
  %.sub = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0
  %5 = bitcast i8* %2 to float**
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to float**
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to float**
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds i8, i8* %2, i64 24
  %14 = bitcast i8* %13 to float**
  %15 = load float*, float** %14, align 8
  %16 = getelementptr inbounds i8, i8* %2, i64 32
  %17 = bitcast i8* %16 to float**
  %18 = load float*, float** %17, align 8
  %19 = getelementptr inbounds i8, i8* %2, i64 40
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = add nsw i32 %23, 111
  %25 = sdiv i32 %24, %23
  %26 = mul nsw i32 %25, %0
  %27 = icmp slt i32 %26, 112
  %28 = select i1 %27, i32 %26, i32 112
  %29 = add nsw i32 %0, 1
  %30 = mul nsw i32 %25, %29
  %31 = icmp slt i32 %30, 112
  %32 = select i1 %31, i32 %30, i32 112
  %33 = icmp slt i32 %28, %32
  br i1 %33, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %34 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %35 = bitcast float* %34 to <32 x float>*
  %36 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %37 = bitcast float* %36 to <32 x float>*
  %38 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %39 = bitcast float* %38 to <32 x float>*
  %40 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %41 = bitcast float* %40 to <32 x float>*
  %42 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %43 = bitcast float* %42 to <32 x float>*
  %44 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %45 = bitcast float* %44 to <32 x float>*
  %46 = bitcast [7 x <32 x float>]* %3 to i8*
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_end15
  %47 = phi i32 [ %28, %for_body.lr.ph ], [ %257, %for_end15 ]
  %48 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %49 = tail call i8* %48(i32 1, i32 %21, i64 7168, i32 2, i32 32)
  %50 = srem i32 %47, 56
  %51 = sdiv i32 %47, 56
  %52 = mul nsw i32 %51, 18432
  %53 = sext i32 %52 to i64
  %54 = mul nsw i32 %50, 3712
  %55 = sext i32 %54 to i64
  %56 = mul nsw i32 %50, 3712
  %57 = add nsw i32 %56, 3712
  %58 = sext i32 %57 to i64
  %59 = add nsw i64 %53, 6144
  %60 = mul nsw i32 %50, 3712
  %61 = add nsw i32 %60, 7424
  %62 = sext i32 %61 to i64
  %63 = add nsw i64 %53, 12288
  br label %for_body2

for_end:                                          ; preds = %for_end15, %entry
  ret i32 0

for_begin13.preheader:                            ; preds = %for_end9.2
  %64 = mul nsw i32 %47, 1792
  %65 = bitcast i8* %49 to float*
  %66 = shl nsw i32 %51, 5
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %15, i64 %67
  %69 = bitcast float* %68 to <32 x float>*
  %70 = load <32 x float>, <32 x float>* %69, align 64, !tbaa !7572
  %71 = getelementptr inbounds float, float* %18, i64 %67
  %72 = bitcast float* %71 to <32 x float>*
  %73 = load <32 x float>, <32 x float>* %72, align 64, !tbaa !7575
  br label %for_begin16.preheader

for_body2:                                        ; preds = %for_end9.2, %for_body
  %indvar = phi i64 [ 0, %for_body ], [ %indvar.next, %for_end9.2 ]
  %74 = mul nuw nsw i64 %indvar, 896
  %scevgep = getelementptr i8, i8* %49, i64 %74
  %75 = mul nuw nsw i64 %indvar, 448
  %76 = add nsw i64 %75, %55
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %46, i8 0, i64 896, i1 false)
  br label %for_body8

for_body8:                                        ; preds = %for_body8, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_body8 ]
  %77 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %162, %for_body8 ]
  %78 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %156, %for_body8 ]
  %79 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %155, %for_body8 ]
  %80 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %154, %for_body8 ]
  %81 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %153, %for_body8 ]
  %82 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %152, %for_body8 ]
  %83 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %151, %for_body8 ]
  %84 = add nsw i64 %76, %indvars.iv
  %85 = getelementptr inbounds float, float* %6, i64 %84
  %86 = load float, float* %85, align 4, !tbaa !7569
  %87 = insertelement <32 x float> undef, float %86, i32 0
  %88 = shufflevector <32 x float> %87, <32 x float> undef, <32 x i32> zeroinitializer
  %89 = shl nsw i64 %indvars.iv, 5
  %90 = add nsw i64 %89, %53
  %91 = getelementptr inbounds float, float* %9, i64 %90
  %92 = bitcast float* %91 to <32 x float>*
  %93 = load <32 x float>, <32 x float>* %92, align 64, !tbaa !7578
  %94 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %88, <32 x float> %93, <32 x float> %83)
  %95 = add nsw i64 %84, 64
  %96 = getelementptr inbounds float, float* %6, i64 %95
  %97 = load float, float* %96, align 4, !tbaa !7569
  %98 = insertelement <32 x float> undef, float %97, i32 0
  %99 = shufflevector <32 x float> %98, <32 x float> undef, <32 x i32> zeroinitializer
  %100 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %99, <32 x float> %93, <32 x float> %82)
  %101 = add nsw i64 %84, 128
  %102 = getelementptr inbounds float, float* %6, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !7569
  %104 = insertelement <32 x float> undef, float %103, i32 0
  %105 = shufflevector <32 x float> %104, <32 x float> undef, <32 x i32> zeroinitializer
  %106 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %105, <32 x float> %93, <32 x float> %81)
  %107 = add nsw i64 %84, 192
  %108 = getelementptr inbounds float, float* %6, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !7569
  %110 = insertelement <32 x float> undef, float %109, i32 0
  %111 = shufflevector <32 x float> %110, <32 x float> undef, <32 x i32> zeroinitializer
  %112 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %111, <32 x float> %93, <32 x float> %80)
  %113 = add nsw i64 %84, 256
  %114 = getelementptr inbounds float, float* %6, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !7569
  %116 = insertelement <32 x float> undef, float %115, i32 0
  %117 = shufflevector <32 x float> %116, <32 x float> undef, <32 x i32> zeroinitializer
  %118 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %117, <32 x float> %93, <32 x float> %79)
  %119 = add nsw i64 %84, 320
  %120 = getelementptr inbounds float, float* %6, i64 %119
  %121 = load float, float* %120, align 4, !tbaa !7569
  %122 = insertelement <32 x float> undef, float %121, i32 0
  %123 = shufflevector <32 x float> %122, <32 x float> undef, <32 x i32> zeroinitializer
  %124 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %123, <32 x float> %93, <32 x float> %78)
  %125 = add nsw i64 %84, 384
  %126 = getelementptr inbounds float, float* %6, i64 %125
  %127 = load float, float* %126, align 4, !tbaa !7569
  %128 = insertelement <32 x float> undef, float %127, i32 0
  %129 = shufflevector <32 x float> %128, <32 x float> undef, <32 x i32> zeroinitializer
  %130 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %129, <32 x float> %93, <32 x float> %77)
  %131 = add nsw i64 %90, 2048
  %132 = getelementptr inbounds float, float* %9, i64 %131
  %133 = bitcast float* %132 to <32 x float>*
  %134 = load <32 x float>, <32 x float>* %133, align 64, !tbaa !7578
  %135 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %99, <32 x float> %134, <32 x float> %94)
  %136 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %105, <32 x float> %134, <32 x float> %100)
  %137 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %111, <32 x float> %134, <32 x float> %106)
  %138 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %117, <32 x float> %134, <32 x float> %112)
  %139 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %123, <32 x float> %134, <32 x float> %118)
  %140 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %129, <32 x float> %134, <32 x float> %124)
  %141 = add nsw i64 %84, 448
  %142 = getelementptr inbounds float, float* %6, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !7569
  %144 = insertelement <32 x float> undef, float %143, i32 0
  %145 = shufflevector <32 x float> %144, <32 x float> undef, <32 x i32> zeroinitializer
  %146 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %145, <32 x float> %134, <32 x float> %130)
  %147 = add nsw i64 %90, 4096
  %148 = getelementptr inbounds float, float* %9, i64 %147
  %149 = bitcast float* %148 to <32 x float>*
  %150 = load <32 x float>, <32 x float>* %149, align 64, !tbaa !7578
  %151 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %105, <32 x float> %150, <32 x float> %135)
  %152 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %111, <32 x float> %150, <32 x float> %136)
  %153 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %117, <32 x float> %150, <32 x float> %137)
  %154 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %123, <32 x float> %150, <32 x float> %138)
  %155 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %129, <32 x float> %150, <32 x float> %139)
  %156 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %145, <32 x float> %150, <32 x float> %140)
  %157 = add nsw i64 %84, 512
  %158 = getelementptr inbounds float, float* %6, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !7569
  %160 = insertelement <32 x float> undef, float %159, i32 0
  %161 = shufflevector <32 x float> %160, <32 x float> undef, <32 x i32> zeroinitializer
  %162 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %161, <32 x float> %150, <32 x float> %146)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 64
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %163 = add nsw i64 %75, %58
  br label %for_body8.1

for_begin16.preheader:                            ; preds = %for_begin16.preheader, %for_begin13.preheader
  %indvars.iv65 = phi i64 [ 0, %for_begin13.preheader ], [ %indvars.iv.next66, %for_begin16.preheader ]
  %164 = mul nuw nsw i64 %indvars.iv65, 224
  %165 = trunc i64 %164 to i32
  %166 = add i32 %64, %165
  %167 = getelementptr inbounds float, float* %65, i64 %164
  %168 = bitcast float* %167 to <32 x float>*
  %169 = load <32 x float>, <32 x float>* %168, align 64, !tbaa !7581
  %170 = fadd <32 x float> %169, %70
  %171 = fadd <32 x float> %170, %73
  %172 = fcmp ogt <32 x float> %171, zeroinitializer
  %173 = select <32 x i1> %172, <32 x float> %171, <32 x float> zeroinitializer
  %174 = sext i32 %166 to i64
  %175 = getelementptr inbounds float, float* %12, i64 %174
  %176 = bitcast float* %175 to <32 x float>*
  store <32 x float> %173, <32 x float>* %176, align 64, !tbaa !7584
  %177 = add nuw nsw i64 %164, 32
  %178 = trunc i64 %177 to i32
  %179 = add i32 %64, %178
  %180 = getelementptr inbounds float, float* %65, i64 %177
  %181 = bitcast float* %180 to <32 x float>*
  %182 = load <32 x float>, <32 x float>* %181, align 64, !tbaa !7581
  %183 = fadd <32 x float> %182, %70
  %184 = fadd <32 x float> %183, %73
  %185 = fcmp ogt <32 x float> %184, zeroinitializer
  %186 = select <32 x i1> %185, <32 x float> %184, <32 x float> zeroinitializer
  %187 = sext i32 %179 to i64
  %188 = getelementptr inbounds float, float* %12, i64 %187
  %189 = bitcast float* %188 to <32 x float>*
  store <32 x float> %186, <32 x float>* %189, align 64, !tbaa !7584
  %190 = add nuw nsw i64 %164, 64
  %191 = trunc i64 %190 to i32
  %192 = add i32 %64, %191
  %193 = getelementptr inbounds float, float* %65, i64 %190
  %194 = bitcast float* %193 to <32 x float>*
  %195 = load <32 x float>, <32 x float>* %194, align 64, !tbaa !7581
  %196 = fadd <32 x float> %195, %70
  %197 = fadd <32 x float> %196, %73
  %198 = fcmp ogt <32 x float> %197, zeroinitializer
  %199 = select <32 x i1> %198, <32 x float> %197, <32 x float> zeroinitializer
  %200 = sext i32 %192 to i64
  %201 = getelementptr inbounds float, float* %12, i64 %200
  %202 = bitcast float* %201 to <32 x float>*
  store <32 x float> %199, <32 x float>* %202, align 64, !tbaa !7584
  %203 = add nuw nsw i64 %164, 96
  %204 = trunc i64 %203 to i32
  %205 = add i32 %64, %204
  %206 = getelementptr inbounds float, float* %65, i64 %203
  %207 = bitcast float* %206 to <32 x float>*
  %208 = load <32 x float>, <32 x float>* %207, align 64, !tbaa !7581
  %209 = fadd <32 x float> %208, %70
  %210 = fadd <32 x float> %209, %73
  %211 = fcmp ogt <32 x float> %210, zeroinitializer
  %212 = select <32 x i1> %211, <32 x float> %210, <32 x float> zeroinitializer
  %213 = sext i32 %205 to i64
  %214 = getelementptr inbounds float, float* %12, i64 %213
  %215 = bitcast float* %214 to <32 x float>*
  store <32 x float> %212, <32 x float>* %215, align 64, !tbaa !7584
  %216 = add nuw nsw i64 %164, 128
  %217 = trunc i64 %216 to i32
  %218 = add i32 %64, %217
  %219 = getelementptr inbounds float, float* %65, i64 %216
  %220 = bitcast float* %219 to <32 x float>*
  %221 = load <32 x float>, <32 x float>* %220, align 64, !tbaa !7581
  %222 = fadd <32 x float> %221, %70
  %223 = fadd <32 x float> %222, %73
  %224 = fcmp ogt <32 x float> %223, zeroinitializer
  %225 = select <32 x i1> %224, <32 x float> %223, <32 x float> zeroinitializer
  %226 = sext i32 %218 to i64
  %227 = getelementptr inbounds float, float* %12, i64 %226
  %228 = bitcast float* %227 to <32 x float>*
  store <32 x float> %225, <32 x float>* %228, align 64, !tbaa !7584
  %229 = add nuw nsw i64 %164, 160
  %230 = trunc i64 %229 to i32
  %231 = add i32 %64, %230
  %232 = getelementptr inbounds float, float* %65, i64 %229
  %233 = bitcast float* %232 to <32 x float>*
  %234 = load <32 x float>, <32 x float>* %233, align 64, !tbaa !7581
  %235 = fadd <32 x float> %234, %70
  %236 = fadd <32 x float> %235, %73
  %237 = fcmp ogt <32 x float> %236, zeroinitializer
  %238 = select <32 x i1> %237, <32 x float> %236, <32 x float> zeroinitializer
  %239 = sext i32 %231 to i64
  %240 = getelementptr inbounds float, float* %12, i64 %239
  %241 = bitcast float* %240 to <32 x float>*
  store <32 x float> %238, <32 x float>* %241, align 64, !tbaa !7584
  %242 = add nuw nsw i64 %164, 192
  %243 = trunc i64 %242 to i32
  %244 = add i32 %64, %243
  %245 = getelementptr inbounds float, float* %65, i64 %242
  %246 = bitcast float* %245 to <32 x float>*
  %247 = load <32 x float>, <32 x float>* %246, align 64, !tbaa !7581
  %248 = fadd <32 x float> %247, %70
  %249 = fadd <32 x float> %248, %73
  %250 = fcmp ogt <32 x float> %249, zeroinitializer
  %251 = select <32 x i1> %250, <32 x float> %249, <32 x float> zeroinitializer
  %252 = sext i32 %244 to i64
  %253 = getelementptr inbounds float, float* %12, i64 %252
  %254 = bitcast float* %253 to <32 x float>*
  store <32 x float> %251, <32 x float>* %254, align 64, !tbaa !7584
  %indvars.iv.next66 = add nuw nsw i64 %indvars.iv65, 1
  %exitcond67 = icmp eq i64 %indvars.iv.next66, 8
  br i1 %exitcond67, label %for_end15, label %for_begin16.preheader, !prof !50

for_end15:                                        ; preds = %for_begin16.preheader
  %255 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %256 = tail call i32 %255(i32 1, i32 %21, i8* nonnull %49)
  %257 = add nsw i32 %47, 1
  %258 = icmp slt i32 %257, %32
  br i1 %258, label %for_body, label %for_end, !prof !5

for_body8.1:                                      ; preds = %for_body8.1, %for_end9
  %indvars.iv.1 = phi i64 [ 0, %for_end9 ], [ %indvars.iv.next.1, %for_body8.1 ]
  %259 = phi <32 x float> [ %162, %for_end9 ], [ %344, %for_body8.1 ]
  %260 = phi <32 x float> [ %156, %for_end9 ], [ %338, %for_body8.1 ]
  %261 = phi <32 x float> [ %155, %for_end9 ], [ %337, %for_body8.1 ]
  %262 = phi <32 x float> [ %154, %for_end9 ], [ %336, %for_body8.1 ]
  %263 = phi <32 x float> [ %153, %for_end9 ], [ %335, %for_body8.1 ]
  %264 = phi <32 x float> [ %152, %for_end9 ], [ %334, %for_body8.1 ]
  %265 = phi <32 x float> [ %151, %for_end9 ], [ %333, %for_body8.1 ]
  %266 = add nsw i64 %163, %indvars.iv.1
  %267 = getelementptr inbounds float, float* %6, i64 %266
  %268 = load float, float* %267, align 4, !tbaa !7569
  %269 = insertelement <32 x float> undef, float %268, i32 0
  %270 = shufflevector <32 x float> %269, <32 x float> undef, <32 x i32> zeroinitializer
  %271 = shl nsw i64 %indvars.iv.1, 5
  %272 = add nsw i64 %59, %271
  %273 = getelementptr inbounds float, float* %9, i64 %272
  %274 = bitcast float* %273 to <32 x float>*
  %275 = load <32 x float>, <32 x float>* %274, align 64, !tbaa !7578
  %276 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %270, <32 x float> %275, <32 x float> %265)
  %277 = add nsw i64 %266, 64
  %278 = getelementptr inbounds float, float* %6, i64 %277
  %279 = load float, float* %278, align 4, !tbaa !7569
  %280 = insertelement <32 x float> undef, float %279, i32 0
  %281 = shufflevector <32 x float> %280, <32 x float> undef, <32 x i32> zeroinitializer
  %282 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %281, <32 x float> %275, <32 x float> %264)
  %283 = add nsw i64 %266, 128
  %284 = getelementptr inbounds float, float* %6, i64 %283
  %285 = load float, float* %284, align 4, !tbaa !7569
  %286 = insertelement <32 x float> undef, float %285, i32 0
  %287 = shufflevector <32 x float> %286, <32 x float> undef, <32 x i32> zeroinitializer
  %288 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %287, <32 x float> %275, <32 x float> %263)
  %289 = add nsw i64 %266, 192
  %290 = getelementptr inbounds float, float* %6, i64 %289
  %291 = load float, float* %290, align 4, !tbaa !7569
  %292 = insertelement <32 x float> undef, float %291, i32 0
  %293 = shufflevector <32 x float> %292, <32 x float> undef, <32 x i32> zeroinitializer
  %294 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %293, <32 x float> %275, <32 x float> %262)
  %295 = add nsw i64 %266, 256
  %296 = getelementptr inbounds float, float* %6, i64 %295
  %297 = load float, float* %296, align 4, !tbaa !7569
  %298 = insertelement <32 x float> undef, float %297, i32 0
  %299 = shufflevector <32 x float> %298, <32 x float> undef, <32 x i32> zeroinitializer
  %300 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %299, <32 x float> %275, <32 x float> %261)
  %301 = add nsw i64 %266, 320
  %302 = getelementptr inbounds float, float* %6, i64 %301
  %303 = load float, float* %302, align 4, !tbaa !7569
  %304 = insertelement <32 x float> undef, float %303, i32 0
  %305 = shufflevector <32 x float> %304, <32 x float> undef, <32 x i32> zeroinitializer
  %306 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %305, <32 x float> %275, <32 x float> %260)
  %307 = add nsw i64 %266, 384
  %308 = getelementptr inbounds float, float* %6, i64 %307
  %309 = load float, float* %308, align 4, !tbaa !7569
  %310 = insertelement <32 x float> undef, float %309, i32 0
  %311 = shufflevector <32 x float> %310, <32 x float> undef, <32 x i32> zeroinitializer
  %312 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %311, <32 x float> %275, <32 x float> %259)
  %313 = add nsw i64 %272, 2048
  %314 = getelementptr inbounds float, float* %9, i64 %313
  %315 = bitcast float* %314 to <32 x float>*
  %316 = load <32 x float>, <32 x float>* %315, align 64, !tbaa !7578
  %317 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %281, <32 x float> %316, <32 x float> %276)
  %318 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %287, <32 x float> %316, <32 x float> %282)
  %319 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %293, <32 x float> %316, <32 x float> %288)
  %320 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %299, <32 x float> %316, <32 x float> %294)
  %321 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %305, <32 x float> %316, <32 x float> %300)
  %322 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %311, <32 x float> %316, <32 x float> %306)
  %323 = add nsw i64 %266, 448
  %324 = getelementptr inbounds float, float* %6, i64 %323
  %325 = load float, float* %324, align 4, !tbaa !7569
  %326 = insertelement <32 x float> undef, float %325, i32 0
  %327 = shufflevector <32 x float> %326, <32 x float> undef, <32 x i32> zeroinitializer
  %328 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %327, <32 x float> %316, <32 x float> %312)
  %329 = add nsw i64 %272, 4096
  %330 = getelementptr inbounds float, float* %9, i64 %329
  %331 = bitcast float* %330 to <32 x float>*
  %332 = load <32 x float>, <32 x float>* %331, align 64, !tbaa !7578
  %333 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %287, <32 x float> %332, <32 x float> %317)
  %334 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %293, <32 x float> %332, <32 x float> %318)
  %335 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %299, <32 x float> %332, <32 x float> %319)
  %336 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %305, <32 x float> %332, <32 x float> %320)
  %337 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %311, <32 x float> %332, <32 x float> %321)
  %338 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %327, <32 x float> %332, <32 x float> %322)
  %339 = add nsw i64 %266, 512
  %340 = getelementptr inbounds float, float* %6, i64 %339
  %341 = load float, float* %340, align 4, !tbaa !7569
  %342 = insertelement <32 x float> undef, float %341, i32 0
  %343 = shufflevector <32 x float> %342, <32 x float> undef, <32 x i32> zeroinitializer
  %344 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %343, <32 x float> %332, <32 x float> %328)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 64
  br i1 %exitcond.1, label %for_end9.1, label %for_body8.1, !prof !50

for_end9.1:                                       ; preds = %for_body8.1
  %345 = add nsw i64 %75, %62
  br label %for_body8.2

for_body8.2:                                      ; preds = %for_body8.2, %for_end9.1
  %indvars.iv.2 = phi i64 [ 0, %for_end9.1 ], [ %indvars.iv.next.2, %for_body8.2 ]
  %346 = phi <32 x float> [ %344, %for_end9.1 ], [ %431, %for_body8.2 ]
  %347 = phi <32 x float> [ %338, %for_end9.1 ], [ %425, %for_body8.2 ]
  %348 = phi <32 x float> [ %337, %for_end9.1 ], [ %424, %for_body8.2 ]
  %349 = phi <32 x float> [ %336, %for_end9.1 ], [ %423, %for_body8.2 ]
  %350 = phi <32 x float> [ %335, %for_end9.1 ], [ %422, %for_body8.2 ]
  %351 = phi <32 x float> [ %334, %for_end9.1 ], [ %421, %for_body8.2 ]
  %352 = phi <32 x float> [ %333, %for_end9.1 ], [ %420, %for_body8.2 ]
  %353 = add nsw i64 %345, %indvars.iv.2
  %354 = getelementptr inbounds float, float* %6, i64 %353
  %355 = load float, float* %354, align 4, !tbaa !7569
  %356 = insertelement <32 x float> undef, float %355, i32 0
  %357 = shufflevector <32 x float> %356, <32 x float> undef, <32 x i32> zeroinitializer
  %358 = shl nsw i64 %indvars.iv.2, 5
  %359 = add nsw i64 %63, %358
  %360 = getelementptr inbounds float, float* %9, i64 %359
  %361 = bitcast float* %360 to <32 x float>*
  %362 = load <32 x float>, <32 x float>* %361, align 64, !tbaa !7578
  %363 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %357, <32 x float> %362, <32 x float> %352)
  %364 = add nsw i64 %353, 64
  %365 = getelementptr inbounds float, float* %6, i64 %364
  %366 = load float, float* %365, align 4, !tbaa !7569
  %367 = insertelement <32 x float> undef, float %366, i32 0
  %368 = shufflevector <32 x float> %367, <32 x float> undef, <32 x i32> zeroinitializer
  %369 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %368, <32 x float> %362, <32 x float> %351)
  %370 = add nsw i64 %353, 128
  %371 = getelementptr inbounds float, float* %6, i64 %370
  %372 = load float, float* %371, align 4, !tbaa !7569
  %373 = insertelement <32 x float> undef, float %372, i32 0
  %374 = shufflevector <32 x float> %373, <32 x float> undef, <32 x i32> zeroinitializer
  %375 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %374, <32 x float> %362, <32 x float> %350)
  %376 = add nsw i64 %353, 192
  %377 = getelementptr inbounds float, float* %6, i64 %376
  %378 = load float, float* %377, align 4, !tbaa !7569
  %379 = insertelement <32 x float> undef, float %378, i32 0
  %380 = shufflevector <32 x float> %379, <32 x float> undef, <32 x i32> zeroinitializer
  %381 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %380, <32 x float> %362, <32 x float> %349)
  %382 = add nsw i64 %353, 256
  %383 = getelementptr inbounds float, float* %6, i64 %382
  %384 = load float, float* %383, align 4, !tbaa !7569
  %385 = insertelement <32 x float> undef, float %384, i32 0
  %386 = shufflevector <32 x float> %385, <32 x float> undef, <32 x i32> zeroinitializer
  %387 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %386, <32 x float> %362, <32 x float> %348)
  %388 = add nsw i64 %353, 320
  %389 = getelementptr inbounds float, float* %6, i64 %388
  %390 = load float, float* %389, align 4, !tbaa !7569
  %391 = insertelement <32 x float> undef, float %390, i32 0
  %392 = shufflevector <32 x float> %391, <32 x float> undef, <32 x i32> zeroinitializer
  %393 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %392, <32 x float> %362, <32 x float> %347)
  %394 = add nsw i64 %353, 384
  %395 = getelementptr inbounds float, float* %6, i64 %394
  %396 = load float, float* %395, align 4, !tbaa !7569
  %397 = insertelement <32 x float> undef, float %396, i32 0
  %398 = shufflevector <32 x float> %397, <32 x float> undef, <32 x i32> zeroinitializer
  %399 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %398, <32 x float> %362, <32 x float> %346)
  %400 = add nsw i64 %359, 2048
  %401 = getelementptr inbounds float, float* %9, i64 %400
  %402 = bitcast float* %401 to <32 x float>*
  %403 = load <32 x float>, <32 x float>* %402, align 64, !tbaa !7578
  %404 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %368, <32 x float> %403, <32 x float> %363)
  %405 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %374, <32 x float> %403, <32 x float> %369)
  %406 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %380, <32 x float> %403, <32 x float> %375)
  %407 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %386, <32 x float> %403, <32 x float> %381)
  %408 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %392, <32 x float> %403, <32 x float> %387)
  %409 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %398, <32 x float> %403, <32 x float> %393)
  %410 = add nsw i64 %353, 448
  %411 = getelementptr inbounds float, float* %6, i64 %410
  %412 = load float, float* %411, align 4, !tbaa !7569
  %413 = insertelement <32 x float> undef, float %412, i32 0
  %414 = shufflevector <32 x float> %413, <32 x float> undef, <32 x i32> zeroinitializer
  %415 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %414, <32 x float> %403, <32 x float> %399)
  %416 = add nsw i64 %359, 4096
  %417 = getelementptr inbounds float, float* %9, i64 %416
  %418 = bitcast float* %417 to <32 x float>*
  %419 = load <32 x float>, <32 x float>* %418, align 64, !tbaa !7578
  %420 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %374, <32 x float> %419, <32 x float> %404)
  %421 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %380, <32 x float> %419, <32 x float> %405)
  %422 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %386, <32 x float> %419, <32 x float> %406)
  %423 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %392, <32 x float> %419, <32 x float> %407)
  %424 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %398, <32 x float> %419, <32 x float> %408)
  %425 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %414, <32 x float> %419, <32 x float> %409)
  %426 = add nsw i64 %353, 512
  %427 = getelementptr inbounds float, float* %6, i64 %426
  %428 = load float, float* %427, align 4, !tbaa !7569
  %429 = insertelement <32 x float> undef, float %428, i32 0
  %430 = shufflevector <32 x float> %429, <32 x float> undef, <32 x i32> zeroinitializer
  %431 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %430, <32 x float> %419, <32 x float> %415)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 64
  br i1 %exitcond.2, label %for_end9.2, label %for_body8.2, !prof !50

for_end9.2:                                       ; preds = %for_body8.2
  store <32 x float> %420, <32 x float>* %.sub, align 128, !tbaa !7587
  store <32 x float> %421, <32 x float>* %35, align 128, !tbaa !7587
  store <32 x float> %422, <32 x float>* %37, align 128, !tbaa !7587
  store <32 x float> %423, <32 x float>* %39, align 128, !tbaa !7587
  store <32 x float> %424, <32 x float>* %41, align 128, !tbaa !7587
  store <32 x float> %425, <32 x float>* %43, align 128, !tbaa !7587
  store <32 x float> %431, <32 x float>* %45, align 128, !tbaa !7587
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %scevgep, i8* nonnull align 128 %4, i64 896, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond61 = icmp eq i64 %indvar.next, 8
  br i1 %exitcond61, label %for_begin13.preheader, label %for_body2, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.563, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7596
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !7610
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !7613
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !7615
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.564, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !7619
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.565, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.566, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.567, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.568, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !7621
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !7635
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 4
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.7, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !7637
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 56
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !7640
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 56
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !7642
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 16
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.168, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !7646
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 50176, i32 896, i32 16, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !7657
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 200704
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.290, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !7661
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 4
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.368, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !7675
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 4
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.569, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !7677
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !7680
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !7682
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 16
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.570, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !7686
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 16
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !7688
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 256, i32 256, i32 16, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !7699
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 256
  %187 = load i64, i64* %47, align 8, !tbaa !7703
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 1024
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([272 x i8], [272 x i8]* @.str.571, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !7705
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !7719
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 4
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.370, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !7721
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !7724
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !7726
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 16
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.59, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !7730
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 16, i32 16, i32 16, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !7741
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 64
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.572, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !7745
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !7759
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 4
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.372, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !7761
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !7764
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !7766
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 16
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.70, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !7770
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 16, i32 16, i32 16, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !7781
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 64
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.573, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !7785
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !7799
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 4
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.374, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !7801
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 56
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.558, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !7804
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 56
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.559, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !7806
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 16
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.81, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !7810
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 50176, i32 896, i32 16, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !7821
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 200704
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.574, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_1_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = alloca %48, align 8
  %7 = getelementptr inbounds %48, %48* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %48, %48* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %48, %48* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %48, %48* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %48, %48* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %48, %48* %6, i64 0, i32 5
  store i32 %5, i32* %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %48* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.575, i8* nonnull %14, i32 0)
  ret i32 %15
}

define private i32 @__tvm_parallel_lambda.575(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 223
  %23 = sdiv i32 %22, %21
  %24 = mul nsw i32 %23, %0
  %25 = icmp slt i32 %24, 224
  %26 = select i1 %25, i32 %24, i32 224
  %27 = add nsw i32 %0, 1
  %28 = mul nsw i32 %23, %27
  %29 = icmp slt i32 %28, 224
  %30 = select i1 %29, i32 %28, i32 224
  %31 = icmp slt i32 %26, %30
  br i1 %31, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end12
  %32 = phi i32 [ %385, %for_end12 ], [ %26, %entry ]
  %33 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %34 = tail call i8* %33(i32 1, i32 %19, i64 3584, i32 2, i32 32)
  %35 = bitcast i8* %34 to float*
  %36 = srem i32 %32, 56
  %37 = mul nsw i32 %36, 896
  %38 = sdiv i32 %32, 56
  %39 = shl i32 %38, 10
  %40 = sext i32 %39 to i64
  %41 = sext i32 %37 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end12, %entry
  ret i32 0

for_begin10.preheader:                            ; preds = %for_end6
  %42 = mul nsw i32 %32, 896
  %43 = shl nsw i32 %38, 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds float, float* %13, i64 %44
  %46 = bitcast float* %45 to <16 x float>*
  %47 = load <16 x float>, <16 x float>* %46, align 64, !tbaa !7825
  %48 = getelementptr inbounds float, float* %16, i64 %44
  %49 = bitcast float* %48 to <16 x float>*
  %50 = load <16 x float>, <16 x float>* %49, align 64, !tbaa !7828
  br label %for_begin13.preheader

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv90 = phi i64 [ 0, %for_body ], [ %indvars.iv.next91, %for_end6 ]
  %51 = mul nuw nsw i64 %indvars.iv90, 224
  %52 = getelementptr inbounds float, float* %35, i64 %51
  %53 = bitcast float* %52 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %53, align 64, !tbaa !7831
  %54 = or i64 %51, 16
  %55 = getelementptr inbounds float, float* %35, i64 %54
  %56 = bitcast float* %55 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %56, align 64, !tbaa !7831
  %57 = add nuw nsw i64 %51, 32
  %58 = getelementptr inbounds float, float* %35, i64 %57
  %59 = bitcast float* %58 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %59, align 64, !tbaa !7831
  %60 = add nuw nsw i64 %51, 48
  %61 = getelementptr inbounds float, float* %35, i64 %60
  %62 = bitcast float* %61 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %62, align 64, !tbaa !7831
  %63 = add nuw nsw i64 %51, 64
  %64 = getelementptr inbounds float, float* %35, i64 %63
  %65 = bitcast float* %64 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %65, align 64, !tbaa !7831
  %66 = add nuw nsw i64 %51, 80
  %67 = getelementptr inbounds float, float* %35, i64 %66
  %68 = bitcast float* %67 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %68, align 64, !tbaa !7831
  %69 = add nuw nsw i64 %51, 96
  %70 = getelementptr inbounds float, float* %35, i64 %69
  %71 = bitcast float* %70 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %71, align 64, !tbaa !7831
  %72 = add nuw nsw i64 %51, 112
  %73 = getelementptr inbounds float, float* %35, i64 %72
  %74 = bitcast float* %73 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %74, align 64, !tbaa !7831
  %75 = add nuw nsw i64 %51, 128
  %76 = getelementptr inbounds float, float* %35, i64 %75
  %77 = bitcast float* %76 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %77, align 64, !tbaa !7831
  %78 = add nuw nsw i64 %51, 144
  %79 = getelementptr inbounds float, float* %35, i64 %78
  %80 = bitcast float* %79 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %80, align 64, !tbaa !7831
  %81 = add nuw nsw i64 %51, 160
  %82 = getelementptr inbounds float, float* %35, i64 %81
  %83 = bitcast float* %82 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %83, align 64, !tbaa !7831
  %84 = add nuw nsw i64 %51, 176
  %85 = getelementptr inbounds float, float* %35, i64 %84
  %86 = bitcast float* %85 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %86, align 64, !tbaa !7831
  %87 = add nuw nsw i64 %51, 192
  %88 = getelementptr inbounds float, float* %35, i64 %87
  %89 = bitcast float* %88 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %89, align 64, !tbaa !7831
  %90 = add nuw nsw i64 %51, 208
  %91 = getelementptr inbounds float, float* %35, i64 %90
  %92 = bitcast float* %91 to <16 x float>*
  store <16 x float> zeroinitializer, <16 x float>* %92, align 64, !tbaa !7831
  %93 = add nsw i64 %51, %41
  br label %for_begin7.preheader

for_begin7.preheader:                             ; preds = %for_end9, %for_body2
  %indvars.iv87 = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next88, %for_end9 ]
  %.lcssa4673 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %200, %for_end9 ]
  %.lcssa4471 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %194, %for_end9 ]
  %.lcssa4269 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %188, %for_end9 ]
  %.lcssa4067 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %182, %for_end9 ]
  %.lcssa3865 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %176, %for_end9 ]
  %.lcssa3663 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %170, %for_end9 ]
  %.lcssa3461 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %164, %for_end9 ]
  %.lcssa3259 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %158, %for_end9 ]
  %.lcssa3057 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %152, %for_end9 ]
  %.lcssa2855 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %146, %for_end9 ]
  %.lcssa2653 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %140, %for_end9 ]
  %.lcssa2451 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %134, %for_end9 ]
  %.lcssa2249 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %128, %for_end9 ]
  %.lcssa48 = phi <16 x float> [ zeroinitializer, %for_body2 ], [ %122, %for_end9 ]
  %94 = mul nuw nsw i64 %indvars.iv87, 50176
  %95 = add nsw i64 %93, %94
  %96 = shl i64 %indvars.iv87, 8
  %97 = add nuw nsw i64 %96, %40
  br label %for_body8

for_end6:                                         ; preds = %for_end9
  store <16 x float> %122, <16 x float>* %53, align 64, !tbaa !7831
  store <16 x float> %128, <16 x float>* %56, align 64, !tbaa !7831
  store <16 x float> %134, <16 x float>* %59, align 64, !tbaa !7831
  store <16 x float> %140, <16 x float>* %62, align 64, !tbaa !7831
  store <16 x float> %146, <16 x float>* %65, align 64, !tbaa !7831
  store <16 x float> %152, <16 x float>* %68, align 64, !tbaa !7831
  store <16 x float> %158, <16 x float>* %71, align 64, !tbaa !7831
  store <16 x float> %164, <16 x float>* %74, align 64, !tbaa !7831
  store <16 x float> %170, <16 x float>* %77, align 64, !tbaa !7831
  store <16 x float> %176, <16 x float>* %80, align 64, !tbaa !7831
  store <16 x float> %182, <16 x float>* %83, align 64, !tbaa !7831
  store <16 x float> %188, <16 x float>* %86, align 64, !tbaa !7831
  store <16 x float> %194, <16 x float>* %89, align 64, !tbaa !7831
  store <16 x float> %200, <16 x float>* %92, align 64, !tbaa !7831
  %indvars.iv.next91 = add nuw nsw i64 %indvars.iv90, 1
  %exitcond92 = icmp eq i64 %indvars.iv.next91, 4
  br i1 %exitcond92, label %for_begin10.preheader, label %for_body2, !prof !50

for_body8:                                        ; preds = %for_body8, %for_begin7.preheader
  %indvars.iv = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next, %for_body8 ]
  %98 = phi <16 x float> [ %.lcssa4673, %for_begin7.preheader ], [ %200, %for_body8 ]
  %99 = phi <16 x float> [ %.lcssa4471, %for_begin7.preheader ], [ %194, %for_body8 ]
  %100 = phi <16 x float> [ %.lcssa4269, %for_begin7.preheader ], [ %188, %for_body8 ]
  %101 = phi <16 x float> [ %.lcssa4067, %for_begin7.preheader ], [ %182, %for_body8 ]
  %102 = phi <16 x float> [ %.lcssa3865, %for_begin7.preheader ], [ %176, %for_body8 ]
  %103 = phi <16 x float> [ %.lcssa3663, %for_begin7.preheader ], [ %170, %for_body8 ]
  %104 = phi <16 x float> [ %.lcssa3461, %for_begin7.preheader ], [ %164, %for_body8 ]
  %105 = phi <16 x float> [ %.lcssa3259, %for_begin7.preheader ], [ %158, %for_body8 ]
  %106 = phi <16 x float> [ %.lcssa3057, %for_begin7.preheader ], [ %152, %for_body8 ]
  %107 = phi <16 x float> [ %.lcssa2855, %for_begin7.preheader ], [ %146, %for_body8 ]
  %108 = phi <16 x float> [ %.lcssa2653, %for_begin7.preheader ], [ %140, %for_body8 ]
  %109 = phi <16 x float> [ %.lcssa2451, %for_begin7.preheader ], [ %134, %for_body8 ]
  %110 = phi <16 x float> [ %.lcssa2249, %for_begin7.preheader ], [ %128, %for_body8 ]
  %111 = phi <16 x float> [ %.lcssa48, %for_begin7.preheader ], [ %122, %for_body8 ]
  %112 = add nsw i64 %95, %indvars.iv
  %113 = getelementptr inbounds float, float* %4, i64 %112
  %114 = load float, float* %113, align 4, !tbaa !7834
  %115 = insertelement <16 x float> undef, float %114, i32 0
  %116 = shufflevector <16 x float> %115, <16 x float> undef, <16 x i32> zeroinitializer
  %117 = shl i64 %indvars.iv, 4
  %118 = add nuw nsw i64 %97, %117
  %119 = getelementptr inbounds float, float* %7, i64 %118
  %120 = bitcast float* %119 to <16 x float>*
  %121 = load <16 x float>, <16 x float>* %120, align 64, !tbaa !7837
  %122 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %116, <16 x float> %121, <16 x float> %111)
  %123 = add nsw i64 %112, 16
  %124 = getelementptr inbounds float, float* %4, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !7834
  %126 = insertelement <16 x float> undef, float %125, i32 0
  %127 = shufflevector <16 x float> %126, <16 x float> undef, <16 x i32> zeroinitializer
  %128 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %127, <16 x float> %121, <16 x float> %110)
  %129 = add nsw i64 %112, 32
  %130 = getelementptr inbounds float, float* %4, i64 %129
  %131 = load float, float* %130, align 4, !tbaa !7834
  %132 = insertelement <16 x float> undef, float %131, i32 0
  %133 = shufflevector <16 x float> %132, <16 x float> undef, <16 x i32> zeroinitializer
  %134 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %133, <16 x float> %121, <16 x float> %109)
  %135 = add nsw i64 %112, 48
  %136 = getelementptr inbounds float, float* %4, i64 %135
  %137 = load float, float* %136, align 4, !tbaa !7834
  %138 = insertelement <16 x float> undef, float %137, i32 0
  %139 = shufflevector <16 x float> %138, <16 x float> undef, <16 x i32> zeroinitializer
  %140 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %139, <16 x float> %121, <16 x float> %108)
  %141 = add nsw i64 %112, 64
  %142 = getelementptr inbounds float, float* %4, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !7834
  %144 = insertelement <16 x float> undef, float %143, i32 0
  %145 = shufflevector <16 x float> %144, <16 x float> undef, <16 x i32> zeroinitializer
  %146 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %145, <16 x float> %121, <16 x float> %107)
  %147 = add nsw i64 %112, 80
  %148 = getelementptr inbounds float, float* %4, i64 %147
  %149 = load float, float* %148, align 4, !tbaa !7834
  %150 = insertelement <16 x float> undef, float %149, i32 0
  %151 = shufflevector <16 x float> %150, <16 x float> undef, <16 x i32> zeroinitializer
  %152 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %151, <16 x float> %121, <16 x float> %106)
  %153 = add nsw i64 %112, 96
  %154 = getelementptr inbounds float, float* %4, i64 %153
  %155 = load float, float* %154, align 4, !tbaa !7834
  %156 = insertelement <16 x float> undef, float %155, i32 0
  %157 = shufflevector <16 x float> %156, <16 x float> undef, <16 x i32> zeroinitializer
  %158 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %157, <16 x float> %121, <16 x float> %105)
  %159 = add nsw i64 %112, 112
  %160 = getelementptr inbounds float, float* %4, i64 %159
  %161 = load float, float* %160, align 4, !tbaa !7834
  %162 = insertelement <16 x float> undef, float %161, i32 0
  %163 = shufflevector <16 x float> %162, <16 x float> undef, <16 x i32> zeroinitializer
  %164 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %163, <16 x float> %121, <16 x float> %104)
  %165 = add nsw i64 %112, 128
  %166 = getelementptr inbounds float, float* %4, i64 %165
  %167 = load float, float* %166, align 4, !tbaa !7834
  %168 = insertelement <16 x float> undef, float %167, i32 0
  %169 = shufflevector <16 x float> %168, <16 x float> undef, <16 x i32> zeroinitializer
  %170 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %169, <16 x float> %121, <16 x float> %103)
  %171 = add nsw i64 %112, 144
  %172 = getelementptr inbounds float, float* %4, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !7834
  %174 = insertelement <16 x float> undef, float %173, i32 0
  %175 = shufflevector <16 x float> %174, <16 x float> undef, <16 x i32> zeroinitializer
  %176 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %175, <16 x float> %121, <16 x float> %102)
  %177 = add nsw i64 %112, 160
  %178 = getelementptr inbounds float, float* %4, i64 %177
  %179 = load float, float* %178, align 4, !tbaa !7834
  %180 = insertelement <16 x float> undef, float %179, i32 0
  %181 = shufflevector <16 x float> %180, <16 x float> undef, <16 x i32> zeroinitializer
  %182 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %181, <16 x float> %121, <16 x float> %101)
  %183 = add nsw i64 %112, 176
  %184 = getelementptr inbounds float, float* %4, i64 %183
  %185 = load float, float* %184, align 4, !tbaa !7834
  %186 = insertelement <16 x float> undef, float %185, i32 0
  %187 = shufflevector <16 x float> %186, <16 x float> undef, <16 x i32> zeroinitializer
  %188 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %187, <16 x float> %121, <16 x float> %100)
  %189 = add nsw i64 %112, 192
  %190 = getelementptr inbounds float, float* %4, i64 %189
  %191 = load float, float* %190, align 4, !tbaa !7834
  %192 = insertelement <16 x float> undef, float %191, i32 0
  %193 = shufflevector <16 x float> %192, <16 x float> undef, <16 x i32> zeroinitializer
  %194 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %193, <16 x float> %121, <16 x float> %99)
  %195 = add nsw i64 %112, 208
  %196 = getelementptr inbounds float, float* %4, i64 %195
  %197 = load float, float* %196, align 4, !tbaa !7834
  %198 = insertelement <16 x float> undef, float %197, i32 0
  %199 = shufflevector <16 x float> %198, <16 x float> undef, <16 x i32> zeroinitializer
  %200 = tail call <16 x float> @llvm.fmuladd.v16f32(<16 x float> %199, <16 x float> %121, <16 x float> %98)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 16
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv87, 1
  %exitcond89 = icmp eq i64 %indvars.iv.next88, 4
  br i1 %exitcond89, label %for_end6, label %for_begin7.preheader, !prof !50

for_begin13.preheader:                            ; preds = %for_begin13.preheader, %for_begin10.preheader
  %indvars.iv96 = phi i64 [ 0, %for_begin10.preheader ], [ %indvars.iv.next97, %for_begin13.preheader ]
  %201 = mul nuw nsw i64 %indvars.iv96, 224
  %202 = trunc i64 %201 to i32
  %203 = add i32 %42, %202
  %204 = getelementptr inbounds float, float* %35, i64 %201
  %205 = bitcast float* %204 to <16 x float>*
  %206 = load <16 x float>, <16 x float>* %205, align 64, !tbaa !7831
  %207 = fadd <16 x float> %206, %47
  %208 = fadd <16 x float> %207, %50
  %209 = fcmp ogt <16 x float> %208, zeroinitializer
  %210 = select <16 x i1> %209, <16 x float> %208, <16 x float> zeroinitializer
  %211 = sext i32 %203 to i64
  %212 = getelementptr inbounds float, float* %10, i64 %211
  %213 = bitcast float* %212 to <16 x float>*
  store <16 x float> %210, <16 x float>* %213, align 64, !tbaa !7840
  %214 = or i64 %201, 16
  %215 = trunc i64 %214 to i32
  %216 = add i32 %42, %215
  %217 = getelementptr inbounds float, float* %35, i64 %214
  %218 = bitcast float* %217 to <16 x float>*
  %219 = load <16 x float>, <16 x float>* %218, align 64, !tbaa !7831
  %220 = fadd <16 x float> %219, %47
  %221 = fadd <16 x float> %220, %50
  %222 = fcmp ogt <16 x float> %221, zeroinitializer
  %223 = select <16 x i1> %222, <16 x float> %221, <16 x float> zeroinitializer
  %224 = sext i32 %216 to i64
  %225 = getelementptr inbounds float, float* %10, i64 %224
  %226 = bitcast float* %225 to <16 x float>*
  store <16 x float> %223, <16 x float>* %226, align 64, !tbaa !7840
  %227 = add nuw nsw i64 %201, 32
  %228 = trunc i64 %227 to i32
  %229 = add i32 %42, %228
  %230 = getelementptr inbounds float, float* %35, i64 %227
  %231 = bitcast float* %230 to <16 x float>*
  %232 = load <16 x float>, <16 x float>* %231, align 64, !tbaa !7831
  %233 = fadd <16 x float> %232, %47
  %234 = fadd <16 x float> %233, %50
  %235 = fcmp ogt <16 x float> %234, zeroinitializer
  %236 = select <16 x i1> %235, <16 x float> %234, <16 x float> zeroinitializer
  %237 = sext i32 %229 to i64
  %238 = getelementptr inbounds float, float* %10, i64 %237
  %239 = bitcast float* %238 to <16 x float>*
  store <16 x float> %236, <16 x float>* %239, align 64, !tbaa !7840
  %240 = add nuw nsw i64 %201, 48
  %241 = trunc i64 %240 to i32
  %242 = add i32 %42, %241
  %243 = getelementptr inbounds float, float* %35, i64 %240
  %244 = bitcast float* %243 to <16 x float>*
  %245 = load <16 x float>, <16 x float>* %244, align 64, !tbaa !7831
  %246 = fadd <16 x float> %245, %47
  %247 = fadd <16 x float> %246, %50
  %248 = fcmp ogt <16 x float> %247, zeroinitializer
  %249 = select <16 x i1> %248, <16 x float> %247, <16 x float> zeroinitializer
  %250 = sext i32 %242 to i64
  %251 = getelementptr inbounds float, float* %10, i64 %250
  %252 = bitcast float* %251 to <16 x float>*
  store <16 x float> %249, <16 x float>* %252, align 64, !tbaa !7840
  %253 = add nuw nsw i64 %201, 64
  %254 = trunc i64 %253 to i32
  %255 = add i32 %42, %254
  %256 = getelementptr inbounds float, float* %35, i64 %253
  %257 = bitcast float* %256 to <16 x float>*
  %258 = load <16 x float>, <16 x float>* %257, align 64, !tbaa !7831
  %259 = fadd <16 x float> %258, %47
  %260 = fadd <16 x float> %259, %50
  %261 = fcmp ogt <16 x float> %260, zeroinitializer
  %262 = select <16 x i1> %261, <16 x float> %260, <16 x float> zeroinitializer
  %263 = sext i32 %255 to i64
  %264 = getelementptr inbounds float, float* %10, i64 %263
  %265 = bitcast float* %264 to <16 x float>*
  store <16 x float> %262, <16 x float>* %265, align 64, !tbaa !7840
  %266 = add nuw nsw i64 %201, 80
  %267 = trunc i64 %266 to i32
  %268 = add i32 %42, %267
  %269 = getelementptr inbounds float, float* %35, i64 %266
  %270 = bitcast float* %269 to <16 x float>*
  %271 = load <16 x float>, <16 x float>* %270, align 64, !tbaa !7831
  %272 = fadd <16 x float> %271, %47
  %273 = fadd <16 x float> %272, %50
  %274 = fcmp ogt <16 x float> %273, zeroinitializer
  %275 = select <16 x i1> %274, <16 x float> %273, <16 x float> zeroinitializer
  %276 = sext i32 %268 to i64
  %277 = getelementptr inbounds float, float* %10, i64 %276
  %278 = bitcast float* %277 to <16 x float>*
  store <16 x float> %275, <16 x float>* %278, align 64, !tbaa !7840
  %279 = add nuw nsw i64 %201, 96
  %280 = trunc i64 %279 to i32
  %281 = add i32 %42, %280
  %282 = getelementptr inbounds float, float* %35, i64 %279
  %283 = bitcast float* %282 to <16 x float>*
  %284 = load <16 x float>, <16 x float>* %283, align 64, !tbaa !7831
  %285 = fadd <16 x float> %284, %47
  %286 = fadd <16 x float> %285, %50
  %287 = fcmp ogt <16 x float> %286, zeroinitializer
  %288 = select <16 x i1> %287, <16 x float> %286, <16 x float> zeroinitializer
  %289 = sext i32 %281 to i64
  %290 = getelementptr inbounds float, float* %10, i64 %289
  %291 = bitcast float* %290 to <16 x float>*
  store <16 x float> %288, <16 x float>* %291, align 64, !tbaa !7840
  %292 = add nuw nsw i64 %201, 112
  %293 = trunc i64 %292 to i32
  %294 = add i32 %42, %293
  %295 = getelementptr inbounds float, float* %35, i64 %292
  %296 = bitcast float* %295 to <16 x float>*
  %297 = load <16 x float>, <16 x float>* %296, align 64, !tbaa !7831
  %298 = fadd <16 x float> %297, %47
  %299 = fadd <16 x float> %298, %50
  %300 = fcmp ogt <16 x float> %299, zeroinitializer
  %301 = select <16 x i1> %300, <16 x float> %299, <16 x float> zeroinitializer
  %302 = sext i32 %294 to i64
  %303 = getelementptr inbounds float, float* %10, i64 %302
  %304 = bitcast float* %303 to <16 x float>*
  store <16 x float> %301, <16 x float>* %304, align 64, !tbaa !7840
  %305 = add nuw nsw i64 %201, 128
  %306 = trunc i64 %305 to i32
  %307 = add i32 %42, %306
  %308 = getelementptr inbounds float, float* %35, i64 %305
  %309 = bitcast float* %308 to <16 x float>*
  %310 = load <16 x float>, <16 x float>* %309, align 64, !tbaa !7831
  %311 = fadd <16 x float> %310, %47
  %312 = fadd <16 x float> %311, %50
  %313 = fcmp ogt <16 x float> %312, zeroinitializer
  %314 = select <16 x i1> %313, <16 x float> %312, <16 x float> zeroinitializer
  %315 = sext i32 %307 to i64
  %316 = getelementptr inbounds float, float* %10, i64 %315
  %317 = bitcast float* %316 to <16 x float>*
  store <16 x float> %314, <16 x float>* %317, align 64, !tbaa !7840
  %318 = add nuw nsw i64 %201, 144
  %319 = trunc i64 %318 to i32
  %320 = add i32 %42, %319
  %321 = getelementptr inbounds float, float* %35, i64 %318
  %322 = bitcast float* %321 to <16 x float>*
  %323 = load <16 x float>, <16 x float>* %322, align 64, !tbaa !7831
  %324 = fadd <16 x float> %323, %47
  %325 = fadd <16 x float> %324, %50
  %326 = fcmp ogt <16 x float> %325, zeroinitializer
  %327 = select <16 x i1> %326, <16 x float> %325, <16 x float> zeroinitializer
  %328 = sext i32 %320 to i64
  %329 = getelementptr inbounds float, float* %10, i64 %328
  %330 = bitcast float* %329 to <16 x float>*
  store <16 x float> %327, <16 x float>* %330, align 64, !tbaa !7840
  %331 = add nuw nsw i64 %201, 160
  %332 = trunc i64 %331 to i32
  %333 = add i32 %42, %332
  %334 = getelementptr inbounds float, float* %35, i64 %331
  %335 = bitcast float* %334 to <16 x float>*
  %336 = load <16 x float>, <16 x float>* %335, align 64, !tbaa !7831
  %337 = fadd <16 x float> %336, %47
  %338 = fadd <16 x float> %337, %50
  %339 = fcmp ogt <16 x float> %338, zeroinitializer
  %340 = select <16 x i1> %339, <16 x float> %338, <16 x float> zeroinitializer
  %341 = sext i32 %333 to i64
  %342 = getelementptr inbounds float, float* %10, i64 %341
  %343 = bitcast float* %342 to <16 x float>*
  store <16 x float> %340, <16 x float>* %343, align 64, !tbaa !7840
  %344 = add nuw nsw i64 %201, 176
  %345 = trunc i64 %344 to i32
  %346 = add i32 %42, %345
  %347 = getelementptr inbounds float, float* %35, i64 %344
  %348 = bitcast float* %347 to <16 x float>*
  %349 = load <16 x float>, <16 x float>* %348, align 64, !tbaa !7831
  %350 = fadd <16 x float> %349, %47
  %351 = fadd <16 x float> %350, %50
  %352 = fcmp ogt <16 x float> %351, zeroinitializer
  %353 = select <16 x i1> %352, <16 x float> %351, <16 x float> zeroinitializer
  %354 = sext i32 %346 to i64
  %355 = getelementptr inbounds float, float* %10, i64 %354
  %356 = bitcast float* %355 to <16 x float>*
  store <16 x float> %353, <16 x float>* %356, align 64, !tbaa !7840
  %357 = add nuw nsw i64 %201, 192
  %358 = trunc i64 %357 to i32
  %359 = add i32 %42, %358
  %360 = getelementptr inbounds float, float* %35, i64 %357
  %361 = bitcast float* %360 to <16 x float>*
  %362 = load <16 x float>, <16 x float>* %361, align 64, !tbaa !7831
  %363 = fadd <16 x float> %362, %47
  %364 = fadd <16 x float> %363, %50
  %365 = fcmp ogt <16 x float> %364, zeroinitializer
  %366 = select <16 x i1> %365, <16 x float> %364, <16 x float> zeroinitializer
  %367 = sext i32 %359 to i64
  %368 = getelementptr inbounds float, float* %10, i64 %367
  %369 = bitcast float* %368 to <16 x float>*
  store <16 x float> %366, <16 x float>* %369, align 64, !tbaa !7840
  %370 = add nuw nsw i64 %201, 208
  %371 = trunc i64 %370 to i32
  %372 = add i32 %42, %371
  %373 = getelementptr inbounds float, float* %35, i64 %370
  %374 = bitcast float* %373 to <16 x float>*
  %375 = load <16 x float>, <16 x float>* %374, align 64, !tbaa !7831
  %376 = fadd <16 x float> %375, %47
  %377 = fadd <16 x float> %376, %50
  %378 = fcmp ogt <16 x float> %377, zeroinitializer
  %379 = select <16 x i1> %378, <16 x float> %377, <16 x float> zeroinitializer
  %380 = sext i32 %372 to i64
  %381 = getelementptr inbounds float, float* %10, i64 %380
  %382 = bitcast float* %381 to <16 x float>*
  store <16 x float> %379, <16 x float>* %382, align 64, !tbaa !7840
  %indvars.iv.next97 = add nuw nsw i64 %indvars.iv96, 1
  %exitcond98 = icmp eq i64 %indvars.iv.next97, 4
  br i1 %exitcond98, label %for_end12, label %for_begin13.preheader, !prof !50

for_end12:                                        ; preds = %for_begin13.preheader
  %383 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %384 = tail call i32 %383(i32 1, i32 %19, i8* nonnull %34)
  %385 = add nsw i32 %32, 1
  %386 = icmp slt i32 %385, %30
  br i1 %386, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_37(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.576, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7843
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.577, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !7857
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.578, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !7859
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !7873
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 8
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.27, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !7875
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 56
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !7878
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 56
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !7880
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 8
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.30, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !7884
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 25088, i32 448, i32 8, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !7895
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 200704
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([238 x i8], [238 x i8]* @.str.495, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !7899
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !7913
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 4
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.569, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !7915
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 56
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !7918
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 56
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !7920
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 16
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.570, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !7924
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 50176, i32 896, i32 16, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !7935
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 200704
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.579, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_37_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_37_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %49, align 8
  %3 = getelementptr inbounds %49, %49* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %49, %49* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %49* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.580, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.580(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 223
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 224
  %14 = select i1 %13, i32 %12, i32 224
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 224
  %18 = select i1 %17, i32 %16, i32 224
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv4 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next5, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv4, 896
  %25 = trunc i64 %indvars.iv4 to i32
  %26 = sdiv i32 %25, 56
  %27 = mul nsw i32 %26, 50176
  %28 = insertelement <16 x i32> undef, i32 %27, i32 0
  %29 = shufflevector <16 x i32> %28, <16 x i32> undef, <16 x i32> zeroinitializer
  %30 = srem i32 %25, 56
  %31 = mul nsw i32 %30, 448
  %32 = insertelement <16 x i32> undef, i32 %31, i32 0
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  %34 = add <16 x i32> %29, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 25088, i32 25089, i32 25090, i32 25091, i32 25092, i32 25093, i32 25094, i32 25095>
  %35 = add <16 x i32> %34, %33
  br label %for_body2

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_body2:                                        ; preds = %for_body2, %for_begin1.preheader
  %indvars.iv = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next, %for_body2 ]
  %36 = shl i64 %indvars.iv, 4
  %37 = add nsw i64 %36, %24
  %indvars.iv.tr = trunc i64 %indvars.iv to i32
  %38 = shl i32 %indvars.iv.tr, 3
  %39 = insertelement <16 x i32> undef, i32 %38, i32 0
  %40 = shufflevector <16 x i32> %39, <16 x i32> undef, <16 x i32> zeroinitializer
  %41 = add <16 x i32> %35, %40
  %42 = extractelement <16 x i32> %41, i64 0
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds float, float* %7, i64 %43
  %45 = load float, float* %44, align 4, !tbaa !7939
  %46 = insertelement <16 x float> undef, float %45, i32 0
  %47 = extractelement <16 x i32> %41, i64 1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds float, float* %7, i64 %48
  %50 = load float, float* %49, align 4, !tbaa !7939
  %51 = insertelement <16 x float> %46, float %50, i32 1
  %52 = extractelement <16 x i32> %41, i64 2
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds float, float* %7, i64 %53
  %55 = load float, float* %54, align 4, !tbaa !7939
  %56 = insertelement <16 x float> %51, float %55, i32 2
  %57 = extractelement <16 x i32> %41, i64 3
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds float, float* %7, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !7939
  %61 = insertelement <16 x float> %56, float %60, i32 3
  %62 = extractelement <16 x i32> %41, i64 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %7, i64 %63
  %65 = load float, float* %64, align 4, !tbaa !7939
  %66 = insertelement <16 x float> %61, float %65, i32 4
  %67 = extractelement <16 x i32> %41, i64 5
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds float, float* %7, i64 %68
  %70 = load float, float* %69, align 4, !tbaa !7939
  %71 = insertelement <16 x float> %66, float %70, i32 5
  %72 = extractelement <16 x i32> %41, i64 6
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, float* %7, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !7939
  %76 = insertelement <16 x float> %71, float %75, i32 6
  %77 = extractelement <16 x i32> %41, i64 7
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds float, float* %7, i64 %78
  %80 = load float, float* %79, align 4, !tbaa !7939
  %81 = insertelement <16 x float> %76, float %80, i32 7
  %82 = extractelement <16 x i32> %41, i64 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds float, float* %7, i64 %83
  %85 = load float, float* %84, align 4, !tbaa !7939
  %86 = insertelement <16 x float> %81, float %85, i32 8
  %87 = extractelement <16 x i32> %41, i64 9
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds float, float* %7, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !7939
  %91 = insertelement <16 x float> %86, float %90, i32 9
  %92 = extractelement <16 x i32> %41, i64 10
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds float, float* %7, i64 %93
  %95 = load float, float* %94, align 4, !tbaa !7939
  %96 = insertelement <16 x float> %91, float %95, i32 10
  %97 = extractelement <16 x i32> %41, i64 11
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds float, float* %7, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !7939
  %101 = insertelement <16 x float> %96, float %100, i32 11
  %102 = extractelement <16 x i32> %41, i64 12
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds float, float* %7, i64 %103
  %105 = load float, float* %104, align 4, !tbaa !7939
  %106 = insertelement <16 x float> %101, float %105, i32 12
  %107 = extractelement <16 x i32> %41, i64 13
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float* %7, i64 %108
  %110 = load float, float* %109, align 4, !tbaa !7939
  %111 = insertelement <16 x float> %106, float %110, i32 13
  %112 = extractelement <16 x i32> %41, i64 14
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds float, float* %7, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !7939
  %116 = insertelement <16 x float> %111, float %115, i32 14
  %117 = extractelement <16 x i32> %41, i64 15
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds float, float* %7, i64 %118
  %120 = load float, float* %119, align 4, !tbaa !7939
  %121 = insertelement <16 x float> %116, float %120, i32 15
  %122 = getelementptr inbounds float, float* %4, i64 %37
  %123 = bitcast float* %122 to <16 x float>*
  store <16 x float> %121, <16 x float>* %123, align 64, !tbaa !7942
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 56
  br i1 %exitcond, label %for_end3, label %for_body2, !prof !50

for_end3:                                         ; preds = %for_body2
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, 1
  %124 = icmp slt i64 %indvars.iv.next5, %23
  br i1 %124, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_layout_transform_38(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.581, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !7945
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.582, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !7959
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.583, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 5
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !7961
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !7975
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 2
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !7977
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 56
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !7980
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 56
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = getelementptr inbounds i64, i64* %17, i64 4
  %73 = load i64, i64* %72, align 8, !tbaa !7982
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %74, 32
  br i1 %75, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %76(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.180, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %77 = icmp eq i64* %19, null
  br i1 %77, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end20
  %78 = getelementptr inbounds i64, i64* %19, i64 1
  %79 = bitcast i64* %78 to <4 x i64>*
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !tbaa !7986
  %81 = trunc <4 x i64> %80 to <4 x i32>
  %82 = icmp eq <4 x i32> %81, <i32 100352, i32 1792, i32 32, i32 1>
  %83 = load i64, i64* %19, align 8, !tbaa !7997
  %84 = trunc i64 %83 to i32
  %85 = icmp eq i32 %84, 200704
  %rdx.shuf51 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %82, %rdx.shuf51
  %rdx.shuf53 = shufflevector <4 x i1> %bin.rdx52, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx54 = and <4 x i1> %bin.rdx52, %rdx.shuf53
  %86 = extractelement <4 x i1> %bin.rdx54, i32 0
  %87 = and i1 %86, %85
  br i1 %87, label %if_end, label %assert_fail21, !prof !5

if_end:                                           ; preds = %assert_end20, %if_then
  %88 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %assert_end24, label %assert_fail23, !prof !5

assert_fail21:                                    ; preds = %if_then
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.450, i64 0, i64 0))
  ret i32 -1

assert_fail23:                                    ; preds = %if_end
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %92(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %if_end
  %93 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 5
  br i1 %95, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %96(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %97 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %98 = load i8, i8* %97, align 1
  %99 = icmp eq i8 %98, 2
  %100 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, 32
  %103 = and i1 %99, %102
  %104 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %105 = load i16, i16* %104, align 2
  %106 = icmp eq i16 %105, 1
  %107 = and i1 %103, %106
  br i1 %107, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %108(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %109 = load i64, i64* %27, align 8, !tbaa !8001
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %113 = getelementptr inbounds i64, i64* %27, i64 1
  %114 = load i64, i64* %113, align 8, !tbaa !8015
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 1
  br i1 %116, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %118 = getelementptr inbounds i64, i64* %27, i64 2
  %119 = load i64, i64* %118, align 8, !tbaa !8017
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 56
  br i1 %121, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.245, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %123 = getelementptr inbounds i64, i64* %27, i64 3
  %124 = load i64, i64* %123, align 8, !tbaa !8020
  %125 = trunc i64 %124 to i32
  %126 = icmp eq i32 %125, 56
  br i1 %126, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %127(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.246, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %128 = getelementptr inbounds i64, i64* %27, i64 4
  %129 = load i64, i64* %128, align 8, !tbaa !8022
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 64
  br i1 %131, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %132(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.291, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %133 = icmp eq i64* %29, null
  br i1 %133, label %if_end40, label %if_then39, !prof !50

if_then39:                                        ; preds = %assert_end38
  %134 = getelementptr inbounds i64, i64* %29, i64 1
  %135 = bitcast i64* %134 to <4 x i64>*
  %136 = load <4 x i64>, <4 x i64>* %135, align 8, !tbaa !8026
  %137 = trunc <4 x i64> %136 to <4 x i32>
  %138 = icmp eq <4 x i32> %137, <i32 200704, i32 3584, i32 64, i32 1>
  %139 = load i64, i64* %29, align 8, !tbaa !8037
  %140 = trunc i64 %139 to i32
  %141 = icmp eq i32 %140, 200704
  %rdx.shuf = shufflevector <4 x i1> %138, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %138, %rdx.shuf
  %rdx.shuf49 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %bin.rdx, %rdx.shuf49
  %142 = extractelement <4 x i1> %bin.rdx50, i32 0
  %143 = and i1 %142, %141
  br i1 %143, label %if_end40, label %assert_fail41, !prof !5

if_end40:                                         ; preds = %assert_end38, %if_then39
  %144 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %145 = load i64, i64* %144, align 8
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %assert_end44, label %assert_fail43, !prof !5

assert_fail41:                                    ; preds = %if_then39
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.292, i64 0, i64 0))
  ret i32 -1

assert_fail43:                                    ; preds = %if_end40
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %148(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %if_end40
  %149 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %152(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %153 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %23, %154
  br i1 %155, label %assert_end48, label %assert_fail47, !prof !5

assert_fail47:                                    ; preds = %assert_end46
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end48:                                     ; preds = %assert_end46
  %157 = tail call fastcc i32 @fused_layout_transform_38_compute_(i8* %25, i8* %15)
  ret i32 %157
}

; Function Attrs: noinline
define private fastcc i32 @fused_layout_transform_38_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %50, align 8
  %3 = getelementptr inbounds %50, %50* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %50, %50* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %50* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.584, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.584(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 55
  %11 = sdiv i32 %10, %9
  %12 = mul nsw i32 %11, %0
  %13 = icmp slt i32 %12, 56
  %14 = select i1 %13, i32 %12, i32 56
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 56
  %18 = select i1 %17, i32 %16, i32 56
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = add i32 %14, 1
  %21 = sext i32 %20 to i64
  %22 = add nsw i64 %21, -1
  %23 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv10 = phi i64 [ %22, %for_begin1.preheader.preheader ], [ %indvars.iv.next11, %for_end3 ]
  %24 = mul nsw i64 %indvars.iv10, 3584
  %25 = trunc i64 %indvars.iv10 to i32
  %26 = mul i32 %25, 1792
  %27 = insertelement <16 x i32> undef, i32 %26, i32 0
  br label %for_begin4.preheader

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_begin4.preheader:                             ; preds = %for_end6, %for_begin1.preheader
  %indvars.iv7 = phi i64 [ 0, %for_begin1.preheader ], [ %indvars.iv.next8, %for_end6 ]
  %28 = shl i64 %indvars.iv7, 6
  %29 = add nsw i64 %28, %24
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32
  %30 = shl i32 %indvars.iv7.tr, 5
  %31 = insertelement <16 x i32> undef, i32 %30, i32 0
  %32 = add <16 x i32> %31, %27
  %33 = shufflevector <16 x i32> %32, <16 x i32> undef, <16 x i32> zeroinitializer
  br label %for_body5

for_end3:                                         ; preds = %for_end6
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %34 = icmp slt i64 %indvars.iv.next11, %23
  br i1 %34, label %for_begin1.preheader, label %for_end, !prof !5

for_body5:                                        ; preds = %for_body5, %for_begin4.preheader
  %indvars.iv = phi i64 [ 0, %for_begin4.preheader ], [ %indvars.iv.next, %for_body5 ]
  %35 = shl nsw i64 %indvars.iv, 4
  %36 = add nsw i64 %29, %35
  %37 = trunc i64 %35 to i32
  %38 = insertelement <16 x i32> undef, i32 %37, i32 0
  %39 = trunc i64 %35 to i32
  %40 = or i32 %39, 1
  %41 = insertelement <16 x i32> %38, i32 %40, i32 1
  %42 = trunc i64 %35 to i32
  %43 = or i32 %42, 2
  %44 = insertelement <16 x i32> %41, i32 %43, i32 2
  %45 = trunc i64 %35 to i32
  %46 = or i32 %45, 3
  %47 = insertelement <16 x i32> %44, i32 %46, i32 3
  %48 = trunc i64 %35 to i32
  %49 = or i32 %48, 4
  %50 = insertelement <16 x i32> %47, i32 %49, i32 4
  %51 = trunc i64 %35 to i32
  %52 = or i32 %51, 5
  %53 = insertelement <16 x i32> %50, i32 %52, i32 5
  %54 = trunc i64 %35 to i32
  %55 = or i32 %54, 6
  %56 = insertelement <16 x i32> %53, i32 %55, i32 6
  %57 = trunc i64 %35 to i32
  %58 = or i32 %57, 7
  %59 = insertelement <16 x i32> %56, i32 %58, i32 7
  %60 = trunc i64 %35 to i32
  %61 = or i32 %60, 8
  %62 = insertelement <16 x i32> %59, i32 %61, i32 8
  %63 = trunc i64 %35 to i32
  %64 = or i32 %63, 9
  %65 = insertelement <16 x i32> %62, i32 %64, i32 9
  %66 = trunc i64 %35 to i32
  %67 = or i32 %66, 10
  %68 = insertelement <16 x i32> %65, i32 %67, i32 10
  %69 = trunc i64 %35 to i32
  %70 = or i32 %69, 11
  %71 = insertelement <16 x i32> %68, i32 %70, i32 11
  %72 = trunc i64 %35 to i32
  %73 = or i32 %72, 12
  %74 = insertelement <16 x i32> %71, i32 %73, i32 12
  %75 = trunc i64 %35 to i32
  %76 = or i32 %75, 13
  %77 = insertelement <16 x i32> %74, i32 %76, i32 13
  %78 = trunc i64 %35 to i32
  %79 = or i32 %78, 14
  %80 = insertelement <16 x i32> %77, i32 %79, i32 14
  %81 = trunc i64 %35 to i32
  %82 = or i32 %81, 15
  %83 = insertelement <16 x i32> %80, i32 %82, i32 15
  %84 = sdiv <16 x i32> %83, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %85 = mul <16 x i32> %84, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %86 = sub <16 x i32> %83, %85
  %87 = icmp sgt <16 x i32> %86, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %not. = xor <16 x i1> %87, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %88 = sext <16 x i1> %not. to <16 x i32>
  %89 = add nsw <16 x i32> %84, %88
  %90 = mul nsw <16 x i32> %89, <i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352, i32 100352>
  %91 = add nsw <16 x i32> %86, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %92 = select <16 x i1> %87, <16 x i32> %86, <16 x i32> %91
  %93 = add <16 x i32> %33, %92
  %94 = add <16 x i32> %93, %90
  %95 = extractelement <16 x i32> %94, i64 0
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds float, float* %7, i64 %96
  %98 = load float, float* %97, align 4, !tbaa !8041
  %99 = insertelement <16 x float> undef, float %98, i32 0
  %100 = extractelement <16 x i32> %94, i64 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds float, float* %7, i64 %101
  %103 = load float, float* %102, align 4, !tbaa !8041
  %104 = insertelement <16 x float> %99, float %103, i32 1
  %105 = extractelement <16 x i32> %94, i64 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %7, i64 %106
  %108 = load float, float* %107, align 4, !tbaa !8041
  %109 = insertelement <16 x float> %104, float %108, i32 2
  %110 = extractelement <16 x i32> %94, i64 3
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %7, i64 %111
  %113 = load float, float* %112, align 4, !tbaa !8041
  %114 = insertelement <16 x float> %109, float %113, i32 3
  %115 = extractelement <16 x i32> %94, i64 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %7, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !8041
  %119 = insertelement <16 x float> %114, float %118, i32 4
  %120 = extractelement <16 x i32> %94, i64 5
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !8041
  %124 = insertelement <16 x float> %119, float %123, i32 5
  %125 = extractelement <16 x i32> %94, i64 6
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds float, float* %7, i64 %126
  %128 = load float, float* %127, align 4, !tbaa !8041
  %129 = insertelement <16 x float> %124, float %128, i32 6
  %130 = extractelement <16 x i32> %94, i64 7
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds float, float* %7, i64 %131
  %133 = load float, float* %132, align 4, !tbaa !8041
  %134 = insertelement <16 x float> %129, float %133, i32 7
  %135 = extractelement <16 x i32> %94, i64 8
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %7, i64 %136
  %138 = load float, float* %137, align 4, !tbaa !8041
  %139 = insertelement <16 x float> %134, float %138, i32 8
  %140 = extractelement <16 x i32> %94, i64 9
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds float, float* %7, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !8041
  %144 = insertelement <16 x float> %139, float %143, i32 9
  %145 = extractelement <16 x i32> %94, i64 10
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = load float, float* %147, align 4, !tbaa !8041
  %149 = insertelement <16 x float> %144, float %148, i32 10
  %150 = extractelement <16 x i32> %94, i64 11
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds float, float* %7, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !8041
  %154 = insertelement <16 x float> %149, float %153, i32 11
  %155 = extractelement <16 x i32> %94, i64 12
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %7, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !8041
  %159 = insertelement <16 x float> %154, float %158, i32 12
  %160 = extractelement <16 x i32> %94, i64 13
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = load float, float* %162, align 4, !tbaa !8041
  %164 = insertelement <16 x float> %159, float %163, i32 13
  %165 = extractelement <16 x i32> %94, i64 14
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %7, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !8041
  %169 = insertelement <16 x float> %164, float %168, i32 14
  %170 = extractelement <16 x i32> %94, i64 15
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %7, i64 %171
  %173 = load float, float* %172, align 4, !tbaa !8041
  %174 = insertelement <16 x float> %169, float %173, i32 15
  %175 = getelementptr inbounds float, float* %4, i64 %36
  %176 = bitcast float* %175 to <16 x float>*
  store <16 x float> %174, <16 x float>* %176, align 64, !tbaa !8044
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 56
  br i1 %exitcond9, label %for_end3, label %for_begin4.preheader, !prof !50
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_5(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.585, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !8047
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !8061
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !8064
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !8066
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.586, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !8070
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.587, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.588, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.589, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.590, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !8072
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !8086
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !8088
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 28
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !8091
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 28
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !8093
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 512
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.132, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !8097
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 401408, i32 14336, i32 512, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !8108
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 401408
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.514, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !8112
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 2
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.551, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !8126
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !8128
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !8131
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !8133
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 512
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !8137
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 64
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.198, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !8139
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 32768, i32 32768, i32 64, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !8150
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 32768
  %187 = load i64, i64* %47, align 8, !tbaa !8154
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 32768
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([279 x i8], [279 x i8]* @.str.515, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !8156
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !8170
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 2
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.553, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !8172
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !8175
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !8177
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 64
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.200, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !8181
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 64, i32 64, i32 64, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !8192
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 128
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.591, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !8196
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !8210
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 2
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.555, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !8212
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !8215
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !8217
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 64
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.202, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !8221
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 64, i32 64, i32 64, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !8232
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 128
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.592, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !8236
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !8250
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 2
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.557, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !8252
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 28
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.535, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !8255
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 28
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.536, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !8257
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 64
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.204, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !8261
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 50176, i32 1792, i32 64, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !8272
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 100352
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.593, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_5_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_5_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = alloca %51, align 8
  %7 = getelementptr inbounds %51, %51* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %51, %51* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %51, %51* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %51, %51* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %51, %51* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %51, %51* %6, i64 0, i32 5
  store i32 %5, i32* %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %51* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.594, i8* nonnull %14, i32 0)
  ret i32 %15
}

define private i32 @__tvm_parallel_lambda.594(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 55
  %23 = sdiv i32 %22, %21
  %24 = mul nsw i32 %23, %0
  %25 = icmp slt i32 %24, 56
  %26 = select i1 %25, i32 %24, i32 56
  %27 = add nsw i32 %0, 1
  %28 = mul nsw i32 %23, %27
  %29 = icmp slt i32 %28, 56
  %30 = select i1 %29, i32 %28, i32 56
  %31 = icmp slt i32 %26, %30
  br i1 %31, label %for_body.preheader, label %for_end, !prof !5

for_body.preheader:                               ; preds = %entry
  %32 = add i32 %26, 1
  %33 = sext i32 %32 to i64
  %34 = add nsw i64 %33, -1
  %35 = sext i32 %30 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.preheader, %for_end6.6
  %indvars.iv36 = phi i64 [ %34, %for_body.preheader ], [ %indvars.iv.next37, %for_end6.6 ]
  %36 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %37 = tail call i8* %36(i32 1, i32 %19, i64 7168, i32 2, i32 32)
  %38 = trunc i64 %indvars.iv36 to i32
  %39 = srem i32 %38, 28
  %40 = mul nsw i32 %39, 14336
  %41 = sdiv i32 %38, 28
  %42 = shl i32 %41, 15
  %43 = sext i32 %42 to i64
  %44 = sext i32 %40 to i64
  %45 = bitcast i8* %37 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %45, align 64, !tbaa !8276
  %46 = getelementptr inbounds i8, i8* %37, i64 256
  %47 = bitcast i8* %46 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %47, align 64, !tbaa !8276
  %48 = getelementptr inbounds i8, i8* %37, i64 512
  %49 = bitcast i8* %48 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %49, align 64, !tbaa !8276
  %50 = getelementptr inbounds i8, i8* %37, i64 768
  %51 = bitcast i8* %50 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %51, align 64, !tbaa !8276
  br label %for_body5

for_end:                                          ; preds = %for_end6.6, %entry
  ret i32 0

for_body5:                                        ; preds = %for_body5, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_body5 ]
  %52 = phi <64 x float> [ zeroinitializer, %for_body ], [ %84, %for_body5 ]
  %53 = phi <64 x float> [ zeroinitializer, %for_body ], [ %78, %for_body5 ]
  %54 = phi <64 x float> [ zeroinitializer, %for_body ], [ %72, %for_body5 ]
  %55 = phi <64 x float> [ zeroinitializer, %for_body ], [ %66, %for_body5 ]
  %56 = add nsw i64 %indvars.iv, %44
  %57 = getelementptr inbounds float, float* %4, i64 %56
  %58 = load float, float* %57, align 4, !tbaa !8279
  %59 = insertelement <64 x float> undef, float %58, i32 0
  %60 = shufflevector <64 x float> %59, <64 x float> undef, <64 x i32> zeroinitializer
  %61 = shl i64 %indvars.iv, 6
  %62 = add nuw nsw i64 %61, %43
  %63 = getelementptr inbounds float, float* %7, i64 %62
  %64 = bitcast float* %63 to <64 x float>*
  %65 = load <64 x float>, <64 x float>* %64, align 64, !tbaa !8282
  %66 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %60, <64 x float> %65, <64 x float> %55)
  %67 = add nsw i64 %56, 512
  %68 = getelementptr inbounds float, float* %4, i64 %67
  %69 = load float, float* %68, align 4, !tbaa !8279
  %70 = insertelement <64 x float> undef, float %69, i32 0
  %71 = shufflevector <64 x float> %70, <64 x float> undef, <64 x i32> zeroinitializer
  %72 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %71, <64 x float> %65, <64 x float> %54)
  %73 = add nsw i64 %56, 1024
  %74 = getelementptr inbounds float, float* %4, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !8279
  %76 = insertelement <64 x float> undef, float %75, i32 0
  %77 = shufflevector <64 x float> %76, <64 x float> undef, <64 x i32> zeroinitializer
  %78 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %77, <64 x float> %65, <64 x float> %53)
  %79 = add nsw i64 %56, 1536
  %80 = getelementptr inbounds float, float* %4, i64 %79
  %81 = load float, float* %80, align 4, !tbaa !8279
  %82 = insertelement <64 x float> undef, float %81, i32 0
  %83 = shufflevector <64 x float> %82, <64 x float> undef, <64 x i32> zeroinitializer
  %84 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %83, <64 x float> %65, <64 x float> %52)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  store <64 x float> %66, <64 x float>* %45, align 64, !tbaa !8276
  store <64 x float> %72, <64 x float>* %47, align 64, !tbaa !8276
  store <64 x float> %78, <64 x float>* %49, align 64, !tbaa !8276
  store <64 x float> %84, <64 x float>* %51, align 64, !tbaa !8276
  %85 = getelementptr inbounds i8, i8* %37, i64 1024
  %86 = bitcast i8* %85 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %86, align 64, !tbaa !8276
  %87 = getelementptr inbounds i8, i8* %37, i64 1280
  %88 = bitcast i8* %87 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %88, align 64, !tbaa !8276
  %89 = getelementptr inbounds i8, i8* %37, i64 1536
  %90 = bitcast i8* %89 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %90, align 64, !tbaa !8276
  %91 = getelementptr inbounds i8, i8* %37, i64 1792
  %92 = bitcast i8* %91 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %92, align 64, !tbaa !8276
  %93 = add nsw i64 %44, 2048
  br label %for_body5.1

for_body5.1:                                      ; preds = %for_body5.1, %for_end6
  %indvars.iv.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next.1, %for_body5.1 ]
  %94 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %126, %for_body5.1 ]
  %95 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %120, %for_body5.1 ]
  %96 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %114, %for_body5.1 ]
  %97 = phi <64 x float> [ zeroinitializer, %for_end6 ], [ %108, %for_body5.1 ]
  %98 = add nsw i64 %93, %indvars.iv.1
  %99 = getelementptr inbounds float, float* %4, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !8279
  %101 = insertelement <64 x float> undef, float %100, i32 0
  %102 = shufflevector <64 x float> %101, <64 x float> undef, <64 x i32> zeroinitializer
  %103 = shl i64 %indvars.iv.1, 6
  %104 = add nuw nsw i64 %103, %43
  %105 = getelementptr inbounds float, float* %7, i64 %104
  %106 = bitcast float* %105 to <64 x float>*
  %107 = load <64 x float>, <64 x float>* %106, align 64, !tbaa !8282
  %108 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %102, <64 x float> %107, <64 x float> %97)
  %109 = add nsw i64 %98, 512
  %110 = getelementptr inbounds float, float* %4, i64 %109
  %111 = load float, float* %110, align 4, !tbaa !8279
  %112 = insertelement <64 x float> undef, float %111, i32 0
  %113 = shufflevector <64 x float> %112, <64 x float> undef, <64 x i32> zeroinitializer
  %114 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %113, <64 x float> %107, <64 x float> %96)
  %115 = add nsw i64 %98, 1024
  %116 = getelementptr inbounds float, float* %4, i64 %115
  %117 = load float, float* %116, align 4, !tbaa !8279
  %118 = insertelement <64 x float> undef, float %117, i32 0
  %119 = shufflevector <64 x float> %118, <64 x float> undef, <64 x i32> zeroinitializer
  %120 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %119, <64 x float> %107, <64 x float> %95)
  %121 = add nsw i64 %98, 1536
  %122 = getelementptr inbounds float, float* %4, i64 %121
  %123 = load float, float* %122, align 4, !tbaa !8279
  %124 = insertelement <64 x float> undef, float %123, i32 0
  %125 = shufflevector <64 x float> %124, <64 x float> undef, <64 x i32> zeroinitializer
  %126 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %125, <64 x float> %107, <64 x float> %94)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 512
  br i1 %exitcond.1, label %for_end6.1, label %for_body5.1, !prof !50

for_end6.1:                                       ; preds = %for_body5.1
  store <64 x float> %108, <64 x float>* %86, align 64, !tbaa !8276
  store <64 x float> %114, <64 x float>* %88, align 64, !tbaa !8276
  store <64 x float> %120, <64 x float>* %90, align 64, !tbaa !8276
  store <64 x float> %126, <64 x float>* %92, align 64, !tbaa !8276
  %127 = getelementptr inbounds i8, i8* %37, i64 2048
  %128 = bitcast i8* %127 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %128, align 64, !tbaa !8276
  %129 = getelementptr inbounds i8, i8* %37, i64 2304
  %130 = bitcast i8* %129 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %130, align 64, !tbaa !8276
  %131 = getelementptr inbounds i8, i8* %37, i64 2560
  %132 = bitcast i8* %131 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %132, align 64, !tbaa !8276
  %133 = getelementptr inbounds i8, i8* %37, i64 2816
  %134 = bitcast i8* %133 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %134, align 64, !tbaa !8276
  %135 = add nsw i64 %44, 4096
  br label %for_body5.2

for_body5.2:                                      ; preds = %for_body5.2, %for_end6.1
  %indvars.iv.2 = phi i64 [ 0, %for_end6.1 ], [ %indvars.iv.next.2, %for_body5.2 ]
  %136 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %168, %for_body5.2 ]
  %137 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %162, %for_body5.2 ]
  %138 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %156, %for_body5.2 ]
  %139 = phi <64 x float> [ zeroinitializer, %for_end6.1 ], [ %150, %for_body5.2 ]
  %140 = add nsw i64 %135, %indvars.iv.2
  %141 = getelementptr inbounds float, float* %4, i64 %140
  %142 = load float, float* %141, align 4, !tbaa !8279
  %143 = insertelement <64 x float> undef, float %142, i32 0
  %144 = shufflevector <64 x float> %143, <64 x float> undef, <64 x i32> zeroinitializer
  %145 = shl i64 %indvars.iv.2, 6
  %146 = add nuw nsw i64 %145, %43
  %147 = getelementptr inbounds float, float* %7, i64 %146
  %148 = bitcast float* %147 to <64 x float>*
  %149 = load <64 x float>, <64 x float>* %148, align 64, !tbaa !8282
  %150 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %144, <64 x float> %149, <64 x float> %139)
  %151 = add nsw i64 %140, 512
  %152 = getelementptr inbounds float, float* %4, i64 %151
  %153 = load float, float* %152, align 4, !tbaa !8279
  %154 = insertelement <64 x float> undef, float %153, i32 0
  %155 = shufflevector <64 x float> %154, <64 x float> undef, <64 x i32> zeroinitializer
  %156 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %155, <64 x float> %149, <64 x float> %138)
  %157 = add nsw i64 %140, 1024
  %158 = getelementptr inbounds float, float* %4, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !8279
  %160 = insertelement <64 x float> undef, float %159, i32 0
  %161 = shufflevector <64 x float> %160, <64 x float> undef, <64 x i32> zeroinitializer
  %162 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %161, <64 x float> %149, <64 x float> %137)
  %163 = add nsw i64 %140, 1536
  %164 = getelementptr inbounds float, float* %4, i64 %163
  %165 = load float, float* %164, align 4, !tbaa !8279
  %166 = insertelement <64 x float> undef, float %165, i32 0
  %167 = shufflevector <64 x float> %166, <64 x float> undef, <64 x i32> zeroinitializer
  %168 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %167, <64 x float> %149, <64 x float> %136)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 512
  br i1 %exitcond.2, label %for_end6.2, label %for_body5.2, !prof !50

for_end6.2:                                       ; preds = %for_body5.2
  store <64 x float> %150, <64 x float>* %128, align 64, !tbaa !8276
  store <64 x float> %156, <64 x float>* %130, align 64, !tbaa !8276
  store <64 x float> %162, <64 x float>* %132, align 64, !tbaa !8276
  store <64 x float> %168, <64 x float>* %134, align 64, !tbaa !8276
  %169 = getelementptr inbounds i8, i8* %37, i64 3072
  %170 = bitcast i8* %169 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %170, align 64, !tbaa !8276
  %171 = getelementptr inbounds i8, i8* %37, i64 3328
  %172 = bitcast i8* %171 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %172, align 64, !tbaa !8276
  %173 = getelementptr inbounds i8, i8* %37, i64 3584
  %174 = bitcast i8* %173 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %174, align 64, !tbaa !8276
  %175 = getelementptr inbounds i8, i8* %37, i64 3840
  %176 = bitcast i8* %175 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %176, align 64, !tbaa !8276
  %177 = add nsw i64 %44, 6144
  br label %for_body5.3

for_body5.3:                                      ; preds = %for_body5.3, %for_end6.2
  %indvars.iv.3 = phi i64 [ 0, %for_end6.2 ], [ %indvars.iv.next.3, %for_body5.3 ]
  %178 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %210, %for_body5.3 ]
  %179 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %204, %for_body5.3 ]
  %180 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %198, %for_body5.3 ]
  %181 = phi <64 x float> [ zeroinitializer, %for_end6.2 ], [ %192, %for_body5.3 ]
  %182 = add nsw i64 %177, %indvars.iv.3
  %183 = getelementptr inbounds float, float* %4, i64 %182
  %184 = load float, float* %183, align 4, !tbaa !8279
  %185 = insertelement <64 x float> undef, float %184, i32 0
  %186 = shufflevector <64 x float> %185, <64 x float> undef, <64 x i32> zeroinitializer
  %187 = shl i64 %indvars.iv.3, 6
  %188 = add nuw nsw i64 %187, %43
  %189 = getelementptr inbounds float, float* %7, i64 %188
  %190 = bitcast float* %189 to <64 x float>*
  %191 = load <64 x float>, <64 x float>* %190, align 64, !tbaa !8282
  %192 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %186, <64 x float> %191, <64 x float> %181)
  %193 = add nsw i64 %182, 512
  %194 = getelementptr inbounds float, float* %4, i64 %193
  %195 = load float, float* %194, align 4, !tbaa !8279
  %196 = insertelement <64 x float> undef, float %195, i32 0
  %197 = shufflevector <64 x float> %196, <64 x float> undef, <64 x i32> zeroinitializer
  %198 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %197, <64 x float> %191, <64 x float> %180)
  %199 = add nsw i64 %182, 1024
  %200 = getelementptr inbounds float, float* %4, i64 %199
  %201 = load float, float* %200, align 4, !tbaa !8279
  %202 = insertelement <64 x float> undef, float %201, i32 0
  %203 = shufflevector <64 x float> %202, <64 x float> undef, <64 x i32> zeroinitializer
  %204 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %203, <64 x float> %191, <64 x float> %179)
  %205 = add nsw i64 %182, 1536
  %206 = getelementptr inbounds float, float* %4, i64 %205
  %207 = load float, float* %206, align 4, !tbaa !8279
  %208 = insertelement <64 x float> undef, float %207, i32 0
  %209 = shufflevector <64 x float> %208, <64 x float> undef, <64 x i32> zeroinitializer
  %210 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %209, <64 x float> %191, <64 x float> %178)
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv.3, 1
  %exitcond.3 = icmp eq i64 %indvars.iv.next.3, 512
  br i1 %exitcond.3, label %for_end6.3, label %for_body5.3, !prof !50

for_end6.3:                                       ; preds = %for_body5.3
  store <64 x float> %192, <64 x float>* %170, align 64, !tbaa !8276
  store <64 x float> %198, <64 x float>* %172, align 64, !tbaa !8276
  store <64 x float> %204, <64 x float>* %174, align 64, !tbaa !8276
  store <64 x float> %210, <64 x float>* %176, align 64, !tbaa !8276
  %211 = getelementptr inbounds i8, i8* %37, i64 4096
  %212 = bitcast i8* %211 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %212, align 64, !tbaa !8276
  %213 = getelementptr inbounds i8, i8* %37, i64 4352
  %214 = bitcast i8* %213 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %214, align 64, !tbaa !8276
  %215 = getelementptr inbounds i8, i8* %37, i64 4608
  %216 = bitcast i8* %215 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %216, align 64, !tbaa !8276
  %217 = getelementptr inbounds i8, i8* %37, i64 4864
  %218 = bitcast i8* %217 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %218, align 64, !tbaa !8276
  %219 = add nsw i64 %44, 8192
  br label %for_body5.4

for_body5.4:                                      ; preds = %for_body5.4, %for_end6.3
  %indvars.iv.4 = phi i64 [ 0, %for_end6.3 ], [ %indvars.iv.next.4, %for_body5.4 ]
  %220 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %252, %for_body5.4 ]
  %221 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %246, %for_body5.4 ]
  %222 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %240, %for_body5.4 ]
  %223 = phi <64 x float> [ zeroinitializer, %for_end6.3 ], [ %234, %for_body5.4 ]
  %224 = add nsw i64 %219, %indvars.iv.4
  %225 = getelementptr inbounds float, float* %4, i64 %224
  %226 = load float, float* %225, align 4, !tbaa !8279
  %227 = insertelement <64 x float> undef, float %226, i32 0
  %228 = shufflevector <64 x float> %227, <64 x float> undef, <64 x i32> zeroinitializer
  %229 = shl i64 %indvars.iv.4, 6
  %230 = add nuw nsw i64 %229, %43
  %231 = getelementptr inbounds float, float* %7, i64 %230
  %232 = bitcast float* %231 to <64 x float>*
  %233 = load <64 x float>, <64 x float>* %232, align 64, !tbaa !8282
  %234 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %228, <64 x float> %233, <64 x float> %223)
  %235 = add nsw i64 %224, 512
  %236 = getelementptr inbounds float, float* %4, i64 %235
  %237 = load float, float* %236, align 4, !tbaa !8279
  %238 = insertelement <64 x float> undef, float %237, i32 0
  %239 = shufflevector <64 x float> %238, <64 x float> undef, <64 x i32> zeroinitializer
  %240 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %239, <64 x float> %233, <64 x float> %222)
  %241 = add nsw i64 %224, 1024
  %242 = getelementptr inbounds float, float* %4, i64 %241
  %243 = load float, float* %242, align 4, !tbaa !8279
  %244 = insertelement <64 x float> undef, float %243, i32 0
  %245 = shufflevector <64 x float> %244, <64 x float> undef, <64 x i32> zeroinitializer
  %246 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %245, <64 x float> %233, <64 x float> %221)
  %247 = add nsw i64 %224, 1536
  %248 = getelementptr inbounds float, float* %4, i64 %247
  %249 = load float, float* %248, align 4, !tbaa !8279
  %250 = insertelement <64 x float> undef, float %249, i32 0
  %251 = shufflevector <64 x float> %250, <64 x float> undef, <64 x i32> zeroinitializer
  %252 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %251, <64 x float> %233, <64 x float> %220)
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv.4, 1
  %exitcond.4 = icmp eq i64 %indvars.iv.next.4, 512
  br i1 %exitcond.4, label %for_end6.4, label %for_body5.4, !prof !50

for_end6.4:                                       ; preds = %for_body5.4
  store <64 x float> %234, <64 x float>* %212, align 64, !tbaa !8276
  store <64 x float> %240, <64 x float>* %214, align 64, !tbaa !8276
  store <64 x float> %246, <64 x float>* %216, align 64, !tbaa !8276
  store <64 x float> %252, <64 x float>* %218, align 64, !tbaa !8276
  %253 = getelementptr inbounds i8, i8* %37, i64 5120
  %254 = bitcast i8* %253 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %254, align 64, !tbaa !8276
  %255 = getelementptr inbounds i8, i8* %37, i64 5376
  %256 = bitcast i8* %255 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %256, align 64, !tbaa !8276
  %257 = getelementptr inbounds i8, i8* %37, i64 5632
  %258 = bitcast i8* %257 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %258, align 64, !tbaa !8276
  %259 = getelementptr inbounds i8, i8* %37, i64 5888
  %260 = bitcast i8* %259 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %260, align 64, !tbaa !8276
  %261 = add nsw i64 %44, 10240
  br label %for_body5.5

for_body5.5:                                      ; preds = %for_body5.5, %for_end6.4
  %indvars.iv.5 = phi i64 [ 0, %for_end6.4 ], [ %indvars.iv.next.5, %for_body5.5 ]
  %262 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %294, %for_body5.5 ]
  %263 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %288, %for_body5.5 ]
  %264 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %282, %for_body5.5 ]
  %265 = phi <64 x float> [ zeroinitializer, %for_end6.4 ], [ %276, %for_body5.5 ]
  %266 = add nsw i64 %261, %indvars.iv.5
  %267 = getelementptr inbounds float, float* %4, i64 %266
  %268 = load float, float* %267, align 4, !tbaa !8279
  %269 = insertelement <64 x float> undef, float %268, i32 0
  %270 = shufflevector <64 x float> %269, <64 x float> undef, <64 x i32> zeroinitializer
  %271 = shl i64 %indvars.iv.5, 6
  %272 = add nuw nsw i64 %271, %43
  %273 = getelementptr inbounds float, float* %7, i64 %272
  %274 = bitcast float* %273 to <64 x float>*
  %275 = load <64 x float>, <64 x float>* %274, align 64, !tbaa !8282
  %276 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %270, <64 x float> %275, <64 x float> %265)
  %277 = add nsw i64 %266, 512
  %278 = getelementptr inbounds float, float* %4, i64 %277
  %279 = load float, float* %278, align 4, !tbaa !8279
  %280 = insertelement <64 x float> undef, float %279, i32 0
  %281 = shufflevector <64 x float> %280, <64 x float> undef, <64 x i32> zeroinitializer
  %282 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %281, <64 x float> %275, <64 x float> %264)
  %283 = add nsw i64 %266, 1024
  %284 = getelementptr inbounds float, float* %4, i64 %283
  %285 = load float, float* %284, align 4, !tbaa !8279
  %286 = insertelement <64 x float> undef, float %285, i32 0
  %287 = shufflevector <64 x float> %286, <64 x float> undef, <64 x i32> zeroinitializer
  %288 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %287, <64 x float> %275, <64 x float> %263)
  %289 = add nsw i64 %266, 1536
  %290 = getelementptr inbounds float, float* %4, i64 %289
  %291 = load float, float* %290, align 4, !tbaa !8279
  %292 = insertelement <64 x float> undef, float %291, i32 0
  %293 = shufflevector <64 x float> %292, <64 x float> undef, <64 x i32> zeroinitializer
  %294 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %293, <64 x float> %275, <64 x float> %262)
  %indvars.iv.next.5 = add nuw nsw i64 %indvars.iv.5, 1
  %exitcond.5 = icmp eq i64 %indvars.iv.next.5, 512
  br i1 %exitcond.5, label %for_end6.5, label %for_body5.5, !prof !50

for_end6.5:                                       ; preds = %for_body5.5
  store <64 x float> %276, <64 x float>* %254, align 64, !tbaa !8276
  store <64 x float> %282, <64 x float>* %256, align 64, !tbaa !8276
  store <64 x float> %288, <64 x float>* %258, align 64, !tbaa !8276
  store <64 x float> %294, <64 x float>* %260, align 64, !tbaa !8276
  %295 = getelementptr inbounds i8, i8* %37, i64 6144
  %296 = bitcast i8* %295 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %296, align 64, !tbaa !8276
  %297 = getelementptr inbounds i8, i8* %37, i64 6400
  %298 = bitcast i8* %297 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %298, align 64, !tbaa !8276
  %299 = getelementptr inbounds i8, i8* %37, i64 6656
  %300 = bitcast i8* %299 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %300, align 64, !tbaa !8276
  %301 = getelementptr inbounds i8, i8* %37, i64 6912
  %302 = bitcast i8* %301 to <64 x float>*
  store <64 x float> zeroinitializer, <64 x float>* %302, align 64, !tbaa !8276
  %303 = add nsw i64 %44, 12288
  br label %for_body5.6

for_body5.6:                                      ; preds = %for_body5.6, %for_end6.5
  %indvars.iv.6 = phi i64 [ 0, %for_end6.5 ], [ %indvars.iv.next.6, %for_body5.6 ]
  %304 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %336, %for_body5.6 ]
  %305 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %330, %for_body5.6 ]
  %306 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %324, %for_body5.6 ]
  %307 = phi <64 x float> [ zeroinitializer, %for_end6.5 ], [ %318, %for_body5.6 ]
  %308 = add nsw i64 %303, %indvars.iv.6
  %309 = getelementptr inbounds float, float* %4, i64 %308
  %310 = load float, float* %309, align 4, !tbaa !8279
  %311 = insertelement <64 x float> undef, float %310, i32 0
  %312 = shufflevector <64 x float> %311, <64 x float> undef, <64 x i32> zeroinitializer
  %313 = shl i64 %indvars.iv.6, 6
  %314 = add nuw nsw i64 %313, %43
  %315 = getelementptr inbounds float, float* %7, i64 %314
  %316 = bitcast float* %315 to <64 x float>*
  %317 = load <64 x float>, <64 x float>* %316, align 64, !tbaa !8282
  %318 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %312, <64 x float> %317, <64 x float> %307)
  %319 = add nsw i64 %308, 512
  %320 = getelementptr inbounds float, float* %4, i64 %319
  %321 = load float, float* %320, align 4, !tbaa !8279
  %322 = insertelement <64 x float> undef, float %321, i32 0
  %323 = shufflevector <64 x float> %322, <64 x float> undef, <64 x i32> zeroinitializer
  %324 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %323, <64 x float> %317, <64 x float> %306)
  %325 = add nsw i64 %308, 1024
  %326 = getelementptr inbounds float, float* %4, i64 %325
  %327 = load float, float* %326, align 4, !tbaa !8279
  %328 = insertelement <64 x float> undef, float %327, i32 0
  %329 = shufflevector <64 x float> %328, <64 x float> undef, <64 x i32> zeroinitializer
  %330 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %329, <64 x float> %317, <64 x float> %305)
  %331 = add nsw i64 %308, 1536
  %332 = getelementptr inbounds float, float* %4, i64 %331
  %333 = load float, float* %332, align 4, !tbaa !8279
  %334 = insertelement <64 x float> undef, float %333, i32 0
  %335 = shufflevector <64 x float> %334, <64 x float> undef, <64 x i32> zeroinitializer
  %336 = tail call <64 x float> @llvm.fmuladd.v64f32(<64 x float> %335, <64 x float> %317, <64 x float> %304)
  %indvars.iv.next.6 = add nuw nsw i64 %indvars.iv.6, 1
  %exitcond.6 = icmp eq i64 %indvars.iv.next.6, 512
  br i1 %exitcond.6, label %for_end6.6, label %for_body5.6, !prof !50

for_end6.6:                                       ; preds = %for_body5.6
  store <64 x float> %318, <64 x float>* %296, align 64, !tbaa !8276
  store <64 x float> %324, <64 x float>* %298, align 64, !tbaa !8276
  store <64 x float> %330, <64 x float>* %300, align 64, !tbaa !8276
  store <64 x float> %336, <64 x float>* %302, align 64, !tbaa !8276
  %337 = mul nsw i64 %indvars.iv36, 1792
  %338 = shl nsw i32 %41, 6
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds float, float* %13, i64 %339
  %341 = bitcast float* %340 to <64 x float>*
  %342 = load <64 x float>, <64 x float>* %341, align 64, !tbaa !8285
  %343 = getelementptr inbounds float, float* %16, i64 %339
  %344 = bitcast float* %343 to <64 x float>*
  %345 = load <64 x float>, <64 x float>* %344, align 64, !tbaa !8288
  %346 = bitcast i8* %37 to <64 x float>*
  %347 = load <64 x float>, <64 x float>* %346, align 64, !tbaa !8276
  %348 = fadd <64 x float> %347, %342
  %349 = fadd <64 x float> %348, %345
  %350 = fcmp ogt <64 x float> %349, zeroinitializer
  %351 = select <64 x i1> %350, <64 x float> %349, <64 x float> zeroinitializer
  %352 = getelementptr inbounds float, float* %10, i64 %337
  %353 = bitcast float* %352 to <64 x float>*
  store <64 x float> %351, <64 x float>* %353, align 64, !tbaa !8291
  %354 = getelementptr inbounds i8, i8* %37, i64 256
  %355 = bitcast i8* %354 to <64 x float>*
  %356 = load <64 x float>, <64 x float>* %355, align 64, !tbaa !8276
  %357 = fadd <64 x float> %356, %342
  %358 = fadd <64 x float> %357, %345
  %359 = fcmp ogt <64 x float> %358, zeroinitializer
  %360 = select <64 x i1> %359, <64 x float> %358, <64 x float> zeroinitializer
  %361 = mul i64 %indvars.iv36, 7696581394432
  %sext = ashr exact i64 %361, 32
  %362 = or i64 %sext, 64
  %363 = getelementptr inbounds float, float* %10, i64 %362
  %364 = bitcast float* %363 to <64 x float>*
  store <64 x float> %360, <64 x float>* %364, align 64, !tbaa !8291
  %365 = getelementptr inbounds i8, i8* %37, i64 512
  %366 = bitcast i8* %365 to <64 x float>*
  %367 = load <64 x float>, <64 x float>* %366, align 64, !tbaa !8276
  %368 = fadd <64 x float> %367, %342
  %369 = fadd <64 x float> %368, %345
  %370 = fcmp ogt <64 x float> %369, zeroinitializer
  %371 = select <64 x i1> %370, <64 x float> %369, <64 x float> zeroinitializer
  %372 = mul i64 %indvars.iv36, 7696581394432
  %sext38 = ashr exact i64 %372, 32
  %373 = or i64 %sext38, 128
  %374 = getelementptr inbounds float, float* %10, i64 %373
  %375 = bitcast float* %374 to <64 x float>*
  store <64 x float> %371, <64 x float>* %375, align 64, !tbaa !8291
  %376 = getelementptr inbounds i8, i8* %37, i64 768
  %377 = bitcast i8* %376 to <64 x float>*
  %378 = load <64 x float>, <64 x float>* %377, align 64, !tbaa !8276
  %379 = fadd <64 x float> %378, %342
  %380 = fadd <64 x float> %379, %345
  %381 = fcmp ogt <64 x float> %380, zeroinitializer
  %382 = select <64 x i1> %381, <64 x float> %380, <64 x float> zeroinitializer
  %383 = mul i64 %indvars.iv36, 7696581394432
  %sext39 = ashr exact i64 %383, 32
  %384 = or i64 %sext39, 192
  %385 = getelementptr inbounds float, float* %10, i64 %384
  %386 = bitcast float* %385 to <64 x float>*
  store <64 x float> %382, <64 x float>* %386, align 64, !tbaa !8291
  %387 = getelementptr inbounds i8, i8* %37, i64 1024
  %388 = bitcast i8* %387 to <64 x float>*
  %389 = load <64 x float>, <64 x float>* %388, align 64, !tbaa !8276
  %390 = fadd <64 x float> %389, %342
  %391 = fadd <64 x float> %390, %345
  %392 = fcmp ogt <64 x float> %391, zeroinitializer
  %393 = select <64 x i1> %392, <64 x float> %391, <64 x float> zeroinitializer
  %394 = mul i64 %indvars.iv36, 7696581394432
  %sext40 = add i64 %394, 1099511627776
  %395 = ashr exact i64 %sext40, 32
  %396 = getelementptr inbounds float, float* %10, i64 %395
  %397 = bitcast float* %396 to <64 x float>*
  store <64 x float> %393, <64 x float>* %397, align 64, !tbaa !8291
  %398 = getelementptr inbounds i8, i8* %37, i64 1280
  %399 = bitcast i8* %398 to <64 x float>*
  %400 = load <64 x float>, <64 x float>* %399, align 64, !tbaa !8276
  %401 = fadd <64 x float> %400, %342
  %402 = fadd <64 x float> %401, %345
  %403 = fcmp ogt <64 x float> %402, zeroinitializer
  %404 = select <64 x i1> %403, <64 x float> %402, <64 x float> zeroinitializer
  %405 = mul i64 %indvars.iv36, 7696581394432
  %sext41 = add i64 %405, 1374389534720
  %406 = ashr exact i64 %sext41, 32
  %407 = getelementptr inbounds float, float* %10, i64 %406
  %408 = bitcast float* %407 to <64 x float>*
  store <64 x float> %404, <64 x float>* %408, align 64, !tbaa !8291
  %409 = getelementptr inbounds i8, i8* %37, i64 1536
  %410 = bitcast i8* %409 to <64 x float>*
  %411 = load <64 x float>, <64 x float>* %410, align 64, !tbaa !8276
  %412 = fadd <64 x float> %411, %342
  %413 = fadd <64 x float> %412, %345
  %414 = fcmp ogt <64 x float> %413, zeroinitializer
  %415 = select <64 x i1> %414, <64 x float> %413, <64 x float> zeroinitializer
  %416 = mul i64 %indvars.iv36, 7696581394432
  %sext42 = add i64 %416, 1649267441664
  %417 = ashr exact i64 %sext42, 32
  %418 = getelementptr inbounds float, float* %10, i64 %417
  %419 = bitcast float* %418 to <64 x float>*
  store <64 x float> %415, <64 x float>* %419, align 64, !tbaa !8291
  %420 = getelementptr inbounds i8, i8* %37, i64 1792
  %421 = bitcast i8* %420 to <64 x float>*
  %422 = load <64 x float>, <64 x float>* %421, align 64, !tbaa !8276
  %423 = fadd <64 x float> %422, %342
  %424 = fadd <64 x float> %423, %345
  %425 = fcmp ogt <64 x float> %424, zeroinitializer
  %426 = select <64 x i1> %425, <64 x float> %424, <64 x float> zeroinitializer
  %427 = mul i64 %indvars.iv36, 7696581394432
  %sext43 = add i64 %427, 1924145348608
  %428 = ashr exact i64 %sext43, 32
  %429 = getelementptr inbounds float, float* %10, i64 %428
  %430 = bitcast float* %429 to <64 x float>*
  store <64 x float> %426, <64 x float>* %430, align 64, !tbaa !8291
  %431 = getelementptr inbounds i8, i8* %37, i64 2048
  %432 = bitcast i8* %431 to <64 x float>*
  %433 = load <64 x float>, <64 x float>* %432, align 64, !tbaa !8276
  %434 = fadd <64 x float> %433, %342
  %435 = fadd <64 x float> %434, %345
  %436 = fcmp ogt <64 x float> %435, zeroinitializer
  %437 = select <64 x i1> %436, <64 x float> %435, <64 x float> zeroinitializer
  %438 = mul i64 %indvars.iv36, 7696581394432
  %sext44 = add i64 %438, 2199023255552
  %439 = ashr exact i64 %sext44, 32
  %440 = getelementptr inbounds float, float* %10, i64 %439
  %441 = bitcast float* %440 to <64 x float>*
  store <64 x float> %437, <64 x float>* %441, align 64, !tbaa !8291
  %442 = getelementptr inbounds i8, i8* %37, i64 2304
  %443 = bitcast i8* %442 to <64 x float>*
  %444 = load <64 x float>, <64 x float>* %443, align 64, !tbaa !8276
  %445 = fadd <64 x float> %444, %342
  %446 = fadd <64 x float> %445, %345
  %447 = fcmp ogt <64 x float> %446, zeroinitializer
  %448 = select <64 x i1> %447, <64 x float> %446, <64 x float> zeroinitializer
  %449 = mul i64 %indvars.iv36, 7696581394432
  %sext45 = add i64 %449, 2473901162496
  %450 = ashr exact i64 %sext45, 32
  %451 = getelementptr inbounds float, float* %10, i64 %450
  %452 = bitcast float* %451 to <64 x float>*
  store <64 x float> %448, <64 x float>* %452, align 64, !tbaa !8291
  %453 = getelementptr inbounds i8, i8* %37, i64 2560
  %454 = bitcast i8* %453 to <64 x float>*
  %455 = load <64 x float>, <64 x float>* %454, align 64, !tbaa !8276
  %456 = fadd <64 x float> %455, %342
  %457 = fadd <64 x float> %456, %345
  %458 = fcmp ogt <64 x float> %457, zeroinitializer
  %459 = select <64 x i1> %458, <64 x float> %457, <64 x float> zeroinitializer
  %460 = mul i64 %indvars.iv36, 7696581394432
  %sext46 = add i64 %460, 2748779069440
  %461 = ashr exact i64 %sext46, 32
  %462 = getelementptr inbounds float, float* %10, i64 %461
  %463 = bitcast float* %462 to <64 x float>*
  store <64 x float> %459, <64 x float>* %463, align 64, !tbaa !8291
  %464 = getelementptr inbounds i8, i8* %37, i64 2816
  %465 = bitcast i8* %464 to <64 x float>*
  %466 = load <64 x float>, <64 x float>* %465, align 64, !tbaa !8276
  %467 = fadd <64 x float> %466, %342
  %468 = fadd <64 x float> %467, %345
  %469 = fcmp ogt <64 x float> %468, zeroinitializer
  %470 = select <64 x i1> %469, <64 x float> %468, <64 x float> zeroinitializer
  %471 = mul i64 %indvars.iv36, 7696581394432
  %sext47 = add i64 %471, 3023656976384
  %472 = ashr exact i64 %sext47, 32
  %473 = getelementptr inbounds float, float* %10, i64 %472
  %474 = bitcast float* %473 to <64 x float>*
  store <64 x float> %470, <64 x float>* %474, align 64, !tbaa !8291
  %475 = getelementptr inbounds i8, i8* %37, i64 3072
  %476 = bitcast i8* %475 to <64 x float>*
  %477 = load <64 x float>, <64 x float>* %476, align 64, !tbaa !8276
  %478 = fadd <64 x float> %477, %342
  %479 = fadd <64 x float> %478, %345
  %480 = fcmp ogt <64 x float> %479, zeroinitializer
  %481 = select <64 x i1> %480, <64 x float> %479, <64 x float> zeroinitializer
  %482 = mul i64 %indvars.iv36, 7696581394432
  %sext48 = add i64 %482, 3298534883328
  %483 = ashr exact i64 %sext48, 32
  %484 = getelementptr inbounds float, float* %10, i64 %483
  %485 = bitcast float* %484 to <64 x float>*
  store <64 x float> %481, <64 x float>* %485, align 64, !tbaa !8291
  %486 = getelementptr inbounds i8, i8* %37, i64 3328
  %487 = bitcast i8* %486 to <64 x float>*
  %488 = load <64 x float>, <64 x float>* %487, align 64, !tbaa !8276
  %489 = fadd <64 x float> %488, %342
  %490 = fadd <64 x float> %489, %345
  %491 = fcmp ogt <64 x float> %490, zeroinitializer
  %492 = select <64 x i1> %491, <64 x float> %490, <64 x float> zeroinitializer
  %493 = mul i64 %indvars.iv36, 7696581394432
  %sext49 = add i64 %493, 3573412790272
  %494 = ashr exact i64 %sext49, 32
  %495 = getelementptr inbounds float, float* %10, i64 %494
  %496 = bitcast float* %495 to <64 x float>*
  store <64 x float> %492, <64 x float>* %496, align 64, !tbaa !8291
  %497 = getelementptr inbounds i8, i8* %37, i64 3584
  %498 = bitcast i8* %497 to <64 x float>*
  %499 = load <64 x float>, <64 x float>* %498, align 64, !tbaa !8276
  %500 = fadd <64 x float> %499, %342
  %501 = fadd <64 x float> %500, %345
  %502 = fcmp ogt <64 x float> %501, zeroinitializer
  %503 = select <64 x i1> %502, <64 x float> %501, <64 x float> zeroinitializer
  %504 = mul i64 %indvars.iv36, 7696581394432
  %sext50 = add i64 %504, 3848290697216
  %505 = ashr exact i64 %sext50, 32
  %506 = getelementptr inbounds float, float* %10, i64 %505
  %507 = bitcast float* %506 to <64 x float>*
  store <64 x float> %503, <64 x float>* %507, align 64, !tbaa !8291
  %508 = getelementptr inbounds i8, i8* %37, i64 3840
  %509 = bitcast i8* %508 to <64 x float>*
  %510 = load <64 x float>, <64 x float>* %509, align 64, !tbaa !8276
  %511 = fadd <64 x float> %510, %342
  %512 = fadd <64 x float> %511, %345
  %513 = fcmp ogt <64 x float> %512, zeroinitializer
  %514 = select <64 x i1> %513, <64 x float> %512, <64 x float> zeroinitializer
  %515 = mul i64 %indvars.iv36, 7696581394432
  %sext51 = add i64 %515, 4123168604160
  %516 = ashr exact i64 %sext51, 32
  %517 = getelementptr inbounds float, float* %10, i64 %516
  %518 = bitcast float* %517 to <64 x float>*
  store <64 x float> %514, <64 x float>* %518, align 64, !tbaa !8291
  %519 = getelementptr inbounds i8, i8* %37, i64 4096
  %520 = bitcast i8* %519 to <64 x float>*
  %521 = load <64 x float>, <64 x float>* %520, align 64, !tbaa !8276
  %522 = fadd <64 x float> %521, %342
  %523 = fadd <64 x float> %522, %345
  %524 = fcmp ogt <64 x float> %523, zeroinitializer
  %525 = select <64 x i1> %524, <64 x float> %523, <64 x float> zeroinitializer
  %526 = mul i64 %indvars.iv36, 7696581394432
  %sext52 = add i64 %526, 4398046511104
  %527 = ashr exact i64 %sext52, 32
  %528 = getelementptr inbounds float, float* %10, i64 %527
  %529 = bitcast float* %528 to <64 x float>*
  store <64 x float> %525, <64 x float>* %529, align 64, !tbaa !8291
  %530 = getelementptr inbounds i8, i8* %37, i64 4352
  %531 = bitcast i8* %530 to <64 x float>*
  %532 = load <64 x float>, <64 x float>* %531, align 64, !tbaa !8276
  %533 = fadd <64 x float> %532, %342
  %534 = fadd <64 x float> %533, %345
  %535 = fcmp ogt <64 x float> %534, zeroinitializer
  %536 = select <64 x i1> %535, <64 x float> %534, <64 x float> zeroinitializer
  %537 = mul i64 %indvars.iv36, 7696581394432
  %sext53 = add i64 %537, 4672924418048
  %538 = ashr exact i64 %sext53, 32
  %539 = getelementptr inbounds float, float* %10, i64 %538
  %540 = bitcast float* %539 to <64 x float>*
  store <64 x float> %536, <64 x float>* %540, align 64, !tbaa !8291
  %541 = getelementptr inbounds i8, i8* %37, i64 4608
  %542 = bitcast i8* %541 to <64 x float>*
  %543 = load <64 x float>, <64 x float>* %542, align 64, !tbaa !8276
  %544 = fadd <64 x float> %543, %342
  %545 = fadd <64 x float> %544, %345
  %546 = fcmp ogt <64 x float> %545, zeroinitializer
  %547 = select <64 x i1> %546, <64 x float> %545, <64 x float> zeroinitializer
  %548 = mul i64 %indvars.iv36, 7696581394432
  %sext54 = add i64 %548, 4947802324992
  %549 = ashr exact i64 %sext54, 32
  %550 = getelementptr inbounds float, float* %10, i64 %549
  %551 = bitcast float* %550 to <64 x float>*
  store <64 x float> %547, <64 x float>* %551, align 64, !tbaa !8291
  %552 = getelementptr inbounds i8, i8* %37, i64 4864
  %553 = bitcast i8* %552 to <64 x float>*
  %554 = load <64 x float>, <64 x float>* %553, align 64, !tbaa !8276
  %555 = fadd <64 x float> %554, %342
  %556 = fadd <64 x float> %555, %345
  %557 = fcmp ogt <64 x float> %556, zeroinitializer
  %558 = select <64 x i1> %557, <64 x float> %556, <64 x float> zeroinitializer
  %559 = mul i64 %indvars.iv36, 7696581394432
  %sext55 = add i64 %559, 5222680231936
  %560 = ashr exact i64 %sext55, 32
  %561 = getelementptr inbounds float, float* %10, i64 %560
  %562 = bitcast float* %561 to <64 x float>*
  store <64 x float> %558, <64 x float>* %562, align 64, !tbaa !8291
  %563 = getelementptr inbounds i8, i8* %37, i64 5120
  %564 = bitcast i8* %563 to <64 x float>*
  %565 = load <64 x float>, <64 x float>* %564, align 64, !tbaa !8276
  %566 = fadd <64 x float> %565, %342
  %567 = fadd <64 x float> %566, %345
  %568 = fcmp ogt <64 x float> %567, zeroinitializer
  %569 = select <64 x i1> %568, <64 x float> %567, <64 x float> zeroinitializer
  %570 = mul i64 %indvars.iv36, 7696581394432
  %sext56 = add i64 %570, 5497558138880
  %571 = ashr exact i64 %sext56, 32
  %572 = getelementptr inbounds float, float* %10, i64 %571
  %573 = bitcast float* %572 to <64 x float>*
  store <64 x float> %569, <64 x float>* %573, align 64, !tbaa !8291
  %574 = getelementptr inbounds i8, i8* %37, i64 5376
  %575 = bitcast i8* %574 to <64 x float>*
  %576 = load <64 x float>, <64 x float>* %575, align 64, !tbaa !8276
  %577 = fadd <64 x float> %576, %342
  %578 = fadd <64 x float> %577, %345
  %579 = fcmp ogt <64 x float> %578, zeroinitializer
  %580 = select <64 x i1> %579, <64 x float> %578, <64 x float> zeroinitializer
  %581 = mul i64 %indvars.iv36, 7696581394432
  %sext57 = add i64 %581, 5772436045824
  %582 = ashr exact i64 %sext57, 32
  %583 = getelementptr inbounds float, float* %10, i64 %582
  %584 = bitcast float* %583 to <64 x float>*
  store <64 x float> %580, <64 x float>* %584, align 64, !tbaa !8291
  %585 = getelementptr inbounds i8, i8* %37, i64 5632
  %586 = bitcast i8* %585 to <64 x float>*
  %587 = load <64 x float>, <64 x float>* %586, align 64, !tbaa !8276
  %588 = fadd <64 x float> %587, %342
  %589 = fadd <64 x float> %588, %345
  %590 = fcmp ogt <64 x float> %589, zeroinitializer
  %591 = select <64 x i1> %590, <64 x float> %589, <64 x float> zeroinitializer
  %592 = mul i64 %indvars.iv36, 7696581394432
  %sext58 = add i64 %592, 6047313952768
  %593 = ashr exact i64 %sext58, 32
  %594 = getelementptr inbounds float, float* %10, i64 %593
  %595 = bitcast float* %594 to <64 x float>*
  store <64 x float> %591, <64 x float>* %595, align 64, !tbaa !8291
  %596 = getelementptr inbounds i8, i8* %37, i64 5888
  %597 = bitcast i8* %596 to <64 x float>*
  %598 = load <64 x float>, <64 x float>* %597, align 64, !tbaa !8276
  %599 = fadd <64 x float> %598, %342
  %600 = fadd <64 x float> %599, %345
  %601 = fcmp ogt <64 x float> %600, zeroinitializer
  %602 = select <64 x i1> %601, <64 x float> %600, <64 x float> zeroinitializer
  %603 = mul i64 %indvars.iv36, 7696581394432
  %sext59 = add i64 %603, 6322191859712
  %604 = ashr exact i64 %sext59, 32
  %605 = getelementptr inbounds float, float* %10, i64 %604
  %606 = bitcast float* %605 to <64 x float>*
  store <64 x float> %602, <64 x float>* %606, align 64, !tbaa !8291
  %607 = getelementptr inbounds i8, i8* %37, i64 6144
  %608 = bitcast i8* %607 to <64 x float>*
  %609 = load <64 x float>, <64 x float>* %608, align 64, !tbaa !8276
  %610 = fadd <64 x float> %609, %342
  %611 = fadd <64 x float> %610, %345
  %612 = fcmp ogt <64 x float> %611, zeroinitializer
  %613 = select <64 x i1> %612, <64 x float> %611, <64 x float> zeroinitializer
  %614 = mul i64 %indvars.iv36, 7696581394432
  %sext60 = add i64 %614, 6597069766656
  %615 = ashr exact i64 %sext60, 32
  %616 = getelementptr inbounds float, float* %10, i64 %615
  %617 = bitcast float* %616 to <64 x float>*
  store <64 x float> %613, <64 x float>* %617, align 64, !tbaa !8291
  %618 = getelementptr inbounds i8, i8* %37, i64 6400
  %619 = bitcast i8* %618 to <64 x float>*
  %620 = load <64 x float>, <64 x float>* %619, align 64, !tbaa !8276
  %621 = fadd <64 x float> %620, %342
  %622 = fadd <64 x float> %621, %345
  %623 = fcmp ogt <64 x float> %622, zeroinitializer
  %624 = select <64 x i1> %623, <64 x float> %622, <64 x float> zeroinitializer
  %625 = mul i64 %indvars.iv36, 7696581394432
  %sext61 = add i64 %625, 6871947673600
  %626 = ashr exact i64 %sext61, 32
  %627 = getelementptr inbounds float, float* %10, i64 %626
  %628 = bitcast float* %627 to <64 x float>*
  store <64 x float> %624, <64 x float>* %628, align 64, !tbaa !8291
  %629 = getelementptr inbounds i8, i8* %37, i64 6656
  %630 = bitcast i8* %629 to <64 x float>*
  %631 = load <64 x float>, <64 x float>* %630, align 64, !tbaa !8276
  %632 = fadd <64 x float> %631, %342
  %633 = fadd <64 x float> %632, %345
  %634 = fcmp ogt <64 x float> %633, zeroinitializer
  %635 = select <64 x i1> %634, <64 x float> %633, <64 x float> zeroinitializer
  %636 = mul i64 %indvars.iv36, 7696581394432
  %sext62 = add i64 %636, 7146825580544
  %637 = ashr exact i64 %sext62, 32
  %638 = getelementptr inbounds float, float* %10, i64 %637
  %639 = bitcast float* %638 to <64 x float>*
  store <64 x float> %635, <64 x float>* %639, align 64, !tbaa !8291
  %640 = getelementptr inbounds i8, i8* %37, i64 6912
  %641 = bitcast i8* %640 to <64 x float>*
  %642 = load <64 x float>, <64 x float>* %641, align 64, !tbaa !8276
  %643 = fadd <64 x float> %642, %342
  %644 = fadd <64 x float> %643, %345
  %645 = fcmp ogt <64 x float> %644, zeroinitializer
  %646 = select <64 x i1> %645, <64 x float> %644, <64 x float> zeroinitializer
  %647 = mul i64 %indvars.iv36, 7696581394432
  %sext63 = add i64 %647, 7421703487488
  %648 = ashr exact i64 %sext63, 32
  %649 = getelementptr inbounds float, float* %10, i64 %648
  %650 = bitcast float* %649 to <64 x float>*
  store <64 x float> %646, <64 x float>* %650, align 64, !tbaa !8291
  %651 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %652 = tail call i32 %651(i32 1, i32 %19, i8* nonnull %37)
  %indvars.iv.next37 = add nsw i64 %indvars.iv36, 1
  %653 = icmp slt i64 %indvars.iv.next37, %35
  br i1 %653, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.595, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !8294
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !8308
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !8311
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !8313
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.596, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !8317
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.597, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.598, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.599, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.600, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !8319
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !8333
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !8335
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 56
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.148, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !8338
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 56
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.149, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !8340
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 256
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.196, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !8344
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 802816, i32 14336, i32 256, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !8355
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 802816
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.197, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !8359
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 2
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.551, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !8373
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !8375
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 1
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.101, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !8378
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.102, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !8380
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 256
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.171, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !8384
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !8386
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 8192, i32 8192, i32 32, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !8397
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 8192
  %187 = load i64, i64* %47, align 8, !tbaa !8401
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 8192
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([275 x i8], [275 x i8]* @.str.532, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !8403
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !8417
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 2
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.553, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !8419
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !8422
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !8424
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !8428
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 32, i32 32, i32 32, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !8439
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 64
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.554, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !8443
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !8457
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 2
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.555, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !8459
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !8462
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !8464
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 32
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !8468
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 32, i32 32, i32 32, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !8479
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 64
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([231 x i8], [231 x i8]* @.str.556, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !8483
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !8497
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 2
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.557, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !8499
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 56
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.558, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !8502
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 56
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.559, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !8504
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 32
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !8508
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 100352, i32 1792, i32 32, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !8519
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 200704
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.560, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_2_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = alloca %52, align 8
  %7 = getelementptr inbounds %52, %52* %6, i64 0, i32 0
  store i8* %0, i8** %7, align 8
  %8 = getelementptr inbounds %52, %52* %6, i64 0, i32 1
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %52, %52* %6, i64 0, i32 2
  store i8* %2, i8** %9, align 8
  %10 = getelementptr inbounds %52, %52* %6, i64 0, i32 3
  store i8* %3, i8** %10, align 8
  %11 = getelementptr inbounds %52, %52* %6, i64 0, i32 4
  store i8* %4, i8** %11, align 8
  %12 = getelementptr inbounds %52, %52* %6, i64 0, i32 5
  store i32 %5, i32* %12, align 8
  %13 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %14 = bitcast %52* %6 to i8*
  %15 = call i32 %13(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.601, i8* nonnull %14, i32 0)
  ret i32 %15
}

define private i32 @__tvm_parallel_lambda.601(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds i8, i8* %2, i64 40
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 111
  %23 = sdiv i32 %22, %21
  %24 = mul nsw i32 %23, %0
  %25 = icmp slt i32 %24, 112
  %26 = select i1 %25, i32 %24, i32 112
  %27 = add nsw i32 %0, 1
  %28 = mul nsw i32 %23, %27
  %29 = icmp slt i32 %28, 112
  %30 = select i1 %29, i32 %28, i32 112
  %31 = icmp slt i32 %26, %30
  br i1 %31, label %for_body, label %for_end, !prof !5

for_body:                                         ; preds = %entry, %for_end9
  %32 = phi i32 [ %221, %for_end9 ], [ %26, %entry ]
  %33 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %34 = tail call i8* %33(i32 1, i32 %19, i64 7168, i32 2, i32 32)
  %35 = bitcast i8* %34 to float*
  %36 = srem i32 %32, 56
  %37 = mul nsw i32 %36, 14336
  %38 = sdiv i32 %32, 56
  %39 = shl i32 %38, 13
  %40 = sext i32 %39 to i64
  %41 = sext i32 %37 to i64
  br label %for_body2

for_end:                                          ; preds = %for_end9, %entry
  ret i32 0

for_begin7.preheader:                             ; preds = %for_end6
  %42 = mul nsw i32 %32, 1792
  %43 = shl nsw i32 %38, 5
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds float, float* %13, i64 %44
  %46 = bitcast float* %45 to <32 x float>*
  %47 = load <32 x float>, <32 x float>* %46, align 64, !tbaa !8523
  %48 = getelementptr inbounds float, float* %16, i64 %44
  %49 = bitcast float* %48 to <32 x float>*
  %50 = load <32 x float>, <32 x float>* %49, align 64, !tbaa !8526
  br label %for_begin10.preheader

for_body2:                                        ; preds = %for_end6, %for_body
  %indvars.iv36 = phi i64 [ 0, %for_body ], [ %indvars.iv.next37, %for_end6 ]
  %51 = mul nuw nsw i64 %indvars.iv36, 224
  %52 = getelementptr inbounds float, float* %35, i64 %51
  %53 = bitcast float* %52 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %53, align 64, !tbaa !8529
  %54 = add nuw nsw i64 %51, 32
  %55 = getelementptr inbounds float, float* %35, i64 %54
  %56 = bitcast float* %55 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %56, align 64, !tbaa !8529
  %57 = add nuw nsw i64 %51, 64
  %58 = getelementptr inbounds float, float* %35, i64 %57
  %59 = bitcast float* %58 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %59, align 64, !tbaa !8529
  %60 = add nuw nsw i64 %51, 96
  %61 = getelementptr inbounds float, float* %35, i64 %60
  %62 = bitcast float* %61 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %62, align 64, !tbaa !8529
  %63 = add nuw nsw i64 %51, 128
  %64 = getelementptr inbounds float, float* %35, i64 %63
  %65 = bitcast float* %64 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %65, align 64, !tbaa !8529
  %66 = add nuw nsw i64 %51, 160
  %67 = getelementptr inbounds float, float* %35, i64 %66
  %68 = bitcast float* %67 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %68, align 64, !tbaa !8529
  %69 = add nuw nsw i64 %51, 192
  %70 = getelementptr inbounds float, float* %35, i64 %69
  %71 = bitcast float* %70 to <32 x float>*
  store <32 x float> zeroinitializer, <32 x float>* %71, align 64, !tbaa !8529
  %72 = mul nuw nsw i64 %indvars.iv36, 1792
  %73 = add nsw i64 %72, %41
  br label %for_body5

for_body5:                                        ; preds = %for_body5, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_body5 ]
  %74 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %127, %for_body5 ]
  %75 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %121, %for_body5 ]
  %76 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %115, %for_body5 ]
  %77 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %109, %for_body5 ]
  %78 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %103, %for_body5 ]
  %79 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %97, %for_body5 ]
  %80 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %91, %for_body5 ]
  %81 = add nsw i64 %73, %indvars.iv
  %82 = getelementptr inbounds float, float* %4, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !8532
  %84 = insertelement <32 x float> undef, float %83, i32 0
  %85 = shufflevector <32 x float> %84, <32 x float> undef, <32 x i32> zeroinitializer
  %86 = shl i64 %indvars.iv, 5
  %87 = add nuw nsw i64 %86, %40
  %88 = getelementptr inbounds float, float* %7, i64 %87
  %89 = bitcast float* %88 to <32 x float>*
  %90 = load <32 x float>, <32 x float>* %89, align 64, !tbaa !8535
  %91 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %85, <32 x float> %90, <32 x float> %80)
  %92 = add nsw i64 %81, 256
  %93 = getelementptr inbounds float, float* %4, i64 %92
  %94 = load float, float* %93, align 4, !tbaa !8532
  %95 = insertelement <32 x float> undef, float %94, i32 0
  %96 = shufflevector <32 x float> %95, <32 x float> undef, <32 x i32> zeroinitializer
  %97 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %96, <32 x float> %90, <32 x float> %79)
  %98 = add nsw i64 %81, 512
  %99 = getelementptr inbounds float, float* %4, i64 %98
  %100 = load float, float* %99, align 4, !tbaa !8532
  %101 = insertelement <32 x float> undef, float %100, i32 0
  %102 = shufflevector <32 x float> %101, <32 x float> undef, <32 x i32> zeroinitializer
  %103 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %102, <32 x float> %90, <32 x float> %78)
  %104 = add nsw i64 %81, 768
  %105 = getelementptr inbounds float, float* %4, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !8532
  %107 = insertelement <32 x float> undef, float %106, i32 0
  %108 = shufflevector <32 x float> %107, <32 x float> undef, <32 x i32> zeroinitializer
  %109 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %108, <32 x float> %90, <32 x float> %77)
  %110 = add nsw i64 %81, 1024
  %111 = getelementptr inbounds float, float* %4, i64 %110
  %112 = load float, float* %111, align 4, !tbaa !8532
  %113 = insertelement <32 x float> undef, float %112, i32 0
  %114 = shufflevector <32 x float> %113, <32 x float> undef, <32 x i32> zeroinitializer
  %115 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %114, <32 x float> %90, <32 x float> %76)
  %116 = add nsw i64 %81, 1280
  %117 = getelementptr inbounds float, float* %4, i64 %116
  %118 = load float, float* %117, align 4, !tbaa !8532
  %119 = insertelement <32 x float> undef, float %118, i32 0
  %120 = shufflevector <32 x float> %119, <32 x float> undef, <32 x i32> zeroinitializer
  %121 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %120, <32 x float> %90, <32 x float> %75)
  %122 = add nsw i64 %81, 1536
  %123 = getelementptr inbounds float, float* %4, i64 %122
  %124 = load float, float* %123, align 4, !tbaa !8532
  %125 = insertelement <32 x float> undef, float %124, i32 0
  %126 = shufflevector <32 x float> %125, <32 x float> undef, <32 x i32> zeroinitializer
  %127 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %126, <32 x float> %90, <32 x float> %74)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  store <32 x float> %91, <32 x float>* %53, align 64, !tbaa !8529
  store <32 x float> %97, <32 x float>* %56, align 64, !tbaa !8529
  store <32 x float> %103, <32 x float>* %59, align 64, !tbaa !8529
  store <32 x float> %109, <32 x float>* %62, align 64, !tbaa !8529
  store <32 x float> %115, <32 x float>* %65, align 64, !tbaa !8529
  store <32 x float> %121, <32 x float>* %68, align 64, !tbaa !8529
  store <32 x float> %127, <32 x float>* %71, align 64, !tbaa !8529
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %exitcond38 = icmp eq i64 %indvars.iv.next37, 8
  br i1 %exitcond38, label %for_begin7.preheader, label %for_body2, !prof !50

for_begin10.preheader:                            ; preds = %for_begin10.preheader, %for_begin7.preheader
  %indvars.iv42 = phi i64 [ 0, %for_begin7.preheader ], [ %indvars.iv.next43, %for_begin10.preheader ]
  %128 = mul nuw nsw i64 %indvars.iv42, 224
  %129 = trunc i64 %128 to i32
  %130 = add i32 %42, %129
  %131 = getelementptr inbounds float, float* %35, i64 %128
  %132 = bitcast float* %131 to <32 x float>*
  %133 = load <32 x float>, <32 x float>* %132, align 64, !tbaa !8529
  %134 = fadd <32 x float> %133, %47
  %135 = fadd <32 x float> %134, %50
  %136 = fcmp ogt <32 x float> %135, zeroinitializer
  %137 = select <32 x i1> %136, <32 x float> %135, <32 x float> zeroinitializer
  %138 = sext i32 %130 to i64
  %139 = getelementptr inbounds float, float* %10, i64 %138
  %140 = bitcast float* %139 to <32 x float>*
  store <32 x float> %137, <32 x float>* %140, align 64, !tbaa !8538
  %141 = add nuw nsw i64 %128, 32
  %142 = trunc i64 %141 to i32
  %143 = add i32 %42, %142
  %144 = getelementptr inbounds float, float* %35, i64 %141
  %145 = bitcast float* %144 to <32 x float>*
  %146 = load <32 x float>, <32 x float>* %145, align 64, !tbaa !8529
  %147 = fadd <32 x float> %146, %47
  %148 = fadd <32 x float> %147, %50
  %149 = fcmp ogt <32 x float> %148, zeroinitializer
  %150 = select <32 x i1> %149, <32 x float> %148, <32 x float> zeroinitializer
  %151 = sext i32 %143 to i64
  %152 = getelementptr inbounds float, float* %10, i64 %151
  %153 = bitcast float* %152 to <32 x float>*
  store <32 x float> %150, <32 x float>* %153, align 64, !tbaa !8538
  %154 = add nuw nsw i64 %128, 64
  %155 = trunc i64 %154 to i32
  %156 = add i32 %42, %155
  %157 = getelementptr inbounds float, float* %35, i64 %154
  %158 = bitcast float* %157 to <32 x float>*
  %159 = load <32 x float>, <32 x float>* %158, align 64, !tbaa !8529
  %160 = fadd <32 x float> %159, %47
  %161 = fadd <32 x float> %160, %50
  %162 = fcmp ogt <32 x float> %161, zeroinitializer
  %163 = select <32 x i1> %162, <32 x float> %161, <32 x float> zeroinitializer
  %164 = sext i32 %156 to i64
  %165 = getelementptr inbounds float, float* %10, i64 %164
  %166 = bitcast float* %165 to <32 x float>*
  store <32 x float> %163, <32 x float>* %166, align 64, !tbaa !8538
  %167 = add nuw nsw i64 %128, 96
  %168 = trunc i64 %167 to i32
  %169 = add i32 %42, %168
  %170 = getelementptr inbounds float, float* %35, i64 %167
  %171 = bitcast float* %170 to <32 x float>*
  %172 = load <32 x float>, <32 x float>* %171, align 64, !tbaa !8529
  %173 = fadd <32 x float> %172, %47
  %174 = fadd <32 x float> %173, %50
  %175 = fcmp ogt <32 x float> %174, zeroinitializer
  %176 = select <32 x i1> %175, <32 x float> %174, <32 x float> zeroinitializer
  %177 = sext i32 %169 to i64
  %178 = getelementptr inbounds float, float* %10, i64 %177
  %179 = bitcast float* %178 to <32 x float>*
  store <32 x float> %176, <32 x float>* %179, align 64, !tbaa !8538
  %180 = add nuw nsw i64 %128, 128
  %181 = trunc i64 %180 to i32
  %182 = add i32 %42, %181
  %183 = getelementptr inbounds float, float* %35, i64 %180
  %184 = bitcast float* %183 to <32 x float>*
  %185 = load <32 x float>, <32 x float>* %184, align 64, !tbaa !8529
  %186 = fadd <32 x float> %185, %47
  %187 = fadd <32 x float> %186, %50
  %188 = fcmp ogt <32 x float> %187, zeroinitializer
  %189 = select <32 x i1> %188, <32 x float> %187, <32 x float> zeroinitializer
  %190 = sext i32 %182 to i64
  %191 = getelementptr inbounds float, float* %10, i64 %190
  %192 = bitcast float* %191 to <32 x float>*
  store <32 x float> %189, <32 x float>* %192, align 64, !tbaa !8538
  %193 = add nuw nsw i64 %128, 160
  %194 = trunc i64 %193 to i32
  %195 = add i32 %42, %194
  %196 = getelementptr inbounds float, float* %35, i64 %193
  %197 = bitcast float* %196 to <32 x float>*
  %198 = load <32 x float>, <32 x float>* %197, align 64, !tbaa !8529
  %199 = fadd <32 x float> %198, %47
  %200 = fadd <32 x float> %199, %50
  %201 = fcmp ogt <32 x float> %200, zeroinitializer
  %202 = select <32 x i1> %201, <32 x float> %200, <32 x float> zeroinitializer
  %203 = sext i32 %195 to i64
  %204 = getelementptr inbounds float, float* %10, i64 %203
  %205 = bitcast float* %204 to <32 x float>*
  store <32 x float> %202, <32 x float>* %205, align 64, !tbaa !8538
  %206 = add nuw nsw i64 %128, 192
  %207 = trunc i64 %206 to i32
  %208 = add i32 %42, %207
  %209 = getelementptr inbounds float, float* %35, i64 %206
  %210 = bitcast float* %209 to <32 x float>*
  %211 = load <32 x float>, <32 x float>* %210, align 64, !tbaa !8529
  %212 = fadd <32 x float> %211, %47
  %213 = fadd <32 x float> %212, %50
  %214 = fcmp ogt <32 x float> %213, zeroinitializer
  %215 = select <32 x i1> %214, <32 x float> %213, <32 x float> zeroinitializer
  %216 = sext i32 %208 to i64
  %217 = getelementptr inbounds float, float* %10, i64 %216
  %218 = bitcast float* %217 to <32 x float>*
  store <32 x float> %215, <32 x float>* %218, align 64, !tbaa !8538
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1
  %exitcond44 = icmp eq i64 %indvars.iv.next43, 8
  br i1 %exitcond44, label %for_end9, label %for_begin10.preheader, !prof !50

for_end9:                                         ; preds = %for_begin10.preheader
  %219 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %220 = tail call i32 %219(i32 1, i32 %19, i8* nonnull %34)
  %221 = add nsw i32 %32, 1
  %222 = icmp slt i32 %221, %30
  br i1 %222, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_9(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.602, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !8541
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !8555
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !8558
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !8560
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.603, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !8564
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.604, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.605, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.606, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.607, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !8566
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !8580
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !8582
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 7
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.178, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !8585
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 7
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.179, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !8587
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 512
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.132, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !8591
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 25088, i32 3584, i32 512, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !8602
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 25088
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.608, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !8606
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 16
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.48, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !8620
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !8622
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !8625
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !8627
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 512
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.134, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !8631
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !8633
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 49152, i32 16384, i32 32, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !8644
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 147456
  %187 = load i64, i64* %47, align 8, !tbaa !8648
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 147456
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([281 x i8], [281 x i8]* @.str.609, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !8650
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !8664
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 16
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !8666
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !8669
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !8671
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !8675
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 32, i32 32, i32 32, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !8686
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 512
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.107, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !8690
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !8704
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 16
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.67, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !8706
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !8709
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !8711
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 32
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !8715
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 32, i32 32, i32 32, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !8726
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 512
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.109, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !8730
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !8744
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 16
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.78, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !8746
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 7
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.136, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !8749
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 7
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.137, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !8751
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 32
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !8755
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 1568, i32 224, i32 32, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !8766
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 25088
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.138, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_9_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_9_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %7 = tail call i8* %6(i32 1, i32 %5, i64 165888, i32 2, i32 32)
  %8 = alloca %53, align 8
  %9 = getelementptr inbounds %53, %53* %8, i64 0, i32 0
  store i8* %7, i8** %9, align 8
  %10 = getelementptr inbounds %53, %53* %8, i64 0, i32 1
  store i8* %0, i8** %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %53* %8 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.610, i8* nonnull %12, i32 0)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %13, %entry ], [ 0, %call_end2 ], [ %23, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %15 = alloca %54, align 8
  %16 = getelementptr inbounds %54, %54* %15, i64 0, i32 0
  store i8* %7, i8** %16, align 8
  %17 = getelementptr inbounds %54, %54* %15, i64 0, i32 1
  store i8* %1, i8** %17, align 8
  %18 = getelementptr inbounds %54, %54* %15, i64 0, i32 2
  store i8* %2, i8** %18, align 8
  %19 = getelementptr inbounds %54, %54* %15, i64 0, i32 3
  store i8* %3, i8** %19, align 8
  %20 = getelementptr inbounds %54, %54* %15, i64 0, i32 4
  store i8* %4, i8** %20, align 8
  %21 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %22 = bitcast %54* %15 to i8*
  %23 = call i32 %21(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.611, i8* nonnull %22, i32 0)
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %25 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %26 = call i32 %25(i32 1, i32 %5, i8* %7)
  br label %call_fail
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.610(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 8
  %11 = sdiv i32 %10, %9
  %12 = mul i32 %11, %0
  %13 = icmp slt i32 %12, 9
  %14 = select i1 %13, i32 %12, i32 9
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 9
  %18 = select i1 %17, i32 %16, i32 9
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = icmp slt i32 %12, 9
  %21 = select i1 %20, i32 %12, i32 9
  %smax = xor i32 %21, -1
  %22 = mul i32 %smax, -4608
  %23 = add i32 %22, -4608
  %24 = add i32 %14, 1
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, -1
  %27 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv = phi i64 [ %26, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %28 = mul nsw i64 %indvars.iv, 4608
  %29 = trunc i64 %indvars.iv to i32
  %.off = add i32 %29, -1
  %30 = icmp ult i32 %.off, 7
  %31 = trunc i64 %indvars.iv to i32
  %32 = mul i32 %31, 3584
  br i1 %30, label %if_end.us.8, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %33 = mul i32 %indvar, 4608
  %34 = add i32 %23, %33
  %35 = sext i32 %34 to i64
  %scevgep = getelementptr float, float* %4, i64 %35
  %scevgep5 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 64 %scevgep5, i8 0, i64 18432, i1 false)
  br label %for_end3

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %for_body2.preheader, %if_end.us.8
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %36 = icmp slt i64 %indvars.iv.next, %27
  %indvar.next = add nuw i32 %indvar, 1
  br i1 %36, label %for_begin1.preheader, label %for_end, !prof !5

if_end.us.8:                                      ; preds = %for_begin1.preheader
  %37 = getelementptr inbounds float, float* %4, i64 %28
  %38 = bitcast float* %37 to <512 x float>*
  store <512 x float> zeroinitializer, <512 x float>* %38, align 64, !tbaa !8770
  %39 = add nsw i64 %28, 512
  %40 = add i32 %32, -3584
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %7, i64 %41
  %43 = bitcast float* %42 to <512 x float>*
  %44 = load <512 x float>, <512 x float>* %43, align 64, !tbaa !8773
  %45 = getelementptr inbounds float, float* %4, i64 %39
  %46 = bitcast float* %45 to <512 x float>*
  store <512 x float> %44, <512 x float>* %46, align 64, !tbaa !8770
  %47 = add nsw i64 %28, 1024
  %48 = add i32 %32, -3072
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds float, float* %7, i64 %49
  %51 = bitcast float* %50 to <512 x float>*
  %52 = load <512 x float>, <512 x float>* %51, align 64, !tbaa !8773
  %53 = getelementptr inbounds float, float* %4, i64 %47
  %54 = bitcast float* %53 to <512 x float>*
  store <512 x float> %52, <512 x float>* %54, align 64, !tbaa !8770
  %55 = add nsw i64 %28, 1536
  %56 = add i32 %32, -2560
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds float, float* %7, i64 %57
  %59 = bitcast float* %58 to <512 x float>*
  %60 = load <512 x float>, <512 x float>* %59, align 64, !tbaa !8773
  %61 = getelementptr inbounds float, float* %4, i64 %55
  %62 = bitcast float* %61 to <512 x float>*
  store <512 x float> %60, <512 x float>* %62, align 64, !tbaa !8770
  %63 = add nsw i64 %28, 2048
  %64 = add i32 %32, -2048
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds float, float* %7, i64 %65
  %67 = bitcast float* %66 to <512 x float>*
  %68 = load <512 x float>, <512 x float>* %67, align 64, !tbaa !8773
  %69 = getelementptr inbounds float, float* %4, i64 %63
  %70 = bitcast float* %69 to <512 x float>*
  store <512 x float> %68, <512 x float>* %70, align 64, !tbaa !8770
  %71 = add nsw i64 %28, 2560
  %72 = add i32 %32, -1536
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, float* %7, i64 %73
  %75 = bitcast float* %74 to <512 x float>*
  %76 = load <512 x float>, <512 x float>* %75, align 64, !tbaa !8773
  %77 = getelementptr inbounds float, float* %4, i64 %71
  %78 = bitcast float* %77 to <512 x float>*
  store <512 x float> %76, <512 x float>* %78, align 64, !tbaa !8770
  %79 = add nsw i64 %28, 3072
  %80 = add i32 %32, -1024
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %7, i64 %81
  %83 = bitcast float* %82 to <512 x float>*
  %84 = load <512 x float>, <512 x float>* %83, align 64, !tbaa !8773
  %85 = getelementptr inbounds float, float* %4, i64 %79
  %86 = bitcast float* %85 to <512 x float>*
  store <512 x float> %84, <512 x float>* %86, align 64, !tbaa !8770
  %87 = add nsw i64 %28, 3584
  %88 = add i32 %32, -512
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds float, float* %7, i64 %89
  %91 = bitcast float* %90 to <512 x float>*
  %92 = load <512 x float>, <512 x float>* %91, align 64, !tbaa !8773
  %93 = getelementptr inbounds float, float* %4, i64 %87
  %94 = bitcast float* %93 to <512 x float>*
  store <512 x float> %92, <512 x float>* %94, align 64, !tbaa !8770
  %95 = add nsw i64 %28, 4096
  %96 = getelementptr inbounds float, float* %4, i64 %95
  %97 = bitcast float* %96 to <512 x float>*
  store <512 x float> zeroinitializer, <512 x float>* %97, align 64, !tbaa !8770
  br label %for_end3
}

; Function Attrs: nounwind
define private i32 @__tvm_parallel_lambda.611(i32, %0* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds i8, i8* %2, i64 16
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = getelementptr inbounds i8, i8* %2, i64 24
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = getelementptr inbounds i8, i8* %2, i64 32
  %15 = bitcast i8* %14 to float**
  %16 = load float*, float** %15, align 8
  %17 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, 111
  %20 = sdiv i32 %19, %18
  %21 = mul nsw i32 %20, %0
  %22 = icmp slt i32 %21, 112
  %23 = select i1 %22, i32 %21, i32 112
  %24 = add nsw i32 %0, 1
  %25 = mul nsw i32 %20, %24
  %26 = icmp slt i32 %25, 112
  %27 = select i1 %26, i32 %25, i32 112
  %28 = icmp slt i32 %23, %27
  br i1 %28, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %29 = add i32 %23, 1
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %30, -1
  %32 = sext i32 %27 to i64
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_end6.2
  %indvars.iv48 = phi i64 [ %31, %for_body.lr.ph ], [ %indvars.iv.next49, %for_end6.2 ]
  %33 = trunc i64 %indvars.iv48 to i32
  %34 = srem i32 %33, 7
  %35 = sdiv i32 %33, 7
  %36 = mul nsw i32 %35, 147456
  %37 = sext i32 %36 to i64
  %38 = mul nsw i32 %34, 4608
  %39 = sext i32 %38 to i64
  br label %for_body5

for_end:                                          ; preds = %for_end6.2, %entry
  ret i32 0

for_body5:                                        ; preds = %for_body5, %for_body
  %indvars.iv = phi i64 [ 0, %for_body ], [ %indvars.iv.next, %for_body5 ]
  %40 = phi <32 x float> [ zeroinitializer, %for_body ], [ %125, %for_body5 ]
  %41 = phi <32 x float> [ zeroinitializer, %for_body ], [ %119, %for_body5 ]
  %42 = phi <32 x float> [ zeroinitializer, %for_body ], [ %118, %for_body5 ]
  %43 = phi <32 x float> [ zeroinitializer, %for_body ], [ %117, %for_body5 ]
  %44 = phi <32 x float> [ zeroinitializer, %for_body ], [ %116, %for_body5 ]
  %45 = phi <32 x float> [ zeroinitializer, %for_body ], [ %115, %for_body5 ]
  %46 = phi <32 x float> [ zeroinitializer, %for_body ], [ %114, %for_body5 ]
  %47 = add nsw i64 %indvars.iv, %39
  %48 = getelementptr inbounds float, float* %4, i64 %47
  %49 = load float, float* %48, align 4, !tbaa !8770
  %50 = insertelement <32 x float> undef, float %49, i32 0
  %51 = shufflevector <32 x float> %50, <32 x float> undef, <32 x i32> zeroinitializer
  %52 = shl nsw i64 %indvars.iv, 5
  %53 = add nsw i64 %52, %37
  %54 = getelementptr inbounds float, float* %7, i64 %53
  %55 = bitcast float* %54 to <32 x float>*
  %56 = load <32 x float>, <32 x float>* %55, align 64, !tbaa !8776
  %57 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %51, <32 x float> %56, <32 x float> %46)
  %58 = add nsw i64 %47, 512
  %59 = getelementptr inbounds float, float* %4, i64 %58
  %60 = load float, float* %59, align 4, !tbaa !8770
  %61 = insertelement <32 x float> undef, float %60, i32 0
  %62 = shufflevector <32 x float> %61, <32 x float> undef, <32 x i32> zeroinitializer
  %63 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %62, <32 x float> %56, <32 x float> %45)
  %64 = add nsw i64 %47, 1024
  %65 = getelementptr inbounds float, float* %4, i64 %64
  %66 = load float, float* %65, align 4, !tbaa !8770
  %67 = insertelement <32 x float> undef, float %66, i32 0
  %68 = shufflevector <32 x float> %67, <32 x float> undef, <32 x i32> zeroinitializer
  %69 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %68, <32 x float> %56, <32 x float> %44)
  %70 = add nsw i64 %47, 1536
  %71 = getelementptr inbounds float, float* %4, i64 %70
  %72 = load float, float* %71, align 4, !tbaa !8770
  %73 = insertelement <32 x float> undef, float %72, i32 0
  %74 = shufflevector <32 x float> %73, <32 x float> undef, <32 x i32> zeroinitializer
  %75 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %74, <32 x float> %56, <32 x float> %43)
  %76 = add nsw i64 %47, 2048
  %77 = getelementptr inbounds float, float* %4, i64 %76
  %78 = load float, float* %77, align 4, !tbaa !8770
  %79 = insertelement <32 x float> undef, float %78, i32 0
  %80 = shufflevector <32 x float> %79, <32 x float> undef, <32 x i32> zeroinitializer
  %81 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %80, <32 x float> %56, <32 x float> %42)
  %82 = add nsw i64 %47, 2560
  %83 = getelementptr inbounds float, float* %4, i64 %82
  %84 = load float, float* %83, align 4, !tbaa !8770
  %85 = insertelement <32 x float> undef, float %84, i32 0
  %86 = shufflevector <32 x float> %85, <32 x float> undef, <32 x i32> zeroinitializer
  %87 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %86, <32 x float> %56, <32 x float> %41)
  %88 = add nsw i64 %47, 3072
  %89 = getelementptr inbounds float, float* %4, i64 %88
  %90 = load float, float* %89, align 4, !tbaa !8770
  %91 = insertelement <32 x float> undef, float %90, i32 0
  %92 = shufflevector <32 x float> %91, <32 x float> undef, <32 x i32> zeroinitializer
  %93 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %92, <32 x float> %56, <32 x float> %40)
  %94 = add nsw i64 %53, 16384
  %95 = getelementptr inbounds float, float* %7, i64 %94
  %96 = bitcast float* %95 to <32 x float>*
  %97 = load <32 x float>, <32 x float>* %96, align 64, !tbaa !8776
  %98 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %62, <32 x float> %97, <32 x float> %57)
  %99 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %68, <32 x float> %97, <32 x float> %63)
  %100 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %74, <32 x float> %97, <32 x float> %69)
  %101 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %80, <32 x float> %97, <32 x float> %75)
  %102 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %86, <32 x float> %97, <32 x float> %81)
  %103 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %92, <32 x float> %97, <32 x float> %87)
  %104 = add nsw i64 %47, 3584
  %105 = getelementptr inbounds float, float* %4, i64 %104
  %106 = load float, float* %105, align 4, !tbaa !8770
  %107 = insertelement <32 x float> undef, float %106, i32 0
  %108 = shufflevector <32 x float> %107, <32 x float> undef, <32 x i32> zeroinitializer
  %109 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %108, <32 x float> %97, <32 x float> %93)
  %110 = add nsw i64 %53, 32768
  %111 = getelementptr inbounds float, float* %7, i64 %110
  %112 = bitcast float* %111 to <32 x float>*
  %113 = load <32 x float>, <32 x float>* %112, align 64, !tbaa !8776
  %114 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %68, <32 x float> %113, <32 x float> %98)
  %115 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %74, <32 x float> %113, <32 x float> %99)
  %116 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %80, <32 x float> %113, <32 x float> %100)
  %117 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %86, <32 x float> %113, <32 x float> %101)
  %118 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %92, <32 x float> %113, <32 x float> %102)
  %119 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %108, <32 x float> %113, <32 x float> %103)
  %120 = add nsw i64 %47, 4096
  %121 = getelementptr inbounds float, float* %4, i64 %120
  %122 = load float, float* %121, align 4, !tbaa !8770
  %123 = insertelement <32 x float> undef, float %122, i32 0
  %124 = shufflevector <32 x float> %123, <32 x float> undef, <32 x i32> zeroinitializer
  %125 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %124, <32 x float> %113, <32 x float> %109)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 512
  br i1 %exitcond, label %for_end6, label %for_body5, !prof !50

for_end6:                                         ; preds = %for_body5
  %126 = mul nsw i32 %34, 4608
  %127 = add nsw i32 %126, 4608
  %128 = add nsw i64 %37, 49152
  %129 = sext i32 %127 to i64
  br label %for_body5.1

for_body5.1:                                      ; preds = %for_body5.1, %for_end6
  %indvars.iv.1 = phi i64 [ 0, %for_end6 ], [ %indvars.iv.next.1, %for_body5.1 ]
  %130 = phi <32 x float> [ %125, %for_end6 ], [ %215, %for_body5.1 ]
  %131 = phi <32 x float> [ %119, %for_end6 ], [ %209, %for_body5.1 ]
  %132 = phi <32 x float> [ %118, %for_end6 ], [ %208, %for_body5.1 ]
  %133 = phi <32 x float> [ %117, %for_end6 ], [ %207, %for_body5.1 ]
  %134 = phi <32 x float> [ %116, %for_end6 ], [ %206, %for_body5.1 ]
  %135 = phi <32 x float> [ %115, %for_end6 ], [ %205, %for_body5.1 ]
  %136 = phi <32 x float> [ %114, %for_end6 ], [ %204, %for_body5.1 ]
  %137 = add nsw i64 %indvars.iv.1, %129
  %138 = getelementptr inbounds float, float* %4, i64 %137
  %139 = load float, float* %138, align 4, !tbaa !8770
  %140 = insertelement <32 x float> undef, float %139, i32 0
  %141 = shufflevector <32 x float> %140, <32 x float> undef, <32 x i32> zeroinitializer
  %142 = shl nsw i64 %indvars.iv.1, 5
  %143 = add nsw i64 %128, %142
  %144 = getelementptr inbounds float, float* %7, i64 %143
  %145 = bitcast float* %144 to <32 x float>*
  %146 = load <32 x float>, <32 x float>* %145, align 64, !tbaa !8776
  %147 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %141, <32 x float> %146, <32 x float> %136)
  %148 = add nsw i64 %137, 512
  %149 = getelementptr inbounds float, float* %4, i64 %148
  %150 = load float, float* %149, align 4, !tbaa !8770
  %151 = insertelement <32 x float> undef, float %150, i32 0
  %152 = shufflevector <32 x float> %151, <32 x float> undef, <32 x i32> zeroinitializer
  %153 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %152, <32 x float> %146, <32 x float> %135)
  %154 = add nsw i64 %137, 1024
  %155 = getelementptr inbounds float, float* %4, i64 %154
  %156 = load float, float* %155, align 4, !tbaa !8770
  %157 = insertelement <32 x float> undef, float %156, i32 0
  %158 = shufflevector <32 x float> %157, <32 x float> undef, <32 x i32> zeroinitializer
  %159 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %158, <32 x float> %146, <32 x float> %134)
  %160 = add nsw i64 %137, 1536
  %161 = getelementptr inbounds float, float* %4, i64 %160
  %162 = load float, float* %161, align 4, !tbaa !8770
  %163 = insertelement <32 x float> undef, float %162, i32 0
  %164 = shufflevector <32 x float> %163, <32 x float> undef, <32 x i32> zeroinitializer
  %165 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %164, <32 x float> %146, <32 x float> %133)
  %166 = add nsw i64 %137, 2048
  %167 = getelementptr inbounds float, float* %4, i64 %166
  %168 = load float, float* %167, align 4, !tbaa !8770
  %169 = insertelement <32 x float> undef, float %168, i32 0
  %170 = shufflevector <32 x float> %169, <32 x float> undef, <32 x i32> zeroinitializer
  %171 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %170, <32 x float> %146, <32 x float> %132)
  %172 = add nsw i64 %137, 2560
  %173 = getelementptr inbounds float, float* %4, i64 %172
  %174 = load float, float* %173, align 4, !tbaa !8770
  %175 = insertelement <32 x float> undef, float %174, i32 0
  %176 = shufflevector <32 x float> %175, <32 x float> undef, <32 x i32> zeroinitializer
  %177 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %176, <32 x float> %146, <32 x float> %131)
  %178 = add nsw i64 %137, 3072
  %179 = getelementptr inbounds float, float* %4, i64 %178
  %180 = load float, float* %179, align 4, !tbaa !8770
  %181 = insertelement <32 x float> undef, float %180, i32 0
  %182 = shufflevector <32 x float> %181, <32 x float> undef, <32 x i32> zeroinitializer
  %183 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %182, <32 x float> %146, <32 x float> %130)
  %184 = add nsw i64 %143, 16384
  %185 = getelementptr inbounds float, float* %7, i64 %184
  %186 = bitcast float* %185 to <32 x float>*
  %187 = load <32 x float>, <32 x float>* %186, align 64, !tbaa !8776
  %188 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %152, <32 x float> %187, <32 x float> %147)
  %189 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %158, <32 x float> %187, <32 x float> %153)
  %190 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %164, <32 x float> %187, <32 x float> %159)
  %191 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %170, <32 x float> %187, <32 x float> %165)
  %192 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %176, <32 x float> %187, <32 x float> %171)
  %193 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %182, <32 x float> %187, <32 x float> %177)
  %194 = add nsw i64 %137, 3584
  %195 = getelementptr inbounds float, float* %4, i64 %194
  %196 = load float, float* %195, align 4, !tbaa !8770
  %197 = insertelement <32 x float> undef, float %196, i32 0
  %198 = shufflevector <32 x float> %197, <32 x float> undef, <32 x i32> zeroinitializer
  %199 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %198, <32 x float> %187, <32 x float> %183)
  %200 = add nsw i64 %143, 32768
  %201 = getelementptr inbounds float, float* %7, i64 %200
  %202 = bitcast float* %201 to <32 x float>*
  %203 = load <32 x float>, <32 x float>* %202, align 64, !tbaa !8776
  %204 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %158, <32 x float> %203, <32 x float> %188)
  %205 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %164, <32 x float> %203, <32 x float> %189)
  %206 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %170, <32 x float> %203, <32 x float> %190)
  %207 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %176, <32 x float> %203, <32 x float> %191)
  %208 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %182, <32 x float> %203, <32 x float> %192)
  %209 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %198, <32 x float> %203, <32 x float> %193)
  %210 = add nsw i64 %137, 4096
  %211 = getelementptr inbounds float, float* %4, i64 %210
  %212 = load float, float* %211, align 4, !tbaa !8770
  %213 = insertelement <32 x float> undef, float %212, i32 0
  %214 = shufflevector <32 x float> %213, <32 x float> undef, <32 x i32> zeroinitializer
  %215 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %214, <32 x float> %203, <32 x float> %199)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 512
  br i1 %exitcond.1, label %for_end6.1, label %for_body5.1, !prof !50

for_end6.1:                                       ; preds = %for_body5.1
  %216 = mul nsw i32 %34, 4608
  %217 = add nsw i32 %216, 9216
  %218 = add nsw i64 %37, 98304
  %219 = sext i32 %217 to i64
  br label %for_body5.2

for_body5.2:                                      ; preds = %for_body5.2, %for_end6.1
  %indvars.iv.2 = phi i64 [ 0, %for_end6.1 ], [ %indvars.iv.next.2, %for_body5.2 ]
  %220 = phi <32 x float> [ %215, %for_end6.1 ], [ %305, %for_body5.2 ]
  %221 = phi <32 x float> [ %209, %for_end6.1 ], [ %299, %for_body5.2 ]
  %222 = phi <32 x float> [ %208, %for_end6.1 ], [ %298, %for_body5.2 ]
  %223 = phi <32 x float> [ %207, %for_end6.1 ], [ %297, %for_body5.2 ]
  %224 = phi <32 x float> [ %206, %for_end6.1 ], [ %296, %for_body5.2 ]
  %225 = phi <32 x float> [ %205, %for_end6.1 ], [ %295, %for_body5.2 ]
  %226 = phi <32 x float> [ %204, %for_end6.1 ], [ %294, %for_body5.2 ]
  %227 = add nsw i64 %indvars.iv.2, %219
  %228 = getelementptr inbounds float, float* %4, i64 %227
  %229 = load float, float* %228, align 4, !tbaa !8770
  %230 = insertelement <32 x float> undef, float %229, i32 0
  %231 = shufflevector <32 x float> %230, <32 x float> undef, <32 x i32> zeroinitializer
  %232 = shl nsw i64 %indvars.iv.2, 5
  %233 = add nsw i64 %218, %232
  %234 = getelementptr inbounds float, float* %7, i64 %233
  %235 = bitcast float* %234 to <32 x float>*
  %236 = load <32 x float>, <32 x float>* %235, align 64, !tbaa !8776
  %237 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %231, <32 x float> %236, <32 x float> %226)
  %238 = add nsw i64 %227, 512
  %239 = getelementptr inbounds float, float* %4, i64 %238
  %240 = load float, float* %239, align 4, !tbaa !8770
  %241 = insertelement <32 x float> undef, float %240, i32 0
  %242 = shufflevector <32 x float> %241, <32 x float> undef, <32 x i32> zeroinitializer
  %243 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %236, <32 x float> %225)
  %244 = add nsw i64 %227, 1024
  %245 = getelementptr inbounds float, float* %4, i64 %244
  %246 = load float, float* %245, align 4, !tbaa !8770
  %247 = insertelement <32 x float> undef, float %246, i32 0
  %248 = shufflevector <32 x float> %247, <32 x float> undef, <32 x i32> zeroinitializer
  %249 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %236, <32 x float> %224)
  %250 = add nsw i64 %227, 1536
  %251 = getelementptr inbounds float, float* %4, i64 %250
  %252 = load float, float* %251, align 4, !tbaa !8770
  %253 = insertelement <32 x float> undef, float %252, i32 0
  %254 = shufflevector <32 x float> %253, <32 x float> undef, <32 x i32> zeroinitializer
  %255 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %236, <32 x float> %223)
  %256 = add nsw i64 %227, 2048
  %257 = getelementptr inbounds float, float* %4, i64 %256
  %258 = load float, float* %257, align 4, !tbaa !8770
  %259 = insertelement <32 x float> undef, float %258, i32 0
  %260 = shufflevector <32 x float> %259, <32 x float> undef, <32 x i32> zeroinitializer
  %261 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %260, <32 x float> %236, <32 x float> %222)
  %262 = add nsw i64 %227, 2560
  %263 = getelementptr inbounds float, float* %4, i64 %262
  %264 = load float, float* %263, align 4, !tbaa !8770
  %265 = insertelement <32 x float> undef, float %264, i32 0
  %266 = shufflevector <32 x float> %265, <32 x float> undef, <32 x i32> zeroinitializer
  %267 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %266, <32 x float> %236, <32 x float> %221)
  %268 = add nsw i64 %227, 3072
  %269 = getelementptr inbounds float, float* %4, i64 %268
  %270 = load float, float* %269, align 4, !tbaa !8770
  %271 = insertelement <32 x float> undef, float %270, i32 0
  %272 = shufflevector <32 x float> %271, <32 x float> undef, <32 x i32> zeroinitializer
  %273 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %272, <32 x float> %236, <32 x float> %220)
  %274 = add nsw i64 %233, 16384
  %275 = getelementptr inbounds float, float* %7, i64 %274
  %276 = bitcast float* %275 to <32 x float>*
  %277 = load <32 x float>, <32 x float>* %276, align 64, !tbaa !8776
  %278 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %242, <32 x float> %277, <32 x float> %237)
  %279 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %277, <32 x float> %243)
  %280 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %277, <32 x float> %249)
  %281 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %260, <32 x float> %277, <32 x float> %255)
  %282 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %266, <32 x float> %277, <32 x float> %261)
  %283 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %272, <32 x float> %277, <32 x float> %267)
  %284 = add nsw i64 %227, 3584
  %285 = getelementptr inbounds float, float* %4, i64 %284
  %286 = load float, float* %285, align 4, !tbaa !8770
  %287 = insertelement <32 x float> undef, float %286, i32 0
  %288 = shufflevector <32 x float> %287, <32 x float> undef, <32 x i32> zeroinitializer
  %289 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %288, <32 x float> %277, <32 x float> %273)
  %290 = add nsw i64 %233, 32768
  %291 = getelementptr inbounds float, float* %7, i64 %290
  %292 = bitcast float* %291 to <32 x float>*
  %293 = load <32 x float>, <32 x float>* %292, align 64, !tbaa !8776
  %294 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %248, <32 x float> %293, <32 x float> %278)
  %295 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %254, <32 x float> %293, <32 x float> %279)
  %296 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %260, <32 x float> %293, <32 x float> %280)
  %297 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %266, <32 x float> %293, <32 x float> %281)
  %298 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %272, <32 x float> %293, <32 x float> %282)
  %299 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %288, <32 x float> %293, <32 x float> %283)
  %300 = add nsw i64 %227, 4096
  %301 = getelementptr inbounds float, float* %4, i64 %300
  %302 = load float, float* %301, align 4, !tbaa !8770
  %303 = insertelement <32 x float> undef, float %302, i32 0
  %304 = shufflevector <32 x float> %303, <32 x float> undef, <32 x i32> zeroinitializer
  %305 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %304, <32 x float> %293, <32 x float> %289)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 512
  br i1 %exitcond.2, label %for_end6.2, label %for_body5.2, !prof !50

for_end6.2:                                       ; preds = %for_body5.2
  %306 = mul nsw i64 %indvars.iv48, 224
  %307 = shl nsw i32 %35, 5
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds float, float* %13, i64 %308
  %310 = bitcast float* %309 to <32 x float>*
  %311 = load <32 x float>, <32 x float>* %310, align 64, !tbaa !8779
  %312 = getelementptr inbounds float, float* %16, i64 %308
  %313 = bitcast float* %312 to <32 x float>*
  %314 = load <32 x float>, <32 x float>* %313, align 64, !tbaa !8782
  %315 = fadd <32 x float> %294, %311
  %316 = fadd <32 x float> %315, %314
  %317 = fcmp ogt <32 x float> %316, zeroinitializer
  %318 = select <32 x i1> %317, <32 x float> %316, <32 x float> zeroinitializer
  %319 = getelementptr inbounds float, float* %10, i64 %306
  %320 = bitcast float* %319 to <32 x float>*
  store <32 x float> %318, <32 x float>* %320, align 64, !tbaa !8785
  %321 = add nsw i64 %306, 32
  %322 = fadd <32 x float> %295, %311
  %323 = fadd <32 x float> %322, %314
  %324 = fcmp ogt <32 x float> %323, zeroinitializer
  %325 = select <32 x i1> %324, <32 x float> %323, <32 x float> zeroinitializer
  %326 = getelementptr inbounds float, float* %10, i64 %321
  %327 = bitcast float* %326 to <32 x float>*
  store <32 x float> %325, <32 x float>* %327, align 64, !tbaa !8785
  %328 = add nsw i64 %306, 64
  %329 = fadd <32 x float> %296, %311
  %330 = fadd <32 x float> %329, %314
  %331 = fcmp ogt <32 x float> %330, zeroinitializer
  %332 = select <32 x i1> %331, <32 x float> %330, <32 x float> zeroinitializer
  %333 = getelementptr inbounds float, float* %10, i64 %328
  %334 = bitcast float* %333 to <32 x float>*
  store <32 x float> %332, <32 x float>* %334, align 64, !tbaa !8785
  %335 = add nsw i64 %306, 96
  %336 = fadd <32 x float> %297, %311
  %337 = fadd <32 x float> %336, %314
  %338 = fcmp ogt <32 x float> %337, zeroinitializer
  %339 = select <32 x i1> %338, <32 x float> %337, <32 x float> zeroinitializer
  %340 = getelementptr inbounds float, float* %10, i64 %335
  %341 = bitcast float* %340 to <32 x float>*
  store <32 x float> %339, <32 x float>* %341, align 64, !tbaa !8785
  %342 = add nsw i64 %306, 128
  %343 = fadd <32 x float> %298, %311
  %344 = fadd <32 x float> %343, %314
  %345 = fcmp ogt <32 x float> %344, zeroinitializer
  %346 = select <32 x i1> %345, <32 x float> %344, <32 x float> zeroinitializer
  %347 = getelementptr inbounds float, float* %10, i64 %342
  %348 = bitcast float* %347 to <32 x float>*
  store <32 x float> %346, <32 x float>* %348, align 64, !tbaa !8785
  %349 = add nsw i64 %306, 160
  %350 = fadd <32 x float> %299, %311
  %351 = fadd <32 x float> %350, %314
  %352 = fcmp ogt <32 x float> %351, zeroinitializer
  %353 = select <32 x i1> %352, <32 x float> %351, <32 x float> zeroinitializer
  %354 = getelementptr inbounds float, float* %10, i64 %349
  %355 = bitcast float* %354 to <32 x float>*
  store <32 x float> %353, <32 x float>* %355, align 64, !tbaa !8785
  %356 = add nsw i64 %306, 192
  %357 = fadd <32 x float> %305, %311
  %358 = fadd <32 x float> %357, %314
  %359 = fcmp ogt <32 x float> %358, zeroinitializer
  %360 = select <32 x i1> %359, <32 x float> %358, <32 x float> zeroinitializer
  %361 = getelementptr inbounds float, float* %10, i64 %356
  %362 = bitcast float* %361 to <32 x float>*
  store <32 x float> %360, <32 x float>* %362, align 64, !tbaa !8785
  %indvars.iv.next49 = add nsw i64 %indvars.iv48, 1
  %363 = icmp slt i64 %indvars.iv.next49, %32
  br i1 %363, label %for_body, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_pad_layout_transform(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 2
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.612, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !8788
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %17 = load i64*, i64** %16, align 8
  %18 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %19 = load i64*, i64** %18, align 8
  %20 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %27 = load i64*, i64** %26, align 8
  %28 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %29 = load i64*, i64** %28, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %30 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %30(i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.613, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %31 = getelementptr inbounds i8, i8* %1, i64 4
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !8802
  switch i32 %33, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %34(i8* getelementptr inbounds ([157 x i8], [157 x i8]* @.str.614, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  %35 = icmp eq i32 %21, 1
  br i1 %35, label %assert_end6, label %assert_fail5, !prof !5

assert_fail5:                                     ; preds = %assert_end4
  %36 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %36(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4
  %37 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %38, 4
  br i1 %39, label %assert_end8, label %assert_fail7, !prof !5

assert_fail7:                                     ; preds = %assert_end6
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %40(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.615, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6
  %41 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 2
  %44 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 32
  %47 = and i1 %43, %46
  %48 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = icmp eq i16 %49, 1
  %51 = and i1 %47, %50
  br i1 %51, label %assert_end10, label %assert_fail9, !prof !5

assert_fail9:                                     ; preds = %assert_end8
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %52(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8
  %53 = load i64, i64* %17, align 8, !tbaa !8804
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %56(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %57 = getelementptr inbounds i64, i64* %17, i64 1
  %58 = load i64, i64* %57, align 8, !tbaa !8818
  %59 = trunc i64 %58 to i32
  %60 = icmp eq i32 %59, 3
  br i1 %60, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %61 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %61(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.616, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %62 = getelementptr inbounds i64, i64* %17, i64 2
  %63 = load i64, i64* %62, align 8, !tbaa !8820
  %64 = trunc i64 %63 to i32
  %65 = icmp eq i32 %64, 224
  br i1 %65, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.617, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %67 = getelementptr inbounds i64, i64* %17, i64 3
  %68 = load i64, i64* %67, align 8, !tbaa !8823
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i32 %69, 224
  br i1 %70, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.618, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %72 = icmp eq i64* %19, null
  br i1 %72, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end18
  %73 = bitcast i64* %19 to <4 x i64>*
  %74 = load <4 x i64>, <4 x i64>* %73, align 8, !tbaa !8825
  %75 = trunc <4 x i64> %74 to <4 x i32>
  %76 = icmp eq <4 x i32> %75, <i32 150528, i32 50176, i32 224, i32 1>
  %rdx.shuf49 = shufflevector <4 x i1> %76, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx50 = and <4 x i1> %76, %rdx.shuf49
  %rdx.shuf51 = shufflevector <4 x i1> %bin.rdx50, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx52 = and <4 x i1> %bin.rdx50, %rdx.shuf51
  %77 = extractelement <4 x i1> %bin.rdx52, i32 0
  br i1 %77, label %if_end, label %assert_fail19, !prof !5

if_end:                                           ; preds = %assert_end18, %if_then
  %78 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %assert_end22, label %assert_fail21, !prof !5

assert_fail19:                                    ; preds = %if_then
  %81 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %81(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.619, i64 0, i64 0))
  ret i32 -1

assert_fail21:                                    ; preds = %if_end
  %82 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %82(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %if_end
  %83 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 5
  br i1 %85, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %86(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %87 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %88, 2
  %90 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 32
  %93 = and i1 %89, %92
  %94 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %95 = load i16, i16* %94, align 2
  %96 = icmp eq i16 %95, 1
  %97 = and i1 %93, %96
  br i1 %97, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %98(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %99 = load i64, i64* %27, align 8, !tbaa !8837
  %100 = trunc i64 %99 to i32
  %101 = icmp eq i32 %100, 1
  br i1 %101, label %assert_end28, label %assert_fail27, !prof !5

assert_fail27:                                    ; preds = %assert_end26
  %102 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %102(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.15, i64 0, i64 0))
  ret i32 -1

assert_end28:                                     ; preds = %assert_end26
  %103 = getelementptr inbounds i64, i64* %27, i64 1
  %104 = load i64, i64* %103, align 8, !tbaa !8851
  %105 = trunc i64 %104 to i32
  %106 = icmp eq i32 %105, 1
  br i1 %106, label %assert_end30, label %assert_fail29, !prof !5

assert_fail29:                                    ; preds = %assert_end28
  %107 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %107(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %assert_end28
  %108 = getelementptr inbounds i64, i64* %27, i64 2
  %109 = load i64, i64* %108, align 8, !tbaa !8853
  %110 = trunc i64 %109 to i32
  %111 = icmp eq i32 %110, 230
  br i1 %111, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %112(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.620, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %113 = getelementptr inbounds i64, i64* %27, i64 3
  %114 = load i64, i64* %113, align 8, !tbaa !8856
  %115 = trunc i64 %114 to i32
  %116 = icmp eq i32 %115, 230
  br i1 %116, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %117(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.621, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %118 = getelementptr inbounds i64, i64* %27, i64 4
  %119 = load i64, i64* %118, align 8, !tbaa !8858
  %120 = trunc i64 %119 to i32
  %121 = icmp eq i32 %120, 3
  br i1 %121, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %122(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.425, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %123 = icmp eq i64* %29, null
  br i1 %123, label %if_end38, label %if_then37, !prof !50

if_then37:                                        ; preds = %assert_end36
  %124 = getelementptr inbounds i64, i64* %29, i64 1
  %125 = bitcast i64* %124 to <4 x i64>*
  %126 = load <4 x i64>, <4 x i64>* %125, align 8, !tbaa !8862
  %127 = trunc <4 x i64> %126 to <4 x i32>
  %128 = icmp eq <4 x i32> %127, <i32 158700, i32 690, i32 3, i32 1>
  %129 = load i64, i64* %29, align 8, !tbaa !8873
  %130 = trunc i64 %129 to i32
  %131 = icmp eq i32 %130, 158700
  %rdx.shuf = shufflevector <4 x i1> %128, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %128, %rdx.shuf
  %rdx.shuf47 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx48 = and <4 x i1> %bin.rdx, %rdx.shuf47
  %132 = extractelement <4 x i1> %bin.rdx48, i32 0
  %133 = and i1 %132, %131
  br i1 %133, label %if_end38, label %assert_fail39, !prof !5

if_end38:                                         ; preds = %assert_end36, %if_then37
  %134 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %135 = load i64, i64* %134, align 8
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %assert_end42, label %assert_fail41, !prof !5

assert_fail39:                                    ; preds = %if_then37
  %137 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %137(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.622, i64 0, i64 0))
  ret i32 -1

assert_fail41:                                    ; preds = %if_end38
  %138 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %138(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %if_end38
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %140, 1
  br i1 %141, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %142 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %142(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %23, %144
  br i1 %145, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %146 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %146(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %147 = tail call fastcc i32 @fused_nn_pad_layout_transform_compute_(i8* %25, i8* %15)
  ret i32 %147
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_pad_layout_transform_compute_(i8* noalias, i8* noalias) unnamed_addr #0 {
entry:
  %2 = alloca %55, align 8
  %3 = getelementptr inbounds %55, %55* %2, i64 0, i32 0
  store i8* %0, i8** %3, align 8
  %4 = getelementptr inbounds %55, %55* %2, i64 0, i32 1
  store i8* %1, i8** %4, align 8
  %5 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %6 = bitcast %55* %2 to i8*
  %7 = call i32 %5(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.623, i8* nonnull %6, i32 0)
  ret i32 %7
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.623(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 229
  %11 = sdiv i32 %10, %9
  %12 = mul i32 %11, %0
  %13 = icmp slt i32 %12, 230
  %14 = select i1 %13, i32 %12, i32 230
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 230
  %18 = select i1 %17, i32 %16, i32 230
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = icmp slt i32 %12, 230
  %21 = select i1 %20, i32 %12, i32 230
  %smax = xor i32 %21, -1
  %22 = mul i32 %smax, -690
  %23 = add i32 %22, -690
  %24 = add i32 %14, 1
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, -1
  %27 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv8 = phi i64 [ %26, %for_begin1.preheader.preheader ], [ %indvars.iv.next9, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %28 = mul nsw i64 %indvars.iv8, 690
  %29 = trunc i64 %indvars.iv8 to i32
  %.off = add i32 %29, -3
  %30 = icmp ult i32 %.off, 224
  %31 = mul nsw i64 %indvars.iv8, 224
  br i1 %30, label %for_body2.us, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %32 = mul i32 %indvar, 690
  %33 = add i32 %23, %32
  %34 = sext i32 %33 to i64
  %scevgep = getelementptr float, float* %4, i64 %34
  %scevgep6 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %scevgep6, i8 0, i64 2760, i1 false)
  br label %for_end3

for_body2.us:                                     ; preds = %for_begin1.preheader, %if_end.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %if_end.us ], [ 0, %for_begin1.preheader ]
  %35 = mul nuw nsw i64 %indvars.iv, 3
  %36 = add nsw i64 %35, %28
  %37 = trunc i64 %indvars.iv to i32
  %38 = add i32 %37, -3
  %39 = icmp ult i32 %38, 224
  br i1 %39, label %if_then.us, label %if_end.us

if_then.us:                                       ; preds = %for_body2.us
  %40 = add nsw i64 %indvars.iv, %31
  %41 = add nsw i64 %40, -675
  %42 = add nsw i64 %40, 49501
  %43 = add nsw i64 %40, 99677
  %44 = getelementptr inbounds float, float* %7, i64 %41
  %45 = load float, float* %44, align 4, !tbaa !8877
  %46 = insertelement <3 x float> undef, float %45, i32 0
  %47 = getelementptr inbounds float, float* %7, i64 %42
  %48 = load float, float* %47, align 4, !tbaa !8877
  %49 = insertelement <3 x float> %46, float %48, i32 1
  %50 = getelementptr inbounds float, float* %7, i64 %43
  %51 = load float, float* %50, align 4, !tbaa !8877
  %52 = insertelement <3 x float> %49, float %51, i32 2
  br label %if_end.us

if_end.us:                                        ; preds = %if_then.us, %for_body2.us
  %53 = phi <3 x float> [ %52, %if_then.us ], [ zeroinitializer, %for_body2.us ]
  %54 = getelementptr inbounds float, float* %4, i64 %36
  %55 = bitcast float* %54 to <3 x float>*
  store <3 x float> %53, <3 x float>* %55, align 4, !tbaa !8880
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 230
  br i1 %exitcond, label %for_end3, label %for_body2.us, !prof !50

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %if_end.us, %for_body2.preheader
  %indvars.iv.next9 = add nsw i64 %indvars.iv8, 1
  %56 = icmp slt i64 %indvars.iv.next9, %27
  %indvar.next = add nuw i32 %indvar, 1
  br i1 %56, label %for_begin1.preheader, label %for_end, !prof !5
}

define dllexport i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3(i8* noalias nocapture readonly, i8* noalias nocapture readonly, i32, i8* noalias nocapture readnone, i8* noalias nocapture readnone) local_unnamed_addr {
entry:
  %5 = icmp eq i32 %2, 5
  br i1 %5, label %assert_end, label %assert_fail, !prof !5

assert_fail:                                      ; preds = %entry
  %6 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %6(i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.624, i64 0, i64 0))
  ret i32 -1

assert_end:                                       ; preds = %entry
  %7 = bitcast i8* %0 to %1**
  %8 = load %1*, %1** %7, align 8
  %9 = bitcast i8* %1 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !8883
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to %1**
  %13 = load %1*, %1** %12, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to %1**
  %16 = load %1*, %1** %15, align 8
  %17 = getelementptr inbounds i8, i8* %1, i64 8
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4, !tbaa !8897
  %20 = getelementptr inbounds i8, i8* %0, i64 24
  %21 = bitcast i8* %20 to %1**
  %22 = load %1*, %1** %21, align 8
  %23 = getelementptr inbounds i8, i8* %1, i64 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32, i32* %24, align 4, !tbaa !8900
  %26 = getelementptr inbounds i8, i8* %0, i64 32
  %27 = bitcast i8* %26 to %1**
  %28 = load %1*, %1** %27, align 8
  %29 = getelementptr inbounds i8, i8* %1, i64 16
  %30 = bitcast i8* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !8902
  %32 = getelementptr inbounds %1, %1* %8, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %1, %1* %8, i64 0, i32 4
  %35 = load i64*, i64** %34, align 8
  %36 = getelementptr inbounds %1, %1* %8, i64 0, i32 5
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %1, %1* %8, i64 0, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %1, %1* %13, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %1, %1* %13, i64 0, i32 4
  %45 = load i64*, i64** %44, align 8
  %46 = getelementptr inbounds %1, %1* %13, i64 0, i32 5
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds %1, %1* %16, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %1, %1* %16, i64 0, i32 4
  %51 = load i64*, i64** %50, align 8
  %52 = getelementptr inbounds %1, %1* %16, i64 0, i32 5
  %53 = load i64*, i64** %52, align 8
  %54 = getelementptr inbounds %1, %1* %22, i64 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = getelementptr inbounds %1, %1* %22, i64 0, i32 4
  %57 = load i64*, i64** %56, align 8
  %58 = getelementptr inbounds %1, %1* %22, i64 0, i32 5
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %1, %1* %28, i64 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds %1, %1* %28, i64 0, i32 4
  %63 = load i64*, i64** %62, align 8
  %64 = getelementptr inbounds %1, %1* %28, i64 0, i32 5
  %65 = load i64*, i64** %64, align 8
  switch i32 %10, label %assert_fail1 [
    i32 13, label %assert_end2
    i32 7, label %assert_end2
    i32 4, label %assert_end2
    i32 3, label %assert_end2
  ]

assert_fail1:                                     ; preds = %assert_end
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %66(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.625, i64 0, i64 0))
  ret i32 -1

assert_end2:                                      ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  %67 = getelementptr inbounds i8, i8* %1, i64 4
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 4, !tbaa !8906
  switch i32 %69, label %assert_fail3 [
    i32 13, label %assert_end4
    i32 7, label %assert_end4
    i32 4, label %assert_end4
    i32 3, label %assert_end4
  ]

assert_fail3:                                     ; preds = %assert_end2
  %70 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %70(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.626, i64 0, i64 0))
  ret i32 -1

assert_end4:                                      ; preds = %assert_end2, %assert_end2, %assert_end2, %assert_end2
  switch i32 %19, label %assert_fail5 [
    i32 13, label %assert_end6
    i32 7, label %assert_end6
    i32 4, label %assert_end6
    i32 3, label %assert_end6
  ]

assert_fail5:                                     ; preds = %assert_end4
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %71(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.627, i64 0, i64 0))
  ret i32 -1

assert_end6:                                      ; preds = %assert_end4, %assert_end4, %assert_end4, %assert_end4
  switch i32 %25, label %assert_fail7 [
    i32 13, label %assert_end8
    i32 7, label %assert_end8
    i32 4, label %assert_end8
    i32 3, label %assert_end8
  ]

assert_fail7:                                     ; preds = %assert_end6
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %72(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.628, i64 0, i64 0))
  ret i32 -1

assert_end8:                                      ; preds = %assert_end6, %assert_end6, %assert_end6, %assert_end6
  switch i32 %31, label %assert_fail9 [
    i32 13, label %assert_end10
    i32 7, label %assert_end10
    i32 4, label %assert_end10
    i32 3, label %assert_end10
  ]

assert_fail9:                                     ; preds = %assert_end8
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %73(i8* getelementptr inbounds ([175 x i8], [175 x i8]* @.str.629, i64 0, i64 0))
  ret i32 -1

assert_end10:                                     ; preds = %assert_end8, %assert_end8, %assert_end8, %assert_end8
  %74 = icmp eq i32 %39, 1
  br i1 %74, label %assert_end12, label %assert_fail11, !prof !5

assert_fail11:                                    ; preds = %assert_end10
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %75(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  ret i32 -1

assert_end12:                                     ; preds = %assert_end10
  %76 = getelementptr inbounds %1, %1* %8, i64 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %77, 5
  br i1 %78, label %assert_end14, label %assert_fail13, !prof !5

assert_fail13:                                    ; preds = %assert_end12
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %79(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  ret i32 -1

assert_end14:                                     ; preds = %assert_end12
  %80 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 2
  %83 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 1
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 32
  %86 = and i1 %82, %85
  %87 = getelementptr inbounds %1, %1* %8, i64 0, i32 3, i32 2
  %88 = load i16, i16* %87, align 2
  %89 = icmp eq i16 %88, 1
  %90 = and i1 %86, %89
  br i1 %90, label %assert_end16, label %assert_fail15, !prof !5

assert_fail15:                                    ; preds = %assert_end14
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %91(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.5, i64 0, i64 0))
  ret i32 -1

assert_end16:                                     ; preds = %assert_end14
  %92 = load i64, i64* %35, align 8, !tbaa !8908
  %93 = trunc i64 %92 to i32
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %assert_end18, label %assert_fail17, !prof !5

assert_fail17:                                    ; preds = %assert_end16
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %95(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.6, i64 0, i64 0))
  ret i32 -1

assert_end18:                                     ; preds = %assert_end16
  %96 = getelementptr inbounds i64, i64* %35, i64 1
  %97 = load i64, i64* %96, align 8, !tbaa !8922
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %assert_end20, label %assert_fail19, !prof !5

assert_fail19:                                    ; preds = %assert_end18
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %100(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.195, i64 0, i64 0))
  ret i32 -1

assert_end20:                                     ; preds = %assert_end18
  %101 = getelementptr inbounds i64, i64* %35, i64 2
  %102 = load i64, i64* %101, align 8, !tbaa !8924
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 28
  br i1 %104, label %assert_end22, label %assert_fail21, !prof !5

assert_fail21:                                    ; preds = %assert_end20
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %105(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.96, i64 0, i64 0))
  ret i32 -1

assert_end22:                                     ; preds = %assert_end20
  %106 = getelementptr inbounds i64, i64* %35, i64 3
  %107 = load i64, i64* %106, align 8, !tbaa !8927
  %108 = trunc i64 %107 to i32
  %109 = icmp eq i32 %108, 28
  br i1 %109, label %assert_end24, label %assert_fail23, !prof !5

assert_fail23:                                    ; preds = %assert_end22
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %110(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.97, i64 0, i64 0))
  ret i32 -1

assert_end24:                                     ; preds = %assert_end22
  %111 = getelementptr inbounds i64, i64* %35, i64 4
  %112 = load i64, i64* %111, align 8, !tbaa !8929
  %113 = trunc i64 %112 to i32
  %114 = icmp eq i32 %113, 128
  br i1 %114, label %assert_end26, label %assert_fail25, !prof !5

assert_fail25:                                    ; preds = %assert_end24
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %115(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.45, i64 0, i64 0))
  ret i32 -1

assert_end26:                                     ; preds = %assert_end24
  %116 = icmp eq i64* %37, null
  br i1 %116, label %if_end, label %if_then, !prof !50

if_then:                                          ; preds = %assert_end26
  %117 = getelementptr inbounds i64, i64* %37, i64 1
  %118 = bitcast i64* %117 to <4 x i64>*
  %119 = load <4 x i64>, <4 x i64>* %118, align 8, !tbaa !8933
  %120 = trunc <4 x i64> %119 to <4 x i32>
  %121 = icmp eq <4 x i32> %120, <i32 100352, i32 3584, i32 128, i32 1>
  %122 = load i64, i64* %37, align 8, !tbaa !8944
  %123 = trunc i64 %122 to i32
  %124 = icmp eq i32 %123, 100352
  %rdx.shuf143 = shufflevector <4 x i1> %121, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx144 = and <4 x i1> %121, %rdx.shuf143
  %rdx.shuf145 = shufflevector <4 x i1> %bin.rdx144, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx146 = and <4 x i1> %bin.rdx144, %rdx.shuf145
  %125 = extractelement <4 x i1> %bin.rdx146, i32 0
  %126 = and i1 %125, %124
  br i1 %126, label %if_end, label %assert_fail27, !prof !5

if_end:                                           ; preds = %assert_end26, %if_then
  %127 = getelementptr inbounds %1, %1* %8, i64 0, i32 6
  %128 = load i64, i64* %127, align 8
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %assert_end30, label %assert_fail29, !prof !5

assert_fail27:                                    ; preds = %if_then
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %130(i8* getelementptr inbounds ([242 x i8], [242 x i8]* @.str.630, i64 0, i64 0))
  ret i32 -1

assert_fail29:                                    ; preds = %if_end
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %131(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.12, i64 0, i64 0))
  ret i32 -1

assert_end30:                                     ; preds = %if_end
  %132 = getelementptr inbounds %1, %1* %13, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, 6
  br i1 %134, label %assert_end32, label %assert_fail31, !prof !5

assert_fail31:                                    ; preds = %assert_end30
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %135(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.47, i64 0, i64 0))
  ret i32 -1

assert_end32:                                     ; preds = %assert_end30
  %136 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp eq i8 %137, 2
  %139 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 1
  %140 = load i8, i8* %139, align 1
  %141 = icmp eq i8 %140, 32
  %142 = and i1 %138, %141
  %143 = getelementptr inbounds %1, %1* %13, i64 0, i32 3, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = icmp eq i16 %144, 1
  %146 = and i1 %142, %145
  br i1 %146, label %assert_end34, label %assert_fail33, !prof !5

assert_fail33:                                    ; preds = %assert_end32
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %147(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.14, i64 0, i64 0))
  ret i32 -1

assert_end34:                                     ; preds = %assert_end32
  %148 = load i64, i64* %45, align 8, !tbaa !8948
  %149 = trunc i64 %148 to i32
  %150 = icmp eq i32 %149, 4
  br i1 %150, label %assert_end36, label %assert_fail35, !prof !5

assert_fail35:                                    ; preds = %assert_end34
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %151(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.368, i64 0, i64 0))
  ret i32 -1

assert_end36:                                     ; preds = %assert_end34
  %152 = getelementptr inbounds i64, i64* %45, i64 1
  %153 = load i64, i64* %152, align 8, !tbaa !8962
  %154 = trunc i64 %153 to i32
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %assert_end38, label %assert_fail37, !prof !5

assert_fail37:                                    ; preds = %assert_end36
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %156(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.170, i64 0, i64 0))
  ret i32 -1

assert_end38:                                     ; preds = %assert_end36
  %157 = getelementptr inbounds i64, i64* %45, i64 2
  %158 = load i64, i64* %157, align 8, !tbaa !8964
  %159 = trunc i64 %158 to i32
  %160 = icmp eq i32 %159, 3
  br i1 %160, label %assert_end40, label %assert_fail39, !prof !5

assert_fail39:                                    ; preds = %assert_end38
  %161 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %161(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.49, i64 0, i64 0))
  ret i32 -1

assert_end40:                                     ; preds = %assert_end38
  %162 = getelementptr inbounds i64, i64* %45, i64 3
  %163 = load i64, i64* %162, align 8, !tbaa !8967
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 3
  br i1 %165, label %assert_end42, label %assert_fail41, !prof !5

assert_fail41:                                    ; preds = %assert_end40
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %166(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.50, i64 0, i64 0))
  ret i32 -1

assert_end42:                                     ; preds = %assert_end40
  %167 = getelementptr inbounds i64, i64* %45, i64 4
  %168 = load i64, i64* %167, align 8, !tbaa !8969
  %169 = trunc i64 %168 to i32
  %170 = icmp eq i32 %169, 128
  br i1 %170, label %assert_end44, label %assert_fail43, !prof !5

assert_fail43:                                    ; preds = %assert_end42
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %171(i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.19, i64 0, i64 0))
  ret i32 -1

assert_end44:                                     ; preds = %assert_end42
  %172 = getelementptr inbounds i64, i64* %45, i64 5
  %173 = load i64, i64* %172, align 8, !tbaa !8973
  %174 = trunc i64 %173 to i32
  %175 = icmp eq i32 %174, 32
  br i1 %175, label %assert_end46, label %assert_fail45, !prof !5

assert_fail45:                                    ; preds = %assert_end44
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %176(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.104, i64 0, i64 0))
  ret i32 -1

assert_end46:                                     ; preds = %assert_end44
  %177 = icmp eq i64* %47, null
  br i1 %177, label %if_end48, label %if_then47, !prof !50

if_then47:                                        ; preds = %assert_end46
  %178 = getelementptr inbounds i64, i64* %47, i64 2
  %179 = bitcast i64* %178 to <4 x i64>*
  %180 = load <4 x i64>, <4 x i64>* %179, align 8, !tbaa !8975
  %181 = trunc <4 x i64> %180 to <4 x i32>
  %182 = icmp eq <4 x i32> %181, <i32 12288, i32 4096, i32 32, i32 1>
  %183 = getelementptr inbounds i64, i64* %47, i64 1
  %184 = load i64, i64* %183, align 8, !tbaa !8986
  %185 = trunc i64 %184 to i32
  %186 = icmp eq i32 %185, 36864
  %187 = load i64, i64* %47, align 8, !tbaa !8990
  %188 = trunc i64 %187 to i32
  %189 = icmp eq i32 %188, 36864
  %rdx.shuf139 = shufflevector <4 x i1> %182, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx140 = and <4 x i1> %182, %rdx.shuf139
  %rdx.shuf141 = shufflevector <4 x i1> %bin.rdx140, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx142 = and <4 x i1> %bin.rdx140, %rdx.shuf141
  %190 = extractelement <4 x i1> %bin.rdx142, i32 0
  %191 = and i1 %190, %186
  %192 = and i1 %191, %189
  br i1 %192, label %if_end48, label %assert_fail49, !prof !5

if_end48:                                         ; preds = %assert_end46, %if_then47
  %193 = getelementptr inbounds %1, %1* %13, i64 0, i32 6
  %194 = load i64, i64* %193, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %assert_end52, label %assert_fail51, !prof !5

assert_fail49:                                    ; preds = %if_then47
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %196(i8* getelementptr inbounds ([278 x i8], [278 x i8]* @.str.631, i64 0, i64 0))
  ret i32 -1

assert_fail51:                                    ; preds = %if_end48
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %197(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.21, i64 0, i64 0))
  ret i32 -1

assert_end52:                                     ; preds = %if_end48
  %198 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 1
  br i1 %200, label %assert_end54, label %assert_fail53, !prof !5

assert_fail53:                                    ; preds = %assert_end52
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %201(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.22, i64 0, i64 0))
  ret i32 -1

assert_end54:                                     ; preds = %assert_end52
  %202 = getelementptr inbounds %1, %1* %13, i64 0, i32 1, i32 1
  %203 = load i32, i32* %202, align 4
  %204 = icmp eq i32 %41, %203
  br i1 %204, label %assert_end56, label %assert_fail55, !prof !5

assert_fail55:                                    ; preds = %assert_end54
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %205(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0))
  ret i32 -1

assert_end56:                                     ; preds = %assert_end54
  %206 = getelementptr inbounds %1, %1* %16, i64 0, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 5
  br i1 %208, label %assert_end58, label %assert_fail57, !prof !5

assert_fail57:                                    ; preds = %assert_end56
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %209(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1

assert_end58:                                     ; preds = %assert_end56
  %210 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 0
  %211 = load i8, i8* %210, align 1
  %212 = icmp eq i8 %211, 2
  %213 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 1
  %214 = load i8, i8* %213, align 1
  %215 = icmp eq i8 %214, 32
  %216 = and i1 %212, %215
  %217 = getelementptr inbounds %1, %1* %16, i64 0, i32 3, i32 2
  %218 = load i16, i16* %217, align 2
  %219 = icmp eq i16 %218, 1
  %220 = and i1 %216, %219
  br i1 %220, label %assert_end60, label %assert_fail59, !prof !5

assert_fail59:                                    ; preds = %assert_end58
  %221 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %221(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.54, i64 0, i64 0))
  ret i32 -1

assert_end60:                                     ; preds = %assert_end58
  %222 = load i64, i64* %51, align 8, !tbaa !8992
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %assert_end62, label %assert_fail61, !prof !5

assert_fail61:                                    ; preds = %assert_end60
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %225(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1

assert_end62:                                     ; preds = %assert_end60
  %226 = getelementptr inbounds i64, i64* %51, i64 1
  %227 = load i64, i64* %226, align 8, !tbaa !9006
  %228 = trunc i64 %227 to i32
  %229 = icmp eq i32 %228, 4
  br i1 %229, label %assert_end64, label %assert_fail63, !prof !5

assert_fail63:                                    ; preds = %assert_end62
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %230(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.370, i64 0, i64 0))
  ret i32 -1

assert_end64:                                     ; preds = %assert_end62
  %231 = getelementptr inbounds i64, i64* %51, i64 2
  %232 = load i64, i64* %231, align 8, !tbaa !9008
  %233 = trunc i64 %232 to i32
  %234 = icmp eq i32 %233, 1
  br i1 %234, label %assert_end66, label %assert_fail65, !prof !5

assert_fail65:                                    ; preds = %assert_end64
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %235(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.57, i64 0, i64 0))
  ret i32 -1

assert_end66:                                     ; preds = %assert_end64
  %236 = getelementptr inbounds i64, i64* %51, i64 3
  %237 = load i64, i64* %236, align 8, !tbaa !9011
  %238 = trunc i64 %237 to i32
  %239 = icmp eq i32 %238, 1
  br i1 %239, label %assert_end68, label %assert_fail67, !prof !5

assert_fail67:                                    ; preds = %assert_end66
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %240(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.58, i64 0, i64 0))
  ret i32 -1

assert_end68:                                     ; preds = %assert_end66
  %241 = getelementptr inbounds i64, i64* %51, i64 4
  %242 = load i64, i64* %241, align 8, !tbaa !9013
  %243 = trunc i64 %242 to i32
  %244 = icmp eq i32 %243, 32
  br i1 %244, label %assert_end70, label %assert_fail69, !prof !5

assert_fail69:                                    ; preds = %assert_end68
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %245(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.106, i64 0, i64 0))
  ret i32 -1

assert_end70:                                     ; preds = %assert_end68
  %246 = icmp eq i64* %53, null
  br i1 %246, label %if_end72, label %if_then71, !prof !50

if_then71:                                        ; preds = %assert_end70
  %247 = getelementptr inbounds i64, i64* %53, i64 1
  %248 = bitcast i64* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 8, !tbaa !9017
  %250 = trunc <4 x i64> %249 to <4 x i32>
  %251 = icmp eq <4 x i32> %250, <i32 32, i32 32, i32 32, i32 1>
  %252 = load i64, i64* %53, align 8, !tbaa !9028
  %253 = trunc i64 %252 to i32
  %254 = icmp eq i32 %253, 128
  %rdx.shuf135 = shufflevector <4 x i1> %251, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx136 = and <4 x i1> %251, %rdx.shuf135
  %rdx.shuf137 = shufflevector <4 x i1> %bin.rdx136, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx138 = and <4 x i1> %bin.rdx136, %rdx.shuf137
  %255 = extractelement <4 x i1> %bin.rdx138, i32 0
  %256 = and i1 %255, %254
  br i1 %256, label %if_end72, label %assert_fail73, !prof !5

if_end72:                                         ; preds = %assert_end70, %if_then71
  %257 = getelementptr inbounds %1, %1* %16, i64 0, i32 6
  %258 = load i64, i64* %257, align 8
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %assert_end76, label %assert_fail75, !prof !5

assert_fail73:                                    ; preds = %if_then71
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %260(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.533, i64 0, i64 0))
  ret i32 -1

assert_fail75:                                    ; preds = %if_end72
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %261(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.61, i64 0, i64 0))
  ret i32 -1

assert_end76:                                     ; preds = %if_end72
  %262 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 0
  %263 = load i32, i32* %262, align 4
  %264 = icmp eq i32 %263, 1
  br i1 %264, label %assert_end78, label %assert_fail77, !prof !5

assert_fail77:                                    ; preds = %assert_end76
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %265(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.62, i64 0, i64 0))
  ret i32 -1

assert_end78:                                     ; preds = %assert_end76
  %266 = getelementptr inbounds %1, %1* %16, i64 0, i32 1, i32 1
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %41, %267
  br i1 %268, label %assert_end80, label %assert_fail79, !prof !5

assert_fail79:                                    ; preds = %assert_end78
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %269(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.63, i64 0, i64 0))
  ret i32 -1

assert_end80:                                     ; preds = %assert_end78
  %270 = getelementptr inbounds %1, %1* %22, i64 0, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 5
  br i1 %272, label %assert_end82, label %assert_fail81, !prof !5

assert_fail81:                                    ; preds = %assert_end80
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %273(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.64, i64 0, i64 0))
  ret i32 -1

assert_end82:                                     ; preds = %assert_end80
  %274 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 0
  %275 = load i8, i8* %274, align 1
  %276 = icmp eq i8 %275, 2
  %277 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp eq i8 %278, 32
  %280 = and i1 %276, %279
  %281 = getelementptr inbounds %1, %1* %22, i64 0, i32 3, i32 2
  %282 = load i16, i16* %281, align 2
  %283 = icmp eq i16 %282, 1
  %284 = and i1 %280, %283
  br i1 %284, label %assert_end84, label %assert_fail83, !prof !5

assert_fail83:                                    ; preds = %assert_end82
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %285(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1

assert_end84:                                     ; preds = %assert_end82
  %286 = load i64, i64* %57, align 8, !tbaa !9032
  %287 = trunc i64 %286 to i32
  %288 = icmp eq i32 %287, 1
  br i1 %288, label %assert_end86, label %assert_fail85, !prof !5

assert_fail85:                                    ; preds = %assert_end84
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %289(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.66, i64 0, i64 0))
  ret i32 -1

assert_end86:                                     ; preds = %assert_end84
  %290 = getelementptr inbounds i64, i64* %57, i64 1
  %291 = load i64, i64* %290, align 8, !tbaa !9046
  %292 = trunc i64 %291 to i32
  %293 = icmp eq i32 %292, 4
  br i1 %293, label %assert_end88, label %assert_fail87, !prof !5

assert_fail87:                                    ; preds = %assert_end86
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %294(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.372, i64 0, i64 0))
  ret i32 -1

assert_end88:                                     ; preds = %assert_end86
  %295 = getelementptr inbounds i64, i64* %57, i64 2
  %296 = load i64, i64* %295, align 8, !tbaa !9048
  %297 = trunc i64 %296 to i32
  %298 = icmp eq i32 %297, 1
  br i1 %298, label %assert_end90, label %assert_fail89, !prof !5

assert_fail89:                                    ; preds = %assert_end88
  %299 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %299(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.68, i64 0, i64 0))
  ret i32 -1

assert_end90:                                     ; preds = %assert_end88
  %300 = getelementptr inbounds i64, i64* %57, i64 3
  %301 = load i64, i64* %300, align 8, !tbaa !9051
  %302 = trunc i64 %301 to i32
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %assert_end92, label %assert_fail91, !prof !5

assert_fail91:                                    ; preds = %assert_end90
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %304(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.69, i64 0, i64 0))
  ret i32 -1

assert_end92:                                     ; preds = %assert_end90
  %305 = getelementptr inbounds i64, i64* %57, i64 4
  %306 = load i64, i64* %305, align 8, !tbaa !9053
  %307 = trunc i64 %306 to i32
  %308 = icmp eq i32 %307, 32
  br i1 %308, label %assert_end94, label %assert_fail93, !prof !5

assert_fail93:                                    ; preds = %assert_end92
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %309(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.108, i64 0, i64 0))
  ret i32 -1

assert_end94:                                     ; preds = %assert_end92
  %310 = icmp eq i64* %59, null
  br i1 %310, label %if_end96, label %if_then95, !prof !50

if_then95:                                        ; preds = %assert_end94
  %311 = getelementptr inbounds i64, i64* %59, i64 1
  %312 = bitcast i64* %311 to <4 x i64>*
  %313 = load <4 x i64>, <4 x i64>* %312, align 8, !tbaa !9057
  %314 = trunc <4 x i64> %313 to <4 x i32>
  %315 = icmp eq <4 x i32> %314, <i32 32, i32 32, i32 32, i32 1>
  %316 = load i64, i64* %59, align 8, !tbaa !9068
  %317 = trunc i64 %316 to i32
  %318 = icmp eq i32 %317, 128
  %rdx.shuf131 = shufflevector <4 x i1> %315, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx132 = and <4 x i1> %315, %rdx.shuf131
  %rdx.shuf133 = shufflevector <4 x i1> %bin.rdx132, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx134 = and <4 x i1> %bin.rdx132, %rdx.shuf133
  %319 = extractelement <4 x i1> %bin.rdx134, i32 0
  %320 = and i1 %319, %318
  br i1 %320, label %if_end96, label %assert_fail97, !prof !5

if_end96:                                         ; preds = %assert_end94, %if_then95
  %321 = getelementptr inbounds %1, %1* %22, i64 0, i32 6
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %assert_end100, label %assert_fail99, !prof !5

assert_fail97:                                    ; preds = %if_then95
  %324 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %324(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.534, i64 0, i64 0))
  ret i32 -1

assert_fail99:                                    ; preds = %if_end96
  %325 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %325(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.72, i64 0, i64 0))
  ret i32 -1

assert_end100:                                    ; preds = %if_end96
  %326 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 0
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, 1
  br i1 %328, label %assert_end102, label %assert_fail101, !prof !5

assert_fail101:                                   ; preds = %assert_end100
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %329(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.73, i64 0, i64 0))
  ret i32 -1

assert_end102:                                    ; preds = %assert_end100
  %330 = getelementptr inbounds %1, %1* %22, i64 0, i32 1, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = icmp eq i32 %41, %331
  br i1 %332, label %assert_end104, label %assert_fail103, !prof !5

assert_fail103:                                   ; preds = %assert_end102
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %333(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.74, i64 0, i64 0))
  ret i32 -1

assert_end104:                                    ; preds = %assert_end102
  %334 = getelementptr inbounds %1, %1* %28, i64 0, i32 2
  %335 = load i32, i32* %334, align 4
  %336 = icmp eq i32 %335, 5
  br i1 %336, label %assert_end106, label %assert_fail105, !prof !5

assert_fail105:                                   ; preds = %assert_end104
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %337(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.75, i64 0, i64 0))
  ret i32 -1

assert_end106:                                    ; preds = %assert_end104
  %338 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 0
  %339 = load i8, i8* %338, align 1
  %340 = icmp eq i8 %339, 2
  %341 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 1
  %342 = load i8, i8* %341, align 1
  %343 = icmp eq i8 %342, 32
  %344 = and i1 %340, %343
  %345 = getelementptr inbounds %1, %1* %28, i64 0, i32 3, i32 2
  %346 = load i16, i16* %345, align 2
  %347 = icmp eq i16 %346, 1
  %348 = and i1 %344, %347
  br i1 %348, label %assert_end108, label %assert_fail107, !prof !5

assert_fail107:                                   ; preds = %assert_end106
  %349 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %349(i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.76, i64 0, i64 0))
  ret i32 -1

assert_end108:                                    ; preds = %assert_end106
  %350 = load i64, i64* %63, align 8, !tbaa !9072
  %351 = trunc i64 %350 to i32
  %352 = icmp eq i32 %351, 1
  br i1 %352, label %assert_end110, label %assert_fail109, !prof !5

assert_fail109:                                   ; preds = %assert_end108
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %353(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.77, i64 0, i64 0))
  ret i32 -1

assert_end110:                                    ; preds = %assert_end108
  %354 = getelementptr inbounds i64, i64* %63, i64 1
  %355 = load i64, i64* %354, align 8, !tbaa !9086
  %356 = trunc i64 %355 to i32
  %357 = icmp eq i32 %356, 4
  br i1 %357, label %assert_end112, label %assert_fail111, !prof !5

assert_fail111:                                   ; preds = %assert_end110
  %358 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %358(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.374, i64 0, i64 0))
  ret i32 -1

assert_end112:                                    ; preds = %assert_end110
  %359 = getelementptr inbounds i64, i64* %63, i64 2
  %360 = load i64, i64* %359, align 8, !tbaa !9088
  %361 = trunc i64 %360 to i32
  %362 = icmp eq i32 %361, 28
  br i1 %362, label %assert_end114, label %assert_fail113, !prof !5

assert_fail113:                                   ; preds = %assert_end112
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %363(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.535, i64 0, i64 0))
  ret i32 -1

assert_end114:                                    ; preds = %assert_end112
  %364 = getelementptr inbounds i64, i64* %63, i64 3
  %365 = load i64, i64* %364, align 8, !tbaa !9091
  %366 = trunc i64 %365 to i32
  %367 = icmp eq i32 %366, 28
  br i1 %367, label %assert_end116, label %assert_fail115, !prof !5

assert_fail115:                                   ; preds = %assert_end114
  %368 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %368(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.536, i64 0, i64 0))
  ret i32 -1

assert_end116:                                    ; preds = %assert_end114
  %369 = getelementptr inbounds i64, i64* %63, i64 4
  %370 = load i64, i64* %369, align 8, !tbaa !9093
  %371 = trunc i64 %370 to i32
  %372 = icmp eq i32 %371, 32
  br i1 %372, label %assert_end118, label %assert_fail117, !prof !5

assert_fail117:                                   ; preds = %assert_end116
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %373(i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.112, i64 0, i64 0))
  ret i32 -1

assert_end118:                                    ; preds = %assert_end116
  %374 = icmp eq i64* %65, null
  br i1 %374, label %if_end120, label %if_then119, !prof !50

if_then119:                                       ; preds = %assert_end118
  %375 = getelementptr inbounds i64, i64* %65, i64 1
  %376 = bitcast i64* %375 to <4 x i64>*
  %377 = load <4 x i64>, <4 x i64>* %376, align 8, !tbaa !9097
  %378 = trunc <4 x i64> %377 to <4 x i32>
  %379 = icmp eq <4 x i32> %378, <i32 25088, i32 896, i32 32, i32 1>
  %380 = load i64, i64* %65, align 8, !tbaa !9108
  %381 = trunc i64 %380 to i32
  %382 = icmp eq i32 %381, 100352
  %rdx.shuf = shufflevector <4 x i1> %379, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = and <4 x i1> %379, %rdx.shuf
  %rdx.shuf129 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx130 = and <4 x i1> %bin.rdx, %rdx.shuf129
  %383 = extractelement <4 x i1> %bin.rdx130, i32 0
  %384 = and i1 %383, %382
  br i1 %384, label %if_end120, label %assert_fail121, !prof !5

if_end120:                                        ; preds = %assert_end118, %if_then119
  %385 = getelementptr inbounds %1, %1* %28, i64 0, i32 6
  %386 = load i64, i64* %385, align 8
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %assert_end124, label %assert_fail123, !prof !5

assert_fail121:                                   ; preds = %if_then119
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %388(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.537, i64 0, i64 0))
  ret i32 -1

assert_fail123:                                   ; preds = %if_end120
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %389(i8* getelementptr inbounds ([112 x i8], [112 x i8]* @.str.83, i64 0, i64 0))
  ret i32 -1

assert_end124:                                    ; preds = %if_end120
  %390 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 0
  %391 = load i32, i32* %390, align 4
  %392 = icmp eq i32 %391, 1
  br i1 %392, label %assert_end126, label %assert_fail125, !prof !5

assert_fail125:                                   ; preds = %assert_end124
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %393(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.84, i64 0, i64 0))
  ret i32 -1

assert_end126:                                    ; preds = %assert_end124
  %394 = getelementptr inbounds %1, %1* %28, i64 0, i32 1, i32 1
  %395 = load i32, i32* %394, align 4
  %396 = icmp eq i32 %41, %395
  br i1 %396, label %assert_end128, label %assert_fail127, !prof !5

assert_fail127:                                   ; preds = %assert_end126
  %397 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !6
  tail call void %397(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.85, i64 0, i64 0))
  ret i32 -1

assert_end128:                                    ; preds = %assert_end126
  %398 = tail call fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3_compute_(i8* %33, i8* %43, i8* %61, i8* %49, i8* %55, i32 %41)
  ret i32 %398
}

; Function Attrs: noinline
define private fastcc i32 @fused_nn_contrib_conv2d_NCHWc_add_add_nn_relu_3_compute_(i8* noalias, i8* noalias, i8* noalias, i8* noalias, i8* noalias, i32) unnamed_addr #0 {
entry:
  %6 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %7 = tail call i8* %6(i32 1, i32 %5, i64 460800, i32 2, i32 32)
  %8 = alloca %56, align 8
  %9 = getelementptr inbounds %56, %56* %8, i64 0, i32 0
  store i8* %7, i8** %9, align 8
  %10 = getelementptr inbounds %56, %56* %8, i64 0, i32 1
  store i8* %0, i8** %10, align 8
  %11 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %12 = bitcast %56* %8 to i8*
  %13 = call i32 %11(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.632, i8* nonnull %12, i32 0)
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %call_end, label %call_fail, !prof !5

call_fail:                                        ; preds = %call_end, %call_end2, %entry
  %merge = phi i32 [ %13, %entry ], [ 0, %call_end2 ], [ %24, %call_end ]
  ret i32 %merge

call_end:                                         ; preds = %entry
  %15 = alloca %57, align 8
  %16 = getelementptr inbounds %57, %57* %15, i64 0, i32 0
  store i8* %7, i8** %16, align 8
  %17 = getelementptr inbounds %57, %57* %15, i64 0, i32 1
  store i8* %1, i8** %17, align 8
  %18 = getelementptr inbounds %57, %57* %15, i64 0, i32 2
  store i8* %2, i8** %18, align 8
  %19 = getelementptr inbounds %57, %57* %15, i64 0, i32 3
  store i8* %3, i8** %19, align 8
  %20 = getelementptr inbounds %57, %57* %15, i64 0, i32 4
  store i8* %4, i8** %20, align 8
  %21 = getelementptr inbounds %57, %57* %15, i64 0, i32 5
  store i32 %5, i32* %21, align 8
  %22 = load i32 (i32 (i32, %0*, i8*)*, i8*, i32)*, i32 (i32 (i32, %0*, i8*)*, i8*, i32)** @__TVMBackendParallelLaunch, align 8, !tbaa !6
  %23 = bitcast %57* %15 to i8*
  %24 = call i32 %22(i32 (i32, %0*, i8*)* nonnull @__tvm_parallel_lambda.633, i8* nonnull %23, i32 0)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %call_end2, label %call_fail, !prof !5

call_end2:                                        ; preds = %call_end
  %26 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %27 = call i32 %26(i32 1, i32 %5, i8* %7)
  br label %call_fail
}

; Function Attrs: norecurse nounwind
define private i32 @__tvm_parallel_lambda.632(i32, %0* nocapture readonly, i8* nocapture readonly) #1 {
entry:
  %3 = bitcast i8* %2 to float**
  %4 = load float*, float** %3, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to float**
  %7 = load float*, float** %6, align 8
  %8 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = add nsw i32 %9, 29
  %11 = sdiv i32 %10, %9
  %12 = mul i32 %11, %0
  %13 = icmp slt i32 %12, 30
  %14 = select i1 %13, i32 %12, i32 30
  %15 = add nsw i32 %0, 1
  %16 = mul nsw i32 %11, %15
  %17 = icmp slt i32 %16, 30
  %18 = select i1 %17, i32 %16, i32 30
  %19 = icmp slt i32 %14, %18
  br i1 %19, label %for_begin1.preheader.preheader, label %for_end, !prof !5

for_begin1.preheader.preheader:                   ; preds = %entry
  %20 = icmp slt i32 %12, 30
  %21 = select i1 %20, i32 %12, i32 30
  %smax = xor i32 %21, -1
  %22 = mul i32 %smax, -3840
  %23 = add i32 %22, -3840
  %24 = add i32 %14, 1
  %25 = sext i32 %24 to i64
  %26 = add nsw i64 %25, -1
  %27 = sext i32 %18 to i64
  br label %for_begin1.preheader

for_begin1.preheader:                             ; preds = %for_begin1.preheader.preheader, %for_end3
  %indvars.iv = phi i64 [ %26, %for_begin1.preheader.preheader ], [ %indvars.iv.next, %for_end3 ]
  %indvar = phi i32 [ 0, %for_begin1.preheader.preheader ], [ %indvar.next, %for_end3 ]
  %28 = mul nsw i64 %indvars.iv, 3840
  %29 = trunc i64 %indvars.iv to i32
  %.off = add i32 %29, -1
  %30 = icmp ult i32 %.off, 28
  %31 = trunc i64 %indvars.iv to i32
  %32 = mul i32 %31, 3584
  br i1 %30, label %if_end.us.29, label %for_body2.preheader

for_body2.preheader:                              ; preds = %for_begin1.preheader
  %33 = mul i32 %indvar, 3840
  %34 = add i32 %23, %33
  %35 = sext i32 %34 to i64
  %scevgep = getelementptr float, float* %4, i64 %35
  %scevgep5 = bitcast float* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* align 64 %scevgep5, i8 0, i64 15360, i1 false)
  br label %for_end3

for_end:                                          ; preds = %for_end3, %entry
  ret i32 0

for_end3:                                         ; preds = %for_body2.preheader, %if_end.us.29
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %36 = icmp slt i64 %indvars.iv.next, %27
  %indvar.next = add nuw i32 %indvar, 1
  br i1 %36, label %for_begin1.preheader, label %for_end, !prof !5

if_end.us.29:                                     ; preds = %for_begin1.preheader
  %37 = getelementptr inbounds float, float* %4, i64 %28
  %38 = bitcast float* %37 to <128 x float>*
  store <128 x float> zeroinitializer, <128 x float>* %38, align 64, !tbaa !9112
  %39 = or i64 %28, 128
  %40 = add i32 %32, -3584
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds float, float* %7, i64 %41
  %43 = bitcast float* %42 to <128 x float>*
  %44 = load <128 x float>, <128 x float>* %43, align 64, !tbaa !9115
  %45 = getelementptr inbounds float, float* %4, i64 %39
  %46 = bitcast float* %45 to <128 x float>*
  store <128 x float> %44, <128 x float>* %46, align 64, !tbaa !9112
  %47 = add nsw i64 %28, 256
  %48 = add i32 %32, -3456
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds float, float* %7, i64 %49
  %51 = bitcast float* %50 to <128 x float>*
  %52 = load <128 x float>, <128 x float>* %51, align 64, !tbaa !9115
  %53 = getelementptr inbounds float, float* %4, i64 %47
  %54 = bitcast float* %53 to <128 x float>*
  store <128 x float> %52, <128 x float>* %54, align 64, !tbaa !9112
  %55 = add nsw i64 %28, 384
  %56 = add i32 %32, -3328
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds float, float* %7, i64 %57
  %59 = bitcast float* %58 to <128 x float>*
  %60 = load <128 x float>, <128 x float>* %59, align 64, !tbaa !9115
  %61 = getelementptr inbounds float, float* %4, i64 %55
  %62 = bitcast float* %61 to <128 x float>*
  store <128 x float> %60, <128 x float>* %62, align 64, !tbaa !9112
  %63 = add nsw i64 %28, 512
  %64 = add i32 %32, -3200
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds float, float* %7, i64 %65
  %67 = bitcast float* %66 to <128 x float>*
  %68 = load <128 x float>, <128 x float>* %67, align 64, !tbaa !9115
  %69 = getelementptr inbounds float, float* %4, i64 %63
  %70 = bitcast float* %69 to <128 x float>*
  store <128 x float> %68, <128 x float>* %70, align 64, !tbaa !9112
  %71 = add nsw i64 %28, 640
  %72 = add i32 %32, -3072
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds float, float* %7, i64 %73
  %75 = bitcast float* %74 to <128 x float>*
  %76 = load <128 x float>, <128 x float>* %75, align 64, !tbaa !9115
  %77 = getelementptr inbounds float, float* %4, i64 %71
  %78 = bitcast float* %77 to <128 x float>*
  store <128 x float> %76, <128 x float>* %78, align 64, !tbaa !9112
  %79 = add nsw i64 %28, 768
  %80 = add i32 %32, -2944
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %7, i64 %81
  %83 = bitcast float* %82 to <128 x float>*
  %84 = load <128 x float>, <128 x float>* %83, align 64, !tbaa !9115
  %85 = getelementptr inbounds float, float* %4, i64 %79
  %86 = bitcast float* %85 to <128 x float>*
  store <128 x float> %84, <128 x float>* %86, align 64, !tbaa !9112
  %87 = add nsw i64 %28, 896
  %88 = add i32 %32, -2816
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds float, float* %7, i64 %89
  %91 = bitcast float* %90 to <128 x float>*
  %92 = load <128 x float>, <128 x float>* %91, align 64, !tbaa !9115
  %93 = getelementptr inbounds float, float* %4, i64 %87
  %94 = bitcast float* %93 to <128 x float>*
  store <128 x float> %92, <128 x float>* %94, align 64, !tbaa !9112
  %95 = add nsw i64 %28, 1024
  %96 = add i32 %32, -2688
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds float, float* %7, i64 %97
  %99 = bitcast float* %98 to <128 x float>*
  %100 = load <128 x float>, <128 x float>* %99, align 64, !tbaa !9115
  %101 = getelementptr inbounds float, float* %4, i64 %95
  %102 = bitcast float* %101 to <128 x float>*
  store <128 x float> %100, <128 x float>* %102, align 64, !tbaa !9112
  %103 = add nsw i64 %28, 1152
  %104 = add i32 %32, -2560
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds float, float* %7, i64 %105
  %107 = bitcast float* %106 to <128 x float>*
  %108 = load <128 x float>, <128 x float>* %107, align 64, !tbaa !9115
  %109 = getelementptr inbounds float, float* %4, i64 %103
  %110 = bitcast float* %109 to <128 x float>*
  store <128 x float> %108, <128 x float>* %110, align 64, !tbaa !9112
  %111 = add nsw i64 %28, 1280
  %112 = add i32 %32, -2432
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds float, float* %7, i64 %113
  %115 = bitcast float* %114 to <128 x float>*
  %116 = load <128 x float>, <128 x float>* %115, align 64, !tbaa !9115
  %117 = getelementptr inbounds float, float* %4, i64 %111
  %118 = bitcast float* %117 to <128 x float>*
  store <128 x float> %116, <128 x float>* %118, align 64, !tbaa !9112
  %119 = add nsw i64 %28, 1408
  %120 = add i32 %32, -2304
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds float, float* %7, i64 %121
  %123 = bitcast float* %122 to <128 x float>*
  %124 = load <128 x float>, <128 x float>* %123, align 64, !tbaa !9115
  %125 = getelementptr inbounds float, float* %4, i64 %119
  %126 = bitcast float* %125 to <128 x float>*
  store <128 x float> %124, <128 x float>* %126, align 64, !tbaa !9112
  %127 = add nsw i64 %28, 1536
  %128 = add i32 %32, -2176
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds float, float* %7, i64 %129
  %131 = bitcast float* %130 to <128 x float>*
  %132 = load <128 x float>, <128 x float>* %131, align 64, !tbaa !9115
  %133 = getelementptr inbounds float, float* %4, i64 %127
  %134 = bitcast float* %133 to <128 x float>*
  store <128 x float> %132, <128 x float>* %134, align 64, !tbaa !9112
  %135 = add nsw i64 %28, 1664
  %136 = add i32 %32, -2048
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds float, float* %7, i64 %137
  %139 = bitcast float* %138 to <128 x float>*
  %140 = load <128 x float>, <128 x float>* %139, align 64, !tbaa !9115
  %141 = getelementptr inbounds float, float* %4, i64 %135
  %142 = bitcast float* %141 to <128 x float>*
  store <128 x float> %140, <128 x float>* %142, align 64, !tbaa !9112
  %143 = add nsw i64 %28, 1792
  %144 = add i32 %32, -1920
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds float, float* %7, i64 %145
  %147 = bitcast float* %146 to <128 x float>*
  %148 = load <128 x float>, <128 x float>* %147, align 64, !tbaa !9115
  %149 = getelementptr inbounds float, float* %4, i64 %143
  %150 = bitcast float* %149 to <128 x float>*
  store <128 x float> %148, <128 x float>* %150, align 64, !tbaa !9112
  %151 = add nsw i64 %28, 1920
  %152 = add i32 %32, -1792
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds float, float* %7, i64 %153
  %155 = bitcast float* %154 to <128 x float>*
  %156 = load <128 x float>, <128 x float>* %155, align 64, !tbaa !9115
  %157 = getelementptr inbounds float, float* %4, i64 %151
  %158 = bitcast float* %157 to <128 x float>*
  store <128 x float> %156, <128 x float>* %158, align 64, !tbaa !9112
  %159 = add nsw i64 %28, 2048
  %160 = add i32 %32, -1664
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %7, i64 %161
  %163 = bitcast float* %162 to <128 x float>*
  %164 = load <128 x float>, <128 x float>* %163, align 64, !tbaa !9115
  %165 = getelementptr inbounds float, float* %4, i64 %159
  %166 = bitcast float* %165 to <128 x float>*
  store <128 x float> %164, <128 x float>* %166, align 64, !tbaa !9112
  %167 = add nsw i64 %28, 2176
  %168 = add i32 %32, -1536
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds float, float* %7, i64 %169
  %171 = bitcast float* %170 to <128 x float>*
  %172 = load <128 x float>, <128 x float>* %171, align 64, !tbaa !9115
  %173 = getelementptr inbounds float, float* %4, i64 %167
  %174 = bitcast float* %173 to <128 x float>*
  store <128 x float> %172, <128 x float>* %174, align 64, !tbaa !9112
  %175 = add nsw i64 %28, 2304
  %176 = add i32 %32, -1408
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds float, float* %7, i64 %177
  %179 = bitcast float* %178 to <128 x float>*
  %180 = load <128 x float>, <128 x float>* %179, align 64, !tbaa !9115
  %181 = getelementptr inbounds float, float* %4, i64 %175
  %182 = bitcast float* %181 to <128 x float>*
  store <128 x float> %180, <128 x float>* %182, align 64, !tbaa !9112
  %183 = add nsw i64 %28, 2432
  %184 = add i32 %32, -1280
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds float, float* %7, i64 %185
  %187 = bitcast float* %186 to <128 x float>*
  %188 = load <128 x float>, <128 x float>* %187, align 64, !tbaa !9115
  %189 = getelementptr inbounds float, float* %4, i64 %183
  %190 = bitcast float* %189 to <128 x float>*
  store <128 x float> %188, <128 x float>* %190, align 64, !tbaa !9112
  %191 = add nsw i64 %28, 2560
  %192 = add i32 %32, -1152
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds float, float* %7, i64 %193
  %195 = bitcast float* %194 to <128 x float>*
  %196 = load <128 x float>, <128 x float>* %195, align 64, !tbaa !9115
  %197 = getelementptr inbounds float, float* %4, i64 %191
  %198 = bitcast float* %197 to <128 x float>*
  store <128 x float> %196, <128 x float>* %198, align 64, !tbaa !9112
  %199 = add nsw i64 %28, 2688
  %200 = add i32 %32, -1024
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds float, float* %7, i64 %201
  %203 = bitcast float* %202 to <128 x float>*
  %204 = load <128 x float>, <128 x float>* %203, align 64, !tbaa !9115
  %205 = getelementptr inbounds float, float* %4, i64 %199
  %206 = bitcast float* %205 to <128 x float>*
  store <128 x float> %204, <128 x float>* %206, align 64, !tbaa !9112
  %207 = add nsw i64 %28, 2816
  %208 = add i32 %32, -896
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds float, float* %7, i64 %209
  %211 = bitcast float* %210 to <128 x float>*
  %212 = load <128 x float>, <128 x float>* %211, align 64, !tbaa !9115
  %213 = getelementptr inbounds float, float* %4, i64 %207
  %214 = bitcast float* %213 to <128 x float>*
  store <128 x float> %212, <128 x float>* %214, align 64, !tbaa !9112
  %215 = add nsw i64 %28, 2944
  %216 = add i32 %32, -768
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds float, float* %7, i64 %217
  %219 = bitcast float* %218 to <128 x float>*
  %220 = load <128 x float>, <128 x float>* %219, align 64, !tbaa !9115
  %221 = getelementptr inbounds float, float* %4, i64 %215
  %222 = bitcast float* %221 to <128 x float>*
  store <128 x float> %220, <128 x float>* %222, align 64, !tbaa !9112
  %223 = add nsw i64 %28, 3072
  %224 = add i32 %32, -640
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds float, float* %7, i64 %225
  %227 = bitcast float* %226 to <128 x float>*
  %228 = load <128 x float>, <128 x float>* %227, align 64, !tbaa !9115
  %229 = getelementptr inbounds float, float* %4, i64 %223
  %230 = bitcast float* %229 to <128 x float>*
  store <128 x float> %228, <128 x float>* %230, align 64, !tbaa !9112
  %231 = add nsw i64 %28, 3200
  %232 = add i32 %32, -512
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds float, float* %7, i64 %233
  %235 = bitcast float* %234 to <128 x float>*
  %236 = load <128 x float>, <128 x float>* %235, align 64, !tbaa !9115
  %237 = getelementptr inbounds float, float* %4, i64 %231
  %238 = bitcast float* %237 to <128 x float>*
  store <128 x float> %236, <128 x float>* %238, align 64, !tbaa !9112
  %239 = add nsw i64 %28, 3328
  %240 = add i32 %32, -384
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds float, float* %7, i64 %241
  %243 = bitcast float* %242 to <128 x float>*
  %244 = load <128 x float>, <128 x float>* %243, align 64, !tbaa !9115
  %245 = getelementptr inbounds float, float* %4, i64 %239
  %246 = bitcast float* %245 to <128 x float>*
  store <128 x float> %244, <128 x float>* %246, align 64, !tbaa !9112
  %247 = add nsw i64 %28, 3456
  %248 = add i32 %32, -256
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds float, float* %7, i64 %249
  %251 = bitcast float* %250 to <128 x float>*
  %252 = load <128 x float>, <128 x float>* %251, align 64, !tbaa !9115
  %253 = getelementptr inbounds float, float* %4, i64 %247
  %254 = bitcast float* %253 to <128 x float>*
  store <128 x float> %252, <128 x float>* %254, align 64, !tbaa !9112
  %255 = add nsw i64 %28, 3584
  %256 = add i32 %32, -128
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds float, float* %7, i64 %257
  %259 = bitcast float* %258 to <128 x float>*
  %260 = load <128 x float>, <128 x float>* %259, align 64, !tbaa !9115
  %261 = getelementptr inbounds float, float* %4, i64 %255
  %262 = bitcast float* %261 to <128 x float>*
  store <128 x float> %260, <128 x float>* %262, align 64, !tbaa !9112
  %263 = add nsw i64 %28, 3712
  %264 = getelementptr inbounds float, float* %4, i64 %263
  %265 = bitcast float* %264 to <128 x float>*
  store <128 x float> zeroinitializer, <128 x float>* %265, align 64, !tbaa !9112
  br label %for_end3
}

define private i32 @__tvm_parallel_lambda.633(i32, %0* nocapture readonly, i8* nocapture readonly) {
entry:
  %3 = alloca [7 x <32 x float>], align 128
  %4 = bitcast [7 x <32 x float>]* %3 to i8*
  %.sub = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0
  %5 = bitcast i8* %2 to float**
  %6 = load float*, float** %5, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 8
  %8 = bitcast i8* %7 to float**
  %9 = load float*, float** %8, align 8
  %10 = getelementptr inbounds i8, i8* %2, i64 16
  %11 = bitcast i8* %10 to float**
  %12 = load float*, float** %11, align 8
  %13 = getelementptr inbounds i8, i8* %2, i64 24
  %14 = bitcast i8* %13 to float**
  %15 = load float*, float** %14, align 8
  %16 = getelementptr inbounds i8, i8* %2, i64 32
  %17 = bitcast i8* %16 to float**
  %18 = load float*, float** %17, align 8
  %19 = getelementptr inbounds i8, i8* %2, i64 40
  %20 = bitcast i8* %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %0, %0* %1, i64 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = add nsw i32 %23, 111
  %25 = sdiv i32 %24, %23
  %26 = mul nsw i32 %25, %0
  %27 = icmp slt i32 %26, 112
  %28 = select i1 %27, i32 %26, i32 112
  %29 = add nsw i32 %0, 1
  %30 = mul nsw i32 %25, %29
  %31 = icmp slt i32 %30, 112
  %32 = select i1 %31, i32 %30, i32 112
  %33 = icmp slt i32 %28, %32
  br i1 %33, label %for_body.lr.ph, label %for_end, !prof !5

for_body.lr.ph:                                   ; preds = %entry
  %34 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 32
  %35 = bitcast float* %34 to <32 x float>*
  %36 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 64
  %37 = bitcast float* %36 to <32 x float>*
  %38 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 96
  %39 = bitcast float* %38 to <32 x float>*
  %40 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 128
  %41 = bitcast float* %40 to <32 x float>*
  %42 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 160
  %43 = bitcast float* %42 to <32 x float>*
  %44 = getelementptr inbounds [7 x <32 x float>], [7 x <32 x float>]* %3, i64 0, i64 0, i64 192
  %45 = bitcast float* %44 to <32 x float>*
  %46 = add i32 %28, 1
  %47 = sext i32 %46 to i64
  %48 = add nsw i64 %47, -1
  %49 = sext i32 %32 to i64
  %50 = bitcast [7 x <32 x float>]* %3 to i8*
  br label %for_body

for_body:                                         ; preds = %for_body.lr.ph, %for_begin13.preheader
  %indvars.iv68 = phi i64 [ %48, %for_body.lr.ph ], [ %indvars.iv.next69, %for_begin13.preheader ]
  %51 = load i8* (i32, i32, i64, i32, i32)*, i8* (i32, i32, i64, i32, i32)** @__TVMBackendAllocWorkspace, align 8, !tbaa !6
  %52 = tail call i8* %51(i32 1, i32 %21, i64 3584, i32 2, i32 32)
  %53 = trunc i64 %indvars.iv68 to i32
  %54 = srem i32 %53, 28
  %55 = sdiv i32 %53, 28
  %56 = mul nsw i32 %55, 36864
  %57 = sext i32 %56 to i64
  %58 = mul nsw i32 %54, 3840
  %59 = sext i32 %58 to i64
  %60 = mul nsw i32 %54, 3840
  %61 = add nsw i32 %60, 3840
  %62 = sext i32 %61 to i64
  %63 = add nsw i64 %57, 12288
  %64 = mul nsw i32 %54, 3840
  %65 = add nsw i32 %64, 7680
  %66 = sext i32 %65 to i64
  %67 = add nsw i64 %57, 24576
  br label %for_body2

for_end:                                          ; preds = %for_begin13.preheader, %entry
  ret i32 0

for_begin13.preheader:                            ; preds = %for_end9.2
  %68 = mul nsw i64 %indvars.iv68, 896
  %69 = shl nsw i32 %55, 5
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds float, float* %15, i64 %70
  %72 = bitcast float* %71 to <32 x float>*
  %73 = load <32 x float>, <32 x float>* %72, align 64, !tbaa !9118
  %74 = getelementptr inbounds float, float* %18, i64 %70
  %75 = bitcast float* %74 to <32 x float>*
  %76 = load <32 x float>, <32 x float>* %75, align 64, !tbaa !9121
  %77 = bitcast i8* %52 to <32 x float>*
  %78 = load <32 x float>, <32 x float>* %77, align 64, !tbaa !9124
  %79 = fadd <32 x float> %78, %73
  %80 = fadd <32 x float> %79, %76
  %81 = fcmp ogt <32 x float> %80, zeroinitializer
  %82 = select <32 x i1> %81, <32 x float> %80, <32 x float> zeroinitializer
  %83 = getelementptr inbounds float, float* %12, i64 %68
  %84 = bitcast float* %83 to <32 x float>*
  store <32 x float> %82, <32 x float>* %84, align 64, !tbaa !9127
  %85 = getelementptr inbounds i8, i8* %52, i64 128
  %86 = bitcast i8* %85 to <32 x float>*
  %87 = load <32 x float>, <32 x float>* %86, align 64, !tbaa !9124
  %88 = fadd <32 x float> %87, %73
  %89 = fadd <32 x float> %88, %76
  %90 = fcmp ogt <32 x float> %89, zeroinitializer
  %91 = select <32 x i1> %90, <32 x float> %89, <32 x float> zeroinitializer
  %92 = mul i64 %indvars.iv68, 3848290697216
  %sext = ashr exact i64 %92, 32
  %93 = or i64 %sext, 32
  %94 = getelementptr inbounds float, float* %12, i64 %93
  %95 = bitcast float* %94 to <32 x float>*
  store <32 x float> %91, <32 x float>* %95, align 64, !tbaa !9127
  %96 = getelementptr inbounds i8, i8* %52, i64 256
  %97 = bitcast i8* %96 to <32 x float>*
  %98 = load <32 x float>, <32 x float>* %97, align 64, !tbaa !9124
  %99 = fadd <32 x float> %98, %73
  %100 = fadd <32 x float> %99, %76
  %101 = fcmp ogt <32 x float> %100, zeroinitializer
  %102 = select <32 x i1> %101, <32 x float> %100, <32 x float> zeroinitializer
  %103 = mul i64 %indvars.iv68, 3848290697216
  %sext70 = ashr exact i64 %103, 32
  %104 = or i64 %sext70, 64
  %105 = getelementptr inbounds float, float* %12, i64 %104
  %106 = bitcast float* %105 to <32 x float>*
  store <32 x float> %102, <32 x float>* %106, align 64, !tbaa !9127
  %107 = getelementptr inbounds i8, i8* %52, i64 384
  %108 = bitcast i8* %107 to <32 x float>*
  %109 = load <32 x float>, <32 x float>* %108, align 64, !tbaa !9124
  %110 = fadd <32 x float> %109, %73
  %111 = fadd <32 x float> %110, %76
  %112 = fcmp ogt <32 x float> %111, zeroinitializer
  %113 = select <32 x i1> %112, <32 x float> %111, <32 x float> zeroinitializer
  %114 = mul i64 %indvars.iv68, 3848290697216
  %sext71 = ashr exact i64 %114, 32
  %115 = or i64 %sext71, 96
  %116 = getelementptr inbounds float, float* %12, i64 %115
  %117 = bitcast float* %116 to <32 x float>*
  store <32 x float> %113, <32 x float>* %117, align 64, !tbaa !9127
  %118 = getelementptr inbounds i8, i8* %52, i64 512
  %119 = bitcast i8* %118 to <32 x float>*
  %120 = load <32 x float>, <32 x float>* %119, align 64, !tbaa !9124
  %121 = fadd <32 x float> %120, %73
  %122 = fadd <32 x float> %121, %76
  %123 = fcmp ogt <32 x float> %122, zeroinitializer
  %124 = select <32 x i1> %123, <32 x float> %122, <32 x float> zeroinitializer
  %125 = mul i64 %indvars.iv68, 3848290697216
  %sext72 = add i64 %125, 549755813888
  %126 = ashr exact i64 %sext72, 32
  %127 = getelementptr inbounds float, float* %12, i64 %126
  %128 = bitcast float* %127 to <32 x float>*
  store <32 x float> %124, <32 x float>* %128, align 64, !tbaa !9127
  %129 = getelementptr inbounds i8, i8* %52, i64 640
  %130 = bitcast i8* %129 to <32 x float>*
  %131 = load <32 x float>, <32 x float>* %130, align 64, !tbaa !9124
  %132 = fadd <32 x float> %131, %73
  %133 = fadd <32 x float> %132, %76
  %134 = fcmp ogt <32 x float> %133, zeroinitializer
  %135 = select <32 x i1> %134, <32 x float> %133, <32 x float> zeroinitializer
  %136 = mul i64 %indvars.iv68, 3848290697216
  %sext73 = add i64 %136, 687194767360
  %137 = ashr exact i64 %sext73, 32
  %138 = getelementptr inbounds float, float* %12, i64 %137
  %139 = bitcast float* %138 to <32 x float>*
  store <32 x float> %135, <32 x float>* %139, align 64, !tbaa !9127
  %140 = getelementptr inbounds i8, i8* %52, i64 768
  %141 = bitcast i8* %140 to <32 x float>*
  %142 = load <32 x float>, <32 x float>* %141, align 64, !tbaa !9124
  %143 = fadd <32 x float> %142, %73
  %144 = fadd <32 x float> %143, %76
  %145 = fcmp ogt <32 x float> %144, zeroinitializer
  %146 = select <32 x i1> %145, <32 x float> %144, <32 x float> zeroinitializer
  %147 = mul i64 %indvars.iv68, 3848290697216
  %sext74 = add i64 %147, 824633720832
  %148 = ashr exact i64 %sext74, 32
  %149 = getelementptr inbounds float, float* %12, i64 %148
  %150 = bitcast float* %149 to <32 x float>*
  store <32 x float> %146, <32 x float>* %150, align 64, !tbaa !9127
  %151 = getelementptr inbounds i8, i8* %52, i64 896
  %152 = bitcast i8* %151 to <32 x float>*
  %153 = load <32 x float>, <32 x float>* %152, align 64, !tbaa !9124
  %154 = fadd <32 x float> %153, %73
  %155 = fadd <32 x float> %154, %76
  %156 = fcmp ogt <32 x float> %155, zeroinitializer
  %157 = select <32 x i1> %156, <32 x float> %155, <32 x float> zeroinitializer
  %158 = mul i64 %indvars.iv68, 3848290697216
  %sext75 = add i64 %158, 962072674304
  %159 = ashr exact i64 %sext75, 32
  %160 = getelementptr inbounds float, float* %12, i64 %159
  %161 = bitcast float* %160 to <32 x float>*
  store <32 x float> %157, <32 x float>* %161, align 64, !tbaa !9127
  %162 = getelementptr inbounds i8, i8* %52, i64 1024
  %163 = bitcast i8* %162 to <32 x float>*
  %164 = load <32 x float>, <32 x float>* %163, align 64, !tbaa !9124
  %165 = fadd <32 x float> %164, %73
  %166 = fadd <32 x float> %165, %76
  %167 = fcmp ogt <32 x float> %166, zeroinitializer
  %168 = select <32 x i1> %167, <32 x float> %166, <32 x float> zeroinitializer
  %169 = mul i64 %indvars.iv68, 3848290697216
  %sext76 = add i64 %169, 1099511627776
  %170 = ashr exact i64 %sext76, 32
  %171 = getelementptr inbounds float, float* %12, i64 %170
  %172 = bitcast float* %171 to <32 x float>*
  store <32 x float> %168, <32 x float>* %172, align 64, !tbaa !9127
  %173 = getelementptr inbounds i8, i8* %52, i64 1152
  %174 = bitcast i8* %173 to <32 x float>*
  %175 = load <32 x float>, <32 x float>* %174, align 64, !tbaa !9124
  %176 = fadd <32 x float> %175, %73
  %177 = fadd <32 x float> %176, %76
  %178 = fcmp ogt <32 x float> %177, zeroinitializer
  %179 = select <32 x i1> %178, <32 x float> %177, <32 x float> zeroinitializer
  %180 = mul i64 %indvars.iv68, 3848290697216
  %sext77 = add i64 %180, 1236950581248
  %181 = ashr exact i64 %sext77, 32
  %182 = getelementptr inbounds float, float* %12, i64 %181
  %183 = bitcast float* %182 to <32 x float>*
  store <32 x float> %179, <32 x float>* %183, align 64, !tbaa !9127
  %184 = getelementptr inbounds i8, i8* %52, i64 1280
  %185 = bitcast i8* %184 to <32 x float>*
  %186 = load <32 x float>, <32 x float>* %185, align 64, !tbaa !9124
  %187 = fadd <32 x float> %186, %73
  %188 = fadd <32 x float> %187, %76
  %189 = fcmp ogt <32 x float> %188, zeroinitializer
  %190 = select <32 x i1> %189, <32 x float> %188, <32 x float> zeroinitializer
  %191 = mul i64 %indvars.iv68, 3848290697216
  %sext78 = add i64 %191, 1374389534720
  %192 = ashr exact i64 %sext78, 32
  %193 = getelementptr inbounds float, float* %12, i64 %192
  %194 = bitcast float* %193 to <32 x float>*
  store <32 x float> %190, <32 x float>* %194, align 64, !tbaa !9127
  %195 = getelementptr inbounds i8, i8* %52, i64 1408
  %196 = bitcast i8* %195 to <32 x float>*
  %197 = load <32 x float>, <32 x float>* %196, align 64, !tbaa !9124
  %198 = fadd <32 x float> %197, %73
  %199 = fadd <32 x float> %198, %76
  %200 = fcmp ogt <32 x float> %199, zeroinitializer
  %201 = select <32 x i1> %200, <32 x float> %199, <32 x float> zeroinitializer
  %202 = mul i64 %indvars.iv68, 3848290697216
  %sext79 = add i64 %202, 1511828488192
  %203 = ashr exact i64 %sext79, 32
  %204 = getelementptr inbounds float, float* %12, i64 %203
  %205 = bitcast float* %204 to <32 x float>*
  store <32 x float> %201, <32 x float>* %205, align 64, !tbaa !9127
  %206 = getelementptr inbounds i8, i8* %52, i64 1536
  %207 = bitcast i8* %206 to <32 x float>*
  %208 = load <32 x float>, <32 x float>* %207, align 64, !tbaa !9124
  %209 = fadd <32 x float> %208, %73
  %210 = fadd <32 x float> %209, %76
  %211 = fcmp ogt <32 x float> %210, zeroinitializer
  %212 = select <32 x i1> %211, <32 x float> %210, <32 x float> zeroinitializer
  %213 = mul i64 %indvars.iv68, 3848290697216
  %sext80 = add i64 %213, 1649267441664
  %214 = ashr exact i64 %sext80, 32
  %215 = getelementptr inbounds float, float* %12, i64 %214
  %216 = bitcast float* %215 to <32 x float>*
  store <32 x float> %212, <32 x float>* %216, align 64, !tbaa !9127
  %217 = getelementptr inbounds i8, i8* %52, i64 1664
  %218 = bitcast i8* %217 to <32 x float>*
  %219 = load <32 x float>, <32 x float>* %218, align 64, !tbaa !9124
  %220 = fadd <32 x float> %219, %73
  %221 = fadd <32 x float> %220, %76
  %222 = fcmp ogt <32 x float> %221, zeroinitializer
  %223 = select <32 x i1> %222, <32 x float> %221, <32 x float> zeroinitializer
  %224 = mul i64 %indvars.iv68, 3848290697216
  %sext81 = add i64 %224, 1786706395136
  %225 = ashr exact i64 %sext81, 32
  %226 = getelementptr inbounds float, float* %12, i64 %225
  %227 = bitcast float* %226 to <32 x float>*
  store <32 x float> %223, <32 x float>* %227, align 64, !tbaa !9127
  %228 = getelementptr inbounds i8, i8* %52, i64 1792
  %229 = bitcast i8* %228 to <32 x float>*
  %230 = load <32 x float>, <32 x float>* %229, align 64, !tbaa !9124
  %231 = fadd <32 x float> %230, %73
  %232 = fadd <32 x float> %231, %76
  %233 = fcmp ogt <32 x float> %232, zeroinitializer
  %234 = select <32 x i1> %233, <32 x float> %232, <32 x float> zeroinitializer
  %235 = mul i64 %indvars.iv68, 3848290697216
  %sext82 = add i64 %235, 1924145348608
  %236 = ashr exact i64 %sext82, 32
  %237 = getelementptr inbounds float, float* %12, i64 %236
  %238 = bitcast float* %237 to <32 x float>*
  store <32 x float> %234, <32 x float>* %238, align 64, !tbaa !9127
  %239 = getelementptr inbounds i8, i8* %52, i64 1920
  %240 = bitcast i8* %239 to <32 x float>*
  %241 = load <32 x float>, <32 x float>* %240, align 64, !tbaa !9124
  %242 = fadd <32 x float> %241, %73
  %243 = fadd <32 x float> %242, %76
  %244 = fcmp ogt <32 x float> %243, zeroinitializer
  %245 = select <32 x i1> %244, <32 x float> %243, <32 x float> zeroinitializer
  %246 = mul i64 %indvars.iv68, 3848290697216
  %sext83 = add i64 %246, 2061584302080
  %247 = ashr exact i64 %sext83, 32
  %248 = getelementptr inbounds float, float* %12, i64 %247
  %249 = bitcast float* %248 to <32 x float>*
  store <32 x float> %245, <32 x float>* %249, align 64, !tbaa !9127
  %250 = getelementptr inbounds i8, i8* %52, i64 2048
  %251 = bitcast i8* %250 to <32 x float>*
  %252 = load <32 x float>, <32 x float>* %251, align 64, !tbaa !9124
  %253 = fadd <32 x float> %252, %73
  %254 = fadd <32 x float> %253, %76
  %255 = fcmp ogt <32 x float> %254, zeroinitializer
  %256 = select <32 x i1> %255, <32 x float> %254, <32 x float> zeroinitializer
  %257 = mul i64 %indvars.iv68, 3848290697216
  %sext84 = add i64 %257, 2199023255552
  %258 = ashr exact i64 %sext84, 32
  %259 = getelementptr inbounds float, float* %12, i64 %258
  %260 = bitcast float* %259 to <32 x float>*
  store <32 x float> %256, <32 x float>* %260, align 64, !tbaa !9127
  %261 = getelementptr inbounds i8, i8* %52, i64 2176
  %262 = bitcast i8* %261 to <32 x float>*
  %263 = load <32 x float>, <32 x float>* %262, align 64, !tbaa !9124
  %264 = fadd <32 x float> %263, %73
  %265 = fadd <32 x float> %264, %76
  %266 = fcmp ogt <32 x float> %265, zeroinitializer
  %267 = select <32 x i1> %266, <32 x float> %265, <32 x float> zeroinitializer
  %268 = mul i64 %indvars.iv68, 3848290697216
  %sext85 = add i64 %268, 2336462209024
  %269 = ashr exact i64 %sext85, 32
  %270 = getelementptr inbounds float, float* %12, i64 %269
  %271 = bitcast float* %270 to <32 x float>*
  store <32 x float> %267, <32 x float>* %271, align 64, !tbaa !9127
  %272 = getelementptr inbounds i8, i8* %52, i64 2304
  %273 = bitcast i8* %272 to <32 x float>*
  %274 = load <32 x float>, <32 x float>* %273, align 64, !tbaa !9124
  %275 = fadd <32 x float> %274, %73
  %276 = fadd <32 x float> %275, %76
  %277 = fcmp ogt <32 x float> %276, zeroinitializer
  %278 = select <32 x i1> %277, <32 x float> %276, <32 x float> zeroinitializer
  %279 = mul i64 %indvars.iv68, 3848290697216
  %sext86 = add i64 %279, 2473901162496
  %280 = ashr exact i64 %sext86, 32
  %281 = getelementptr inbounds float, float* %12, i64 %280
  %282 = bitcast float* %281 to <32 x float>*
  store <32 x float> %278, <32 x float>* %282, align 64, !tbaa !9127
  %283 = getelementptr inbounds i8, i8* %52, i64 2432
  %284 = bitcast i8* %283 to <32 x float>*
  %285 = load <32 x float>, <32 x float>* %284, align 64, !tbaa !9124
  %286 = fadd <32 x float> %285, %73
  %287 = fadd <32 x float> %286, %76
  %288 = fcmp ogt <32 x float> %287, zeroinitializer
  %289 = select <32 x i1> %288, <32 x float> %287, <32 x float> zeroinitializer
  %290 = mul i64 %indvars.iv68, 3848290697216
  %sext87 = add i64 %290, 2611340115968
  %291 = ashr exact i64 %sext87, 32
  %292 = getelementptr inbounds float, float* %12, i64 %291
  %293 = bitcast float* %292 to <32 x float>*
  store <32 x float> %289, <32 x float>* %293, align 64, !tbaa !9127
  %294 = getelementptr inbounds i8, i8* %52, i64 2560
  %295 = bitcast i8* %294 to <32 x float>*
  %296 = load <32 x float>, <32 x float>* %295, align 64, !tbaa !9124
  %297 = fadd <32 x float> %296, %73
  %298 = fadd <32 x float> %297, %76
  %299 = fcmp ogt <32 x float> %298, zeroinitializer
  %300 = select <32 x i1> %299, <32 x float> %298, <32 x float> zeroinitializer
  %301 = mul i64 %indvars.iv68, 3848290697216
  %sext88 = add i64 %301, 2748779069440
  %302 = ashr exact i64 %sext88, 32
  %303 = getelementptr inbounds float, float* %12, i64 %302
  %304 = bitcast float* %303 to <32 x float>*
  store <32 x float> %300, <32 x float>* %304, align 64, !tbaa !9127
  %305 = getelementptr inbounds i8, i8* %52, i64 2688
  %306 = bitcast i8* %305 to <32 x float>*
  %307 = load <32 x float>, <32 x float>* %306, align 64, !tbaa !9124
  %308 = fadd <32 x float> %307, %73
  %309 = fadd <32 x float> %308, %76
  %310 = fcmp ogt <32 x float> %309, zeroinitializer
  %311 = select <32 x i1> %310, <32 x float> %309, <32 x float> zeroinitializer
  %312 = mul i64 %indvars.iv68, 3848290697216
  %sext89 = add i64 %312, 2886218022912
  %313 = ashr exact i64 %sext89, 32
  %314 = getelementptr inbounds float, float* %12, i64 %313
  %315 = bitcast float* %314 to <32 x float>*
  store <32 x float> %311, <32 x float>* %315, align 64, !tbaa !9127
  %316 = getelementptr inbounds i8, i8* %52, i64 2816
  %317 = bitcast i8* %316 to <32 x float>*
  %318 = load <32 x float>, <32 x float>* %317, align 64, !tbaa !9124
  %319 = fadd <32 x float> %318, %73
  %320 = fadd <32 x float> %319, %76
  %321 = fcmp ogt <32 x float> %320, zeroinitializer
  %322 = select <32 x i1> %321, <32 x float> %320, <32 x float> zeroinitializer
  %323 = mul i64 %indvars.iv68, 3848290697216
  %sext90 = add i64 %323, 3023656976384
  %324 = ashr exact i64 %sext90, 32
  %325 = getelementptr inbounds float, float* %12, i64 %324
  %326 = bitcast float* %325 to <32 x float>*
  store <32 x float> %322, <32 x float>* %326, align 64, !tbaa !9127
  %327 = getelementptr inbounds i8, i8* %52, i64 2944
  %328 = bitcast i8* %327 to <32 x float>*
  %329 = load <32 x float>, <32 x float>* %328, align 64, !tbaa !9124
  %330 = fadd <32 x float> %329, %73
  %331 = fadd <32 x float> %330, %76
  %332 = fcmp ogt <32 x float> %331, zeroinitializer
  %333 = select <32 x i1> %332, <32 x float> %331, <32 x float> zeroinitializer
  %334 = mul i64 %indvars.iv68, 3848290697216
  %sext91 = add i64 %334, 3161095929856
  %335 = ashr exact i64 %sext91, 32
  %336 = getelementptr inbounds float, float* %12, i64 %335
  %337 = bitcast float* %336 to <32 x float>*
  store <32 x float> %333, <32 x float>* %337, align 64, !tbaa !9127
  %338 = getelementptr inbounds i8, i8* %52, i64 3072
  %339 = bitcast i8* %338 to <32 x float>*
  %340 = load <32 x float>, <32 x float>* %339, align 64, !tbaa !9124
  %341 = fadd <32 x float> %340, %73
  %342 = fadd <32 x float> %341, %76
  %343 = fcmp ogt <32 x float> %342, zeroinitializer
  %344 = select <32 x i1> %343, <32 x float> %342, <32 x float> zeroinitializer
  %345 = mul i64 %indvars.iv68, 3848290697216
  %sext92 = add i64 %345, 3298534883328
  %346 = ashr exact i64 %sext92, 32
  %347 = getelementptr inbounds float, float* %12, i64 %346
  %348 = bitcast float* %347 to <32 x float>*
  store <32 x float> %344, <32 x float>* %348, align 64, !tbaa !9127
  %349 = getelementptr inbounds i8, i8* %52, i64 3200
  %350 = bitcast i8* %349 to <32 x float>*
  %351 = load <32 x float>, <32 x float>* %350, align 64, !tbaa !9124
  %352 = fadd <32 x float> %351, %73
  %353 = fadd <32 x float> %352, %76
  %354 = fcmp ogt <32 x float> %353, zeroinitializer
  %355 = select <32 x i1> %354, <32 x float> %353, <32 x float> zeroinitializer
  %356 = mul i64 %indvars.iv68, 3848290697216
  %sext93 = add i64 %356, 3435973836800
  %357 = ashr exact i64 %sext93, 32
  %358 = getelementptr inbounds float, float* %12, i64 %357
  %359 = bitcast float* %358 to <32 x float>*
  store <32 x float> %355, <32 x float>* %359, align 64, !tbaa !9127
  %360 = getelementptr inbounds i8, i8* %52, i64 3328
  %361 = bitcast i8* %360 to <32 x float>*
  %362 = load <32 x float>, <32 x float>* %361, align 64, !tbaa !9124
  %363 = fadd <32 x float> %362, %73
  %364 = fadd <32 x float> %363, %76
  %365 = fcmp ogt <32 x float> %364, zeroinitializer
  %366 = select <32 x i1> %365, <32 x float> %364, <32 x float> zeroinitializer
  %367 = mul i64 %indvars.iv68, 3848290697216
  %sext94 = add i64 %367, 3573412790272
  %368 = ashr exact i64 %sext94, 32
  %369 = getelementptr inbounds float, float* %12, i64 %368
  %370 = bitcast float* %369 to <32 x float>*
  store <32 x float> %366, <32 x float>* %370, align 64, !tbaa !9127
  %371 = getelementptr inbounds i8, i8* %52, i64 3456
  %372 = bitcast i8* %371 to <32 x float>*
  %373 = load <32 x float>, <32 x float>* %372, align 64, !tbaa !9124
  %374 = fadd <32 x float> %373, %73
  %375 = fadd <32 x float> %374, %76
  %376 = fcmp ogt <32 x float> %375, zeroinitializer
  %377 = select <32 x i1> %376, <32 x float> %375, <32 x float> zeroinitializer
  %378 = mul i64 %indvars.iv68, 3848290697216
  %sext95 = add i64 %378, 3710851743744
  %379 = ashr exact i64 %sext95, 32
  %380 = getelementptr inbounds float, float* %12, i64 %379
  %381 = bitcast float* %380 to <32 x float>*
  store <32 x float> %377, <32 x float>* %381, align 64, !tbaa !9127
  %382 = load i32 (i32, i32, i8*)*, i32 (i32, i32, i8*)** @__TVMBackendFreeWorkspace, align 8, !tbaa !6
  %383 = tail call i32 %382(i32 1, i32 %21, i8* nonnull %52)
  %indvars.iv.next69 = add nsw i64 %indvars.iv68, 1
  %384 = icmp slt i64 %indvars.iv.next69, %49
  br i1 %384, label %for_body, label %for_end, !prof !5

for_body2:                                        ; preds = %for_end9.2, %for_body
  %indvar = phi i64 [ 0, %for_body ], [ %indvar.next, %for_end9.2 ]
  %385 = mul nuw nsw i64 %indvar, 896
  %scevgep = getelementptr i8, i8* %52, i64 %385
  %386 = add nsw i64 %385, %59
  call void @llvm.memset.p0i8.i64(i8* nonnull align 128 %50, i8 0, i64 896, i1 false)
  br label %for_body8

for_body8:                                        ; preds = %for_body8, %for_body2
  %indvars.iv = phi i64 [ 0, %for_body2 ], [ %indvars.iv.next, %for_body8 ]
  %387 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %472, %for_body8 ]
  %388 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %466, %for_body8 ]
  %389 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %465, %for_body8 ]
  %390 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %464, %for_body8 ]
  %391 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %463, %for_body8 ]
  %392 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %462, %for_body8 ]
  %393 = phi <32 x float> [ zeroinitializer, %for_body2 ], [ %461, %for_body8 ]
  %394 = add nsw i64 %386, %indvars.iv
  %395 = getelementptr inbounds float, float* %6, i64 %394
  %396 = load float, float* %395, align 4, !tbaa !9112
  %397 = insertelement <32 x float> undef, float %396, i32 0
  %398 = shufflevector <32 x float> %397, <32 x float> undef, <32 x i32> zeroinitializer
  %399 = shl nsw i64 %indvars.iv, 5
  %400 = add nsw i64 %399, %57
  %401 = getelementptr inbounds float, float* %9, i64 %400
  %402 = bitcast float* %401 to <32 x float>*
  %403 = load <32 x float>, <32 x float>* %402, align 64, !tbaa !9130
  %404 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %398, <32 x float> %403, <32 x float> %393)
  %405 = add nsw i64 %394, 128
  %406 = getelementptr inbounds float, float* %6, i64 %405
  %407 = load float, float* %406, align 4, !tbaa !9112
  %408 = insertelement <32 x float> undef, float %407, i32 0
  %409 = shufflevector <32 x float> %408, <32 x float> undef, <32 x i32> zeroinitializer
  %410 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %409, <32 x float> %403, <32 x float> %392)
  %411 = add nsw i64 %394, 256
  %412 = getelementptr inbounds float, float* %6, i64 %411
  %413 = load float, float* %412, align 4, !tbaa !9112
  %414 = insertelement <32 x float> undef, float %413, i32 0
  %415 = shufflevector <32 x float> %414, <32 x float> undef, <32 x i32> zeroinitializer
  %416 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %415, <32 x float> %403, <32 x float> %391)
  %417 = add nsw i64 %394, 384
  %418 = getelementptr inbounds float, float* %6, i64 %417
  %419 = load float, float* %418, align 4, !tbaa !9112
  %420 = insertelement <32 x float> undef, float %419, i32 0
  %421 = shufflevector <32 x float> %420, <32 x float> undef, <32 x i32> zeroinitializer
  %422 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %421, <32 x float> %403, <32 x float> %390)
  %423 = add nsw i64 %394, 512
  %424 = getelementptr inbounds float, float* %6, i64 %423
  %425 = load float, float* %424, align 4, !tbaa !9112
  %426 = insertelement <32 x float> undef, float %425, i32 0
  %427 = shufflevector <32 x float> %426, <32 x float> undef, <32 x i32> zeroinitializer
  %428 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %427, <32 x float> %403, <32 x float> %389)
  %429 = add nsw i64 %394, 640
  %430 = getelementptr inbounds float, float* %6, i64 %429
  %431 = load float, float* %430, align 4, !tbaa !9112
  %432 = insertelement <32 x float> undef, float %431, i32 0
  %433 = shufflevector <32 x float> %432, <32 x float> undef, <32 x i32> zeroinitializer
  %434 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %433, <32 x float> %403, <32 x float> %388)
  %435 = add nsw i64 %394, 768
  %436 = getelementptr inbounds float, float* %6, i64 %435
  %437 = load float, float* %436, align 4, !tbaa !9112
  %438 = insertelement <32 x float> undef, float %437, i32 0
  %439 = shufflevector <32 x float> %438, <32 x float> undef, <32 x i32> zeroinitializer
  %440 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %439, <32 x float> %403, <32 x float> %387)
  %441 = add nsw i64 %400, 4096
  %442 = getelementptr inbounds float, float* %9, i64 %441
  %443 = bitcast float* %442 to <32 x float>*
  %444 = load <32 x float>, <32 x float>* %443, align 64, !tbaa !9130
  %445 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %409, <32 x float> %444, <32 x float> %404)
  %446 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %415, <32 x float> %444, <32 x float> %410)
  %447 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %421, <32 x float> %444, <32 x float> %416)
  %448 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %427, <32 x float> %444, <32 x float> %422)
  %449 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %433, <32 x float> %444, <32 x float> %428)
  %450 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %439, <32 x float> %444, <32 x float> %434)
  %451 = add nsw i64 %394, 896
  %452 = getelementptr inbounds float, float* %6, i64 %451
  %453 = load float, float* %452, align 4, !tbaa !9112
  %454 = insertelement <32 x float> undef, float %453, i32 0
  %455 = shufflevector <32 x float> %454, <32 x float> undef, <32 x i32> zeroinitializer
  %456 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %455, <32 x float> %444, <32 x float> %440)
  %457 = add nsw i64 %400, 8192
  %458 = getelementptr inbounds float, float* %9, i64 %457
  %459 = bitcast float* %458 to <32 x float>*
  %460 = load <32 x float>, <32 x float>* %459, align 64, !tbaa !9130
  %461 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %415, <32 x float> %460, <32 x float> %445)
  %462 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %421, <32 x float> %460, <32 x float> %446)
  %463 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %427, <32 x float> %460, <32 x float> %447)
  %464 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %433, <32 x float> %460, <32 x float> %448)
  %465 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %439, <32 x float> %460, <32 x float> %449)
  %466 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %455, <32 x float> %460, <32 x float> %450)
  %467 = add nsw i64 %394, 1024
  %468 = getelementptr inbounds float, float* %6, i64 %467
  %469 = load float, float* %468, align 4, !tbaa !9112
  %470 = insertelement <32 x float> undef, float %469, i32 0
  %471 = shufflevector <32 x float> %470, <32 x float> undef, <32 x i32> zeroinitializer
  %472 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %471, <32 x float> %460, <32 x float> %456)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 128
  br i1 %exitcond, label %for_end9, label %for_body8, !prof !50

for_end9:                                         ; preds = %for_body8
  %473 = add nsw i64 %385, %62
  br label %for_body8.1

for_body8.1:                                      ; preds = %for_body8.1, %for_end9
  %indvars.iv.1 = phi i64 [ 0, %for_end9 ], [ %indvars.iv.next.1, %for_body8.1 ]
  %474 = phi <32 x float> [ %472, %for_end9 ], [ %559, %for_body8.1 ]
  %475 = phi <32 x float> [ %466, %for_end9 ], [ %553, %for_body8.1 ]
  %476 = phi <32 x float> [ %465, %for_end9 ], [ %552, %for_body8.1 ]
  %477 = phi <32 x float> [ %464, %for_end9 ], [ %551, %for_body8.1 ]
  %478 = phi <32 x float> [ %463, %for_end9 ], [ %550, %for_body8.1 ]
  %479 = phi <32 x float> [ %462, %for_end9 ], [ %549, %for_body8.1 ]
  %480 = phi <32 x float> [ %461, %for_end9 ], [ %548, %for_body8.1 ]
  %481 = add nsw i64 %473, %indvars.iv.1
  %482 = getelementptr inbounds float, float* %6, i64 %481
  %483 = load float, float* %482, align 4, !tbaa !9112
  %484 = insertelement <32 x float> undef, float %483, i32 0
  %485 = shufflevector <32 x float> %484, <32 x float> undef, <32 x i32> zeroinitializer
  %486 = shl nsw i64 %indvars.iv.1, 5
  %487 = add nsw i64 %63, %486
  %488 = getelementptr inbounds float, float* %9, i64 %487
  %489 = bitcast float* %488 to <32 x float>*
  %490 = load <32 x float>, <32 x float>* %489, align 64, !tbaa !9130
  %491 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %485, <32 x float> %490, <32 x float> %480)
  %492 = add nsw i64 %481, 128
  %493 = getelementptr inbounds float, float* %6, i64 %492
  %494 = load float, float* %493, align 4, !tbaa !9112
  %495 = insertelement <32 x float> undef, float %494, i32 0
  %496 = shufflevector <32 x float> %495, <32 x float> undef, <32 x i32> zeroinitializer
  %497 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %496, <32 x float> %490, <32 x float> %479)
  %498 = add nsw i64 %481, 256
  %499 = getelementptr inbounds float, float* %6, i64 %498
  %500 = load float, float* %499, align 4, !tbaa !9112
  %501 = insertelement <32 x float> undef, float %500, i32 0
  %502 = shufflevector <32 x float> %501, <32 x float> undef, <32 x i32> zeroinitializer
  %503 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %502, <32 x float> %490, <32 x float> %478)
  %504 = add nsw i64 %481, 384
  %505 = getelementptr inbounds float, float* %6, i64 %504
  %506 = load float, float* %505, align 4, !tbaa !9112
  %507 = insertelement <32 x float> undef, float %506, i32 0
  %508 = shufflevector <32 x float> %507, <32 x float> undef, <32 x i32> zeroinitializer
  %509 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %508, <32 x float> %490, <32 x float> %477)
  %510 = add nsw i64 %481, 512
  %511 = getelementptr inbounds float, float* %6, i64 %510
  %512 = load float, float* %511, align 4, !tbaa !9112
  %513 = insertelement <32 x float> undef, float %512, i32 0
  %514 = shufflevector <32 x float> %513, <32 x float> undef, <32 x i32> zeroinitializer
  %515 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %514, <32 x float> %490, <32 x float> %476)
  %516 = add nsw i64 %481, 640
  %517 = getelementptr inbounds float, float* %6, i64 %516
  %518 = load float, float* %517, align 4, !tbaa !9112
  %519 = insertelement <32 x float> undef, float %518, i32 0
  %520 = shufflevector <32 x float> %519, <32 x float> undef, <32 x i32> zeroinitializer
  %521 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %520, <32 x float> %490, <32 x float> %475)
  %522 = add nsw i64 %481, 768
  %523 = getelementptr inbounds float, float* %6, i64 %522
  %524 = load float, float* %523, align 4, !tbaa !9112
  %525 = insertelement <32 x float> undef, float %524, i32 0
  %526 = shufflevector <32 x float> %525, <32 x float> undef, <32 x i32> zeroinitializer
  %527 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %526, <32 x float> %490, <32 x float> %474)
  %528 = add nsw i64 %487, 4096
  %529 = getelementptr inbounds float, float* %9, i64 %528
  %530 = bitcast float* %529 to <32 x float>*
  %531 = load <32 x float>, <32 x float>* %530, align 64, !tbaa !9130
  %532 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %496, <32 x float> %531, <32 x float> %491)
  %533 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %502, <32 x float> %531, <32 x float> %497)
  %534 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %508, <32 x float> %531, <32 x float> %503)
  %535 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %514, <32 x float> %531, <32 x float> %509)
  %536 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %520, <32 x float> %531, <32 x float> %515)
  %537 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %526, <32 x float> %531, <32 x float> %521)
  %538 = add nsw i64 %481, 896
  %539 = getelementptr inbounds float, float* %6, i64 %538
  %540 = load float, float* %539, align 4, !tbaa !9112
  %541 = insertelement <32 x float> undef, float %540, i32 0
  %542 = shufflevector <32 x float> %541, <32 x float> undef, <32 x i32> zeroinitializer
  %543 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %542, <32 x float> %531, <32 x float> %527)
  %544 = add nsw i64 %487, 8192
  %545 = getelementptr inbounds float, float* %9, i64 %544
  %546 = bitcast float* %545 to <32 x float>*
  %547 = load <32 x float>, <32 x float>* %546, align 64, !tbaa !9130
  %548 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %502, <32 x float> %547, <32 x float> %532)
  %549 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %508, <32 x float> %547, <32 x float> %533)
  %550 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %514, <32 x float> %547, <32 x float> %534)
  %551 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %520, <32 x float> %547, <32 x float> %535)
  %552 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %526, <32 x float> %547, <32 x float> %536)
  %553 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %542, <32 x float> %547, <32 x float> %537)
  %554 = add nsw i64 %481, 1024
  %555 = getelementptr inbounds float, float* %6, i64 %554
  %556 = load float, float* %555, align 4, !tbaa !9112
  %557 = insertelement <32 x float> undef, float %556, i32 0
  %558 = shufflevector <32 x float> %557, <32 x float> undef, <32 x i32> zeroinitializer
  %559 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %558, <32 x float> %547, <32 x float> %543)
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.1, 1
  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 128
  br i1 %exitcond.1, label %for_end9.1, label %for_body8.1, !prof !50

for_end9.1:                                       ; preds = %for_body8.1
  %560 = add nsw i64 %385, %66
  br label %for_body8.2

for_body8.2:                                      ; preds = %for_body8.2, %for_end9.1
  %indvars.iv.2 = phi i64 [ 0, %for_end9.1 ], [ %indvars.iv.next.2, %for_body8.2 ]
  %561 = phi <32 x float> [ %559, %for_end9.1 ], [ %646, %for_body8.2 ]
  %562 = phi <32 x float> [ %553, %for_end9.1 ], [ %640, %for_body8.2 ]
  %563 = phi <32 x float> [ %552, %for_end9.1 ], [ %639, %for_body8.2 ]
  %564 = phi <32 x float> [ %551, %for_end9.1 ], [ %638, %for_body8.2 ]
  %565 = phi <32 x float> [ %550, %for_end9.1 ], [ %637, %for_body8.2 ]
  %566 = phi <32 x float> [ %549, %for_end9.1 ], [ %636, %for_body8.2 ]
  %567 = phi <32 x float> [ %548, %for_end9.1 ], [ %635, %for_body8.2 ]
  %568 = add nsw i64 %560, %indvars.iv.2
  %569 = getelementptr inbounds float, float* %6, i64 %568
  %570 = load float, float* %569, align 4, !tbaa !9112
  %571 = insertelement <32 x float> undef, float %570, i32 0
  %572 = shufflevector <32 x float> %571, <32 x float> undef, <32 x i32> zeroinitializer
  %573 = shl nsw i64 %indvars.iv.2, 5
  %574 = add nsw i64 %67, %573
  %575 = getelementptr inbounds float, float* %9, i64 %574
  %576 = bitcast float* %575 to <32 x float>*
  %577 = load <32 x float>, <32 x float>* %576, align 64, !tbaa !9130
  %578 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %572, <32 x float> %577, <32 x float> %567)
  %579 = add nsw i64 %568, 128
  %580 = getelementptr inbounds float, float* %6, i64 %579
  %581 = load float, float* %580, align 4, !tbaa !9112
  %582 = insertelement <32 x float> undef, float %581, i32 0
  %583 = shufflevector <32 x float> %582, <32 x float> undef, <32 x i32> zeroinitializer
  %584 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %583, <32 x float> %577, <32 x float> %566)
  %585 = add nsw i64 %568, 256
  %586 = getelementptr inbounds float, float* %6, i64 %585
  %587 = load float, float* %586, align 4, !tbaa !9112
  %588 = insertelement <32 x float> undef, float %587, i32 0
  %589 = shufflevector <32 x float> %588, <32 x float> undef, <32 x i32> zeroinitializer
  %590 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %589, <32 x float> %577, <32 x float> %565)
  %591 = add nsw i64 %568, 384
  %592 = getelementptr inbounds float, float* %6, i64 %591
  %593 = load float, float* %592, align 4, !tbaa !9112
  %594 = insertelement <32 x float> undef, float %593, i32 0
  %595 = shufflevector <32 x float> %594, <32 x float> undef, <32 x i32> zeroinitializer
  %596 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %595, <32 x float> %577, <32 x float> %564)
  %597 = add nsw i64 %568, 512
  %598 = getelementptr inbounds float, float* %6, i64 %597
  %599 = load float, float* %598, align 4, !tbaa !9112
  %600 = insertelement <32 x float> undef, float %599, i32 0
  %601 = shufflevector <32 x float> %600, <32 x float> undef, <32 x i32> zeroinitializer
  %602 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %601, <32 x float> %577, <32 x float> %563)
  %603 = add nsw i64 %568, 640
  %604 = getelementptr inbounds float, float* %6, i64 %603
  %605 = load float, float* %604, align 4, !tbaa !9112
  %606 = insertelement <32 x float> undef, float %605, i32 0
  %607 = shufflevector <32 x float> %606, <32 x float> undef, <32 x i32> zeroinitializer
  %608 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %607, <32 x float> %577, <32 x float> %562)
  %609 = add nsw i64 %568, 768
  %610 = getelementptr inbounds float, float* %6, i64 %609
  %611 = load float, float* %610, align 4, !tbaa !9112
  %612 = insertelement <32 x float> undef, float %611, i32 0
  %613 = shufflevector <32 x float> %612, <32 x float> undef, <32 x i32> zeroinitializer
  %614 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %613, <32 x float> %577, <32 x float> %561)
  %615 = add nsw i64 %574, 4096
  %616 = getelementptr inbounds float, float* %9, i64 %615
  %617 = bitcast float* %616 to <32 x float>*
  %618 = load <32 x float>, <32 x float>* %617, align 64, !tbaa !9130
  %619 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %583, <32 x float> %618, <32 x float> %578)
  %620 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %589, <32 x float> %618, <32 x float> %584)
  %621 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %595, <32 x float> %618, <32 x float> %590)
  %622 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %601, <32 x float> %618, <32 x float> %596)
  %623 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %607, <32 x float> %618, <32 x float> %602)
  %624 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %613, <32 x float> %618, <32 x float> %608)
  %625 = add nsw i64 %568, 896
  %626 = getelementptr inbounds float, float* %6, i64 %625
  %627 = load float, float* %626, align 4, !tbaa !9112
  %628 = insertelement <32 x float> undef, float %627, i32 0
  %629 = shufflevector <32 x float> %628, <32 x float> undef, <32 x i32> zeroinitializer
  %630 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %629, <32 x float> %618, <32 x float> %614)
  %631 = add nsw i64 %574, 8192
  %632 = getelementptr inbounds float, float* %9, i64 %631
  %633 = bitcast float* %632 to <32 x float>*
  %634 = load <32 x float>, <32 x float>* %633, align 64, !tbaa !9130
  %635 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %589, <32 x float> %634, <32 x float> %619)
  %636 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %595, <32 x float> %634, <32 x float> %620)
  %637 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %601, <32 x float> %634, <32 x float> %621)
  %638 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %607, <32 x float> %634, <32 x float> %622)
  %639 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %613, <32 x float> %634, <32 x float> %623)
  %640 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %629, <32 x float> %634, <32 x float> %624)
  %641 = add nsw i64 %568, 1024
  %642 = getelementptr inbounds float, float* %6, i64 %641
  %643 = load float, float* %642, align 4, !tbaa !9112
  %644 = insertelement <32 x float> undef, float %643, i32 0
  %645 = shufflevector <32 x float> %644, <32 x float> undef, <32 x i32> zeroinitializer
  %646 = tail call <32 x float> @llvm.fmuladd.v32f32(<32 x float> %645, <32 x float> %634, <32 x float> %630)
  %indvars.iv.next.2 = add nuw nsw i64 %indvars.iv.2, 1
  %exitcond.2 = icmp eq i64 %indvars.iv.next.2, 128
  br i1 %exitcond.2, label %for_end9.2, label %for_body8.2, !prof !50

for_end9.2:                                       ; preds = %for_body8.2
  store <32 x float> %635, <32 x float>* %.sub, align 128, !tbaa !9133
  store <32 x float> %636, <32 x float>* %35, align 128, !tbaa !9133
  store <32 x float> %637, <32 x float>* %37, align 128, !tbaa !9133
  store <32 x float> %638, <32 x float>* %39, align 128, !tbaa !9133
  store <32 x float> %639, <32 x float>* %41, align 128, !tbaa !9133
  store <32 x float> %640, <32 x float>* %43, align 128, !tbaa !9133
  store <32 x float> %646, <32 x float>* %45, align 128, !tbaa !9133
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %scevgep, i8* nonnull align 128 %4, i64 896, i1 false)
  %indvar.next = add nuw nsw i64 %indvar, 1
  %exitcond61 = icmp eq i64 %indvar.next, 4
  br i1 %exitcond61, label %for_begin13.preheader, label %for_body2, !prof !50
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #5

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.exp.v4f32(<4 x float>) #3

attributes #0 = { noinline }
attributes #1 = { norecurse nounwind }
attributes #2 = { nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { noinline norecurse nounwind }
attributes #5 = { argmemonly nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, dwoId: 1)
!1 = !DIFile(filename: "model.tvm", directory: "/tmp/")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = !{!"branch_weights", i32 1048576, i32 1}
!6 = !{!7, !7, i64 0}
!7 = !{!"ctx_ptr", !8, i64 0}
!8 = !{!"tvm-tbaa"}
!9 = !{!10, !10, i64 0}
!10 = !{!"0x7893730.w1.b0", !11, i64 0}
!11 = !{!"0x7893730.w2.b0", !12, i64 0}
!12 = !{!"0x7893730.w4.b0", !13, i64 0}
!13 = !{!"0x7893730.w8.b0", !14, i64 0}
!14 = !{!"0x7893730.w16.b0", !15, i64 0}
!15 = !{!"0x7893730.w32.b0", !16, i64 0}
!16 = !{!"0x7893730.w64.b0", !17, i64 0}
!17 = !{!"0x7893730.w128.b0", !18, i64 0}
!18 = !{!"0x7893730.w256.b0", !19, i64 0}
!19 = !{!"0x7893730.w512.b0", !20, i64 0}
!20 = !{!"0x7893730.w1024.b0", !21, i64 0}
!21 = !{!"int32", !22, i64 0}
!22 = !{!"0x7893730", !8, i64 0}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x7893730.w1.b1", !11, i64 0}
!25 = !{!26, !26, i64 0}
!26 = !{!"0x7896dc0.w1.b0", !27, i64 0}
!27 = !{!"0x7896dc0.w2.b0", !28, i64 0}
!28 = !{!"0x7896dc0.w4.b0", !29, i64 0}
!29 = !{!"0x7896dc0.w8.b0", !30, i64 0}
!30 = !{!"0x7896dc0.w16.b0", !31, i64 0}
!31 = !{!"0x7896dc0.w32.b0", !32, i64 0}
!32 = !{!"0x7896dc0.w64.b0", !33, i64 0}
!33 = !{!"0x7896dc0.w128.b0", !34, i64 0}
!34 = !{!"0x7896dc0.w256.b0", !35, i64 0}
!35 = !{!"0x7896dc0.w512.b0", !36, i64 0}
!36 = !{!"0x7896dc0.w1024.b0", !37, i64 0}
!37 = !{!"int64", !38, i64 0}
!38 = !{!"0x7896dc0", !8, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x7896dc0.w1.b1", !27, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x7896dc0.w1.b2", !43, i64 0}
!43 = !{!"0x7896dc0.w2.b2", !28, i64 0}
!44 = !{!45, !45, i64 0}
!45 = !{!"0x7896dc0.w1.b3", !43, i64 0}
!46 = !{!47, !47, i64 0}
!47 = !{!"0x7896dc0.w1.b4", !48, i64 0}
!48 = !{!"0x7896dc0.w2.b4", !49, i64 0}
!49 = !{!"0x7896dc0.w4.b4", !29, i64 0}
!50 = !{!"branch_weights", i32 1, i32 1048576}
!51 = !{!52, !52, i64 0}
!52 = !{!"0x7897380.w8.b0", !53, i64 0}
!53 = !{!"0x7897380.w16.b0", !54, i64 0}
!54 = !{!"0x7897380.w32.b0", !55, i64 0}
!55 = !{!"0x7897380.w64.b0", !56, i64 0}
!56 = !{!"0x7897380.w128.b0", !57, i64 0}
!57 = !{!"0x7897380.w256.b0", !58, i64 0}
!58 = !{!"0x7897380.w512.b0", !59, i64 0}
!59 = !{!"0x7897380.w1024.b0", !60, i64 0}
!60 = !{!"int64", !61, i64 0}
!61 = !{!"0x7897380", !8, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x7897380.w1.b0", !64, i64 0}
!64 = !{!"0x7897380.w2.b0", !65, i64 0}
!65 = !{!"0x7897380.w4.b0", !52, i64 0}
!66 = !{!67, !67, i64 0}
!67 = !{!"0x78975d0.w1.b0", !68, i64 0}
!68 = !{!"0x78975d0.w2.b0", !69, i64 0}
!69 = !{!"0x78975d0.w4.b0", !70, i64 0}
!70 = !{!"0x78975d0.w8.b0", !71, i64 0}
!71 = !{!"0x78975d0.w16.b0", !72, i64 0}
!72 = !{!"0x78975d0.w32.b0", !73, i64 0}
!73 = !{!"0x78975d0.w64.b0", !74, i64 0}
!74 = !{!"0x78975d0.w128.b0", !75, i64 0}
!75 = !{!"0x78975d0.w256.b0", !76, i64 0}
!76 = !{!"0x78975d0.w512.b0", !77, i64 0}
!77 = !{!"0x78975d0.w1024.b0", !78, i64 0}
!78 = !{!"int64", !79, i64 0}
!79 = !{!"0x78975d0", !8, i64 0}
!80 = !{!81, !81, i64 0}
!81 = !{!"0x78975d0.w1.b1", !68, i64 0}
!82 = !{!83, !83, i64 0}
!83 = !{!"0x78975d0.w1.b2", !84, i64 0}
!84 = !{!"0x78975d0.w2.b2", !69, i64 0}
!85 = !{!86, !86, i64 0}
!86 = !{!"0x78975d0.w1.b3", !84, i64 0}
!87 = !{!88, !88, i64 0}
!88 = !{!"0x78975d0.w1.b4", !89, i64 0}
!89 = !{!"0x78975d0.w2.b4", !90, i64 0}
!90 = !{!"0x78975d0.w4.b4", !70, i64 0}
!91 = !{!92, !92, i64 0}
!92 = !{!"0x7896ff0.w8.b0", !93, i64 0}
!93 = !{!"0x7896ff0.w16.b0", !94, i64 0}
!94 = !{!"0x7896ff0.w32.b0", !95, i64 0}
!95 = !{!"0x7896ff0.w64.b0", !96, i64 0}
!96 = !{!"0x7896ff0.w128.b0", !97, i64 0}
!97 = !{!"0x7896ff0.w256.b0", !98, i64 0}
!98 = !{!"0x7896ff0.w512.b0", !99, i64 0}
!99 = !{!"0x7896ff0.w1024.b0", !100, i64 0}
!100 = !{!"int64", !101, i64 0}
!101 = !{!"0x7896ff0", !8, i64 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"0x7896ff0.w1.b0", !104, i64 0}
!104 = !{!"0x7896ff0.w2.b0", !105, i64 0}
!105 = !{!"0x7896ff0.w4.b0", !92, i64 0}
!106 = !{!107, !107, i64 0}
!107 = !{!"float32", !108, i64 0}
!108 = !{!"0x785a540", !8, i64 0}
!109 = !{!110, !110, i64 0}
!110 = !{!"float32", !111, i64 0}
!111 = !{!"0x7849c20", !8, i64 0}
!112 = !{!113, !113, i64 0}
!113 = !{!"0x1ae7c9c0.w1.b0", !114, i64 0}
!114 = !{!"0x1ae7c9c0.w2.b0", !115, i64 0}
!115 = !{!"0x1ae7c9c0.w4.b0", !116, i64 0}
!116 = !{!"0x1ae7c9c0.w8.b0", !117, i64 0}
!117 = !{!"0x1ae7c9c0.w16.b0", !118, i64 0}
!118 = !{!"0x1ae7c9c0.w32.b0", !119, i64 0}
!119 = !{!"0x1ae7c9c0.w64.b0", !120, i64 0}
!120 = !{!"0x1ae7c9c0.w128.b0", !121, i64 0}
!121 = !{!"0x1ae7c9c0.w256.b0", !122, i64 0}
!122 = !{!"0x1ae7c9c0.w512.b0", !123, i64 0}
!123 = !{!"0x1ae7c9c0.w1024.b0", !124, i64 0}
!124 = !{!"int32", !125, i64 0}
!125 = !{!"0x1ae7c9c0", !8, i64 0}
!126 = !{!127, !127, i64 0}
!127 = !{!"0x1ae7c9c0.w1.b1", !114, i64 0}
!128 = !{!129, !129, i64 0}
!129 = !{!"0x1ae7db60.w1.b0", !130, i64 0}
!130 = !{!"0x1ae7db60.w2.b0", !131, i64 0}
!131 = !{!"0x1ae7db60.w4.b0", !132, i64 0}
!132 = !{!"0x1ae7db60.w8.b0", !133, i64 0}
!133 = !{!"0x1ae7db60.w16.b0", !134, i64 0}
!134 = !{!"0x1ae7db60.w32.b0", !135, i64 0}
!135 = !{!"0x1ae7db60.w64.b0", !136, i64 0}
!136 = !{!"0x1ae7db60.w128.b0", !137, i64 0}
!137 = !{!"0x1ae7db60.w256.b0", !138, i64 0}
!138 = !{!"0x1ae7db60.w512.b0", !139, i64 0}
!139 = !{!"0x1ae7db60.w1024.b0", !140, i64 0}
!140 = !{!"int64", !141, i64 0}
!141 = !{!"0x1ae7db60", !8, i64 0}
!142 = !{!143, !143, i64 0}
!143 = !{!"0x1ae7db60.w1.b1", !130, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"0x1ae7db60.w1.b2", !146, i64 0}
!146 = !{!"0x1ae7db60.w2.b2", !131, i64 0}
!147 = !{!148, !148, i64 0}
!148 = !{!"0x1ae7db60.w1.b3", !146, i64 0}
!149 = !{!150, !150, i64 0}
!150 = !{!"0x1ae7db60.w1.b4", !151, i64 0}
!151 = !{!"0x1ae7db60.w2.b4", !152, i64 0}
!152 = !{!"0x1ae7db60.w4.b4", !132, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"0x1ae7e120.w8.b0", !155, i64 0}
!155 = !{!"0x1ae7e120.w16.b0", !156, i64 0}
!156 = !{!"0x1ae7e120.w32.b0", !157, i64 0}
!157 = !{!"0x1ae7e120.w64.b0", !158, i64 0}
!158 = !{!"0x1ae7e120.w128.b0", !159, i64 0}
!159 = !{!"0x1ae7e120.w256.b0", !160, i64 0}
!160 = !{!"0x1ae7e120.w512.b0", !161, i64 0}
!161 = !{!"0x1ae7e120.w1024.b0", !162, i64 0}
!162 = !{!"int64", !163, i64 0}
!163 = !{!"0x1ae7e120", !8, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"0x1ae7e120.w1.b0", !166, i64 0}
!166 = !{!"0x1ae7e120.w2.b0", !167, i64 0}
!167 = !{!"0x1ae7e120.w4.b0", !154, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"0x1ae7e370.w1.b0", !170, i64 0}
!170 = !{!"0x1ae7e370.w2.b0", !171, i64 0}
!171 = !{!"0x1ae7e370.w4.b0", !172, i64 0}
!172 = !{!"0x1ae7e370.w8.b0", !173, i64 0}
!173 = !{!"0x1ae7e370.w16.b0", !174, i64 0}
!174 = !{!"0x1ae7e370.w32.b0", !175, i64 0}
!175 = !{!"0x1ae7e370.w64.b0", !176, i64 0}
!176 = !{!"0x1ae7e370.w128.b0", !177, i64 0}
!177 = !{!"0x1ae7e370.w256.b0", !178, i64 0}
!178 = !{!"0x1ae7e370.w512.b0", !179, i64 0}
!179 = !{!"0x1ae7e370.w1024.b0", !180, i64 0}
!180 = !{!"int64", !181, i64 0}
!181 = !{!"0x1ae7e370", !8, i64 0}
!182 = !{!183, !183, i64 0}
!183 = !{!"0x1ae7e370.w1.b1", !170, i64 0}
!184 = !{!185, !185, i64 0}
!185 = !{!"0x1ae7e370.w1.b2", !186, i64 0}
!186 = !{!"0x1ae7e370.w2.b2", !171, i64 0}
!187 = !{!188, !188, i64 0}
!188 = !{!"0x1ae7e370.w1.b3", !186, i64 0}
!189 = !{!190, !190, i64 0}
!190 = !{!"0x1ae7e370.w1.b4", !191, i64 0}
!191 = !{!"0x1ae7e370.w2.b4", !192, i64 0}
!192 = !{!"0x1ae7e370.w4.b4", !172, i64 0}
!193 = !{!194, !194, i64 0}
!194 = !{!"0x1ae7dd90.w8.b0", !195, i64 0}
!195 = !{!"0x1ae7dd90.w16.b0", !196, i64 0}
!196 = !{!"0x1ae7dd90.w32.b0", !197, i64 0}
!197 = !{!"0x1ae7dd90.w64.b0", !198, i64 0}
!198 = !{!"0x1ae7dd90.w128.b0", !199, i64 0}
!199 = !{!"0x1ae7dd90.w256.b0", !200, i64 0}
!200 = !{!"0x1ae7dd90.w512.b0", !201, i64 0}
!201 = !{!"0x1ae7dd90.w1024.b0", !202, i64 0}
!202 = !{!"int64", !203, i64 0}
!203 = !{!"0x1ae7dd90", !8, i64 0}
!204 = !{!205, !205, i64 0}
!205 = !{!"0x1ae7dd90.w1.b0", !206, i64 0}
!206 = !{!"0x1ae7dd90.w2.b0", !207, i64 0}
!207 = !{!"0x1ae7dd90.w4.b0", !194, i64 0}
!208 = !{!209, !209, i64 0}
!209 = !{!"float32", !210, i64 0}
!210 = !{!"0x1af59a10", !8, i64 0}
!211 = !{!212, !212, i64 0}
!212 = !{!"float32", !213, i64 0}
!213 = !{!"0x1ae60f50", !8, i64 0}
!214 = !{!215, !215, i64 0}
!215 = !{!"0x786d9f0.w1.b0", !216, i64 0}
!216 = !{!"0x786d9f0.w2.b0", !217, i64 0}
!217 = !{!"0x786d9f0.w4.b0", !218, i64 0}
!218 = !{!"0x786d9f0.w8.b0", !219, i64 0}
!219 = !{!"0x786d9f0.w16.b0", !220, i64 0}
!220 = !{!"0x786d9f0.w32.b0", !221, i64 0}
!221 = !{!"0x786d9f0.w64.b0", !222, i64 0}
!222 = !{!"0x786d9f0.w128.b0", !223, i64 0}
!223 = !{!"0x786d9f0.w256.b0", !224, i64 0}
!224 = !{!"0x786d9f0.w512.b0", !225, i64 0}
!225 = !{!"0x786d9f0.w1024.b0", !226, i64 0}
!226 = !{!"int32", !227, i64 0}
!227 = !{!"0x786d9f0", !8, i64 0}
!228 = !{!229, !229, i64 0}
!229 = !{!"0x786d9f0.w1.b2", !230, i64 0}
!230 = !{!"0x786d9f0.w2.b2", !217, i64 0}
!231 = !{!232, !232, i64 0}
!232 = !{!"0x786d9f0.w1.b3", !230, i64 0}
!233 = !{!234, !234, i64 0}
!234 = !{!"0x786d9f0.w1.b4", !235, i64 0}
!235 = !{!"0x786d9f0.w2.b4", !236, i64 0}
!236 = !{!"0x786d9f0.w4.b4", !218, i64 0}
!237 = !{!238, !238, i64 0}
!238 = !{!"0x786d9f0.w1.b1", !216, i64 0}
!239 = !{!240, !240, i64 0}
!240 = !{!"0x7890580.w1.b0", !241, i64 0}
!241 = !{!"0x7890580.w2.b0", !242, i64 0}
!242 = !{!"0x7890580.w4.b0", !243, i64 0}
!243 = !{!"0x7890580.w8.b0", !244, i64 0}
!244 = !{!"0x7890580.w16.b0", !245, i64 0}
!245 = !{!"0x7890580.w32.b0", !246, i64 0}
!246 = !{!"0x7890580.w64.b0", !247, i64 0}
!247 = !{!"0x7890580.w128.b0", !248, i64 0}
!248 = !{!"0x7890580.w256.b0", !249, i64 0}
!249 = !{!"0x7890580.w512.b0", !250, i64 0}
!250 = !{!"0x7890580.w1024.b0", !251, i64 0}
!251 = !{!"int64", !252, i64 0}
!252 = !{!"0x7890580", !8, i64 0}
!253 = !{!254, !254, i64 0}
!254 = !{!"0x7890580.w1.b1", !241, i64 0}
!255 = !{!256, !256, i64 0}
!256 = !{!"0x7890580.w1.b2", !257, i64 0}
!257 = !{!"0x7890580.w2.b2", !242, i64 0}
!258 = !{!259, !259, i64 0}
!259 = !{!"0x7890580.w1.b3", !257, i64 0}
!260 = !{!261, !261, i64 0}
!261 = !{!"0x7890580.w1.b4", !262, i64 0}
!262 = !{!"0x7890580.w2.b4", !263, i64 0}
!263 = !{!"0x7890580.w4.b4", !243, i64 0}
!264 = !{!265, !265, i64 0}
!265 = !{!"0x7871ea0.w8.b0", !266, i64 0}
!266 = !{!"0x7871ea0.w16.b0", !267, i64 0}
!267 = !{!"0x7871ea0.w32.b0", !268, i64 0}
!268 = !{!"0x7871ea0.w64.b0", !269, i64 0}
!269 = !{!"0x7871ea0.w128.b0", !270, i64 0}
!270 = !{!"0x7871ea0.w256.b0", !271, i64 0}
!271 = !{!"0x7871ea0.w512.b0", !272, i64 0}
!272 = !{!"0x7871ea0.w1024.b0", !273, i64 0}
!273 = !{!"int64", !274, i64 0}
!274 = !{!"0x7871ea0", !8, i64 0}
!275 = !{!276, !276, i64 0}
!276 = !{!"0x7871ea0.w1.b0", !277, i64 0}
!277 = !{!"0x7871ea0.w2.b0", !278, i64 0}
!278 = !{!"0x7871ea0.w4.b0", !265, i64 0}
!279 = !{!280, !280, i64 0}
!280 = !{!"0x7879bc0.w1.b0", !281, i64 0}
!281 = !{!"0x7879bc0.w2.b0", !282, i64 0}
!282 = !{!"0x7879bc0.w4.b0", !283, i64 0}
!283 = !{!"0x7879bc0.w8.b0", !284, i64 0}
!284 = !{!"0x7879bc0.w16.b0", !285, i64 0}
!285 = !{!"0x7879bc0.w32.b0", !286, i64 0}
!286 = !{!"0x7879bc0.w64.b0", !287, i64 0}
!287 = !{!"0x7879bc0.w128.b0", !288, i64 0}
!288 = !{!"0x7879bc0.w256.b0", !289, i64 0}
!289 = !{!"0x7879bc0.w512.b0", !290, i64 0}
!290 = !{!"0x7879bc0.w1024.b0", !291, i64 0}
!291 = !{!"int64", !292, i64 0}
!292 = !{!"0x7879bc0", !8, i64 0}
!293 = !{!294, !294, i64 0}
!294 = !{!"0x7879bc0.w1.b1", !281, i64 0}
!295 = !{!296, !296, i64 0}
!296 = !{!"0x7879bc0.w1.b2", !297, i64 0}
!297 = !{!"0x7879bc0.w2.b2", !282, i64 0}
!298 = !{!299, !299, i64 0}
!299 = !{!"0x7879bc0.w1.b3", !297, i64 0}
!300 = !{!301, !301, i64 0}
!301 = !{!"0x7879bc0.w1.b4", !302, i64 0}
!302 = !{!"0x7879bc0.w2.b4", !303, i64 0}
!303 = !{!"0x7879bc0.w4.b4", !283, i64 0}
!304 = !{!305, !305, i64 0}
!305 = !{!"0x7879bc0.w1.b5", !302, i64 0}
!306 = !{!307, !307, i64 0}
!307 = !{!"0x786eaa0.w8.b0", !308, i64 0}
!308 = !{!"0x786eaa0.w16.b0", !309, i64 0}
!309 = !{!"0x786eaa0.w32.b0", !310, i64 0}
!310 = !{!"0x786eaa0.w64.b0", !311, i64 0}
!311 = !{!"0x786eaa0.w128.b0", !312, i64 0}
!312 = !{!"0x786eaa0.w256.b0", !313, i64 0}
!313 = !{!"0x786eaa0.w512.b0", !314, i64 0}
!314 = !{!"0x786eaa0.w1024.b0", !315, i64 0}
!315 = !{!"int64", !316, i64 0}
!316 = !{!"0x786eaa0", !8, i64 0}
!317 = !{!318, !318, i64 0}
!318 = !{!"0x786eaa0.w1.b1", !319, i64 0}
!319 = !{!"0x786eaa0.w2.b0", !320, i64 0}
!320 = !{!"0x786eaa0.w4.b0", !307, i64 0}
!321 = !{!322, !322, i64 0}
!322 = !{!"0x786eaa0.w1.b0", !319, i64 0}
!323 = !{!324, !324, i64 0}
!324 = !{!"0x7871330.w1.b0", !325, i64 0}
!325 = !{!"0x7871330.w2.b0", !326, i64 0}
!326 = !{!"0x7871330.w4.b0", !327, i64 0}
!327 = !{!"0x7871330.w8.b0", !328, i64 0}
!328 = !{!"0x7871330.w16.b0", !329, i64 0}
!329 = !{!"0x7871330.w32.b0", !330, i64 0}
!330 = !{!"0x7871330.w64.b0", !331, i64 0}
!331 = !{!"0x7871330.w128.b0", !332, i64 0}
!332 = !{!"0x7871330.w256.b0", !333, i64 0}
!333 = !{!"0x7871330.w512.b0", !334, i64 0}
!334 = !{!"0x7871330.w1024.b0", !335, i64 0}
!335 = !{!"int64", !336, i64 0}
!336 = !{!"0x7871330", !8, i64 0}
!337 = !{!338, !338, i64 0}
!338 = !{!"0x7871330.w1.b1", !325, i64 0}
!339 = !{!340, !340, i64 0}
!340 = !{!"0x7871330.w1.b2", !341, i64 0}
!341 = !{!"0x7871330.w2.b2", !326, i64 0}
!342 = !{!343, !343, i64 0}
!343 = !{!"0x7871330.w1.b3", !341, i64 0}
!344 = !{!345, !345, i64 0}
!345 = !{!"0x7871330.w1.b4", !346, i64 0}
!346 = !{!"0x7871330.w2.b4", !347, i64 0}
!347 = !{!"0x7871330.w4.b4", !327, i64 0}
!348 = !{!349, !349, i64 0}
!349 = !{!"0x7873ab0.w8.b0", !350, i64 0}
!350 = !{!"0x7873ab0.w16.b0", !351, i64 0}
!351 = !{!"0x7873ab0.w32.b0", !352, i64 0}
!352 = !{!"0x7873ab0.w64.b0", !353, i64 0}
!353 = !{!"0x7873ab0.w128.b0", !354, i64 0}
!354 = !{!"0x7873ab0.w256.b0", !355, i64 0}
!355 = !{!"0x7873ab0.w512.b0", !356, i64 0}
!356 = !{!"0x7873ab0.w1024.b0", !357, i64 0}
!357 = !{!"int64", !358, i64 0}
!358 = !{!"0x7873ab0", !8, i64 0}
!359 = !{!360, !360, i64 0}
!360 = !{!"0x7873ab0.w1.b0", !361, i64 0}
!361 = !{!"0x7873ab0.w2.b0", !362, i64 0}
!362 = !{!"0x7873ab0.w4.b0", !349, i64 0}
!363 = !{!364, !364, i64 0}
!364 = !{!"0x7874d60.w1.b0", !365, i64 0}
!365 = !{!"0x7874d60.w2.b0", !366, i64 0}
!366 = !{!"0x7874d60.w4.b0", !367, i64 0}
!367 = !{!"0x7874d60.w8.b0", !368, i64 0}
!368 = !{!"0x7874d60.w16.b0", !369, i64 0}
!369 = !{!"0x7874d60.w32.b0", !370, i64 0}
!370 = !{!"0x7874d60.w64.b0", !371, i64 0}
!371 = !{!"0x7874d60.w128.b0", !372, i64 0}
!372 = !{!"0x7874d60.w256.b0", !373, i64 0}
!373 = !{!"0x7874d60.w512.b0", !374, i64 0}
!374 = !{!"0x7874d60.w1024.b0", !375, i64 0}
!375 = !{!"int64", !376, i64 0}
!376 = !{!"0x7874d60", !8, i64 0}
!377 = !{!378, !378, i64 0}
!378 = !{!"0x7874d60.w1.b1", !365, i64 0}
!379 = !{!380, !380, i64 0}
!380 = !{!"0x7874d60.w1.b2", !381, i64 0}
!381 = !{!"0x7874d60.w2.b2", !366, i64 0}
!382 = !{!383, !383, i64 0}
!383 = !{!"0x7874d60.w1.b3", !381, i64 0}
!384 = !{!385, !385, i64 0}
!385 = !{!"0x7874d60.w1.b4", !386, i64 0}
!386 = !{!"0x7874d60.w2.b4", !387, i64 0}
!387 = !{!"0x7874d60.w4.b4", !367, i64 0}
!388 = !{!389, !389, i64 0}
!389 = !{!"0x7874db0.w8.b0", !390, i64 0}
!390 = !{!"0x7874db0.w16.b0", !391, i64 0}
!391 = !{!"0x7874db0.w32.b0", !392, i64 0}
!392 = !{!"0x7874db0.w64.b0", !393, i64 0}
!393 = !{!"0x7874db0.w128.b0", !394, i64 0}
!394 = !{!"0x7874db0.w256.b0", !395, i64 0}
!395 = !{!"0x7874db0.w512.b0", !396, i64 0}
!396 = !{!"0x7874db0.w1024.b0", !397, i64 0}
!397 = !{!"int64", !398, i64 0}
!398 = !{!"0x7874db0", !8, i64 0}
!399 = !{!400, !400, i64 0}
!400 = !{!"0x7874db0.w1.b0", !401, i64 0}
!401 = !{!"0x7874db0.w2.b0", !402, i64 0}
!402 = !{!"0x7874db0.w4.b0", !389, i64 0}
!403 = !{!404, !404, i64 0}
!404 = !{!"0x7876200.w1.b0", !405, i64 0}
!405 = !{!"0x7876200.w2.b0", !406, i64 0}
!406 = !{!"0x7876200.w4.b0", !407, i64 0}
!407 = !{!"0x7876200.w8.b0", !408, i64 0}
!408 = !{!"0x7876200.w16.b0", !409, i64 0}
!409 = !{!"0x7876200.w32.b0", !410, i64 0}
!410 = !{!"0x7876200.w64.b0", !411, i64 0}
!411 = !{!"0x7876200.w128.b0", !412, i64 0}
!412 = !{!"0x7876200.w256.b0", !413, i64 0}
!413 = !{!"0x7876200.w512.b0", !414, i64 0}
!414 = !{!"0x7876200.w1024.b0", !415, i64 0}
!415 = !{!"int64", !416, i64 0}
!416 = !{!"0x7876200", !8, i64 0}
!417 = !{!418, !418, i64 0}
!418 = !{!"0x7876200.w1.b1", !405, i64 0}
!419 = !{!420, !420, i64 0}
!420 = !{!"0x7876200.w1.b2", !421, i64 0}
!421 = !{!"0x7876200.w2.b2", !406, i64 0}
!422 = !{!423, !423, i64 0}
!423 = !{!"0x7876200.w1.b3", !421, i64 0}
!424 = !{!425, !425, i64 0}
!425 = !{!"0x7876200.w1.b4", !426, i64 0}
!426 = !{!"0x7876200.w2.b4", !427, i64 0}
!427 = !{!"0x7876200.w4.b4", !407, i64 0}
!428 = !{!429, !429, i64 0}
!429 = !{!"0x7877970.w8.b0", !430, i64 0}
!430 = !{!"0x7877970.w16.b0", !431, i64 0}
!431 = !{!"0x7877970.w32.b0", !432, i64 0}
!432 = !{!"0x7877970.w64.b0", !433, i64 0}
!433 = !{!"0x7877970.w128.b0", !434, i64 0}
!434 = !{!"0x7877970.w256.b0", !435, i64 0}
!435 = !{!"0x7877970.w512.b0", !436, i64 0}
!436 = !{!"0x7877970.w1024.b0", !437, i64 0}
!437 = !{!"int64", !438, i64 0}
!438 = !{!"0x7877970", !8, i64 0}
!439 = !{!440, !440, i64 0}
!440 = !{!"0x7877970.w1.b0", !441, i64 0}
!441 = !{!"0x7877970.w2.b0", !442, i64 0}
!442 = !{!"0x7877970.w4.b0", !429, i64 0}
!443 = !{!444, !444, i64 0}
!444 = !{!"float32", !445, i64 0}
!445 = !{!"0x786dad0", !8, i64 0}
!446 = !{!447, !447, i64 0}
!447 = !{!"float32", !448, i64 0}
!448 = !{!"0x786df90", !8, i64 0}
!449 = !{!450, !450, i64 0}
!450 = !{!"float32", !451, i64 0}
!451 = !{!"0x786dda0", !8, i64 0}
!452 = !{!453, !453, i64 0}
!453 = !{!"0x7869280.w16.b0", !454, i64 0}
!454 = !{!"0x7869280.w32.b0", !455, i64 0}
!455 = !{!"0x7869280.w64.b0", !456, i64 0}
!456 = !{!"0x7869280.w128.b0", !457, i64 0}
!457 = !{!"0x7869280.w256.b0", !458, i64 0}
!458 = !{!"0x7869280.w512.b0", !459, i64 0}
!459 = !{!"0x7869280.w1024.b0", !460, i64 0}
!460 = !{!"float32", !461, i64 0}
!461 = !{!"0x7869280", !8, i64 0}
!462 = !{!463, !463, i64 0}
!463 = !{!"float32", !464, i64 0}
!464 = !{!"0x786d690", !8, i64 0}
!465 = !{!466, !466, i64 0}
!466 = !{!"float32", !467, i64 0}
!467 = !{!"0x786d9a0", !8, i64 0}
!468 = !{!469, !469, i64 0}
!469 = !{!"float32", !470, i64 0}
!470 = !{!"0x786d8a0", !8, i64 0}
!471 = !{!460, !460, i64 0}
!472 = !{!473, !473, i64 0}
!473 = !{!"0x77f23c0.w1.b0", !474, i64 0}
!474 = !{!"0x77f23c0.w2.b0", !475, i64 0}
!475 = !{!"0x77f23c0.w4.b0", !476, i64 0}
!476 = !{!"0x77f23c0.w8.b0", !477, i64 0}
!477 = !{!"0x77f23c0.w16.b0", !478, i64 0}
!478 = !{!"0x77f23c0.w32.b0", !479, i64 0}
!479 = !{!"0x77f23c0.w64.b0", !480, i64 0}
!480 = !{!"0x77f23c0.w128.b0", !481, i64 0}
!481 = !{!"0x77f23c0.w256.b0", !482, i64 0}
!482 = !{!"0x77f23c0.w512.b0", !483, i64 0}
!483 = !{!"0x77f23c0.w1024.b0", !484, i64 0}
!484 = !{!"int32", !485, i64 0}
!485 = !{!"0x77f23c0", !8, i64 0}
!486 = !{!487, !487, i64 0}
!487 = !{!"0x77f23c0.w1.b2", !488, i64 0}
!488 = !{!"0x77f23c0.w2.b2", !475, i64 0}
!489 = !{!490, !490, i64 0}
!490 = !{!"0x77f23c0.w1.b3", !488, i64 0}
!491 = !{!492, !492, i64 0}
!492 = !{!"0x77f23c0.w1.b4", !493, i64 0}
!493 = !{!"0x77f23c0.w2.b4", !494, i64 0}
!494 = !{!"0x77f23c0.w4.b4", !476, i64 0}
!495 = !{!496, !496, i64 0}
!496 = !{!"0x77f23c0.w1.b5", !493, i64 0}
!497 = !{!498, !498, i64 0}
!498 = !{!"0x77f23c0.w1.b1", !474, i64 0}
!499 = !{!500, !500, i64 0}
!500 = !{!"0x77f3870.w1.b0", !501, i64 0}
!501 = !{!"0x77f3870.w2.b0", !502, i64 0}
!502 = !{!"0x77f3870.w4.b0", !503, i64 0}
!503 = !{!"0x77f3870.w8.b0", !504, i64 0}
!504 = !{!"0x77f3870.w16.b0", !505, i64 0}
!505 = !{!"0x77f3870.w32.b0", !506, i64 0}
!506 = !{!"0x77f3870.w64.b0", !507, i64 0}
!507 = !{!"0x77f3870.w128.b0", !508, i64 0}
!508 = !{!"0x77f3870.w256.b0", !509, i64 0}
!509 = !{!"0x77f3870.w512.b0", !510, i64 0}
!510 = !{!"0x77f3870.w1024.b0", !511, i64 0}
!511 = !{!"int64", !512, i64 0}
!512 = !{!"0x77f3870", !8, i64 0}
!513 = !{!514, !514, i64 0}
!514 = !{!"0x77f3870.w1.b1", !501, i64 0}
!515 = !{!516, !516, i64 0}
!516 = !{!"0x77f3870.w1.b2", !517, i64 0}
!517 = !{!"0x77f3870.w2.b2", !502, i64 0}
!518 = !{!519, !519, i64 0}
!519 = !{!"0x77f3870.w1.b3", !517, i64 0}
!520 = !{!521, !521, i64 0}
!521 = !{!"0x77f3870.w1.b4", !522, i64 0}
!522 = !{!"0x77f3870.w2.b4", !523, i64 0}
!523 = !{!"0x77f3870.w4.b4", !503, i64 0}
!524 = !{!525, !525, i64 0}
!525 = !{!"0x77f3b30.w8.b0", !526, i64 0}
!526 = !{!"0x77f3b30.w16.b0", !527, i64 0}
!527 = !{!"0x77f3b30.w32.b0", !528, i64 0}
!528 = !{!"0x77f3b30.w64.b0", !529, i64 0}
!529 = !{!"0x77f3b30.w128.b0", !530, i64 0}
!530 = !{!"0x77f3b30.w256.b0", !531, i64 0}
!531 = !{!"0x77f3b30.w512.b0", !532, i64 0}
!532 = !{!"0x77f3b30.w1024.b0", !533, i64 0}
!533 = !{!"int64", !534, i64 0}
!534 = !{!"0x77f3b30", !8, i64 0}
!535 = !{!536, !536, i64 0}
!536 = !{!"0x77f3b30.w1.b0", !537, i64 0}
!537 = !{!"0x77f3b30.w2.b0", !538, i64 0}
!538 = !{!"0x77f3b30.w4.b0", !525, i64 0}
!539 = !{!540, !540, i64 0}
!540 = !{!"0x77f3a40.w1.b0", !541, i64 0}
!541 = !{!"0x77f3a40.w2.b0", !542, i64 0}
!542 = !{!"0x77f3a40.w4.b0", !543, i64 0}
!543 = !{!"0x77f3a40.w8.b0", !544, i64 0}
!544 = !{!"0x77f3a40.w16.b0", !545, i64 0}
!545 = !{!"0x77f3a40.w32.b0", !546, i64 0}
!546 = !{!"0x77f3a40.w64.b0", !547, i64 0}
!547 = !{!"0x77f3a40.w128.b0", !548, i64 0}
!548 = !{!"0x77f3a40.w256.b0", !549, i64 0}
!549 = !{!"0x77f3a40.w512.b0", !550, i64 0}
!550 = !{!"0x77f3a40.w1024.b0", !551, i64 0}
!551 = !{!"int64", !552, i64 0}
!552 = !{!"0x77f3a40", !8, i64 0}
!553 = !{!554, !554, i64 0}
!554 = !{!"0x77f3a40.w1.b1", !541, i64 0}
!555 = !{!556, !556, i64 0}
!556 = !{!"0x77f3a40.w1.b2", !557, i64 0}
!557 = !{!"0x77f3a40.w2.b2", !542, i64 0}
!558 = !{!559, !559, i64 0}
!559 = !{!"0x77f3a40.w1.b3", !557, i64 0}
!560 = !{!561, !561, i64 0}
!561 = !{!"0x77f3a40.w1.b4", !562, i64 0}
!562 = !{!"0x77f3a40.w2.b4", !563, i64 0}
!563 = !{!"0x77f3a40.w4.b4", !543, i64 0}
!564 = !{!565, !565, i64 0}
!565 = !{!"0x77f3a40.w1.b5", !562, i64 0}
!566 = !{!567, !567, i64 0}
!567 = !{!"0x77f3be0.w8.b0", !568, i64 0}
!568 = !{!"0x77f3be0.w16.b0", !569, i64 0}
!569 = !{!"0x77f3be0.w32.b0", !570, i64 0}
!570 = !{!"0x77f3be0.w64.b0", !571, i64 0}
!571 = !{!"0x77f3be0.w128.b0", !572, i64 0}
!572 = !{!"0x77f3be0.w256.b0", !573, i64 0}
!573 = !{!"0x77f3be0.w512.b0", !574, i64 0}
!574 = !{!"0x77f3be0.w1024.b0", !575, i64 0}
!575 = !{!"int64", !576, i64 0}
!576 = !{!"0x77f3be0", !8, i64 0}
!577 = !{!578, !578, i64 0}
!578 = !{!"0x77f3be0.w1.b1", !579, i64 0}
!579 = !{!"0x77f3be0.w2.b0", !580, i64 0}
!580 = !{!"0x77f3be0.w4.b0", !567, i64 0}
!581 = !{!582, !582, i64 0}
!582 = !{!"0x77f3be0.w1.b0", !579, i64 0}
!583 = !{!584, !584, i64 0}
!584 = !{!"0x77f52c0.w1.b0", !585, i64 0}
!585 = !{!"0x77f52c0.w2.b0", !586, i64 0}
!586 = !{!"0x77f52c0.w4.b0", !587, i64 0}
!587 = !{!"0x77f52c0.w8.b0", !588, i64 0}
!588 = !{!"0x77f52c0.w16.b0", !589, i64 0}
!589 = !{!"0x77f52c0.w32.b0", !590, i64 0}
!590 = !{!"0x77f52c0.w64.b0", !591, i64 0}
!591 = !{!"0x77f52c0.w128.b0", !592, i64 0}
!592 = !{!"0x77f52c0.w256.b0", !593, i64 0}
!593 = !{!"0x77f52c0.w512.b0", !594, i64 0}
!594 = !{!"0x77f52c0.w1024.b0", !595, i64 0}
!595 = !{!"int64", !596, i64 0}
!596 = !{!"0x77f52c0", !8, i64 0}
!597 = !{!598, !598, i64 0}
!598 = !{!"0x77f52c0.w1.b1", !585, i64 0}
!599 = !{!600, !600, i64 0}
!600 = !{!"0x77f52c0.w1.b2", !601, i64 0}
!601 = !{!"0x77f52c0.w2.b2", !586, i64 0}
!602 = !{!603, !603, i64 0}
!603 = !{!"0x77f52c0.w1.b3", !601, i64 0}
!604 = !{!605, !605, i64 0}
!605 = !{!"0x77f52c0.w1.b4", !606, i64 0}
!606 = !{!"0x77f52c0.w2.b4", !607, i64 0}
!607 = !{!"0x77f52c0.w4.b4", !587, i64 0}
!608 = !{!609, !609, i64 0}
!609 = !{!"0x77f6a60.w8.b0", !610, i64 0}
!610 = !{!"0x77f6a60.w16.b0", !611, i64 0}
!611 = !{!"0x77f6a60.w32.b0", !612, i64 0}
!612 = !{!"0x77f6a60.w64.b0", !613, i64 0}
!613 = !{!"0x77f6a60.w128.b0", !614, i64 0}
!614 = !{!"0x77f6a60.w256.b0", !615, i64 0}
!615 = !{!"0x77f6a60.w512.b0", !616, i64 0}
!616 = !{!"0x77f6a60.w1024.b0", !617, i64 0}
!617 = !{!"int64", !618, i64 0}
!618 = !{!"0x77f6a60", !8, i64 0}
!619 = !{!620, !620, i64 0}
!620 = !{!"0x77f6a60.w1.b0", !621, i64 0}
!621 = !{!"0x77f6a60.w2.b0", !622, i64 0}
!622 = !{!"0x77f6a60.w4.b0", !609, i64 0}
!623 = !{!624, !624, i64 0}
!624 = !{!"0x77f7ec0.w1.b0", !625, i64 0}
!625 = !{!"0x77f7ec0.w2.b0", !626, i64 0}
!626 = !{!"0x77f7ec0.w4.b0", !627, i64 0}
!627 = !{!"0x77f7ec0.w8.b0", !628, i64 0}
!628 = !{!"0x77f7ec0.w16.b0", !629, i64 0}
!629 = !{!"0x77f7ec0.w32.b0", !630, i64 0}
!630 = !{!"0x77f7ec0.w64.b0", !631, i64 0}
!631 = !{!"0x77f7ec0.w128.b0", !632, i64 0}
!632 = !{!"0x77f7ec0.w256.b0", !633, i64 0}
!633 = !{!"0x77f7ec0.w512.b0", !634, i64 0}
!634 = !{!"0x77f7ec0.w1024.b0", !635, i64 0}
!635 = !{!"int64", !636, i64 0}
!636 = !{!"0x77f7ec0", !8, i64 0}
!637 = !{!638, !638, i64 0}
!638 = !{!"0x77f7ec0.w1.b1", !625, i64 0}
!639 = !{!640, !640, i64 0}
!640 = !{!"0x77f7ec0.w1.b2", !641, i64 0}
!641 = !{!"0x77f7ec0.w2.b2", !626, i64 0}
!642 = !{!643, !643, i64 0}
!643 = !{!"0x77f7ec0.w1.b3", !641, i64 0}
!644 = !{!645, !645, i64 0}
!645 = !{!"0x77f7ec0.w1.b4", !646, i64 0}
!646 = !{!"0x77f7ec0.w2.b4", !647, i64 0}
!647 = !{!"0x77f7ec0.w4.b4", !627, i64 0}
!648 = !{!649, !649, i64 0}
!649 = !{!"0x77f7f10.w8.b0", !650, i64 0}
!650 = !{!"0x77f7f10.w16.b0", !651, i64 0}
!651 = !{!"0x77f7f10.w32.b0", !652, i64 0}
!652 = !{!"0x77f7f10.w64.b0", !653, i64 0}
!653 = !{!"0x77f7f10.w128.b0", !654, i64 0}
!654 = !{!"0x77f7f10.w256.b0", !655, i64 0}
!655 = !{!"0x77f7f10.w512.b0", !656, i64 0}
!656 = !{!"0x77f7f10.w1024.b0", !657, i64 0}
!657 = !{!"int64", !658, i64 0}
!658 = !{!"0x77f7f10", !8, i64 0}
!659 = !{!660, !660, i64 0}
!660 = !{!"0x77f7f10.w1.b0", !661, i64 0}
!661 = !{!"0x77f7f10.w2.b0", !662, i64 0}
!662 = !{!"0x77f7f10.w4.b0", !649, i64 0}
!663 = !{!664, !664, i64 0}
!664 = !{!"0x77f9320.w1.b0", !665, i64 0}
!665 = !{!"0x77f9320.w2.b0", !666, i64 0}
!666 = !{!"0x77f9320.w4.b0", !667, i64 0}
!667 = !{!"0x77f9320.w8.b0", !668, i64 0}
!668 = !{!"0x77f9320.w16.b0", !669, i64 0}
!669 = !{!"0x77f9320.w32.b0", !670, i64 0}
!670 = !{!"0x77f9320.w64.b0", !671, i64 0}
!671 = !{!"0x77f9320.w128.b0", !672, i64 0}
!672 = !{!"0x77f9320.w256.b0", !673, i64 0}
!673 = !{!"0x77f9320.w512.b0", !674, i64 0}
!674 = !{!"0x77f9320.w1024.b0", !675, i64 0}
!675 = !{!"int64", !676, i64 0}
!676 = !{!"0x77f9320", !8, i64 0}
!677 = !{!678, !678, i64 0}
!678 = !{!"0x77f9320.w1.b1", !665, i64 0}
!679 = !{!680, !680, i64 0}
!680 = !{!"0x77f9320.w1.b2", !681, i64 0}
!681 = !{!"0x77f9320.w2.b2", !666, i64 0}
!682 = !{!683, !683, i64 0}
!683 = !{!"0x77f9320.w1.b3", !681, i64 0}
!684 = !{!685, !685, i64 0}
!685 = !{!"0x77f9320.w1.b4", !686, i64 0}
!686 = !{!"0x77f9320.w2.b4", !687, i64 0}
!687 = !{!"0x77f9320.w4.b4", !667, i64 0}
!688 = !{!689, !689, i64 0}
!689 = !{!"0x77faa90.w8.b0", !690, i64 0}
!690 = !{!"0x77faa90.w16.b0", !691, i64 0}
!691 = !{!"0x77faa90.w32.b0", !692, i64 0}
!692 = !{!"0x77faa90.w64.b0", !693, i64 0}
!693 = !{!"0x77faa90.w128.b0", !694, i64 0}
!694 = !{!"0x77faa90.w256.b0", !695, i64 0}
!695 = !{!"0x77faa90.w512.b0", !696, i64 0}
!696 = !{!"0x77faa90.w1024.b0", !697, i64 0}
!697 = !{!"int64", !698, i64 0}
!698 = !{!"0x77faa90", !8, i64 0}
!699 = !{!700, !700, i64 0}
!700 = !{!"0x77faa90.w1.b0", !701, i64 0}
!701 = !{!"0x77faa90.w2.b0", !702, i64 0}
!702 = !{!"0x77faa90.w4.b0", !689, i64 0}
!703 = !{!704, !704, i64 0}
!704 = !{!"0x77fbd50.w1.b0", !705, i64 0}
!705 = !{!"0x77fbd50.w2.b0", !706, i64 0}
!706 = !{!"0x77fbd50.w4.b0", !707, i64 0}
!707 = !{!"0x77fbd50.w8.b0", !708, i64 0}
!708 = !{!"0x77fbd50.w16.b0", !709, i64 0}
!709 = !{!"0x77fbd50.w32.b0", !710, i64 0}
!710 = !{!"0x77fbd50.w64.b0", !711, i64 0}
!711 = !{!"0x77fbd50.w128.b0", !712, i64 0}
!712 = !{!"0x77fbd50.w256.b0", !713, i64 0}
!713 = !{!"0x77fbd50.w512.b0", !714, i64 0}
!714 = !{!"0x77fbd50.w1024.b0", !715, i64 0}
!715 = !{!"int64", !716, i64 0}
!716 = !{!"0x77fbd50", !8, i64 0}
!717 = !{!718, !718, i64 0}
!718 = !{!"0x77fbd50.w1.b1", !705, i64 0}
!719 = !{!720, !720, i64 0}
!720 = !{!"0x77fbd50.w1.b2", !721, i64 0}
!721 = !{!"0x77fbd50.w2.b2", !706, i64 0}
!722 = !{!723, !723, i64 0}
!723 = !{!"0x77fbd50.w1.b3", !721, i64 0}
!724 = !{!725, !725, i64 0}
!725 = !{!"0x77fbd50.w1.b4", !726, i64 0}
!726 = !{!"0x77fbd50.w2.b4", !727, i64 0}
!727 = !{!"0x77fbd50.w4.b4", !707, i64 0}
!728 = !{!729, !729, i64 0}
!729 = !{!"0x77fd160.w8.b0", !730, i64 0}
!730 = !{!"0x77fd160.w16.b0", !731, i64 0}
!731 = !{!"0x77fd160.w32.b0", !732, i64 0}
!732 = !{!"0x77fd160.w64.b0", !733, i64 0}
!733 = !{!"0x77fd160.w128.b0", !734, i64 0}
!734 = !{!"0x77fd160.w256.b0", !735, i64 0}
!735 = !{!"0x77fd160.w512.b0", !736, i64 0}
!736 = !{!"0x77fd160.w1024.b0", !737, i64 0}
!737 = !{!"int64", !738, i64 0}
!738 = !{!"0x77fd160", !8, i64 0}
!739 = !{!740, !740, i64 0}
!740 = !{!"0x77fd160.w1.b0", !741, i64 0}
!741 = !{!"0x77fd160.w2.b0", !742, i64 0}
!742 = !{!"0x77fd160.w4.b0", !729, i64 0}
!743 = !{!744, !744, i64 0}
!744 = !{!"float32", !745, i64 0}
!745 = !{!"0x7aa9460", !8, i64 0}
!746 = !{!747, !747, i64 0}
!747 = !{!"float32", !748, i64 0}
!748 = !{!"0x7aa9410", !8, i64 0}
!749 = !{!750, !750, i64 0}
!750 = !{!"float32", !751, i64 0}
!751 = !{!"0x7aa24c0", !8, i64 0}
!752 = !{!753, !753, i64 0}
!753 = !{!"float32", !754, i64 0}
!754 = !{!"0x7aa98f0", !8, i64 0}
!755 = !{!756, !756, i64 0}
!756 = !{!"float32", !757, i64 0}
!757 = !{!"0x7aa4480", !8, i64 0}
!758 = !{!759, !759, i64 0}
!759 = !{!"float32", !760, i64 0}
!760 = !{!"0x7aa9a00", !8, i64 0}
!761 = !{!762, !762, i64 0}
!762 = !{!"float32", !763, i64 0}
!763 = !{!"0x7aa2d90", !8, i64 0}
!764 = !{!765, !765, i64 0}
!765 = !{!"0x79f8e20.w1.b0", !766, i64 0}
!766 = !{!"0x79f8e20.w2.b0", !767, i64 0}
!767 = !{!"0x79f8e20.w4.b0", !768, i64 0}
!768 = !{!"0x79f8e20.w8.b0", !769, i64 0}
!769 = !{!"0x79f8e20.w16.b0", !770, i64 0}
!770 = !{!"0x79f8e20.w32.b0", !771, i64 0}
!771 = !{!"0x79f8e20.w64.b0", !772, i64 0}
!772 = !{!"0x79f8e20.w128.b0", !773, i64 0}
!773 = !{!"0x79f8e20.w256.b0", !774, i64 0}
!774 = !{!"0x79f8e20.w512.b0", !775, i64 0}
!775 = !{!"0x79f8e20.w1024.b0", !776, i64 0}
!776 = !{!"int32", !777, i64 0}
!777 = !{!"0x79f8e20", !8, i64 0}
!778 = !{!779, !779, i64 0}
!779 = !{!"0x79f8e20.w1.b2", !780, i64 0}
!780 = !{!"0x79f8e20.w2.b2", !767, i64 0}
!781 = !{!782, !782, i64 0}
!782 = !{!"0x79f8e20.w1.b3", !780, i64 0}
!783 = !{!784, !784, i64 0}
!784 = !{!"0x79f8e20.w1.b4", !785, i64 0}
!785 = !{!"0x79f8e20.w2.b4", !786, i64 0}
!786 = !{!"0x79f8e20.w4.b4", !768, i64 0}
!787 = !{!788, !788, i64 0}
!788 = !{!"0x79f8e20.w1.b1", !766, i64 0}
!789 = !{!790, !790, i64 0}
!790 = !{!"0x79f7810.w1.b0", !791, i64 0}
!791 = !{!"0x79f7810.w2.b0", !792, i64 0}
!792 = !{!"0x79f7810.w4.b0", !793, i64 0}
!793 = !{!"0x79f7810.w8.b0", !794, i64 0}
!794 = !{!"0x79f7810.w16.b0", !795, i64 0}
!795 = !{!"0x79f7810.w32.b0", !796, i64 0}
!796 = !{!"0x79f7810.w64.b0", !797, i64 0}
!797 = !{!"0x79f7810.w128.b0", !798, i64 0}
!798 = !{!"0x79f7810.w256.b0", !799, i64 0}
!799 = !{!"0x79f7810.w512.b0", !800, i64 0}
!800 = !{!"0x79f7810.w1024.b0", !801, i64 0}
!801 = !{!"int64", !802, i64 0}
!802 = !{!"0x79f7810", !8, i64 0}
!803 = !{!804, !804, i64 0}
!804 = !{!"0x79f7810.w1.b1", !791, i64 0}
!805 = !{!806, !806, i64 0}
!806 = !{!"0x79f7810.w1.b2", !807, i64 0}
!807 = !{!"0x79f7810.w2.b2", !792, i64 0}
!808 = !{!809, !809, i64 0}
!809 = !{!"0x79f7810.w1.b3", !807, i64 0}
!810 = !{!811, !811, i64 0}
!811 = !{!"0x79f7810.w1.b4", !812, i64 0}
!812 = !{!"0x79f7810.w2.b4", !813, i64 0}
!813 = !{!"0x79f7810.w4.b4", !793, i64 0}
!814 = !{!815, !815, i64 0}
!815 = !{!"0x79f9d80.w8.b0", !816, i64 0}
!816 = !{!"0x79f9d80.w16.b0", !817, i64 0}
!817 = !{!"0x79f9d80.w32.b0", !818, i64 0}
!818 = !{!"0x79f9d80.w64.b0", !819, i64 0}
!819 = !{!"0x79f9d80.w128.b0", !820, i64 0}
!820 = !{!"0x79f9d80.w256.b0", !821, i64 0}
!821 = !{!"0x79f9d80.w512.b0", !822, i64 0}
!822 = !{!"0x79f9d80.w1024.b0", !823, i64 0}
!823 = !{!"int64", !824, i64 0}
!824 = !{!"0x79f9d80", !8, i64 0}
!825 = !{!826, !826, i64 0}
!826 = !{!"0x79f9d80.w1.b0", !827, i64 0}
!827 = !{!"0x79f9d80.w2.b0", !828, i64 0}
!828 = !{!"0x79f9d80.w4.b0", !815, i64 0}
!829 = !{!830, !830, i64 0}
!830 = !{!"0x79f9b90.w1.b0", !831, i64 0}
!831 = !{!"0x79f9b90.w2.b0", !832, i64 0}
!832 = !{!"0x79f9b90.w4.b0", !833, i64 0}
!833 = !{!"0x79f9b90.w8.b0", !834, i64 0}
!834 = !{!"0x79f9b90.w16.b0", !835, i64 0}
!835 = !{!"0x79f9b90.w32.b0", !836, i64 0}
!836 = !{!"0x79f9b90.w64.b0", !837, i64 0}
!837 = !{!"0x79f9b90.w128.b0", !838, i64 0}
!838 = !{!"0x79f9b90.w256.b0", !839, i64 0}
!839 = !{!"0x79f9b90.w512.b0", !840, i64 0}
!840 = !{!"0x79f9b90.w1024.b0", !841, i64 0}
!841 = !{!"int64", !842, i64 0}
!842 = !{!"0x79f9b90", !8, i64 0}
!843 = !{!844, !844, i64 0}
!844 = !{!"0x79f9b90.w1.b1", !831, i64 0}
!845 = !{!846, !846, i64 0}
!846 = !{!"0x79f9b90.w1.b2", !847, i64 0}
!847 = !{!"0x79f9b90.w2.b2", !832, i64 0}
!848 = !{!849, !849, i64 0}
!849 = !{!"0x79f9b90.w1.b3", !847, i64 0}
!850 = !{!851, !851, i64 0}
!851 = !{!"0x79f9b90.w1.b4", !852, i64 0}
!852 = !{!"0x79f9b90.w2.b4", !853, i64 0}
!853 = !{!"0x79f9b90.w4.b4", !833, i64 0}
!854 = !{!855, !855, i64 0}
!855 = !{!"0x79f9b90.w1.b5", !852, i64 0}
!856 = !{!857, !857, i64 0}
!857 = !{!"0x79f7a40.w8.b0", !858, i64 0}
!858 = !{!"0x79f7a40.w16.b0", !859, i64 0}
!859 = !{!"0x79f7a40.w32.b0", !860, i64 0}
!860 = !{!"0x79f7a40.w64.b0", !861, i64 0}
!861 = !{!"0x79f7a40.w128.b0", !862, i64 0}
!862 = !{!"0x79f7a40.w256.b0", !863, i64 0}
!863 = !{!"0x79f7a40.w512.b0", !864, i64 0}
!864 = !{!"0x79f7a40.w1024.b0", !865, i64 0}
!865 = !{!"int64", !866, i64 0}
!866 = !{!"0x79f7a40", !8, i64 0}
!867 = !{!868, !868, i64 0}
!868 = !{!"0x79f7a40.w1.b1", !869, i64 0}
!869 = !{!"0x79f7a40.w2.b0", !870, i64 0}
!870 = !{!"0x79f7a40.w4.b0", !857, i64 0}
!871 = !{!872, !872, i64 0}
!872 = !{!"0x79f7a40.w1.b0", !869, i64 0}
!873 = !{!874, !874, i64 0}
!874 = !{!"0x79fb4f0.w1.b0", !875, i64 0}
!875 = !{!"0x79fb4f0.w2.b0", !876, i64 0}
!876 = !{!"0x79fb4f0.w4.b0", !877, i64 0}
!877 = !{!"0x79fb4f0.w8.b0", !878, i64 0}
!878 = !{!"0x79fb4f0.w16.b0", !879, i64 0}
!879 = !{!"0x79fb4f0.w32.b0", !880, i64 0}
!880 = !{!"0x79fb4f0.w64.b0", !881, i64 0}
!881 = !{!"0x79fb4f0.w128.b0", !882, i64 0}
!882 = !{!"0x79fb4f0.w256.b0", !883, i64 0}
!883 = !{!"0x79fb4f0.w512.b0", !884, i64 0}
!884 = !{!"0x79fb4f0.w1024.b0", !885, i64 0}
!885 = !{!"int64", !886, i64 0}
!886 = !{!"0x79fb4f0", !8, i64 0}
!887 = !{!888, !888, i64 0}
!888 = !{!"0x79fb4f0.w1.b1", !875, i64 0}
!889 = !{!890, !890, i64 0}
!890 = !{!"0x79fb4f0.w1.b2", !891, i64 0}
!891 = !{!"0x79fb4f0.w2.b2", !876, i64 0}
!892 = !{!893, !893, i64 0}
!893 = !{!"0x79fb4f0.w1.b3", !891, i64 0}
!894 = !{!895, !895, i64 0}
!895 = !{!"0x79fb4f0.w1.b4", !896, i64 0}
!896 = !{!"0x79fb4f0.w2.b4", !897, i64 0}
!897 = !{!"0x79fb4f0.w4.b4", !877, i64 0}
!898 = !{!899, !899, i64 0}
!899 = !{!"0x79fcc90.w8.b0", !900, i64 0}
!900 = !{!"0x79fcc90.w16.b0", !901, i64 0}
!901 = !{!"0x79fcc90.w32.b0", !902, i64 0}
!902 = !{!"0x79fcc90.w64.b0", !903, i64 0}
!903 = !{!"0x79fcc90.w128.b0", !904, i64 0}
!904 = !{!"0x79fcc90.w256.b0", !905, i64 0}
!905 = !{!"0x79fcc90.w512.b0", !906, i64 0}
!906 = !{!"0x79fcc90.w1024.b0", !907, i64 0}
!907 = !{!"int64", !908, i64 0}
!908 = !{!"0x79fcc90", !8, i64 0}
!909 = !{!910, !910, i64 0}
!910 = !{!"0x79fcc90.w1.b0", !911, i64 0}
!911 = !{!"0x79fcc90.w2.b0", !912, i64 0}
!912 = !{!"0x79fcc90.w4.b0", !899, i64 0}
!913 = !{!914, !914, i64 0}
!914 = !{!"0x79fe0f0.w1.b0", !915, i64 0}
!915 = !{!"0x79fe0f0.w2.b0", !916, i64 0}
!916 = !{!"0x79fe0f0.w4.b0", !917, i64 0}
!917 = !{!"0x79fe0f0.w8.b0", !918, i64 0}
!918 = !{!"0x79fe0f0.w16.b0", !919, i64 0}
!919 = !{!"0x79fe0f0.w32.b0", !920, i64 0}
!920 = !{!"0x79fe0f0.w64.b0", !921, i64 0}
!921 = !{!"0x79fe0f0.w128.b0", !922, i64 0}
!922 = !{!"0x79fe0f0.w256.b0", !923, i64 0}
!923 = !{!"0x79fe0f0.w512.b0", !924, i64 0}
!924 = !{!"0x79fe0f0.w1024.b0", !925, i64 0}
!925 = !{!"int64", !926, i64 0}
!926 = !{!"0x79fe0f0", !8, i64 0}
!927 = !{!928, !928, i64 0}
!928 = !{!"0x79fe0f0.w1.b1", !915, i64 0}
!929 = !{!930, !930, i64 0}
!930 = !{!"0x79fe0f0.w1.b2", !931, i64 0}
!931 = !{!"0x79fe0f0.w2.b2", !916, i64 0}
!932 = !{!933, !933, i64 0}
!933 = !{!"0x79fe0f0.w1.b3", !931, i64 0}
!934 = !{!935, !935, i64 0}
!935 = !{!"0x79fe0f0.w1.b4", !936, i64 0}
!936 = !{!"0x79fe0f0.w2.b4", !937, i64 0}
!937 = !{!"0x79fe0f0.w4.b4", !917, i64 0}
!938 = !{!939, !939, i64 0}
!939 = !{!"0x79fe140.w8.b0", !940, i64 0}
!940 = !{!"0x79fe140.w16.b0", !941, i64 0}
!941 = !{!"0x79fe140.w32.b0", !942, i64 0}
!942 = !{!"0x79fe140.w64.b0", !943, i64 0}
!943 = !{!"0x79fe140.w128.b0", !944, i64 0}
!944 = !{!"0x79fe140.w256.b0", !945, i64 0}
!945 = !{!"0x79fe140.w512.b0", !946, i64 0}
!946 = !{!"0x79fe140.w1024.b0", !947, i64 0}
!947 = !{!"int64", !948, i64 0}
!948 = !{!"0x79fe140", !8, i64 0}
!949 = !{!950, !950, i64 0}
!950 = !{!"0x79fe140.w1.b0", !951, i64 0}
!951 = !{!"0x79fe140.w2.b0", !952, i64 0}
!952 = !{!"0x79fe140.w4.b0", !939, i64 0}
!953 = !{!954, !954, i64 0}
!954 = !{!"0x79ff550.w1.b0", !955, i64 0}
!955 = !{!"0x79ff550.w2.b0", !956, i64 0}
!956 = !{!"0x79ff550.w4.b0", !957, i64 0}
!957 = !{!"0x79ff550.w8.b0", !958, i64 0}
!958 = !{!"0x79ff550.w16.b0", !959, i64 0}
!959 = !{!"0x79ff550.w32.b0", !960, i64 0}
!960 = !{!"0x79ff550.w64.b0", !961, i64 0}
!961 = !{!"0x79ff550.w128.b0", !962, i64 0}
!962 = !{!"0x79ff550.w256.b0", !963, i64 0}
!963 = !{!"0x79ff550.w512.b0", !964, i64 0}
!964 = !{!"0x79ff550.w1024.b0", !965, i64 0}
!965 = !{!"int64", !966, i64 0}
!966 = !{!"0x79ff550", !8, i64 0}
!967 = !{!968, !968, i64 0}
!968 = !{!"0x79ff550.w1.b1", !955, i64 0}
!969 = !{!970, !970, i64 0}
!970 = !{!"0x79ff550.w1.b2", !971, i64 0}
!971 = !{!"0x79ff550.w2.b2", !956, i64 0}
!972 = !{!973, !973, i64 0}
!973 = !{!"0x79ff550.w1.b3", !971, i64 0}
!974 = !{!975, !975, i64 0}
!975 = !{!"0x79ff550.w1.b4", !976, i64 0}
!976 = !{!"0x79ff550.w2.b4", !977, i64 0}
!977 = !{!"0x79ff550.w4.b4", !957, i64 0}
!978 = !{!979, !979, i64 0}
!979 = !{!"0x7a00cc0.w8.b0", !980, i64 0}
!980 = !{!"0x7a00cc0.w16.b0", !981, i64 0}
!981 = !{!"0x7a00cc0.w32.b0", !982, i64 0}
!982 = !{!"0x7a00cc0.w64.b0", !983, i64 0}
!983 = !{!"0x7a00cc0.w128.b0", !984, i64 0}
!984 = !{!"0x7a00cc0.w256.b0", !985, i64 0}
!985 = !{!"0x7a00cc0.w512.b0", !986, i64 0}
!986 = !{!"0x7a00cc0.w1024.b0", !987, i64 0}
!987 = !{!"int64", !988, i64 0}
!988 = !{!"0x7a00cc0", !8, i64 0}
!989 = !{!990, !990, i64 0}
!990 = !{!"0x7a00cc0.w1.b0", !991, i64 0}
!991 = !{!"0x7a00cc0.w2.b0", !992, i64 0}
!992 = !{!"0x7a00cc0.w4.b0", !979, i64 0}
!993 = !{!994, !994, i64 0}
!994 = !{!"float32", !995, i64 0}
!995 = !{!"0x79f17b0", !8, i64 0}
!996 = !{!997, !997, i64 0}
!997 = !{!"float32", !998, i64 0}
!998 = !{!"0x79f1210", !8, i64 0}
!999 = !{!1000, !1000, i64 0}
!1000 = !{!"float32", !1001, i64 0}
!1001 = !{!"0x79f11c0", !8, i64 0}
!1002 = !{!1003, !1003, i64 0}
!1003 = !{!"float32", !1004, i64 0}
!1004 = !{!"0x79f12b0", !8, i64 0}
!1005 = !{!1006, !1006, i64 0}
!1006 = !{!"float32", !1007, i64 0}
!1007 = !{!"0x79eabf0", !8, i64 0}
!1008 = !{!1009, !1009, i64 0}
!1009 = !{!"0x1afa7190.w1.b0", !1010, i64 0}
!1010 = !{!"0x1afa7190.w2.b0", !1011, i64 0}
!1011 = !{!"0x1afa7190.w4.b0", !1012, i64 0}
!1012 = !{!"0x1afa7190.w8.b0", !1013, i64 0}
!1013 = !{!"0x1afa7190.w16.b0", !1014, i64 0}
!1014 = !{!"0x1afa7190.w32.b0", !1015, i64 0}
!1015 = !{!"0x1afa7190.w64.b0", !1016, i64 0}
!1016 = !{!"0x1afa7190.w128.b0", !1017, i64 0}
!1017 = !{!"0x1afa7190.w256.b0", !1018, i64 0}
!1018 = !{!"0x1afa7190.w512.b0", !1019, i64 0}
!1019 = !{!"0x1afa7190.w1024.b0", !1020, i64 0}
!1020 = !{!"int32", !1021, i64 0}
!1021 = !{!"0x1afa7190", !8, i64 0}
!1022 = !{!1023, !1023, i64 0}
!1023 = !{!"0x1afa7190.w1.b2", !1024, i64 0}
!1024 = !{!"0x1afa7190.w2.b2", !1011, i64 0}
!1025 = !{!1026, !1026, i64 0}
!1026 = !{!"0x1afa7190.w1.b3", !1024, i64 0}
!1027 = !{!1028, !1028, i64 0}
!1028 = !{!"0x1afa7190.w1.b4", !1029, i64 0}
!1029 = !{!"0x1afa7190.w2.b4", !1030, i64 0}
!1030 = !{!"0x1afa7190.w4.b4", !1012, i64 0}
!1031 = !{!1032, !1032, i64 0}
!1032 = !{!"0x1afa7190.w1.b5", !1029, i64 0}
!1033 = !{!1034, !1034, i64 0}
!1034 = !{!"0x1afa7190.w1.b1", !1010, i64 0}
!1035 = !{!1036, !1036, i64 0}
!1036 = !{!"0x14029cd0.w1.b0", !1037, i64 0}
!1037 = !{!"0x14029cd0.w2.b0", !1038, i64 0}
!1038 = !{!"0x14029cd0.w4.b0", !1039, i64 0}
!1039 = !{!"0x14029cd0.w8.b0", !1040, i64 0}
!1040 = !{!"0x14029cd0.w16.b0", !1041, i64 0}
!1041 = !{!"0x14029cd0.w32.b0", !1042, i64 0}
!1042 = !{!"0x14029cd0.w64.b0", !1043, i64 0}
!1043 = !{!"0x14029cd0.w128.b0", !1044, i64 0}
!1044 = !{!"0x14029cd0.w256.b0", !1045, i64 0}
!1045 = !{!"0x14029cd0.w512.b0", !1046, i64 0}
!1046 = !{!"0x14029cd0.w1024.b0", !1047, i64 0}
!1047 = !{!"int64", !1048, i64 0}
!1048 = !{!"0x14029cd0", !8, i64 0}
!1049 = !{!1050, !1050, i64 0}
!1050 = !{!"0x14029cd0.w1.b1", !1037, i64 0}
!1051 = !{!1052, !1052, i64 0}
!1052 = !{!"0x14029cd0.w1.b2", !1053, i64 0}
!1053 = !{!"0x14029cd0.w2.b2", !1038, i64 0}
!1054 = !{!1055, !1055, i64 0}
!1055 = !{!"0x14029cd0.w1.b3", !1053, i64 0}
!1056 = !{!1057, !1057, i64 0}
!1057 = !{!"0x14029cd0.w1.b4", !1058, i64 0}
!1058 = !{!"0x14029cd0.w2.b4", !1059, i64 0}
!1059 = !{!"0x14029cd0.w4.b4", !1039, i64 0}
!1060 = !{!1061, !1061, i64 0}
!1061 = !{!"0x14029fe0.w8.b0", !1062, i64 0}
!1062 = !{!"0x14029fe0.w16.b0", !1063, i64 0}
!1063 = !{!"0x14029fe0.w32.b0", !1064, i64 0}
!1064 = !{!"0x14029fe0.w64.b0", !1065, i64 0}
!1065 = !{!"0x14029fe0.w128.b0", !1066, i64 0}
!1066 = !{!"0x14029fe0.w256.b0", !1067, i64 0}
!1067 = !{!"0x14029fe0.w512.b0", !1068, i64 0}
!1068 = !{!"0x14029fe0.w1024.b0", !1069, i64 0}
!1069 = !{!"int64", !1070, i64 0}
!1070 = !{!"0x14029fe0", !8, i64 0}
!1071 = !{!1072, !1072, i64 0}
!1072 = !{!"0x14029fe0.w1.b0", !1073, i64 0}
!1073 = !{!"0x14029fe0.w2.b0", !1074, i64 0}
!1074 = !{!"0x14029fe0.w4.b0", !1061, i64 0}
!1075 = !{!1076, !1076, i64 0}
!1076 = !{!"0x1402a1d0.w1.b0", !1077, i64 0}
!1077 = !{!"0x1402a1d0.w2.b0", !1078, i64 0}
!1078 = !{!"0x1402a1d0.w4.b0", !1079, i64 0}
!1079 = !{!"0x1402a1d0.w8.b0", !1080, i64 0}
!1080 = !{!"0x1402a1d0.w16.b0", !1081, i64 0}
!1081 = !{!"0x1402a1d0.w32.b0", !1082, i64 0}
!1082 = !{!"0x1402a1d0.w64.b0", !1083, i64 0}
!1083 = !{!"0x1402a1d0.w128.b0", !1084, i64 0}
!1084 = !{!"0x1402a1d0.w256.b0", !1085, i64 0}
!1085 = !{!"0x1402a1d0.w512.b0", !1086, i64 0}
!1086 = !{!"0x1402a1d0.w1024.b0", !1087, i64 0}
!1087 = !{!"int64", !1088, i64 0}
!1088 = !{!"0x1402a1d0", !8, i64 0}
!1089 = !{!1090, !1090, i64 0}
!1090 = !{!"0x1402a1d0.w1.b1", !1077, i64 0}
!1091 = !{!1092, !1092, i64 0}
!1092 = !{!"0x1402a1d0.w1.b2", !1093, i64 0}
!1093 = !{!"0x1402a1d0.w2.b2", !1078, i64 0}
!1094 = !{!1095, !1095, i64 0}
!1095 = !{!"0x1402a1d0.w1.b3", !1093, i64 0}
!1096 = !{!1097, !1097, i64 0}
!1097 = !{!"0x1402a1d0.w1.b4", !1098, i64 0}
!1098 = !{!"0x1402a1d0.w2.b4", !1099, i64 0}
!1099 = !{!"0x1402a1d0.w4.b4", !1079, i64 0}
!1100 = !{!1101, !1101, i64 0}
!1101 = !{!"0x1402a1d0.w1.b5", !1098, i64 0}
!1102 = !{!1103, !1103, i64 0}
!1103 = !{!"0x14029d80.w8.b0", !1104, i64 0}
!1104 = !{!"0x14029d80.w16.b0", !1105, i64 0}
!1105 = !{!"0x14029d80.w32.b0", !1106, i64 0}
!1106 = !{!"0x14029d80.w64.b0", !1107, i64 0}
!1107 = !{!"0x14029d80.w128.b0", !1108, i64 0}
!1108 = !{!"0x14029d80.w256.b0", !1109, i64 0}
!1109 = !{!"0x14029d80.w512.b0", !1110, i64 0}
!1110 = !{!"0x14029d80.w1024.b0", !1111, i64 0}
!1111 = !{!"int64", !1112, i64 0}
!1112 = !{!"0x14029d80", !8, i64 0}
!1113 = !{!1114, !1114, i64 0}
!1114 = !{!"0x14029d80.w1.b1", !1115, i64 0}
!1115 = !{!"0x14029d80.w2.b0", !1116, i64 0}
!1116 = !{!"0x14029d80.w4.b0", !1103, i64 0}
!1117 = !{!1118, !1118, i64 0}
!1118 = !{!"0x14029d80.w1.b0", !1115, i64 0}
!1119 = !{!1120, !1120, i64 0}
!1120 = !{!"0x1402c240.w1.b0", !1121, i64 0}
!1121 = !{!"0x1402c240.w2.b0", !1122, i64 0}
!1122 = !{!"0x1402c240.w4.b0", !1123, i64 0}
!1123 = !{!"0x1402c240.w8.b0", !1124, i64 0}
!1124 = !{!"0x1402c240.w16.b0", !1125, i64 0}
!1125 = !{!"0x1402c240.w32.b0", !1126, i64 0}
!1126 = !{!"0x1402c240.w64.b0", !1127, i64 0}
!1127 = !{!"0x1402c240.w128.b0", !1128, i64 0}
!1128 = !{!"0x1402c240.w256.b0", !1129, i64 0}
!1129 = !{!"0x1402c240.w512.b0", !1130, i64 0}
!1130 = !{!"0x1402c240.w1024.b0", !1131, i64 0}
!1131 = !{!"int64", !1132, i64 0}
!1132 = !{!"0x1402c240", !8, i64 0}
!1133 = !{!1134, !1134, i64 0}
!1134 = !{!"0x1402c240.w1.b1", !1121, i64 0}
!1135 = !{!1136, !1136, i64 0}
!1136 = !{!"0x1402c240.w1.b2", !1137, i64 0}
!1137 = !{!"0x1402c240.w2.b2", !1122, i64 0}
!1138 = !{!1139, !1139, i64 0}
!1139 = !{!"0x1402c240.w1.b3", !1137, i64 0}
!1140 = !{!1141, !1141, i64 0}
!1141 = !{!"0x1402c240.w1.b4", !1142, i64 0}
!1142 = !{!"0x1402c240.w2.b4", !1143, i64 0}
!1143 = !{!"0x1402c240.w4.b4", !1123, i64 0}
!1144 = !{!1145, !1145, i64 0}
!1145 = !{!"0x1402d3f0.w8.b0", !1146, i64 0}
!1146 = !{!"0x1402d3f0.w16.b0", !1147, i64 0}
!1147 = !{!"0x1402d3f0.w32.b0", !1148, i64 0}
!1148 = !{!"0x1402d3f0.w64.b0", !1149, i64 0}
!1149 = !{!"0x1402d3f0.w128.b0", !1150, i64 0}
!1150 = !{!"0x1402d3f0.w256.b0", !1151, i64 0}
!1151 = !{!"0x1402d3f0.w512.b0", !1152, i64 0}
!1152 = !{!"0x1402d3f0.w1024.b0", !1153, i64 0}
!1153 = !{!"int64", !1154, i64 0}
!1154 = !{!"0x1402d3f0", !8, i64 0}
!1155 = !{!1156, !1156, i64 0}
!1156 = !{!"0x1402d3f0.w1.b0", !1157, i64 0}
!1157 = !{!"0x1402d3f0.w2.b0", !1158, i64 0}
!1158 = !{!"0x1402d3f0.w4.b0", !1145, i64 0}
!1159 = !{!1160, !1160, i64 0}
!1160 = !{!"0x1402e850.w1.b0", !1161, i64 0}
!1161 = !{!"0x1402e850.w2.b0", !1162, i64 0}
!1162 = !{!"0x1402e850.w4.b0", !1163, i64 0}
!1163 = !{!"0x1402e850.w8.b0", !1164, i64 0}
!1164 = !{!"0x1402e850.w16.b0", !1165, i64 0}
!1165 = !{!"0x1402e850.w32.b0", !1166, i64 0}
!1166 = !{!"0x1402e850.w64.b0", !1167, i64 0}
!1167 = !{!"0x1402e850.w128.b0", !1168, i64 0}
!1168 = !{!"0x1402e850.w256.b0", !1169, i64 0}
!1169 = !{!"0x1402e850.w512.b0", !1170, i64 0}
!1170 = !{!"0x1402e850.w1024.b0", !1171, i64 0}
!1171 = !{!"int64", !1172, i64 0}
!1172 = !{!"0x1402e850", !8, i64 0}
!1173 = !{!1174, !1174, i64 0}
!1174 = !{!"0x1402e850.w1.b1", !1161, i64 0}
!1175 = !{!1176, !1176, i64 0}
!1176 = !{!"0x1402e850.w1.b2", !1177, i64 0}
!1177 = !{!"0x1402e850.w2.b2", !1162, i64 0}
!1178 = !{!1179, !1179, i64 0}
!1179 = !{!"0x1402e850.w1.b3", !1177, i64 0}
!1180 = !{!1181, !1181, i64 0}
!1181 = !{!"0x1402e850.w1.b4", !1182, i64 0}
!1182 = !{!"0x1402e850.w2.b4", !1183, i64 0}
!1183 = !{!"0x1402e850.w4.b4", !1163, i64 0}
!1184 = !{!1185, !1185, i64 0}
!1185 = !{!"0x1402e8a0.w8.b0", !1186, i64 0}
!1186 = !{!"0x1402e8a0.w16.b0", !1187, i64 0}
!1187 = !{!"0x1402e8a0.w32.b0", !1188, i64 0}
!1188 = !{!"0x1402e8a0.w64.b0", !1189, i64 0}
!1189 = !{!"0x1402e8a0.w128.b0", !1190, i64 0}
!1190 = !{!"0x1402e8a0.w256.b0", !1191, i64 0}
!1191 = !{!"0x1402e8a0.w512.b0", !1192, i64 0}
!1192 = !{!"0x1402e8a0.w1024.b0", !1193, i64 0}
!1193 = !{!"int64", !1194, i64 0}
!1194 = !{!"0x1402e8a0", !8, i64 0}
!1195 = !{!1196, !1196, i64 0}
!1196 = !{!"0x1402e8a0.w1.b0", !1197, i64 0}
!1197 = !{!"0x1402e8a0.w2.b0", !1198, i64 0}
!1198 = !{!"0x1402e8a0.w4.b0", !1185, i64 0}
!1199 = !{!1200, !1200, i64 0}
!1200 = !{!"0x1402fcb0.w1.b0", !1201, i64 0}
!1201 = !{!"0x1402fcb0.w2.b0", !1202, i64 0}
!1202 = !{!"0x1402fcb0.w4.b0", !1203, i64 0}
!1203 = !{!"0x1402fcb0.w8.b0", !1204, i64 0}
!1204 = !{!"0x1402fcb0.w16.b0", !1205, i64 0}
!1205 = !{!"0x1402fcb0.w32.b0", !1206, i64 0}
!1206 = !{!"0x1402fcb0.w64.b0", !1207, i64 0}
!1207 = !{!"0x1402fcb0.w128.b0", !1208, i64 0}
!1208 = !{!"0x1402fcb0.w256.b0", !1209, i64 0}
!1209 = !{!"0x1402fcb0.w512.b0", !1210, i64 0}
!1210 = !{!"0x1402fcb0.w1024.b0", !1211, i64 0}
!1211 = !{!"int64", !1212, i64 0}
!1212 = !{!"0x1402fcb0", !8, i64 0}
!1213 = !{!1214, !1214, i64 0}
!1214 = !{!"0x1402fcb0.w1.b1", !1201, i64 0}
!1215 = !{!1216, !1216, i64 0}
!1216 = !{!"0x1402fcb0.w1.b2", !1217, i64 0}
!1217 = !{!"0x1402fcb0.w2.b2", !1202, i64 0}
!1218 = !{!1219, !1219, i64 0}
!1219 = !{!"0x1402fcb0.w1.b3", !1217, i64 0}
!1220 = !{!1221, !1221, i64 0}
!1221 = !{!"0x1402fcb0.w1.b4", !1222, i64 0}
!1222 = !{!"0x1402fcb0.w2.b4", !1223, i64 0}
!1223 = !{!"0x1402fcb0.w4.b4", !1203, i64 0}
!1224 = !{!1225, !1225, i64 0}
!1225 = !{!"0x14031420.w8.b0", !1226, i64 0}
!1226 = !{!"0x14031420.w16.b0", !1227, i64 0}
!1227 = !{!"0x14031420.w32.b0", !1228, i64 0}
!1228 = !{!"0x14031420.w64.b0", !1229, i64 0}
!1229 = !{!"0x14031420.w128.b0", !1230, i64 0}
!1230 = !{!"0x14031420.w256.b0", !1231, i64 0}
!1231 = !{!"0x14031420.w512.b0", !1232, i64 0}
!1232 = !{!"0x14031420.w1024.b0", !1233, i64 0}
!1233 = !{!"int64", !1234, i64 0}
!1234 = !{!"0x14031420", !8, i64 0}
!1235 = !{!1236, !1236, i64 0}
!1236 = !{!"0x14031420.w1.b0", !1237, i64 0}
!1237 = !{!"0x14031420.w2.b0", !1238, i64 0}
!1238 = !{!"0x14031420.w4.b0", !1225, i64 0}
!1239 = !{!1240, !1240, i64 0}
!1240 = !{!"0x140326e0.w1.b0", !1241, i64 0}
!1241 = !{!"0x140326e0.w2.b0", !1242, i64 0}
!1242 = !{!"0x140326e0.w4.b0", !1243, i64 0}
!1243 = !{!"0x140326e0.w8.b0", !1244, i64 0}
!1244 = !{!"0x140326e0.w16.b0", !1245, i64 0}
!1245 = !{!"0x140326e0.w32.b0", !1246, i64 0}
!1246 = !{!"0x140326e0.w64.b0", !1247, i64 0}
!1247 = !{!"0x140326e0.w128.b0", !1248, i64 0}
!1248 = !{!"0x140326e0.w256.b0", !1249, i64 0}
!1249 = !{!"0x140326e0.w512.b0", !1250, i64 0}
!1250 = !{!"0x140326e0.w1024.b0", !1251, i64 0}
!1251 = !{!"int64", !1252, i64 0}
!1252 = !{!"0x140326e0", !8, i64 0}
!1253 = !{!1254, !1254, i64 0}
!1254 = !{!"0x140326e0.w1.b1", !1241, i64 0}
!1255 = !{!1256, !1256, i64 0}
!1256 = !{!"0x140326e0.w1.b2", !1257, i64 0}
!1257 = !{!"0x140326e0.w2.b2", !1242, i64 0}
!1258 = !{!1259, !1259, i64 0}
!1259 = !{!"0x140326e0.w1.b3", !1257, i64 0}
!1260 = !{!1261, !1261, i64 0}
!1261 = !{!"0x140326e0.w1.b4", !1262, i64 0}
!1262 = !{!"0x140326e0.w2.b4", !1263, i64 0}
!1263 = !{!"0x140326e0.w4.b4", !1243, i64 0}
!1264 = !{!1265, !1265, i64 0}
!1265 = !{!"0x14013aa0.w8.b0", !1266, i64 0}
!1266 = !{!"0x14013aa0.w16.b0", !1267, i64 0}
!1267 = !{!"0x14013aa0.w32.b0", !1268, i64 0}
!1268 = !{!"0x14013aa0.w64.b0", !1269, i64 0}
!1269 = !{!"0x14013aa0.w128.b0", !1270, i64 0}
!1270 = !{!"0x14013aa0.w256.b0", !1271, i64 0}
!1271 = !{!"0x14013aa0.w512.b0", !1272, i64 0}
!1272 = !{!"0x14013aa0.w1024.b0", !1273, i64 0}
!1273 = !{!"int64", !1274, i64 0}
!1274 = !{!"0x14013aa0", !8, i64 0}
!1275 = !{!1276, !1276, i64 0}
!1276 = !{!"0x14013aa0.w1.b0", !1277, i64 0}
!1277 = !{!"0x14013aa0.w2.b0", !1278, i64 0}
!1278 = !{!"0x14013aa0.w4.b0", !1265, i64 0}
!1279 = !{!1280, !1280, i64 0}
!1280 = !{!"float32", !1281, i64 0}
!1281 = !{!"0x1af9f0c0", !8, i64 0}
!1282 = !{!1283, !1283, i64 0}
!1283 = !{!"float32", !1284, i64 0}
!1284 = !{!"0x1af9fb40", !8, i64 0}
!1285 = !{!1286, !1286, i64 0}
!1286 = !{!"float32", !1287, i64 0}
!1287 = !{!"0x1afa4650", !8, i64 0}
!1288 = !{!1289, !1289, i64 0}
!1289 = !{!"float32", !1290, i64 0}
!1290 = !{!"0x1afa4780", !8, i64 0}
!1291 = !{!1292, !1292, i64 0}
!1292 = !{!"float32", !1293, i64 0}
!1293 = !{!"0x1afa33a0", !8, i64 0}
!1294 = !{!1295, !1295, i64 0}
!1295 = !{!"float32", !1296, i64 0}
!1296 = !{!"0x1afa4890", !8, i64 0}
!1297 = !{!1298, !1298, i64 0}
!1298 = !{!"float32", !1299, i64 0}
!1299 = !{!"0x1af9c690", !8, i64 0}
!1300 = !{!1301, !1301, i64 0}
!1301 = !{!"0x784fa30.w1.b0", !1302, i64 0}
!1302 = !{!"0x784fa30.w2.b0", !1303, i64 0}
!1303 = !{!"0x784fa30.w4.b0", !1304, i64 0}
!1304 = !{!"0x784fa30.w8.b0", !1305, i64 0}
!1305 = !{!"0x784fa30.w16.b0", !1306, i64 0}
!1306 = !{!"0x784fa30.w32.b0", !1307, i64 0}
!1307 = !{!"0x784fa30.w64.b0", !1308, i64 0}
!1308 = !{!"0x784fa30.w128.b0", !1309, i64 0}
!1309 = !{!"0x784fa30.w256.b0", !1310, i64 0}
!1310 = !{!"0x784fa30.w512.b0", !1311, i64 0}
!1311 = !{!"0x784fa30.w1024.b0", !1312, i64 0}
!1312 = !{!"int32", !1313, i64 0}
!1313 = !{!"0x784fa30", !8, i64 0}
!1314 = !{!1315, !1315, i64 0}
!1315 = !{!"0x784fa30.w1.b1", !1302, i64 0}
!1316 = !{!1317, !1317, i64 0}
!1317 = !{!"0x785f970.w1.b0", !1318, i64 0}
!1318 = !{!"0x785f970.w2.b0", !1319, i64 0}
!1319 = !{!"0x785f970.w4.b0", !1320, i64 0}
!1320 = !{!"0x785f970.w8.b0", !1321, i64 0}
!1321 = !{!"0x785f970.w16.b0", !1322, i64 0}
!1322 = !{!"0x785f970.w32.b0", !1323, i64 0}
!1323 = !{!"0x785f970.w64.b0", !1324, i64 0}
!1324 = !{!"0x785f970.w128.b0", !1325, i64 0}
!1325 = !{!"0x785f970.w256.b0", !1326, i64 0}
!1326 = !{!"0x785f970.w512.b0", !1327, i64 0}
!1327 = !{!"0x785f970.w1024.b0", !1328, i64 0}
!1328 = !{!"int64", !1329, i64 0}
!1329 = !{!"0x785f970", !8, i64 0}
!1330 = !{!1331, !1331, i64 0}
!1331 = !{!"0x785f970.w1.b1", !1318, i64 0}
!1332 = !{!1333, !1333, i64 0}
!1333 = !{!"0x785f970.w1.b2", !1334, i64 0}
!1334 = !{!"0x785f970.w2.b2", !1319, i64 0}
!1335 = !{!1336, !1336, i64 0}
!1336 = !{!"0x785f970.w1.b3", !1334, i64 0}
!1337 = !{!1338, !1338, i64 0}
!1338 = !{!"0x785f970.w1.b4", !1339, i64 0}
!1339 = !{!"0x785f970.w2.b4", !1340, i64 0}
!1340 = !{!"0x785f970.w4.b4", !1320, i64 0}
!1341 = !{!1342, !1342, i64 0}
!1342 = !{!"0x785ff30.w8.b0", !1343, i64 0}
!1343 = !{!"0x785ff30.w16.b0", !1344, i64 0}
!1344 = !{!"0x785ff30.w32.b0", !1345, i64 0}
!1345 = !{!"0x785ff30.w64.b0", !1346, i64 0}
!1346 = !{!"0x785ff30.w128.b0", !1347, i64 0}
!1347 = !{!"0x785ff30.w256.b0", !1348, i64 0}
!1348 = !{!"0x785ff30.w512.b0", !1349, i64 0}
!1349 = !{!"0x785ff30.w1024.b0", !1350, i64 0}
!1350 = !{!"int64", !1351, i64 0}
!1351 = !{!"0x785ff30", !8, i64 0}
!1352 = !{!1353, !1353, i64 0}
!1353 = !{!"0x785ff30.w1.b0", !1354, i64 0}
!1354 = !{!"0x785ff30.w2.b0", !1355, i64 0}
!1355 = !{!"0x785ff30.w4.b0", !1342, i64 0}
!1356 = !{!1357, !1357, i64 0}
!1357 = !{!"0x7860180.w1.b0", !1358, i64 0}
!1358 = !{!"0x7860180.w2.b0", !1359, i64 0}
!1359 = !{!"0x7860180.w4.b0", !1360, i64 0}
!1360 = !{!"0x7860180.w8.b0", !1361, i64 0}
!1361 = !{!"0x7860180.w16.b0", !1362, i64 0}
!1362 = !{!"0x7860180.w32.b0", !1363, i64 0}
!1363 = !{!"0x7860180.w64.b0", !1364, i64 0}
!1364 = !{!"0x7860180.w128.b0", !1365, i64 0}
!1365 = !{!"0x7860180.w256.b0", !1366, i64 0}
!1366 = !{!"0x7860180.w512.b0", !1367, i64 0}
!1367 = !{!"0x7860180.w1024.b0", !1368, i64 0}
!1368 = !{!"int64", !1369, i64 0}
!1369 = !{!"0x7860180", !8, i64 0}
!1370 = !{!1371, !1371, i64 0}
!1371 = !{!"0x7860180.w1.b1", !1358, i64 0}
!1372 = !{!1373, !1373, i64 0}
!1373 = !{!"0x7860180.w1.b2", !1374, i64 0}
!1374 = !{!"0x7860180.w2.b2", !1359, i64 0}
!1375 = !{!1376, !1376, i64 0}
!1376 = !{!"0x7860180.w1.b3", !1374, i64 0}
!1377 = !{!1378, !1378, i64 0}
!1378 = !{!"0x7860180.w1.b4", !1379, i64 0}
!1379 = !{!"0x7860180.w2.b4", !1380, i64 0}
!1380 = !{!"0x7860180.w4.b4", !1360, i64 0}
!1381 = !{!1382, !1382, i64 0}
!1382 = !{!"0x785fba0.w8.b0", !1383, i64 0}
!1383 = !{!"0x785fba0.w16.b0", !1384, i64 0}
!1384 = !{!"0x785fba0.w32.b0", !1385, i64 0}
!1385 = !{!"0x785fba0.w64.b0", !1386, i64 0}
!1386 = !{!"0x785fba0.w128.b0", !1387, i64 0}
!1387 = !{!"0x785fba0.w256.b0", !1388, i64 0}
!1388 = !{!"0x785fba0.w512.b0", !1389, i64 0}
!1389 = !{!"0x785fba0.w1024.b0", !1390, i64 0}
!1390 = !{!"int64", !1391, i64 0}
!1391 = !{!"0x785fba0", !8, i64 0}
!1392 = !{!1393, !1393, i64 0}
!1393 = !{!"0x785fba0.w1.b0", !1394, i64 0}
!1394 = !{!"0x785fba0.w2.b0", !1395, i64 0}
!1395 = !{!"0x785fba0.w4.b0", !1382, i64 0}
!1396 = !{!1397, !1397, i64 0}
!1397 = !{!"float32", !1398, i64 0}
!1398 = !{!"0x784c630", !8, i64 0}
!1399 = !{!1400, !1400, i64 0}
!1400 = !{!"float32", !1401, i64 0}
!1401 = !{!"0x7847b00", !8, i64 0}
!1402 = !{!1403, !1403, i64 0}
!1403 = !{!"0x13c3f320.w1.b0", !1404, i64 0}
!1404 = !{!"0x13c3f320.w2.b0", !1405, i64 0}
!1405 = !{!"0x13c3f320.w4.b0", !1406, i64 0}
!1406 = !{!"0x13c3f320.w8.b0", !1407, i64 0}
!1407 = !{!"0x13c3f320.w16.b0", !1408, i64 0}
!1408 = !{!"0x13c3f320.w32.b0", !1409, i64 0}
!1409 = !{!"0x13c3f320.w64.b0", !1410, i64 0}
!1410 = !{!"0x13c3f320.w128.b0", !1411, i64 0}
!1411 = !{!"0x13c3f320.w256.b0", !1412, i64 0}
!1412 = !{!"0x13c3f320.w512.b0", !1413, i64 0}
!1413 = !{!"0x13c3f320.w1024.b0", !1414, i64 0}
!1414 = !{!"int32", !1415, i64 0}
!1415 = !{!"0x13c3f320", !8, i64 0}
!1416 = !{!1417, !1417, i64 0}
!1417 = !{!"0x13c3f320.w1.b1", !1404, i64 0}
!1418 = !{!1419, !1419, i64 0}
!1419 = !{!"0x69daf20.w1.b0", !1420, i64 0}
!1420 = !{!"0x69daf20.w2.b0", !1421, i64 0}
!1421 = !{!"0x69daf20.w4.b0", !1422, i64 0}
!1422 = !{!"0x69daf20.w8.b0", !1423, i64 0}
!1423 = !{!"0x69daf20.w16.b0", !1424, i64 0}
!1424 = !{!"0x69daf20.w32.b0", !1425, i64 0}
!1425 = !{!"0x69daf20.w64.b0", !1426, i64 0}
!1426 = !{!"0x69daf20.w128.b0", !1427, i64 0}
!1427 = !{!"0x69daf20.w256.b0", !1428, i64 0}
!1428 = !{!"0x69daf20.w512.b0", !1429, i64 0}
!1429 = !{!"0x69daf20.w1024.b0", !1430, i64 0}
!1430 = !{!"int64", !1431, i64 0}
!1431 = !{!"0x69daf20", !8, i64 0}
!1432 = !{!1433, !1433, i64 0}
!1433 = !{!"0x69daf20.w1.b1", !1420, i64 0}
!1434 = !{!1435, !1435, i64 0}
!1435 = !{!"0x69daf20.w1.b2", !1436, i64 0}
!1436 = !{!"0x69daf20.w2.b2", !1421, i64 0}
!1437 = !{!1438, !1438, i64 0}
!1438 = !{!"0x69daf20.w1.b3", !1436, i64 0}
!1439 = !{!1440, !1440, i64 0}
!1440 = !{!"0x69daf20.w1.b4", !1441, i64 0}
!1441 = !{!"0x69daf20.w2.b4", !1442, i64 0}
!1442 = !{!"0x69daf20.w4.b4", !1422, i64 0}
!1443 = !{!1444, !1444, i64 0}
!1444 = !{!"0xb5bc400.w8.b0", !1445, i64 0}
!1445 = !{!"0xb5bc400.w16.b0", !1446, i64 0}
!1446 = !{!"0xb5bc400.w32.b0", !1447, i64 0}
!1447 = !{!"0xb5bc400.w64.b0", !1448, i64 0}
!1448 = !{!"0xb5bc400.w128.b0", !1449, i64 0}
!1449 = !{!"0xb5bc400.w256.b0", !1450, i64 0}
!1450 = !{!"0xb5bc400.w512.b0", !1451, i64 0}
!1451 = !{!"0xb5bc400.w1024.b0", !1452, i64 0}
!1452 = !{!"int64", !1453, i64 0}
!1453 = !{!"0xb5bc400", !8, i64 0}
!1454 = !{!1455, !1455, i64 0}
!1455 = !{!"0xb5bc400.w1.b0", !1456, i64 0}
!1456 = !{!"0xb5bc400.w2.b0", !1457, i64 0}
!1457 = !{!"0xb5bc400.w4.b0", !1444, i64 0}
!1458 = !{!1459, !1459, i64 0}
!1459 = !{!"0x4db3ce0.w1.b0", !1460, i64 0}
!1460 = !{!"0x4db3ce0.w2.b0", !1461, i64 0}
!1461 = !{!"0x4db3ce0.w4.b0", !1462, i64 0}
!1462 = !{!"0x4db3ce0.w8.b0", !1463, i64 0}
!1463 = !{!"0x4db3ce0.w16.b0", !1464, i64 0}
!1464 = !{!"0x4db3ce0.w32.b0", !1465, i64 0}
!1465 = !{!"0x4db3ce0.w64.b0", !1466, i64 0}
!1466 = !{!"0x4db3ce0.w128.b0", !1467, i64 0}
!1467 = !{!"0x4db3ce0.w256.b0", !1468, i64 0}
!1468 = !{!"0x4db3ce0.w512.b0", !1469, i64 0}
!1469 = !{!"0x4db3ce0.w1024.b0", !1470, i64 0}
!1470 = !{!"int64", !1471, i64 0}
!1471 = !{!"0x4db3ce0", !8, i64 0}
!1472 = !{!1473, !1473, i64 0}
!1473 = !{!"0x4db3ce0.w1.b1", !1460, i64 0}
!1474 = !{!1475, !1475, i64 0}
!1475 = !{!"0x4db3ce0.w1.b2", !1476, i64 0}
!1476 = !{!"0x4db3ce0.w2.b2", !1461, i64 0}
!1477 = !{!1478, !1478, i64 0}
!1478 = !{!"0x4db3ce0.w1.b3", !1476, i64 0}
!1479 = !{!1480, !1480, i64 0}
!1480 = !{!"0x4db3ce0.w1.b4", !1481, i64 0}
!1481 = !{!"0x4db3ce0.w2.b4", !1482, i64 0}
!1482 = !{!"0x4db3ce0.w4.b4", !1462, i64 0}
!1483 = !{!1484, !1484, i64 0}
!1484 = !{!"0x71cec60.w8.b0", !1485, i64 0}
!1485 = !{!"0x71cec60.w16.b0", !1486, i64 0}
!1486 = !{!"0x71cec60.w32.b0", !1487, i64 0}
!1487 = !{!"0x71cec60.w64.b0", !1488, i64 0}
!1488 = !{!"0x71cec60.w128.b0", !1489, i64 0}
!1489 = !{!"0x71cec60.w256.b0", !1490, i64 0}
!1490 = !{!"0x71cec60.w512.b0", !1491, i64 0}
!1491 = !{!"0x71cec60.w1024.b0", !1492, i64 0}
!1492 = !{!"int64", !1493, i64 0}
!1493 = !{!"0x71cec60", !8, i64 0}
!1494 = !{!1495, !1495, i64 0}
!1495 = !{!"0x71cec60.w1.b0", !1496, i64 0}
!1496 = !{!"0x71cec60.w2.b0", !1497, i64 0}
!1497 = !{!"0x71cec60.w4.b0", !1484, i64 0}
!1498 = !{!1499, !1499, i64 0}
!1499 = !{!"float32", !1500, i64 0}
!1500 = !{!"0x80cadc0", !8, i64 0}
!1501 = !{!1502, !1502, i64 0}
!1502 = !{!"float32", !1503, i64 0}
!1503 = !{!"0x60095e0", !8, i64 0}
!1504 = !{!1505, !1505, i64 0}
!1505 = !{!"float32", !1506, i64 0}
!1506 = !{!"0x72ec770", !8, i64 0}
!1507 = !{!1508, !1508, i64 0}
!1508 = !{!"0x103233c0.w1.b0", !1509, i64 0}
!1509 = !{!"0x103233c0.w2.b0", !1510, i64 0}
!1510 = !{!"0x103233c0.w4.b0", !1511, i64 0}
!1511 = !{!"0x103233c0.w8.b0", !1512, i64 0}
!1512 = !{!"0x103233c0.w16.b0", !1513, i64 0}
!1513 = !{!"0x103233c0.w32.b0", !1514, i64 0}
!1514 = !{!"0x103233c0.w64.b0", !1515, i64 0}
!1515 = !{!"0x103233c0.w128.b0", !1516, i64 0}
!1516 = !{!"0x103233c0.w256.b0", !1517, i64 0}
!1517 = !{!"0x103233c0.w512.b0", !1518, i64 0}
!1518 = !{!"0x103233c0.w1024.b0", !1519, i64 0}
!1519 = !{!"int32", !1520, i64 0}
!1520 = !{!"0x103233c0", !8, i64 0}
!1521 = !{!1522, !1522, i64 0}
!1522 = !{!"0x103233c0.w1.b2", !1523, i64 0}
!1523 = !{!"0x103233c0.w2.b2", !1510, i64 0}
!1524 = !{!1525, !1525, i64 0}
!1525 = !{!"0x103233c0.w1.b3", !1523, i64 0}
!1526 = !{!1527, !1527, i64 0}
!1527 = !{!"0x103233c0.w1.b4", !1528, i64 0}
!1528 = !{!"0x103233c0.w2.b4", !1529, i64 0}
!1529 = !{!"0x103233c0.w4.b4", !1511, i64 0}
!1530 = !{!1531, !1531, i64 0}
!1531 = !{!"0x103233c0.w1.b5", !1528, i64 0}
!1532 = !{!1533, !1533, i64 0}
!1533 = !{!"0x103233c0.w1.b6", !1534, i64 0}
!1534 = !{!"0x103233c0.w2.b6", !1529, i64 0}
!1535 = !{!1536, !1536, i64 0}
!1536 = !{!"0x103233c0.w1.b1", !1509, i64 0}
!1537 = !{!1538, !1538, i64 0}
!1538 = !{!"0x8c2c010.w1.b0", !1539, i64 0}
!1539 = !{!"0x8c2c010.w2.b0", !1540, i64 0}
!1540 = !{!"0x8c2c010.w4.b0", !1541, i64 0}
!1541 = !{!"0x8c2c010.w8.b0", !1542, i64 0}
!1542 = !{!"0x8c2c010.w16.b0", !1543, i64 0}
!1543 = !{!"0x8c2c010.w32.b0", !1544, i64 0}
!1544 = !{!"0x8c2c010.w64.b0", !1545, i64 0}
!1545 = !{!"0x8c2c010.w128.b0", !1546, i64 0}
!1546 = !{!"0x8c2c010.w256.b0", !1547, i64 0}
!1547 = !{!"0x8c2c010.w512.b0", !1548, i64 0}
!1548 = !{!"0x8c2c010.w1024.b0", !1549, i64 0}
!1549 = !{!"int64", !1550, i64 0}
!1550 = !{!"0x8c2c010", !8, i64 0}
!1551 = !{!1552, !1552, i64 0}
!1552 = !{!"0x8c2c010.w1.b1", !1539, i64 0}
!1553 = !{!1554, !1554, i64 0}
!1554 = !{!"0x8c2c010.w1.b2", !1555, i64 0}
!1555 = !{!"0x8c2c010.w2.b2", !1540, i64 0}
!1556 = !{!1557, !1557, i64 0}
!1557 = !{!"0x8c2c010.w1.b3", !1555, i64 0}
!1558 = !{!1559, !1559, i64 0}
!1559 = !{!"0x8c2c010.w1.b4", !1560, i64 0}
!1560 = !{!"0x8c2c010.w2.b4", !1561, i64 0}
!1561 = !{!"0x8c2c010.w4.b4", !1541, i64 0}
!1562 = !{!1563, !1563, i64 0}
!1563 = !{!"0x63b24b0.w8.b0", !1564, i64 0}
!1564 = !{!"0x63b24b0.w16.b0", !1565, i64 0}
!1565 = !{!"0x63b24b0.w32.b0", !1566, i64 0}
!1566 = !{!"0x63b24b0.w64.b0", !1567, i64 0}
!1567 = !{!"0x63b24b0.w128.b0", !1568, i64 0}
!1568 = !{!"0x63b24b0.w256.b0", !1569, i64 0}
!1569 = !{!"0x63b24b0.w512.b0", !1570, i64 0}
!1570 = !{!"0x63b24b0.w1024.b0", !1571, i64 0}
!1571 = !{!"int64", !1572, i64 0}
!1572 = !{!"0x63b24b0", !8, i64 0}
!1573 = !{!1574, !1574, i64 0}
!1574 = !{!"0x63b24b0.w1.b0", !1575, i64 0}
!1575 = !{!"0x63b24b0.w2.b0", !1576, i64 0}
!1576 = !{!"0x63b24b0.w4.b0", !1563, i64 0}
!1577 = !{!1578, !1578, i64 0}
!1578 = !{!"0x13c96bf0.w1.b0", !1579, i64 0}
!1579 = !{!"0x13c96bf0.w2.b0", !1580, i64 0}
!1580 = !{!"0x13c96bf0.w4.b0", !1581, i64 0}
!1581 = !{!"0x13c96bf0.w8.b0", !1582, i64 0}
!1582 = !{!"0x13c96bf0.w16.b0", !1583, i64 0}
!1583 = !{!"0x13c96bf0.w32.b0", !1584, i64 0}
!1584 = !{!"0x13c96bf0.w64.b0", !1585, i64 0}
!1585 = !{!"0x13c96bf0.w128.b0", !1586, i64 0}
!1586 = !{!"0x13c96bf0.w256.b0", !1587, i64 0}
!1587 = !{!"0x13c96bf0.w512.b0", !1588, i64 0}
!1588 = !{!"0x13c96bf0.w1024.b0", !1589, i64 0}
!1589 = !{!"int64", !1590, i64 0}
!1590 = !{!"0x13c96bf0", !8, i64 0}
!1591 = !{!1592, !1592, i64 0}
!1592 = !{!"0x13c96bf0.w1.b1", !1579, i64 0}
!1593 = !{!1594, !1594, i64 0}
!1594 = !{!"0x13c96bf0.w1.b2", !1595, i64 0}
!1595 = !{!"0x13c96bf0.w2.b2", !1580, i64 0}
!1596 = !{!1597, !1597, i64 0}
!1597 = !{!"0x13c96bf0.w1.b3", !1595, i64 0}
!1598 = !{!1599, !1599, i64 0}
!1599 = !{!"0x13c96bf0.w1.b4", !1600, i64 0}
!1600 = !{!"0x13c96bf0.w2.b4", !1601, i64 0}
!1601 = !{!"0x13c96bf0.w4.b4", !1581, i64 0}
!1602 = !{!1603, !1603, i64 0}
!1603 = !{!"0x13c96bf0.w1.b5", !1600, i64 0}
!1604 = !{!1605, !1605, i64 0}
!1605 = !{!"0x5cf4a50.w8.b0", !1606, i64 0}
!1606 = !{!"0x5cf4a50.w16.b0", !1607, i64 0}
!1607 = !{!"0x5cf4a50.w32.b0", !1608, i64 0}
!1608 = !{!"0x5cf4a50.w64.b0", !1609, i64 0}
!1609 = !{!"0x5cf4a50.w128.b0", !1610, i64 0}
!1610 = !{!"0x5cf4a50.w256.b0", !1611, i64 0}
!1611 = !{!"0x5cf4a50.w512.b0", !1612, i64 0}
!1612 = !{!"0x5cf4a50.w1024.b0", !1613, i64 0}
!1613 = !{!"int64", !1614, i64 0}
!1614 = !{!"0x5cf4a50", !8, i64 0}
!1615 = !{!1616, !1616, i64 0}
!1616 = !{!"0x5cf4a50.w1.b1", !1617, i64 0}
!1617 = !{!"0x5cf4a50.w2.b0", !1618, i64 0}
!1618 = !{!"0x5cf4a50.w4.b0", !1605, i64 0}
!1619 = !{!1620, !1620, i64 0}
!1620 = !{!"0x5cf4a50.w1.b0", !1617, i64 0}
!1621 = !{!1622, !1622, i64 0}
!1622 = !{!"0x146e3fe0.w1.b0", !1623, i64 0}
!1623 = !{!"0x146e3fe0.w2.b0", !1624, i64 0}
!1624 = !{!"0x146e3fe0.w4.b0", !1625, i64 0}
!1625 = !{!"0x146e3fe0.w8.b0", !1626, i64 0}
!1626 = !{!"0x146e3fe0.w16.b0", !1627, i64 0}
!1627 = !{!"0x146e3fe0.w32.b0", !1628, i64 0}
!1628 = !{!"0x146e3fe0.w64.b0", !1629, i64 0}
!1629 = !{!"0x146e3fe0.w128.b0", !1630, i64 0}
!1630 = !{!"0x146e3fe0.w256.b0", !1631, i64 0}
!1631 = !{!"0x146e3fe0.w512.b0", !1632, i64 0}
!1632 = !{!"0x146e3fe0.w1024.b0", !1633, i64 0}
!1633 = !{!"int64", !1634, i64 0}
!1634 = !{!"0x146e3fe0", !8, i64 0}
!1635 = !{!1636, !1636, i64 0}
!1636 = !{!"0x146e3fe0.w1.b1", !1623, i64 0}
!1637 = !{!1638, !1638, i64 0}
!1638 = !{!"0x146e3fe0.w1.b2", !1639, i64 0}
!1639 = !{!"0x146e3fe0.w2.b2", !1624, i64 0}
!1640 = !{!1641, !1641, i64 0}
!1641 = !{!"0x146e3fe0.w1.b3", !1639, i64 0}
!1642 = !{!1643, !1643, i64 0}
!1643 = !{!"0x146e3fe0.w1.b4", !1644, i64 0}
!1644 = !{!"0x146e3fe0.w2.b4", !1645, i64 0}
!1645 = !{!"0x146e3fe0.w4.b4", !1625, i64 0}
!1646 = !{!1647, !1647, i64 0}
!1647 = !{!"0x18af2240.w8.b0", !1648, i64 0}
!1648 = !{!"0x18af2240.w16.b0", !1649, i64 0}
!1649 = !{!"0x18af2240.w32.b0", !1650, i64 0}
!1650 = !{!"0x18af2240.w64.b0", !1651, i64 0}
!1651 = !{!"0x18af2240.w128.b0", !1652, i64 0}
!1652 = !{!"0x18af2240.w256.b0", !1653, i64 0}
!1653 = !{!"0x18af2240.w512.b0", !1654, i64 0}
!1654 = !{!"0x18af2240.w1024.b0", !1655, i64 0}
!1655 = !{!"int64", !1656, i64 0}
!1656 = !{!"0x18af2240", !8, i64 0}
!1657 = !{!1658, !1658, i64 0}
!1658 = !{!"0x18af2240.w1.b0", !1659, i64 0}
!1659 = !{!"0x18af2240.w2.b0", !1660, i64 0}
!1660 = !{!"0x18af2240.w4.b0", !1647, i64 0}
!1661 = !{!1662, !1662, i64 0}
!1662 = !{!"0x63b2810.w1.b0", !1663, i64 0}
!1663 = !{!"0x63b2810.w2.b0", !1664, i64 0}
!1664 = !{!"0x63b2810.w4.b0", !1665, i64 0}
!1665 = !{!"0x63b2810.w8.b0", !1666, i64 0}
!1666 = !{!"0x63b2810.w16.b0", !1667, i64 0}
!1667 = !{!"0x63b2810.w32.b0", !1668, i64 0}
!1668 = !{!"0x63b2810.w64.b0", !1669, i64 0}
!1669 = !{!"0x63b2810.w128.b0", !1670, i64 0}
!1670 = !{!"0x63b2810.w256.b0", !1671, i64 0}
!1671 = !{!"0x63b2810.w512.b0", !1672, i64 0}
!1672 = !{!"0x63b2810.w1024.b0", !1673, i64 0}
!1673 = !{!"int64", !1674, i64 0}
!1674 = !{!"0x63b2810", !8, i64 0}
!1675 = !{!1676, !1676, i64 0}
!1676 = !{!"0x63b2810.w1.b1", !1663, i64 0}
!1677 = !{!1678, !1678, i64 0}
!1678 = !{!"0x63b2810.w1.b2", !1679, i64 0}
!1679 = !{!"0x63b2810.w2.b2", !1664, i64 0}
!1680 = !{!1681, !1681, i64 0}
!1681 = !{!"0x63b2810.w1.b3", !1679, i64 0}
!1682 = !{!1683, !1683, i64 0}
!1683 = !{!"0x63b2810.w1.b4", !1684, i64 0}
!1684 = !{!"0x63b2810.w2.b4", !1685, i64 0}
!1685 = !{!"0x63b2810.w4.b4", !1665, i64 0}
!1686 = !{!1687, !1687, i64 0}
!1687 = !{!"0x63b2860.w8.b0", !1688, i64 0}
!1688 = !{!"0x63b2860.w16.b0", !1689, i64 0}
!1689 = !{!"0x63b2860.w32.b0", !1690, i64 0}
!1690 = !{!"0x63b2860.w64.b0", !1691, i64 0}
!1691 = !{!"0x63b2860.w128.b0", !1692, i64 0}
!1692 = !{!"0x63b2860.w256.b0", !1693, i64 0}
!1693 = !{!"0x63b2860.w512.b0", !1694, i64 0}
!1694 = !{!"0x63b2860.w1024.b0", !1695, i64 0}
!1695 = !{!"int64", !1696, i64 0}
!1696 = !{!"0x63b2860", !8, i64 0}
!1697 = !{!1698, !1698, i64 0}
!1698 = !{!"0x63b2860.w1.b0", !1699, i64 0}
!1699 = !{!"0x63b2860.w2.b0", !1700, i64 0}
!1700 = !{!"0x63b2860.w4.b0", !1687, i64 0}
!1701 = !{!1702, !1702, i64 0}
!1702 = !{!"0x7ce4250.w1.b0", !1703, i64 0}
!1703 = !{!"0x7ce4250.w2.b0", !1704, i64 0}
!1704 = !{!"0x7ce4250.w4.b0", !1705, i64 0}
!1705 = !{!"0x7ce4250.w8.b0", !1706, i64 0}
!1706 = !{!"0x7ce4250.w16.b0", !1707, i64 0}
!1707 = !{!"0x7ce4250.w32.b0", !1708, i64 0}
!1708 = !{!"0x7ce4250.w64.b0", !1709, i64 0}
!1709 = !{!"0x7ce4250.w128.b0", !1710, i64 0}
!1710 = !{!"0x7ce4250.w256.b0", !1711, i64 0}
!1711 = !{!"0x7ce4250.w512.b0", !1712, i64 0}
!1712 = !{!"0x7ce4250.w1024.b0", !1713, i64 0}
!1713 = !{!"int64", !1714, i64 0}
!1714 = !{!"0x7ce4250", !8, i64 0}
!1715 = !{!1716, !1716, i64 0}
!1716 = !{!"0x7ce4250.w1.b1", !1703, i64 0}
!1717 = !{!1718, !1718, i64 0}
!1718 = !{!"0x7ce4250.w1.b2", !1719, i64 0}
!1719 = !{!"0x7ce4250.w2.b2", !1704, i64 0}
!1720 = !{!1721, !1721, i64 0}
!1721 = !{!"0x7ce4250.w1.b3", !1719, i64 0}
!1722 = !{!1723, !1723, i64 0}
!1723 = !{!"0x7ce4250.w1.b4", !1724, i64 0}
!1724 = !{!"0x7ce4250.w2.b4", !1725, i64 0}
!1725 = !{!"0x7ce4250.w4.b4", !1705, i64 0}
!1726 = !{!1727, !1727, i64 0}
!1727 = !{!"0xb68fc70.w8.b0", !1728, i64 0}
!1728 = !{!"0xb68fc70.w16.b0", !1729, i64 0}
!1729 = !{!"0xb68fc70.w32.b0", !1730, i64 0}
!1730 = !{!"0xb68fc70.w64.b0", !1731, i64 0}
!1731 = !{!"0xb68fc70.w128.b0", !1732, i64 0}
!1732 = !{!"0xb68fc70.w256.b0", !1733, i64 0}
!1733 = !{!"0xb68fc70.w512.b0", !1734, i64 0}
!1734 = !{!"0xb68fc70.w1024.b0", !1735, i64 0}
!1735 = !{!"int64", !1736, i64 0}
!1736 = !{!"0xb68fc70", !8, i64 0}
!1737 = !{!1738, !1738, i64 0}
!1738 = !{!"0xb68fc70.w1.b0", !1739, i64 0}
!1739 = !{!"0xb68fc70.w2.b0", !1740, i64 0}
!1740 = !{!"0xb68fc70.w4.b0", !1727, i64 0}
!1741 = !{!1742, !1742, i64 0}
!1742 = !{!"0x8c2be70.w1.b0", !1743, i64 0}
!1743 = !{!"0x8c2be70.w2.b0", !1744, i64 0}
!1744 = !{!"0x8c2be70.w4.b0", !1745, i64 0}
!1745 = !{!"0x8c2be70.w8.b0", !1746, i64 0}
!1746 = !{!"0x8c2be70.w16.b0", !1747, i64 0}
!1747 = !{!"0x8c2be70.w32.b0", !1748, i64 0}
!1748 = !{!"0x8c2be70.w64.b0", !1749, i64 0}
!1749 = !{!"0x8c2be70.w128.b0", !1750, i64 0}
!1750 = !{!"0x8c2be70.w256.b0", !1751, i64 0}
!1751 = !{!"0x8c2be70.w512.b0", !1752, i64 0}
!1752 = !{!"0x8c2be70.w1024.b0", !1753, i64 0}
!1753 = !{!"int64", !1754, i64 0}
!1754 = !{!"0x8c2be70", !8, i64 0}
!1755 = !{!1756, !1756, i64 0}
!1756 = !{!"0x8c2be70.w1.b1", !1743, i64 0}
!1757 = !{!1758, !1758, i64 0}
!1758 = !{!"0x8c2be70.w1.b2", !1759, i64 0}
!1759 = !{!"0x8c2be70.w2.b2", !1744, i64 0}
!1760 = !{!1761, !1761, i64 0}
!1761 = !{!"0x8c2be70.w1.b3", !1759, i64 0}
!1762 = !{!1763, !1763, i64 0}
!1763 = !{!"0x8c2be70.w1.b4", !1764, i64 0}
!1764 = !{!"0x8c2be70.w2.b4", !1765, i64 0}
!1765 = !{!"0x8c2be70.w4.b4", !1745, i64 0}
!1766 = !{!1767, !1767, i64 0}
!1767 = !{!"0x1afe1a80.w8.b0", !1768, i64 0}
!1768 = !{!"0x1afe1a80.w16.b0", !1769, i64 0}
!1769 = !{!"0x1afe1a80.w32.b0", !1770, i64 0}
!1770 = !{!"0x1afe1a80.w64.b0", !1771, i64 0}
!1771 = !{!"0x1afe1a80.w128.b0", !1772, i64 0}
!1772 = !{!"0x1afe1a80.w256.b0", !1773, i64 0}
!1773 = !{!"0x1afe1a80.w512.b0", !1774, i64 0}
!1774 = !{!"0x1afe1a80.w1024.b0", !1775, i64 0}
!1775 = !{!"int64", !1776, i64 0}
!1776 = !{!"0x1afe1a80", !8, i64 0}
!1777 = !{!1778, !1778, i64 0}
!1778 = !{!"0x1afe1a80.w1.b0", !1779, i64 0}
!1779 = !{!"0x1afe1a80.w2.b0", !1780, i64 0}
!1780 = !{!"0x1afe1a80.w4.b0", !1767, i64 0}
!1781 = !{!1782, !1782, i64 0}
!1782 = !{!"0x18c515e0.w1.b0", !1783, i64 0}
!1783 = !{!"0x18c515e0.w2.b0", !1784, i64 0}
!1784 = !{!"0x18c515e0.w4.b0", !1785, i64 0}
!1785 = !{!"0x18c515e0.w8.b0", !1786, i64 0}
!1786 = !{!"0x18c515e0.w16.b0", !1787, i64 0}
!1787 = !{!"0x18c515e0.w32.b0", !1788, i64 0}
!1788 = !{!"0x18c515e0.w64.b0", !1789, i64 0}
!1789 = !{!"0x18c515e0.w128.b0", !1790, i64 0}
!1790 = !{!"0x18c515e0.w256.b0", !1791, i64 0}
!1791 = !{!"0x18c515e0.w512.b0", !1792, i64 0}
!1792 = !{!"0x18c515e0.w1024.b0", !1793, i64 0}
!1793 = !{!"int64", !1794, i64 0}
!1794 = !{!"0x18c515e0", !8, i64 0}
!1795 = !{!1796, !1796, i64 0}
!1796 = !{!"0x18c515e0.w1.b1", !1783, i64 0}
!1797 = !{!1798, !1798, i64 0}
!1798 = !{!"0x18c515e0.w1.b2", !1799, i64 0}
!1799 = !{!"0x18c515e0.w2.b2", !1784, i64 0}
!1800 = !{!1801, !1801, i64 0}
!1801 = !{!"0x18c515e0.w1.b3", !1799, i64 0}
!1802 = !{!1803, !1803, i64 0}
!1803 = !{!"0x18c515e0.w1.b4", !1804, i64 0}
!1804 = !{!"0x18c515e0.w2.b4", !1805, i64 0}
!1805 = !{!"0x18c515e0.w4.b4", !1785, i64 0}
!1806 = !{!1807, !1807, i64 0}
!1807 = !{!"0x18c6d5f0.w8.b0", !1808, i64 0}
!1808 = !{!"0x18c6d5f0.w16.b0", !1809, i64 0}
!1809 = !{!"0x18c6d5f0.w32.b0", !1810, i64 0}
!1810 = !{!"0x18c6d5f0.w64.b0", !1811, i64 0}
!1811 = !{!"0x18c6d5f0.w128.b0", !1812, i64 0}
!1812 = !{!"0x18c6d5f0.w256.b0", !1813, i64 0}
!1813 = !{!"0x18c6d5f0.w512.b0", !1814, i64 0}
!1814 = !{!"0x18c6d5f0.w1024.b0", !1815, i64 0}
!1815 = !{!"int64", !1816, i64 0}
!1816 = !{!"0x18c6d5f0", !8, i64 0}
!1817 = !{!1818, !1818, i64 0}
!1818 = !{!"0x18c6d5f0.w1.b0", !1819, i64 0}
!1819 = !{!"0x18c6d5f0.w2.b0", !1820, i64 0}
!1820 = !{!"0x18c6d5f0.w4.b0", !1807, i64 0}
!1821 = !{!1822, !1822, i64 0}
!1822 = !{!"float32", !1823, i64 0}
!1823 = !{!"0x1473daf0", !8, i64 0}
!1824 = !{!1825, !1825, i64 0}
!1825 = !{!"float32", !1826, i64 0}
!1826 = !{!"0x816d2d0", !8, i64 0}
!1827 = !{!1828, !1828, i64 0}
!1828 = !{!"float32", !1829, i64 0}
!1829 = !{!"0xa332000", !8, i64 0}
!1830 = !{!1831, !1831, i64 0}
!1831 = !{!"float32", !1832, i64 0}
!1832 = !{!"0x80fa7b0", !8, i64 0}
!1833 = !{!1834, !1834, i64 0}
!1834 = !{!"float32", !1835, i64 0}
!1835 = !{!"0x1473daa0", !8, i64 0}
!1836 = !{!1837, !1837, i64 0}
!1837 = !{!"float32", !1838, i64 0}
!1838 = !{!"0x1afe0c90", !8, i64 0}
!1839 = !{!1840, !1840, i64 0}
!1840 = !{!"float32", !1841, i64 0}
!1841 = !{!"0x14716100", !8, i64 0}
!1842 = !{!1843, !1843, i64 0}
!1843 = !{!"float32", !1844, i64 0}
!1844 = !{!"0x1ae51900", !8, i64 0}
!1845 = !{!1846, !1846, i64 0}
!1846 = !{!"0x1898f610.w1.b0", !1847, i64 0}
!1847 = !{!"0x1898f610.w2.b0", !1848, i64 0}
!1848 = !{!"0x1898f610.w4.b0", !1849, i64 0}
!1849 = !{!"0x1898f610.w8.b0", !1850, i64 0}
!1850 = !{!"0x1898f610.w16.b0", !1851, i64 0}
!1851 = !{!"0x1898f610.w32.b0", !1852, i64 0}
!1852 = !{!"0x1898f610.w64.b0", !1853, i64 0}
!1853 = !{!"0x1898f610.w128.b0", !1854, i64 0}
!1854 = !{!"0x1898f610.w256.b0", !1855, i64 0}
!1855 = !{!"0x1898f610.w512.b0", !1856, i64 0}
!1856 = !{!"0x1898f610.w1024.b0", !1857, i64 0}
!1857 = !{!"int32", !1858, i64 0}
!1858 = !{!"0x1898f610", !8, i64 0}
!1859 = !{!1860, !1860, i64 0}
!1860 = !{!"0x1898f610.w1.b1", !1847, i64 0}
!1861 = !{!1862, !1862, i64 0}
!1862 = !{!"0x5f12bc0.w1.b0", !1863, i64 0}
!1863 = !{!"0x5f12bc0.w2.b0", !1864, i64 0}
!1864 = !{!"0x5f12bc0.w4.b0", !1865, i64 0}
!1865 = !{!"0x5f12bc0.w8.b0", !1866, i64 0}
!1866 = !{!"0x5f12bc0.w16.b0", !1867, i64 0}
!1867 = !{!"0x5f12bc0.w32.b0", !1868, i64 0}
!1868 = !{!"0x5f12bc0.w64.b0", !1869, i64 0}
!1869 = !{!"0x5f12bc0.w128.b0", !1870, i64 0}
!1870 = !{!"0x5f12bc0.w256.b0", !1871, i64 0}
!1871 = !{!"0x5f12bc0.w512.b0", !1872, i64 0}
!1872 = !{!"0x5f12bc0.w1024.b0", !1873, i64 0}
!1873 = !{!"int64", !1874, i64 0}
!1874 = !{!"0x5f12bc0", !8, i64 0}
!1875 = !{!1876, !1876, i64 0}
!1876 = !{!"0x5f12bc0.w1.b1", !1863, i64 0}
!1877 = !{!1878, !1878, i64 0}
!1878 = !{!"0x5f12bc0.w1.b2", !1879, i64 0}
!1879 = !{!"0x5f12bc0.w2.b2", !1864, i64 0}
!1880 = !{!1881, !1881, i64 0}
!1881 = !{!"0x5f12bc0.w1.b3", !1879, i64 0}
!1882 = !{!1883, !1883, i64 0}
!1883 = !{!"0x5f12bc0.w1.b4", !1884, i64 0}
!1884 = !{!"0x5f12bc0.w2.b4", !1885, i64 0}
!1885 = !{!"0x5f12bc0.w4.b4", !1865, i64 0}
!1886 = !{!1887, !1887, i64 0}
!1887 = !{!"0x8171b40.w8.b0", !1888, i64 0}
!1888 = !{!"0x8171b40.w16.b0", !1889, i64 0}
!1889 = !{!"0x8171b40.w32.b0", !1890, i64 0}
!1890 = !{!"0x8171b40.w64.b0", !1891, i64 0}
!1891 = !{!"0x8171b40.w128.b0", !1892, i64 0}
!1892 = !{!"0x8171b40.w256.b0", !1893, i64 0}
!1893 = !{!"0x8171b40.w512.b0", !1894, i64 0}
!1894 = !{!"0x8171b40.w1024.b0", !1895, i64 0}
!1895 = !{!"int64", !1896, i64 0}
!1896 = !{!"0x8171b40", !8, i64 0}
!1897 = !{!1898, !1898, i64 0}
!1898 = !{!"0x8171b40.w1.b0", !1899, i64 0}
!1899 = !{!"0x8171b40.w2.b0", !1900, i64 0}
!1900 = !{!"0x8171b40.w4.b0", !1887, i64 0}
!1901 = !{!1902, !1902, i64 0}
!1902 = !{!"0x8dfcd20.w1.b0", !1903, i64 0}
!1903 = !{!"0x8dfcd20.w2.b0", !1904, i64 0}
!1904 = !{!"0x8dfcd20.w4.b0", !1905, i64 0}
!1905 = !{!"0x8dfcd20.w8.b0", !1906, i64 0}
!1906 = !{!"0x8dfcd20.w16.b0", !1907, i64 0}
!1907 = !{!"0x8dfcd20.w32.b0", !1908, i64 0}
!1908 = !{!"0x8dfcd20.w64.b0", !1909, i64 0}
!1909 = !{!"0x8dfcd20.w128.b0", !1910, i64 0}
!1910 = !{!"0x8dfcd20.w256.b0", !1911, i64 0}
!1911 = !{!"0x8dfcd20.w512.b0", !1912, i64 0}
!1912 = !{!"0x8dfcd20.w1024.b0", !1913, i64 0}
!1913 = !{!"int64", !1914, i64 0}
!1914 = !{!"0x8dfcd20", !8, i64 0}
!1915 = !{!1916, !1916, i64 0}
!1916 = !{!"0x8dfcd20.w1.b1", !1903, i64 0}
!1917 = !{!1918, !1918, i64 0}
!1918 = !{!"0x8dfcd20.w1.b2", !1919, i64 0}
!1919 = !{!"0x8dfcd20.w2.b2", !1904, i64 0}
!1920 = !{!1921, !1921, i64 0}
!1921 = !{!"0x8dfcd20.w1.b3", !1919, i64 0}
!1922 = !{!1923, !1923, i64 0}
!1923 = !{!"0x8dfcd20.w1.b4", !1924, i64 0}
!1924 = !{!"0x8dfcd20.w2.b4", !1925, i64 0}
!1925 = !{!"0x8dfcd20.w4.b4", !1905, i64 0}
!1926 = !{!1927, !1927, i64 0}
!1927 = !{!"0x9c19e40.w8.b0", !1928, i64 0}
!1928 = !{!"0x9c19e40.w16.b0", !1929, i64 0}
!1929 = !{!"0x9c19e40.w32.b0", !1930, i64 0}
!1930 = !{!"0x9c19e40.w64.b0", !1931, i64 0}
!1931 = !{!"0x9c19e40.w128.b0", !1932, i64 0}
!1932 = !{!"0x9c19e40.w256.b0", !1933, i64 0}
!1933 = !{!"0x9c19e40.w512.b0", !1934, i64 0}
!1934 = !{!"0x9c19e40.w1024.b0", !1935, i64 0}
!1935 = !{!"int64", !1936, i64 0}
!1936 = !{!"0x9c19e40", !8, i64 0}
!1937 = !{!1938, !1938, i64 0}
!1938 = !{!"0x9c19e40.w1.b0", !1939, i64 0}
!1939 = !{!"0x9c19e40.w2.b0", !1940, i64 0}
!1940 = !{!"0x9c19e40.w4.b0", !1927, i64 0}
!1941 = !{!1942, !1942, i64 0}
!1942 = !{!"float32", !1943, i64 0}
!1943 = !{!"0xdcff580", !8, i64 0}
!1944 = !{!1945, !1945, i64 0}
!1945 = !{!"float32", !1946, i64 0}
!1946 = !{!"0x13c08b00", !8, i64 0}
!1947 = !{!1948, !1948, i64 0}
!1948 = !{!"0xb53cb20.w1.b0", !1949, i64 0}
!1949 = !{!"0xb53cb20.w2.b0", !1950, i64 0}
!1950 = !{!"0xb53cb20.w4.b0", !1951, i64 0}
!1951 = !{!"0xb53cb20.w8.b0", !1952, i64 0}
!1952 = !{!"0xb53cb20.w16.b0", !1953, i64 0}
!1953 = !{!"0xb53cb20.w32.b0", !1954, i64 0}
!1954 = !{!"0xb53cb20.w64.b0", !1955, i64 0}
!1955 = !{!"0xb53cb20.w128.b0", !1956, i64 0}
!1956 = !{!"0xb53cb20.w256.b0", !1957, i64 0}
!1957 = !{!"0xb53cb20.w512.b0", !1958, i64 0}
!1958 = !{!"0xb53cb20.w1024.b0", !1959, i64 0}
!1959 = !{!"int32", !1960, i64 0}
!1960 = !{!"0xb53cb20", !8, i64 0}
!1961 = !{!1962, !1962, i64 0}
!1962 = !{!"0xb53cb20.w1.b2", !1963, i64 0}
!1963 = !{!"0xb53cb20.w2.b2", !1950, i64 0}
!1964 = !{!1965, !1965, i64 0}
!1965 = !{!"0xb53cb20.w1.b3", !1963, i64 0}
!1966 = !{!1967, !1967, i64 0}
!1967 = !{!"0xb53cb20.w1.b4", !1968, i64 0}
!1968 = !{!"0xb53cb20.w2.b4", !1969, i64 0}
!1969 = !{!"0xb53cb20.w4.b4", !1951, i64 0}
!1970 = !{!1971, !1971, i64 0}
!1971 = !{!"0xb53cb20.w1.b5", !1968, i64 0}
!1972 = !{!1973, !1973, i64 0}
!1973 = !{!"0xb53cb20.w1.b6", !1974, i64 0}
!1974 = !{!"0xb53cb20.w2.b6", !1969, i64 0}
!1975 = !{!1976, !1976, i64 0}
!1976 = !{!"0xb53cb20.w1.b1", !1949, i64 0}
!1977 = !{!1978, !1978, i64 0}
!1978 = !{!"0x63d0b90.w1.b0", !1979, i64 0}
!1979 = !{!"0x63d0b90.w2.b0", !1980, i64 0}
!1980 = !{!"0x63d0b90.w4.b0", !1981, i64 0}
!1981 = !{!"0x63d0b90.w8.b0", !1982, i64 0}
!1982 = !{!"0x63d0b90.w16.b0", !1983, i64 0}
!1983 = !{!"0x63d0b90.w32.b0", !1984, i64 0}
!1984 = !{!"0x63d0b90.w64.b0", !1985, i64 0}
!1985 = !{!"0x63d0b90.w128.b0", !1986, i64 0}
!1986 = !{!"0x63d0b90.w256.b0", !1987, i64 0}
!1987 = !{!"0x63d0b90.w512.b0", !1988, i64 0}
!1988 = !{!"0x63d0b90.w1024.b0", !1989, i64 0}
!1989 = !{!"int64", !1990, i64 0}
!1990 = !{!"0x63d0b90", !8, i64 0}
!1991 = !{!1992, !1992, i64 0}
!1992 = !{!"0x63d0b90.w1.b1", !1979, i64 0}
!1993 = !{!1994, !1994, i64 0}
!1994 = !{!"0x63d0b90.w1.b2", !1995, i64 0}
!1995 = !{!"0x63d0b90.w2.b2", !1980, i64 0}
!1996 = !{!1997, !1997, i64 0}
!1997 = !{!"0x63d0b90.w1.b3", !1995, i64 0}
!1998 = !{!1999, !1999, i64 0}
!1999 = !{!"0x63d0b90.w1.b4", !2000, i64 0}
!2000 = !{!"0x63d0b90.w2.b4", !2001, i64 0}
!2001 = !{!"0x63d0b90.w4.b4", !1981, i64 0}
!2002 = !{!2003, !2003, i64 0}
!2003 = !{!"0x63d1110.w8.b0", !2004, i64 0}
!2004 = !{!"0x63d1110.w16.b0", !2005, i64 0}
!2005 = !{!"0x63d1110.w32.b0", !2006, i64 0}
!2006 = !{!"0x63d1110.w64.b0", !2007, i64 0}
!2007 = !{!"0x63d1110.w128.b0", !2008, i64 0}
!2008 = !{!"0x63d1110.w256.b0", !2009, i64 0}
!2009 = !{!"0x63d1110.w512.b0", !2010, i64 0}
!2010 = !{!"0x63d1110.w1024.b0", !2011, i64 0}
!2011 = !{!"int64", !2012, i64 0}
!2012 = !{!"0x63d1110", !8, i64 0}
!2013 = !{!2014, !2014, i64 0}
!2014 = !{!"0x63d1110.w1.b0", !2015, i64 0}
!2015 = !{!"0x63d1110.w2.b0", !2016, i64 0}
!2016 = !{!"0x63d1110.w4.b0", !2003, i64 0}
!2017 = !{!2018, !2018, i64 0}
!2018 = !{!"0x63d1360.w1.b0", !2019, i64 0}
!2019 = !{!"0x63d1360.w2.b0", !2020, i64 0}
!2020 = !{!"0x63d1360.w4.b0", !2021, i64 0}
!2021 = !{!"0x63d1360.w8.b0", !2022, i64 0}
!2022 = !{!"0x63d1360.w16.b0", !2023, i64 0}
!2023 = !{!"0x63d1360.w32.b0", !2024, i64 0}
!2024 = !{!"0x63d1360.w64.b0", !2025, i64 0}
!2025 = !{!"0x63d1360.w128.b0", !2026, i64 0}
!2026 = !{!"0x63d1360.w256.b0", !2027, i64 0}
!2027 = !{!"0x63d1360.w512.b0", !2028, i64 0}
!2028 = !{!"0x63d1360.w1024.b0", !2029, i64 0}
!2029 = !{!"int64", !2030, i64 0}
!2030 = !{!"0x63d1360", !8, i64 0}
!2031 = !{!2032, !2032, i64 0}
!2032 = !{!"0x63d1360.w1.b1", !2019, i64 0}
!2033 = !{!2034, !2034, i64 0}
!2034 = !{!"0x63d1360.w1.b2", !2035, i64 0}
!2035 = !{!"0x63d1360.w2.b2", !2020, i64 0}
!2036 = !{!2037, !2037, i64 0}
!2037 = !{!"0x63d1360.w1.b3", !2035, i64 0}
!2038 = !{!2039, !2039, i64 0}
!2039 = !{!"0x63d1360.w1.b4", !2040, i64 0}
!2040 = !{!"0x63d1360.w2.b4", !2041, i64 0}
!2041 = !{!"0x63d1360.w4.b4", !2021, i64 0}
!2042 = !{!2043, !2043, i64 0}
!2043 = !{!"0x63d1360.w1.b5", !2040, i64 0}
!2044 = !{!2045, !2045, i64 0}
!2045 = !{!"0x63d0dc0.w8.b0", !2046, i64 0}
!2046 = !{!"0x63d0dc0.w16.b0", !2047, i64 0}
!2047 = !{!"0x63d0dc0.w32.b0", !2048, i64 0}
!2048 = !{!"0x63d0dc0.w64.b0", !2049, i64 0}
!2049 = !{!"0x63d0dc0.w128.b0", !2050, i64 0}
!2050 = !{!"0x63d0dc0.w256.b0", !2051, i64 0}
!2051 = !{!"0x63d0dc0.w512.b0", !2052, i64 0}
!2052 = !{!"0x63d0dc0.w1024.b0", !2053, i64 0}
!2053 = !{!"int64", !2054, i64 0}
!2054 = !{!"0x63d0dc0", !8, i64 0}
!2055 = !{!2056, !2056, i64 0}
!2056 = !{!"0x63d0dc0.w1.b1", !2057, i64 0}
!2057 = !{!"0x63d0dc0.w2.b0", !2058, i64 0}
!2058 = !{!"0x63d0dc0.w4.b0", !2045, i64 0}
!2059 = !{!2060, !2060, i64 0}
!2060 = !{!"0x63d0dc0.w1.b0", !2057, i64 0}
!2061 = !{!2062, !2062, i64 0}
!2062 = !{!"0x1ab39f40.w1.b0", !2063, i64 0}
!2063 = !{!"0x1ab39f40.w2.b0", !2064, i64 0}
!2064 = !{!"0x1ab39f40.w4.b0", !2065, i64 0}
!2065 = !{!"0x1ab39f40.w8.b0", !2066, i64 0}
!2066 = !{!"0x1ab39f40.w16.b0", !2067, i64 0}
!2067 = !{!"0x1ab39f40.w32.b0", !2068, i64 0}
!2068 = !{!"0x1ab39f40.w64.b0", !2069, i64 0}
!2069 = !{!"0x1ab39f40.w128.b0", !2070, i64 0}
!2070 = !{!"0x1ab39f40.w256.b0", !2071, i64 0}
!2071 = !{!"0x1ab39f40.w512.b0", !2072, i64 0}
!2072 = !{!"0x1ab39f40.w1024.b0", !2073, i64 0}
!2073 = !{!"int64", !2074, i64 0}
!2074 = !{!"0x1ab39f40", !8, i64 0}
!2075 = !{!2076, !2076, i64 0}
!2076 = !{!"0x1ab39f40.w1.b1", !2063, i64 0}
!2077 = !{!2078, !2078, i64 0}
!2078 = !{!"0x1ab39f40.w1.b2", !2079, i64 0}
!2079 = !{!"0x1ab39f40.w2.b2", !2064, i64 0}
!2080 = !{!2081, !2081, i64 0}
!2081 = !{!"0x1ab39f40.w1.b3", !2079, i64 0}
!2082 = !{!2083, !2083, i64 0}
!2083 = !{!"0x1ab39f40.w1.b4", !2084, i64 0}
!2084 = !{!"0x1ab39f40.w2.b4", !2085, i64 0}
!2085 = !{!"0x1ab39f40.w4.b4", !2065, i64 0}
!2086 = !{!2087, !2087, i64 0}
!2087 = !{!"0x1ab3b030.w8.b0", !2088, i64 0}
!2088 = !{!"0x1ab3b030.w16.b0", !2089, i64 0}
!2089 = !{!"0x1ab3b030.w32.b0", !2090, i64 0}
!2090 = !{!"0x1ab3b030.w64.b0", !2091, i64 0}
!2091 = !{!"0x1ab3b030.w128.b0", !2092, i64 0}
!2092 = !{!"0x1ab3b030.w256.b0", !2093, i64 0}
!2093 = !{!"0x1ab3b030.w512.b0", !2094, i64 0}
!2094 = !{!"0x1ab3b030.w1024.b0", !2095, i64 0}
!2095 = !{!"int64", !2096, i64 0}
!2096 = !{!"0x1ab3b030", !8, i64 0}
!2097 = !{!2098, !2098, i64 0}
!2098 = !{!"0x1ab3b030.w1.b0", !2099, i64 0}
!2099 = !{!"0x1ab3b030.w2.b0", !2100, i64 0}
!2100 = !{!"0x1ab3b030.w4.b0", !2087, i64 0}
!2101 = !{!2102, !2102, i64 0}
!2102 = !{!"0x1ab3d510.w1.b0", !2103, i64 0}
!2103 = !{!"0x1ab3d510.w2.b0", !2104, i64 0}
!2104 = !{!"0x1ab3d510.w4.b0", !2105, i64 0}
!2105 = !{!"0x1ab3d510.w8.b0", !2106, i64 0}
!2106 = !{!"0x1ab3d510.w16.b0", !2107, i64 0}
!2107 = !{!"0x1ab3d510.w32.b0", !2108, i64 0}
!2108 = !{!"0x1ab3d510.w64.b0", !2109, i64 0}
!2109 = !{!"0x1ab3d510.w128.b0", !2110, i64 0}
!2110 = !{!"0x1ab3d510.w256.b0", !2111, i64 0}
!2111 = !{!"0x1ab3d510.w512.b0", !2112, i64 0}
!2112 = !{!"0x1ab3d510.w1024.b0", !2113, i64 0}
!2113 = !{!"int64", !2114, i64 0}
!2114 = !{!"0x1ab3d510", !8, i64 0}
!2115 = !{!2116, !2116, i64 0}
!2116 = !{!"0x1ab3d510.w1.b1", !2103, i64 0}
!2117 = !{!2118, !2118, i64 0}
!2118 = !{!"0x1ab3d510.w1.b2", !2119, i64 0}
!2119 = !{!"0x1ab3d510.w2.b2", !2104, i64 0}
!2120 = !{!2121, !2121, i64 0}
!2121 = !{!"0x1ab3d510.w1.b3", !2119, i64 0}
!2122 = !{!2123, !2123, i64 0}
!2123 = !{!"0x1ab3d510.w1.b4", !2124, i64 0}
!2124 = !{!"0x1ab3d510.w2.b4", !2125, i64 0}
!2125 = !{!"0x1ab3d510.w4.b4", !2105, i64 0}
!2126 = !{!2127, !2127, i64 0}
!2127 = !{!"0x1ab3d560.w8.b0", !2128, i64 0}
!2128 = !{!"0x1ab3d560.w16.b0", !2129, i64 0}
!2129 = !{!"0x1ab3d560.w32.b0", !2130, i64 0}
!2130 = !{!"0x1ab3d560.w64.b0", !2131, i64 0}
!2131 = !{!"0x1ab3d560.w128.b0", !2132, i64 0}
!2132 = !{!"0x1ab3d560.w256.b0", !2133, i64 0}
!2133 = !{!"0x1ab3d560.w512.b0", !2134, i64 0}
!2134 = !{!"0x1ab3d560.w1024.b0", !2135, i64 0}
!2135 = !{!"int64", !2136, i64 0}
!2136 = !{!"0x1ab3d560", !8, i64 0}
!2137 = !{!2138, !2138, i64 0}
!2138 = !{!"0x1ab3d560.w1.b0", !2139, i64 0}
!2139 = !{!"0x1ab3d560.w2.b0", !2140, i64 0}
!2140 = !{!"0x1ab3d560.w4.b0", !2127, i64 0}
!2141 = !{!2142, !2142, i64 0}
!2142 = !{!"0x6411cf0.w1.b0", !2143, i64 0}
!2143 = !{!"0x6411cf0.w2.b0", !2144, i64 0}
!2144 = !{!"0x6411cf0.w4.b0", !2145, i64 0}
!2145 = !{!"0x6411cf0.w8.b0", !2146, i64 0}
!2146 = !{!"0x6411cf0.w16.b0", !2147, i64 0}
!2147 = !{!"0x6411cf0.w32.b0", !2148, i64 0}
!2148 = !{!"0x6411cf0.w64.b0", !2149, i64 0}
!2149 = !{!"0x6411cf0.w128.b0", !2150, i64 0}
!2150 = !{!"0x6411cf0.w256.b0", !2151, i64 0}
!2151 = !{!"0x6411cf0.w512.b0", !2152, i64 0}
!2152 = !{!"0x6411cf0.w1024.b0", !2153, i64 0}
!2153 = !{!"int64", !2154, i64 0}
!2154 = !{!"0x6411cf0", !8, i64 0}
!2155 = !{!2156, !2156, i64 0}
!2156 = !{!"0x6411cf0.w1.b1", !2143, i64 0}
!2157 = !{!2158, !2158, i64 0}
!2158 = !{!"0x6411cf0.w1.b2", !2159, i64 0}
!2159 = !{!"0x6411cf0.w2.b2", !2144, i64 0}
!2160 = !{!2161, !2161, i64 0}
!2161 = !{!"0x6411cf0.w1.b3", !2159, i64 0}
!2162 = !{!2163, !2163, i64 0}
!2163 = !{!"0x6411cf0.w1.b4", !2164, i64 0}
!2164 = !{!"0x6411cf0.w2.b4", !2165, i64 0}
!2165 = !{!"0x6411cf0.w4.b4", !2145, i64 0}
!2166 = !{!2167, !2167, i64 0}
!2167 = !{!"0x6413460.w8.b0", !2168, i64 0}
!2168 = !{!"0x6413460.w16.b0", !2169, i64 0}
!2169 = !{!"0x6413460.w32.b0", !2170, i64 0}
!2170 = !{!"0x6413460.w64.b0", !2171, i64 0}
!2171 = !{!"0x6413460.w128.b0", !2172, i64 0}
!2172 = !{!"0x6413460.w256.b0", !2173, i64 0}
!2173 = !{!"0x6413460.w512.b0", !2174, i64 0}
!2174 = !{!"0x6413460.w1024.b0", !2175, i64 0}
!2175 = !{!"int64", !2176, i64 0}
!2176 = !{!"0x6413460", !8, i64 0}
!2177 = !{!2178, !2178, i64 0}
!2178 = !{!"0x6413460.w1.b0", !2179, i64 0}
!2179 = !{!"0x6413460.w2.b0", !2180, i64 0}
!2180 = !{!"0x6413460.w4.b0", !2167, i64 0}
!2181 = !{!2182, !2182, i64 0}
!2182 = !{!"0x63a47a0.w1.b0", !2183, i64 0}
!2183 = !{!"0x63a47a0.w2.b0", !2184, i64 0}
!2184 = !{!"0x63a47a0.w4.b0", !2185, i64 0}
!2185 = !{!"0x63a47a0.w8.b0", !2186, i64 0}
!2186 = !{!"0x63a47a0.w16.b0", !2187, i64 0}
!2187 = !{!"0x63a47a0.w32.b0", !2188, i64 0}
!2188 = !{!"0x63a47a0.w64.b0", !2189, i64 0}
!2189 = !{!"0x63a47a0.w128.b0", !2190, i64 0}
!2190 = !{!"0x63a47a0.w256.b0", !2191, i64 0}
!2191 = !{!"0x63a47a0.w512.b0", !2192, i64 0}
!2192 = !{!"0x63a47a0.w1024.b0", !2193, i64 0}
!2193 = !{!"int64", !2194, i64 0}
!2194 = !{!"0x63a47a0", !8, i64 0}
!2195 = !{!2196, !2196, i64 0}
!2196 = !{!"0x63a47a0.w1.b1", !2183, i64 0}
!2197 = !{!2198, !2198, i64 0}
!2198 = !{!"0x63a47a0.w1.b2", !2199, i64 0}
!2199 = !{!"0x63a47a0.w2.b2", !2184, i64 0}
!2200 = !{!2201, !2201, i64 0}
!2201 = !{!"0x63a47a0.w1.b3", !2199, i64 0}
!2202 = !{!2203, !2203, i64 0}
!2203 = !{!"0x63a47a0.w1.b4", !2204, i64 0}
!2204 = !{!"0x63a47a0.w2.b4", !2205, i64 0}
!2205 = !{!"0x63a47a0.w4.b4", !2185, i64 0}
!2206 = !{!2207, !2207, i64 0}
!2207 = !{!"0x1afcf210.w8.b0", !2208, i64 0}
!2208 = !{!"0x1afcf210.w16.b0", !2209, i64 0}
!2209 = !{!"0x1afcf210.w32.b0", !2210, i64 0}
!2210 = !{!"0x1afcf210.w64.b0", !2211, i64 0}
!2211 = !{!"0x1afcf210.w128.b0", !2212, i64 0}
!2212 = !{!"0x1afcf210.w256.b0", !2213, i64 0}
!2213 = !{!"0x1afcf210.w512.b0", !2214, i64 0}
!2214 = !{!"0x1afcf210.w1024.b0", !2215, i64 0}
!2215 = !{!"int64", !2216, i64 0}
!2216 = !{!"0x1afcf210", !8, i64 0}
!2217 = !{!2218, !2218, i64 0}
!2218 = !{!"0x1afcf210.w1.b0", !2219, i64 0}
!2219 = !{!"0x1afcf210.w2.b0", !2220, i64 0}
!2220 = !{!"0x1afcf210.w4.b0", !2207, i64 0}
!2221 = !{!2222, !2222, i64 0}
!2222 = !{!"0x1b251fc0.w1.b0", !2223, i64 0}
!2223 = !{!"0x1b251fc0.w2.b0", !2224, i64 0}
!2224 = !{!"0x1b251fc0.w4.b0", !2225, i64 0}
!2225 = !{!"0x1b251fc0.w8.b0", !2226, i64 0}
!2226 = !{!"0x1b251fc0.w16.b0", !2227, i64 0}
!2227 = !{!"0x1b251fc0.w32.b0", !2228, i64 0}
!2228 = !{!"0x1b251fc0.w64.b0", !2229, i64 0}
!2229 = !{!"0x1b251fc0.w128.b0", !2230, i64 0}
!2230 = !{!"0x1b251fc0.w256.b0", !2231, i64 0}
!2231 = !{!"0x1b251fc0.w512.b0", !2232, i64 0}
!2232 = !{!"0x1b251fc0.w1024.b0", !2233, i64 0}
!2233 = !{!"int64", !2234, i64 0}
!2234 = !{!"0x1b251fc0", !8, i64 0}
!2235 = !{!2236, !2236, i64 0}
!2236 = !{!"0x1b251fc0.w1.b1", !2223, i64 0}
!2237 = !{!2238, !2238, i64 0}
!2238 = !{!"0x1b251fc0.w1.b2", !2239, i64 0}
!2239 = !{!"0x1b251fc0.w2.b2", !2224, i64 0}
!2240 = !{!2241, !2241, i64 0}
!2241 = !{!"0x1b251fc0.w1.b3", !2239, i64 0}
!2242 = !{!2243, !2243, i64 0}
!2243 = !{!"0x1b251fc0.w1.b4", !2244, i64 0}
!2244 = !{!"0x1b251fc0.w2.b4", !2245, i64 0}
!2245 = !{!"0x1b251fc0.w4.b4", !2225, i64 0}
!2246 = !{!2247, !2247, i64 0}
!2247 = !{!"0x1b2521c0.w8.b0", !2248, i64 0}
!2248 = !{!"0x1b2521c0.w16.b0", !2249, i64 0}
!2249 = !{!"0x1b2521c0.w32.b0", !2250, i64 0}
!2250 = !{!"0x1b2521c0.w64.b0", !2251, i64 0}
!2251 = !{!"0x1b2521c0.w128.b0", !2252, i64 0}
!2252 = !{!"0x1b2521c0.w256.b0", !2253, i64 0}
!2253 = !{!"0x1b2521c0.w512.b0", !2254, i64 0}
!2254 = !{!"0x1b2521c0.w1024.b0", !2255, i64 0}
!2255 = !{!"int64", !2256, i64 0}
!2256 = !{!"0x1b2521c0", !8, i64 0}
!2257 = !{!2258, !2258, i64 0}
!2258 = !{!"0x1b2521c0.w1.b0", !2259, i64 0}
!2259 = !{!"0x1b2521c0.w2.b0", !2260, i64 0}
!2260 = !{!"0x1b2521c0.w4.b0", !2247, i64 0}
!2261 = !{!2262, !2262, i64 0}
!2262 = !{!"float32", !2263, i64 0}
!2263 = !{!"0x7caa260", !8, i64 0}
!2264 = !{!2265, !2265, i64 0}
!2265 = !{!"float32", !2266, i64 0}
!2266 = !{!"0x16955410", !8, i64 0}
!2267 = !{!2268, !2268, i64 0}
!2268 = !{!"float32", !2269, i64 0}
!2269 = !{!"0x4d37db0", !8, i64 0}
!2270 = !{!2271, !2271, i64 0}
!2271 = !{!"float32", !2272, i64 0}
!2272 = !{!"0x5dd9da0", !8, i64 0}
!2273 = !{!2274, !2274, i64 0}
!2274 = !{!"float32", !2275, i64 0}
!2275 = !{!"0xb4ab940", !8, i64 0}
!2276 = !{!2277, !2277, i64 0}
!2277 = !{!"float32", !2278, i64 0}
!2278 = !{!"0x1aeeded0", !8, i64 0}
!2279 = !{!2280, !2280, i64 0}
!2280 = !{!"float32", !2281, i64 0}
!2281 = !{!"0x7caa1d0", !8, i64 0}
!2282 = !{!2283, !2283, i64 0}
!2283 = !{!"float32", !2284, i64 0}
!2284 = !{!"0x7ca39c0", !8, i64 0}
!2285 = !{!2286, !2286, i64 0}
!2286 = !{!"0xa2eda10.w1.b0", !2287, i64 0}
!2287 = !{!"0xa2eda10.w2.b0", !2288, i64 0}
!2288 = !{!"0xa2eda10.w4.b0", !2289, i64 0}
!2289 = !{!"0xa2eda10.w8.b0", !2290, i64 0}
!2290 = !{!"0xa2eda10.w16.b0", !2291, i64 0}
!2291 = !{!"0xa2eda10.w32.b0", !2292, i64 0}
!2292 = !{!"0xa2eda10.w64.b0", !2293, i64 0}
!2293 = !{!"0xa2eda10.w128.b0", !2294, i64 0}
!2294 = !{!"0xa2eda10.w256.b0", !2295, i64 0}
!2295 = !{!"0xa2eda10.w512.b0", !2296, i64 0}
!2296 = !{!"0xa2eda10.w1024.b0", !2297, i64 0}
!2297 = !{!"int32", !2298, i64 0}
!2298 = !{!"0xa2eda10", !8, i64 0}
!2299 = !{!2300, !2300, i64 0}
!2300 = !{!"0xa2eda10.w1.b2", !2301, i64 0}
!2301 = !{!"0xa2eda10.w2.b2", !2288, i64 0}
!2302 = !{!2303, !2303, i64 0}
!2303 = !{!"0xa2eda10.w1.b1", !2287, i64 0}
!2304 = !{!2305, !2305, i64 0}
!2305 = !{!"0x659a970.w1.b0", !2306, i64 0}
!2306 = !{!"0x659a970.w2.b0", !2307, i64 0}
!2307 = !{!"0x659a970.w4.b0", !2308, i64 0}
!2308 = !{!"0x659a970.w8.b0", !2309, i64 0}
!2309 = !{!"0x659a970.w16.b0", !2310, i64 0}
!2310 = !{!"0x659a970.w32.b0", !2311, i64 0}
!2311 = !{!"0x659a970.w64.b0", !2312, i64 0}
!2312 = !{!"0x659a970.w128.b0", !2313, i64 0}
!2313 = !{!"0x659a970.w256.b0", !2314, i64 0}
!2314 = !{!"0x659a970.w512.b0", !2315, i64 0}
!2315 = !{!"0x659a970.w1024.b0", !2316, i64 0}
!2316 = !{!"int64", !2317, i64 0}
!2317 = !{!"0x659a970", !8, i64 0}
!2318 = !{!2319, !2319, i64 0}
!2319 = !{!"0x659a970.w1.b1", !2306, i64 0}
!2320 = !{!2321, !2321, i64 0}
!2321 = !{!"0x659a970.w1.b2", !2322, i64 0}
!2322 = !{!"0x659a970.w2.b2", !2307, i64 0}
!2323 = !{!2324, !2324, i64 0}
!2324 = !{!"0x659a970.w1.b3", !2322, i64 0}
!2325 = !{!2326, !2326, i64 0}
!2326 = !{!"0x659a970.w1.b4", !2327, i64 0}
!2327 = !{!"0x659a970.w2.b4", !2328, i64 0}
!2328 = !{!"0x659a970.w4.b4", !2308, i64 0}
!2329 = !{!2330, !2330, i64 0}
!2330 = !{!"0x18bac980.w8.b0", !2331, i64 0}
!2331 = !{!"0x18bac980.w16.b0", !2332, i64 0}
!2332 = !{!"0x18bac980.w32.b0", !2333, i64 0}
!2333 = !{!"0x18bac980.w64.b0", !2334, i64 0}
!2334 = !{!"0x18bac980.w128.b0", !2335, i64 0}
!2335 = !{!"0x18bac980.w256.b0", !2336, i64 0}
!2336 = !{!"0x18bac980.w512.b0", !2337, i64 0}
!2337 = !{!"0x18bac980.w1024.b0", !2338, i64 0}
!2338 = !{!"int64", !2339, i64 0}
!2339 = !{!"0x18bac980", !8, i64 0}
!2340 = !{!2341, !2341, i64 0}
!2341 = !{!"0x18bac980.w1.b0", !2342, i64 0}
!2342 = !{!"0x18bac980.w2.b0", !2343, i64 0}
!2343 = !{!"0x18bac980.w4.b0", !2330, i64 0}
!2344 = !{!2345, !2345, i64 0}
!2345 = !{!"0x18a54480.w1.b0", !2346, i64 0}
!2346 = !{!"0x18a54480.w2.b0", !2347, i64 0}
!2347 = !{!"0x18a54480.w4.b0", !2348, i64 0}
!2348 = !{!"0x18a54480.w8.b0", !2349, i64 0}
!2349 = !{!"0x18a54480.w16.b0", !2350, i64 0}
!2350 = !{!"0x18a54480.w32.b0", !2351, i64 0}
!2351 = !{!"0x18a54480.w64.b0", !2352, i64 0}
!2352 = !{!"0x18a54480.w128.b0", !2353, i64 0}
!2353 = !{!"0x18a54480.w256.b0", !2354, i64 0}
!2354 = !{!"0x18a54480.w512.b0", !2355, i64 0}
!2355 = !{!"0x18a54480.w1024.b0", !2356, i64 0}
!2356 = !{!"int64", !2357, i64 0}
!2357 = !{!"0x18a54480", !8, i64 0}
!2358 = !{!2359, !2359, i64 0}
!2359 = !{!"0x18a54480.w1.b1", !2346, i64 0}
!2360 = !{!2361, !2361, i64 0}
!2361 = !{!"0x18a54480.w1.b2", !2362, i64 0}
!2362 = !{!"0x18a54480.w2.b2", !2347, i64 0}
!2363 = !{!2364, !2364, i64 0}
!2364 = !{!"0x18a54480.w1.b3", !2362, i64 0}
!2365 = !{!2366, !2366, i64 0}
!2366 = !{!"0x18a54480.w1.b4", !2367, i64 0}
!2367 = !{!"0x18a54480.w2.b4", !2368, i64 0}
!2368 = !{!"0x18a54480.w4.b4", !2348, i64 0}
!2369 = !{!2370, !2370, i64 0}
!2370 = !{!"0x659ab10.w8.b0", !2371, i64 0}
!2371 = !{!"0x659ab10.w16.b0", !2372, i64 0}
!2372 = !{!"0x659ab10.w32.b0", !2373, i64 0}
!2373 = !{!"0x659ab10.w64.b0", !2374, i64 0}
!2374 = !{!"0x659ab10.w128.b0", !2375, i64 0}
!2375 = !{!"0x659ab10.w256.b0", !2376, i64 0}
!2376 = !{!"0x659ab10.w512.b0", !2377, i64 0}
!2377 = !{!"0x659ab10.w1024.b0", !2378, i64 0}
!2378 = !{!"int64", !2379, i64 0}
!2379 = !{!"0x659ab10", !8, i64 0}
!2380 = !{!2381, !2381, i64 0}
!2381 = !{!"0x659ab10.w1.b0", !2382, i64 0}
!2382 = !{!"0x659ab10.w2.b0", !2383, i64 0}
!2383 = !{!"0x659ab10.w4.b0", !2370, i64 0}
!2384 = !{!2385, !2385, i64 0}
!2385 = !{!"0x8db7c80.w1.b0", !2386, i64 0}
!2386 = !{!"0x8db7c80.w2.b0", !2387, i64 0}
!2387 = !{!"0x8db7c80.w4.b0", !2388, i64 0}
!2388 = !{!"0x8db7c80.w8.b0", !2389, i64 0}
!2389 = !{!"0x8db7c80.w16.b0", !2390, i64 0}
!2390 = !{!"0x8db7c80.w32.b0", !2391, i64 0}
!2391 = !{!"0x8db7c80.w64.b0", !2392, i64 0}
!2392 = !{!"0x8db7c80.w128.b0", !2393, i64 0}
!2393 = !{!"0x8db7c80.w256.b0", !2394, i64 0}
!2394 = !{!"0x8db7c80.w512.b0", !2395, i64 0}
!2395 = !{!"0x8db7c80.w1024.b0", !2396, i64 0}
!2396 = !{!"int64", !2397, i64 0}
!2397 = !{!"0x8db7c80", !8, i64 0}
!2398 = !{!2399, !2399, i64 0}
!2399 = !{!"0x8db7c80.w1.b1", !2386, i64 0}
!2400 = !{!2401, !2401, i64 0}
!2401 = !{!"0x8db7c80.w1.b2", !2402, i64 0}
!2402 = !{!"0x8db7c80.w2.b2", !2387, i64 0}
!2403 = !{!2404, !2404, i64 0}
!2404 = !{!"0x8db7c80.w1.b3", !2402, i64 0}
!2405 = !{!2406, !2406, i64 0}
!2406 = !{!"0x8db7c80.w1.b4", !2407, i64 0}
!2407 = !{!"0x8db7c80.w2.b4", !2408, i64 0}
!2408 = !{!"0x8db7c80.w4.b4", !2388, i64 0}
!2409 = !{!2410, !2410, i64 0}
!2410 = !{!"0x8db7cd0.w8.b0", !2411, i64 0}
!2411 = !{!"0x8db7cd0.w16.b0", !2412, i64 0}
!2412 = !{!"0x8db7cd0.w32.b0", !2413, i64 0}
!2413 = !{!"0x8db7cd0.w64.b0", !2414, i64 0}
!2414 = !{!"0x8db7cd0.w128.b0", !2415, i64 0}
!2415 = !{!"0x8db7cd0.w256.b0", !2416, i64 0}
!2416 = !{!"0x8db7cd0.w512.b0", !2417, i64 0}
!2417 = !{!"0x8db7cd0.w1024.b0", !2418, i64 0}
!2418 = !{!"int64", !2419, i64 0}
!2419 = !{!"0x8db7cd0", !8, i64 0}
!2420 = !{!2421, !2421, i64 0}
!2421 = !{!"0x8db7cd0.w1.b0", !2422, i64 0}
!2422 = !{!"0x8db7cd0.w2.b0", !2423, i64 0}
!2423 = !{!"0x8db7cd0.w4.b0", !2410, i64 0}
!2424 = !{!2425, !2425, i64 0}
!2425 = !{!"float32", !2426, i64 0}
!2426 = !{!"0x147171f0", !8, i64 0}
!2427 = !{!2428, !2428, i64 0}
!2428 = !{!"float32", !2429, i64 0}
!2429 = !{!"0x8d91e10", !8, i64 0}
!2430 = !{!2431, !2431, i64 0}
!2431 = !{!"float32", !2432, i64 0}
!2432 = !{!"0x1af58b00", !8, i64 0}
!2433 = !{!2434, !2434, i64 0}
!2434 = !{!"0x7842b80.w1.b0", !2435, i64 0}
!2435 = !{!"0x7842b80.w2.b0", !2436, i64 0}
!2436 = !{!"0x7842b80.w4.b0", !2437, i64 0}
!2437 = !{!"0x7842b80.w8.b0", !2438, i64 0}
!2438 = !{!"0x7842b80.w16.b0", !2439, i64 0}
!2439 = !{!"0x7842b80.w32.b0", !2440, i64 0}
!2440 = !{!"0x7842b80.w64.b0", !2441, i64 0}
!2441 = !{!"0x7842b80.w128.b0", !2442, i64 0}
!2442 = !{!"0x7842b80.w256.b0", !2443, i64 0}
!2443 = !{!"0x7842b80.w512.b0", !2444, i64 0}
!2444 = !{!"0x7842b80.w1024.b0", !2445, i64 0}
!2445 = !{!"int32", !2446, i64 0}
!2446 = !{!"0x7842b80", !8, i64 0}
!2447 = !{!2448, !2448, i64 0}
!2448 = !{!"0x7842b80.w1.b2", !2449, i64 0}
!2449 = !{!"0x7842b80.w2.b2", !2436, i64 0}
!2450 = !{!2451, !2451, i64 0}
!2451 = !{!"0x7842b80.w1.b3", !2449, i64 0}
!2452 = !{!2453, !2453, i64 0}
!2453 = !{!"0x7842b80.w1.b4", !2454, i64 0}
!2454 = !{!"0x7842b80.w2.b4", !2455, i64 0}
!2455 = !{!"0x7842b80.w4.b4", !2437, i64 0}
!2456 = !{!2457, !2457, i64 0}
!2457 = !{!"0x7842b80.w1.b5", !2454, i64 0}
!2458 = !{!2459, !2459, i64 0}
!2459 = !{!"0x7842b80.w1.b1", !2435, i64 0}
!2460 = !{!2461, !2461, i64 0}
!2461 = !{!"0x784f100.w1.b0", !2462, i64 0}
!2462 = !{!"0x784f100.w2.b0", !2463, i64 0}
!2463 = !{!"0x784f100.w4.b0", !2464, i64 0}
!2464 = !{!"0x784f100.w8.b0", !2465, i64 0}
!2465 = !{!"0x784f100.w16.b0", !2466, i64 0}
!2466 = !{!"0x784f100.w32.b0", !2467, i64 0}
!2467 = !{!"0x784f100.w64.b0", !2468, i64 0}
!2468 = !{!"0x784f100.w128.b0", !2469, i64 0}
!2469 = !{!"0x784f100.w256.b0", !2470, i64 0}
!2470 = !{!"0x784f100.w512.b0", !2471, i64 0}
!2471 = !{!"0x784f100.w1024.b0", !2472, i64 0}
!2472 = !{!"int64", !2473, i64 0}
!2473 = !{!"0x784f100", !8, i64 0}
!2474 = !{!2475, !2475, i64 0}
!2475 = !{!"0x784f100.w1.b1", !2462, i64 0}
!2476 = !{!2477, !2477, i64 0}
!2477 = !{!"0x784f100.w1.b2", !2478, i64 0}
!2478 = !{!"0x784f100.w2.b2", !2463, i64 0}
!2479 = !{!2480, !2480, i64 0}
!2480 = !{!"0x784f100.w1.b3", !2478, i64 0}
!2481 = !{!2482, !2482, i64 0}
!2482 = !{!"0x784f100.w1.b4", !2483, i64 0}
!2483 = !{!"0x784f100.w2.b4", !2484, i64 0}
!2484 = !{!"0x784f100.w4.b4", !2464, i64 0}
!2485 = !{!2486, !2486, i64 0}
!2486 = !{!"0x784ca40.w8.b0", !2487, i64 0}
!2487 = !{!"0x784ca40.w16.b0", !2488, i64 0}
!2488 = !{!"0x784ca40.w32.b0", !2489, i64 0}
!2489 = !{!"0x784ca40.w64.b0", !2490, i64 0}
!2490 = !{!"0x784ca40.w128.b0", !2491, i64 0}
!2491 = !{!"0x784ca40.w256.b0", !2492, i64 0}
!2492 = !{!"0x784ca40.w512.b0", !2493, i64 0}
!2493 = !{!"0x784ca40.w1024.b0", !2494, i64 0}
!2494 = !{!"int64", !2495, i64 0}
!2495 = !{!"0x784ca40", !8, i64 0}
!2496 = !{!2497, !2497, i64 0}
!2497 = !{!"0x784ca40.w1.b0", !2498, i64 0}
!2498 = !{!"0x784ca40.w2.b0", !2499, i64 0}
!2499 = !{!"0x784ca40.w4.b0", !2486, i64 0}
!2500 = !{!2501, !2501, i64 0}
!2501 = !{!"0x784f370.w1.b0", !2502, i64 0}
!2502 = !{!"0x784f370.w2.b0", !2503, i64 0}
!2503 = !{!"0x784f370.w4.b0", !2504, i64 0}
!2504 = !{!"0x784f370.w8.b0", !2505, i64 0}
!2505 = !{!"0x784f370.w16.b0", !2506, i64 0}
!2506 = !{!"0x784f370.w32.b0", !2507, i64 0}
!2507 = !{!"0x784f370.w64.b0", !2508, i64 0}
!2508 = !{!"0x784f370.w128.b0", !2509, i64 0}
!2509 = !{!"0x784f370.w256.b0", !2510, i64 0}
!2510 = !{!"0x784f370.w512.b0", !2511, i64 0}
!2511 = !{!"0x784f370.w1024.b0", !2512, i64 0}
!2512 = !{!"int64", !2513, i64 0}
!2513 = !{!"0x784f370", !8, i64 0}
!2514 = !{!2515, !2515, i64 0}
!2515 = !{!"0x784f370.w1.b1", !2502, i64 0}
!2516 = !{!2517, !2517, i64 0}
!2517 = !{!"0x784f370.w1.b2", !2518, i64 0}
!2518 = !{!"0x784f370.w2.b2", !2503, i64 0}
!2519 = !{!2520, !2520, i64 0}
!2520 = !{!"0x784f370.w1.b3", !2518, i64 0}
!2521 = !{!2522, !2522, i64 0}
!2522 = !{!"0x784f370.w1.b4", !2523, i64 0}
!2523 = !{!"0x784f370.w2.b4", !2524, i64 0}
!2524 = !{!"0x784f370.w4.b4", !2504, i64 0}
!2525 = !{!2526, !2526, i64 0}
!2526 = !{!"0x784f370.w1.b5", !2523, i64 0}
!2527 = !{!2528, !2528, i64 0}
!2528 = !{!"0x784f3f0.w8.b0", !2529, i64 0}
!2529 = !{!"0x784f3f0.w16.b0", !2530, i64 0}
!2530 = !{!"0x784f3f0.w32.b0", !2531, i64 0}
!2531 = !{!"0x784f3f0.w64.b0", !2532, i64 0}
!2532 = !{!"0x784f3f0.w128.b0", !2533, i64 0}
!2533 = !{!"0x784f3f0.w256.b0", !2534, i64 0}
!2534 = !{!"0x784f3f0.w512.b0", !2535, i64 0}
!2535 = !{!"0x784f3f0.w1024.b0", !2536, i64 0}
!2536 = !{!"int64", !2537, i64 0}
!2537 = !{!"0x784f3f0", !8, i64 0}
!2538 = !{!2539, !2539, i64 0}
!2539 = !{!"0x784f3f0.w1.b1", !2540, i64 0}
!2540 = !{!"0x784f3f0.w2.b0", !2541, i64 0}
!2541 = !{!"0x784f3f0.w4.b0", !2528, i64 0}
!2542 = !{!2543, !2543, i64 0}
!2543 = !{!"0x784f3f0.w1.b0", !2540, i64 0}
!2544 = !{!2545, !2545, i64 0}
!2545 = !{!"0x7851010.w1.b0", !2546, i64 0}
!2546 = !{!"0x7851010.w2.b0", !2547, i64 0}
!2547 = !{!"0x7851010.w4.b0", !2548, i64 0}
!2548 = !{!"0x7851010.w8.b0", !2549, i64 0}
!2549 = !{!"0x7851010.w16.b0", !2550, i64 0}
!2550 = !{!"0x7851010.w32.b0", !2551, i64 0}
!2551 = !{!"0x7851010.w64.b0", !2552, i64 0}
!2552 = !{!"0x7851010.w128.b0", !2553, i64 0}
!2553 = !{!"0x7851010.w256.b0", !2554, i64 0}
!2554 = !{!"0x7851010.w512.b0", !2555, i64 0}
!2555 = !{!"0x7851010.w1024.b0", !2556, i64 0}
!2556 = !{!"int64", !2557, i64 0}
!2557 = !{!"0x7851010", !8, i64 0}
!2558 = !{!2559, !2559, i64 0}
!2559 = !{!"0x7851010.w1.b1", !2546, i64 0}
!2560 = !{!2561, !2561, i64 0}
!2561 = !{!"0x7851010.w1.b2", !2562, i64 0}
!2562 = !{!"0x7851010.w2.b2", !2547, i64 0}
!2563 = !{!2564, !2564, i64 0}
!2564 = !{!"0x7851010.w1.b3", !2562, i64 0}
!2565 = !{!2566, !2566, i64 0}
!2566 = !{!"0x7851010.w1.b4", !2567, i64 0}
!2567 = !{!"0x7851010.w2.b4", !2568, i64 0}
!2568 = !{!"0x7851010.w4.b4", !2548, i64 0}
!2569 = !{!2570, !2570, i64 0}
!2570 = !{!"0x78527b0.w8.b0", !2571, i64 0}
!2571 = !{!"0x78527b0.w16.b0", !2572, i64 0}
!2572 = !{!"0x78527b0.w32.b0", !2573, i64 0}
!2573 = !{!"0x78527b0.w64.b0", !2574, i64 0}
!2574 = !{!"0x78527b0.w128.b0", !2575, i64 0}
!2575 = !{!"0x78527b0.w256.b0", !2576, i64 0}
!2576 = !{!"0x78527b0.w512.b0", !2577, i64 0}
!2577 = !{!"0x78527b0.w1024.b0", !2578, i64 0}
!2578 = !{!"int64", !2579, i64 0}
!2579 = !{!"0x78527b0", !8, i64 0}
!2580 = !{!2581, !2581, i64 0}
!2581 = !{!"0x78527b0.w1.b0", !2582, i64 0}
!2582 = !{!"0x78527b0.w2.b0", !2583, i64 0}
!2583 = !{!"0x78527b0.w4.b0", !2570, i64 0}
!2584 = !{!2585, !2585, i64 0}
!2585 = !{!"0x7853c10.w1.b0", !2586, i64 0}
!2586 = !{!"0x7853c10.w2.b0", !2587, i64 0}
!2587 = !{!"0x7853c10.w4.b0", !2588, i64 0}
!2588 = !{!"0x7853c10.w8.b0", !2589, i64 0}
!2589 = !{!"0x7853c10.w16.b0", !2590, i64 0}
!2590 = !{!"0x7853c10.w32.b0", !2591, i64 0}
!2591 = !{!"0x7853c10.w64.b0", !2592, i64 0}
!2592 = !{!"0x7853c10.w128.b0", !2593, i64 0}
!2593 = !{!"0x7853c10.w256.b0", !2594, i64 0}
!2594 = !{!"0x7853c10.w512.b0", !2595, i64 0}
!2595 = !{!"0x7853c10.w1024.b0", !2596, i64 0}
!2596 = !{!"int64", !2597, i64 0}
!2597 = !{!"0x7853c10", !8, i64 0}
!2598 = !{!2599, !2599, i64 0}
!2599 = !{!"0x7853c10.w1.b1", !2586, i64 0}
!2600 = !{!2601, !2601, i64 0}
!2601 = !{!"0x7853c10.w1.b2", !2602, i64 0}
!2602 = !{!"0x7853c10.w2.b2", !2587, i64 0}
!2603 = !{!2604, !2604, i64 0}
!2604 = !{!"0x7853c10.w1.b3", !2602, i64 0}
!2605 = !{!2606, !2606, i64 0}
!2606 = !{!"0x7853c10.w1.b4", !2607, i64 0}
!2607 = !{!"0x7853c10.w2.b4", !2608, i64 0}
!2608 = !{!"0x7853c10.w4.b4", !2588, i64 0}
!2609 = !{!2610, !2610, i64 0}
!2610 = !{!"0x7853c60.w8.b0", !2611, i64 0}
!2611 = !{!"0x7853c60.w16.b0", !2612, i64 0}
!2612 = !{!"0x7853c60.w32.b0", !2613, i64 0}
!2613 = !{!"0x7853c60.w64.b0", !2614, i64 0}
!2614 = !{!"0x7853c60.w128.b0", !2615, i64 0}
!2615 = !{!"0x7853c60.w256.b0", !2616, i64 0}
!2616 = !{!"0x7853c60.w512.b0", !2617, i64 0}
!2617 = !{!"0x7853c60.w1024.b0", !2618, i64 0}
!2618 = !{!"int64", !2619, i64 0}
!2619 = !{!"0x7853c60", !8, i64 0}
!2620 = !{!2621, !2621, i64 0}
!2621 = !{!"0x7853c60.w1.b0", !2622, i64 0}
!2622 = !{!"0x7853c60.w2.b0", !2623, i64 0}
!2623 = !{!"0x7853c60.w4.b0", !2610, i64 0}
!2624 = !{!2625, !2625, i64 0}
!2625 = !{!"0x7855070.w1.b0", !2626, i64 0}
!2626 = !{!"0x7855070.w2.b0", !2627, i64 0}
!2627 = !{!"0x7855070.w4.b0", !2628, i64 0}
!2628 = !{!"0x7855070.w8.b0", !2629, i64 0}
!2629 = !{!"0x7855070.w16.b0", !2630, i64 0}
!2630 = !{!"0x7855070.w32.b0", !2631, i64 0}
!2631 = !{!"0x7855070.w64.b0", !2632, i64 0}
!2632 = !{!"0x7855070.w128.b0", !2633, i64 0}
!2633 = !{!"0x7855070.w256.b0", !2634, i64 0}
!2634 = !{!"0x7855070.w512.b0", !2635, i64 0}
!2635 = !{!"0x7855070.w1024.b0", !2636, i64 0}
!2636 = !{!"int64", !2637, i64 0}
!2637 = !{!"0x7855070", !8, i64 0}
!2638 = !{!2639, !2639, i64 0}
!2639 = !{!"0x7855070.w1.b1", !2626, i64 0}
!2640 = !{!2641, !2641, i64 0}
!2641 = !{!"0x7855070.w1.b2", !2642, i64 0}
!2642 = !{!"0x7855070.w2.b2", !2627, i64 0}
!2643 = !{!2644, !2644, i64 0}
!2644 = !{!"0x7855070.w1.b3", !2642, i64 0}
!2645 = !{!2646, !2646, i64 0}
!2646 = !{!"0x7855070.w1.b4", !2647, i64 0}
!2647 = !{!"0x7855070.w2.b4", !2648, i64 0}
!2648 = !{!"0x7855070.w4.b4", !2628, i64 0}
!2649 = !{!2650, !2650, i64 0}
!2650 = !{!"0x78567e0.w8.b0", !2651, i64 0}
!2651 = !{!"0x78567e0.w16.b0", !2652, i64 0}
!2652 = !{!"0x78567e0.w32.b0", !2653, i64 0}
!2653 = !{!"0x78567e0.w64.b0", !2654, i64 0}
!2654 = !{!"0x78567e0.w128.b0", !2655, i64 0}
!2655 = !{!"0x78567e0.w256.b0", !2656, i64 0}
!2656 = !{!"0x78567e0.w512.b0", !2657, i64 0}
!2657 = !{!"0x78567e0.w1024.b0", !2658, i64 0}
!2658 = !{!"int64", !2659, i64 0}
!2659 = !{!"0x78567e0", !8, i64 0}
!2660 = !{!2661, !2661, i64 0}
!2661 = !{!"0x78567e0.w1.b0", !2662, i64 0}
!2662 = !{!"0x78567e0.w2.b0", !2663, i64 0}
!2663 = !{!"0x78567e0.w4.b0", !2650, i64 0}
!2664 = !{!2665, !2665, i64 0}
!2665 = !{!"0x7857aa0.w1.b0", !2666, i64 0}
!2666 = !{!"0x7857aa0.w2.b0", !2667, i64 0}
!2667 = !{!"0x7857aa0.w4.b0", !2668, i64 0}
!2668 = !{!"0x7857aa0.w8.b0", !2669, i64 0}
!2669 = !{!"0x7857aa0.w16.b0", !2670, i64 0}
!2670 = !{!"0x7857aa0.w32.b0", !2671, i64 0}
!2671 = !{!"0x7857aa0.w64.b0", !2672, i64 0}
!2672 = !{!"0x7857aa0.w128.b0", !2673, i64 0}
!2673 = !{!"0x7857aa0.w256.b0", !2674, i64 0}
!2674 = !{!"0x7857aa0.w512.b0", !2675, i64 0}
!2675 = !{!"0x7857aa0.w1024.b0", !2676, i64 0}
!2676 = !{!"int64", !2677, i64 0}
!2677 = !{!"0x7857aa0", !8, i64 0}
!2678 = !{!2679, !2679, i64 0}
!2679 = !{!"0x7857aa0.w1.b1", !2666, i64 0}
!2680 = !{!2681, !2681, i64 0}
!2681 = !{!"0x7857aa0.w1.b2", !2682, i64 0}
!2682 = !{!"0x7857aa0.w2.b2", !2667, i64 0}
!2683 = !{!2684, !2684, i64 0}
!2684 = !{!"0x7857aa0.w1.b3", !2682, i64 0}
!2685 = !{!2686, !2686, i64 0}
!2686 = !{!"0x7857aa0.w1.b4", !2687, i64 0}
!2687 = !{!"0x7857aa0.w2.b4", !2688, i64 0}
!2688 = !{!"0x7857aa0.w4.b4", !2668, i64 0}
!2689 = !{!2690, !2690, i64 0}
!2690 = !{!"0x7858eb0.w8.b0", !2691, i64 0}
!2691 = !{!"0x7858eb0.w16.b0", !2692, i64 0}
!2692 = !{!"0x7858eb0.w32.b0", !2693, i64 0}
!2693 = !{!"0x7858eb0.w64.b0", !2694, i64 0}
!2694 = !{!"0x7858eb0.w128.b0", !2695, i64 0}
!2695 = !{!"0x7858eb0.w256.b0", !2696, i64 0}
!2696 = !{!"0x7858eb0.w512.b0", !2697, i64 0}
!2697 = !{!"0x7858eb0.w1024.b0", !2698, i64 0}
!2698 = !{!"int64", !2699, i64 0}
!2699 = !{!"0x7858eb0", !8, i64 0}
!2700 = !{!2701, !2701, i64 0}
!2701 = !{!"0x7858eb0.w1.b0", !2702, i64 0}
!2702 = !{!"0x7858eb0.w2.b0", !2703, i64 0}
!2703 = !{!"0x7858eb0.w4.b0", !2690, i64 0}
!2704 = !{!2705, !2705, i64 0}
!2705 = !{!"float32", !2706, i64 0}
!2706 = !{!"0x7847b50", !8, i64 0}
!2707 = !{!2708, !2708, i64 0}
!2708 = !{!"float32", !2709, i64 0}
!2709 = !{!"0x7847c60", !8, i64 0}
!2710 = !{!2711, !2711, i64 0}
!2711 = !{!"float32", !2712, i64 0}
!2712 = !{!"0x7847760", !8, i64 0}
!2713 = !{!2714, !2714, i64 0}
!2714 = !{!"float32", !2715, i64 0}
!2715 = !{!"0x7840630", !8, i64 0}
!2716 = !{!2717, !2717, i64 0}
!2717 = !{!"float32", !2718, i64 0}
!2718 = !{!"0x78426a0", !8, i64 0}
!2719 = !{!2720, !2720, i64 0}
!2720 = !{!"float32", !2721, i64 0}
!2721 = !{!"0x78466c0", !8, i64 0}
!2722 = !{!2723, !2723, i64 0}
!2723 = !{!"float32", !2724, i64 0}
!2724 = !{!"0x78444c0", !8, i64 0}
!2725 = !{!2726, !2726, i64 0}
!2726 = !{!"0xde208f0.w1.b0", !2727, i64 0}
!2727 = !{!"0xde208f0.w2.b0", !2728, i64 0}
!2728 = !{!"0xde208f0.w4.b0", !2729, i64 0}
!2729 = !{!"0xde208f0.w8.b0", !2730, i64 0}
!2730 = !{!"0xde208f0.w16.b0", !2731, i64 0}
!2731 = !{!"0xde208f0.w32.b0", !2732, i64 0}
!2732 = !{!"0xde208f0.w64.b0", !2733, i64 0}
!2733 = !{!"0xde208f0.w128.b0", !2734, i64 0}
!2734 = !{!"0xde208f0.w256.b0", !2735, i64 0}
!2735 = !{!"0xde208f0.w512.b0", !2736, i64 0}
!2736 = !{!"0xde208f0.w1024.b0", !2737, i64 0}
!2737 = !{!"int32", !2738, i64 0}
!2738 = !{!"0xde208f0", !8, i64 0}
!2739 = !{!2740, !2740, i64 0}
!2740 = !{!"0xde208f0.w1.b2", !2741, i64 0}
!2741 = !{!"0xde208f0.w2.b2", !2728, i64 0}
!2742 = !{!2743, !2743, i64 0}
!2743 = !{!"0xde208f0.w1.b1", !2727, i64 0}
!2744 = !{!2745, !2745, i64 0}
!2745 = !{!"0x7c6b200.w1.b0", !2746, i64 0}
!2746 = !{!"0x7c6b200.w2.b0", !2747, i64 0}
!2747 = !{!"0x7c6b200.w4.b0", !2748, i64 0}
!2748 = !{!"0x7c6b200.w8.b0", !2749, i64 0}
!2749 = !{!"0x7c6b200.w16.b0", !2750, i64 0}
!2750 = !{!"0x7c6b200.w32.b0", !2751, i64 0}
!2751 = !{!"0x7c6b200.w64.b0", !2752, i64 0}
!2752 = !{!"0x7c6b200.w128.b0", !2753, i64 0}
!2753 = !{!"0x7c6b200.w256.b0", !2754, i64 0}
!2754 = !{!"0x7c6b200.w512.b0", !2755, i64 0}
!2755 = !{!"0x7c6b200.w1024.b0", !2756, i64 0}
!2756 = !{!"int64", !2757, i64 0}
!2757 = !{!"0x7c6b200", !8, i64 0}
!2758 = !{!2759, !2759, i64 0}
!2759 = !{!"0x7c6b200.w1.b1", !2746, i64 0}
!2760 = !{!2761, !2761, i64 0}
!2761 = !{!"0x7c6b200.w1.b2", !2762, i64 0}
!2762 = !{!"0x7c6b200.w2.b2", !2747, i64 0}
!2763 = !{!2764, !2764, i64 0}
!2764 = !{!"0x7c6b200.w1.b3", !2762, i64 0}
!2765 = !{!2766, !2766, i64 0}
!2766 = !{!"0x7c6b200.w1.b4", !2767, i64 0}
!2767 = !{!"0x7c6b200.w2.b4", !2768, i64 0}
!2768 = !{!"0x7c6b200.w4.b4", !2748, i64 0}
!2769 = !{!2770, !2770, i64 0}
!2770 = !{!"0x1a6e9a40.w8.b0", !2771, i64 0}
!2771 = !{!"0x1a6e9a40.w16.b0", !2772, i64 0}
!2772 = !{!"0x1a6e9a40.w32.b0", !2773, i64 0}
!2773 = !{!"0x1a6e9a40.w64.b0", !2774, i64 0}
!2774 = !{!"0x1a6e9a40.w128.b0", !2775, i64 0}
!2775 = !{!"0x1a6e9a40.w256.b0", !2776, i64 0}
!2776 = !{!"0x1a6e9a40.w512.b0", !2777, i64 0}
!2777 = !{!"0x1a6e9a40.w1024.b0", !2778, i64 0}
!2778 = !{!"int64", !2779, i64 0}
!2779 = !{!"0x1a6e9a40", !8, i64 0}
!2780 = !{!2781, !2781, i64 0}
!2781 = !{!"0x1a6e9a40.w1.b0", !2782, i64 0}
!2782 = !{!"0x1a6e9a40.w2.b0", !2783, i64 0}
!2783 = !{!"0x1a6e9a40.w4.b0", !2770, i64 0}
!2784 = !{!2785, !2785, i64 0}
!2785 = !{!"0x10308db0.w1.b0", !2786, i64 0}
!2786 = !{!"0x10308db0.w2.b0", !2787, i64 0}
!2787 = !{!"0x10308db0.w4.b0", !2788, i64 0}
!2788 = !{!"0x10308db0.w8.b0", !2789, i64 0}
!2789 = !{!"0x10308db0.w16.b0", !2790, i64 0}
!2790 = !{!"0x10308db0.w32.b0", !2791, i64 0}
!2791 = !{!"0x10308db0.w64.b0", !2792, i64 0}
!2792 = !{!"0x10308db0.w128.b0", !2793, i64 0}
!2793 = !{!"0x10308db0.w256.b0", !2794, i64 0}
!2794 = !{!"0x10308db0.w512.b0", !2795, i64 0}
!2795 = !{!"0x10308db0.w1024.b0", !2796, i64 0}
!2796 = !{!"int64", !2797, i64 0}
!2797 = !{!"0x10308db0", !8, i64 0}
!2798 = !{!2799, !2799, i64 0}
!2799 = !{!"0x10308db0.w1.b1", !2786, i64 0}
!2800 = !{!2801, !2801, i64 0}
!2801 = !{!"0x10308db0.w1.b2", !2802, i64 0}
!2802 = !{!"0x10308db0.w2.b2", !2787, i64 0}
!2803 = !{!2804, !2804, i64 0}
!2804 = !{!"0x10308db0.w1.b3", !2802, i64 0}
!2805 = !{!2806, !2806, i64 0}
!2806 = !{!"0x10308db0.w1.b4", !2807, i64 0}
!2807 = !{!"0x10308db0.w2.b4", !2808, i64 0}
!2808 = !{!"0x10308db0.w4.b4", !2788, i64 0}
!2809 = !{!2810, !2810, i64 0}
!2810 = !{!"0x1afcc770.w8.b0", !2811, i64 0}
!2811 = !{!"0x1afcc770.w16.b0", !2812, i64 0}
!2812 = !{!"0x1afcc770.w32.b0", !2813, i64 0}
!2813 = !{!"0x1afcc770.w64.b0", !2814, i64 0}
!2814 = !{!"0x1afcc770.w128.b0", !2815, i64 0}
!2815 = !{!"0x1afcc770.w256.b0", !2816, i64 0}
!2816 = !{!"0x1afcc770.w512.b0", !2817, i64 0}
!2817 = !{!"0x1afcc770.w1024.b0", !2818, i64 0}
!2818 = !{!"int64", !2819, i64 0}
!2819 = !{!"0x1afcc770", !8, i64 0}
!2820 = !{!2821, !2821, i64 0}
!2821 = !{!"0x1afcc770.w1.b0", !2822, i64 0}
!2822 = !{!"0x1afcc770.w2.b0", !2823, i64 0}
!2823 = !{!"0x1afcc770.w4.b0", !2810, i64 0}
!2824 = !{!2825, !2825, i64 0}
!2825 = !{!"0x6373850.w1.b0", !2826, i64 0}
!2826 = !{!"0x6373850.w2.b0", !2827, i64 0}
!2827 = !{!"0x6373850.w4.b0", !2828, i64 0}
!2828 = !{!"0x6373850.w8.b0", !2829, i64 0}
!2829 = !{!"0x6373850.w16.b0", !2830, i64 0}
!2830 = !{!"0x6373850.w32.b0", !2831, i64 0}
!2831 = !{!"0x6373850.w64.b0", !2832, i64 0}
!2832 = !{!"0x6373850.w128.b0", !2833, i64 0}
!2833 = !{!"0x6373850.w256.b0", !2834, i64 0}
!2834 = !{!"0x6373850.w512.b0", !2835, i64 0}
!2835 = !{!"0x6373850.w1024.b0", !2836, i64 0}
!2836 = !{!"int64", !2837, i64 0}
!2837 = !{!"0x6373850", !8, i64 0}
!2838 = !{!2839, !2839, i64 0}
!2839 = !{!"0x6373850.w1.b1", !2826, i64 0}
!2840 = !{!2841, !2841, i64 0}
!2841 = !{!"0x6373850.w1.b2", !2842, i64 0}
!2842 = !{!"0x6373850.w2.b2", !2827, i64 0}
!2843 = !{!2844, !2844, i64 0}
!2844 = !{!"0x6373850.w1.b3", !2842, i64 0}
!2845 = !{!2846, !2846, i64 0}
!2846 = !{!"0x6373850.w1.b4", !2847, i64 0}
!2847 = !{!"0x6373850.w2.b4", !2848, i64 0}
!2848 = !{!"0x6373850.w4.b4", !2828, i64 0}
!2849 = !{!2850, !2850, i64 0}
!2850 = !{!"0x8dbd460.w8.b0", !2851, i64 0}
!2851 = !{!"0x8dbd460.w16.b0", !2852, i64 0}
!2852 = !{!"0x8dbd460.w32.b0", !2853, i64 0}
!2853 = !{!"0x8dbd460.w64.b0", !2854, i64 0}
!2854 = !{!"0x8dbd460.w128.b0", !2855, i64 0}
!2855 = !{!"0x8dbd460.w256.b0", !2856, i64 0}
!2856 = !{!"0x8dbd460.w512.b0", !2857, i64 0}
!2857 = !{!"0x8dbd460.w1024.b0", !2858, i64 0}
!2858 = !{!"int64", !2859, i64 0}
!2859 = !{!"0x8dbd460", !8, i64 0}
!2860 = !{!2861, !2861, i64 0}
!2861 = !{!"0x8dbd460.w1.b0", !2862, i64 0}
!2862 = !{!"0x8dbd460.w2.b0", !2863, i64 0}
!2863 = !{!"0x8dbd460.w4.b0", !2850, i64 0}
!2864 = !{!2865, !2865, i64 0}
!2865 = !{!"float32", !2866, i64 0}
!2866 = !{!"0x14717050", !8, i64 0}
!2867 = !{!2868, !2868, i64 0}
!2868 = !{!"float32", !2869, i64 0}
!2869 = !{!"0x5660e20", !8, i64 0}
!2870 = !{!2871, !2871, i64 0}
!2871 = !{!"float32", !2872, i64 0}
!2872 = !{!"0x1ae22300", !8, i64 0}
!2873 = !{!2874, !2874, i64 0}
!2874 = !{!"0x1ae604f0.w1.b0", !2875, i64 0}
!2875 = !{!"0x1ae604f0.w2.b0", !2876, i64 0}
!2876 = !{!"0x1ae604f0.w4.b0", !2877, i64 0}
!2877 = !{!"0x1ae604f0.w8.b0", !2878, i64 0}
!2878 = !{!"0x1ae604f0.w16.b0", !2879, i64 0}
!2879 = !{!"0x1ae604f0.w32.b0", !2880, i64 0}
!2880 = !{!"0x1ae604f0.w64.b0", !2881, i64 0}
!2881 = !{!"0x1ae604f0.w128.b0", !2882, i64 0}
!2882 = !{!"0x1ae604f0.w256.b0", !2883, i64 0}
!2883 = !{!"0x1ae604f0.w512.b0", !2884, i64 0}
!2884 = !{!"0x1ae604f0.w1024.b0", !2885, i64 0}
!2885 = !{!"int32", !2886, i64 0}
!2886 = !{!"0x1ae604f0", !8, i64 0}
!2887 = !{!2888, !2888, i64 0}
!2888 = !{!"0x1ae604f0.w1.b1", !2875, i64 0}
!2889 = !{!2890, !2890, i64 0}
!2890 = !{!"0x1af6e550.w1.b0", !2891, i64 0}
!2891 = !{!"0x1af6e550.w2.b0", !2892, i64 0}
!2892 = !{!"0x1af6e550.w4.b0", !2893, i64 0}
!2893 = !{!"0x1af6e550.w8.b0", !2894, i64 0}
!2894 = !{!"0x1af6e550.w16.b0", !2895, i64 0}
!2895 = !{!"0x1af6e550.w32.b0", !2896, i64 0}
!2896 = !{!"0x1af6e550.w64.b0", !2897, i64 0}
!2897 = !{!"0x1af6e550.w128.b0", !2898, i64 0}
!2898 = !{!"0x1af6e550.w256.b0", !2899, i64 0}
!2899 = !{!"0x1af6e550.w512.b0", !2900, i64 0}
!2900 = !{!"0x1af6e550.w1024.b0", !2901, i64 0}
!2901 = !{!"int64", !2902, i64 0}
!2902 = !{!"0x1af6e550", !8, i64 0}
!2903 = !{!2904, !2904, i64 0}
!2904 = !{!"0x1af6e550.w1.b1", !2891, i64 0}
!2905 = !{!2906, !2906, i64 0}
!2906 = !{!"0x1af6e550.w1.b2", !2907, i64 0}
!2907 = !{!"0x1af6e550.w2.b2", !2892, i64 0}
!2908 = !{!2909, !2909, i64 0}
!2909 = !{!"0x1af6e550.w1.b3", !2907, i64 0}
!2910 = !{!2911, !2911, i64 0}
!2911 = !{!"0x1af6e550.w1.b4", !2912, i64 0}
!2912 = !{!"0x1af6e550.w2.b4", !2913, i64 0}
!2913 = !{!"0x1af6e550.w4.b4", !2893, i64 0}
!2914 = !{!2915, !2915, i64 0}
!2915 = !{!"0x1af6ea80.w8.b0", !2916, i64 0}
!2916 = !{!"0x1af6ea80.w16.b0", !2917, i64 0}
!2917 = !{!"0x1af6ea80.w32.b0", !2918, i64 0}
!2918 = !{!"0x1af6ea80.w64.b0", !2919, i64 0}
!2919 = !{!"0x1af6ea80.w128.b0", !2920, i64 0}
!2920 = !{!"0x1af6ea80.w256.b0", !2921, i64 0}
!2921 = !{!"0x1af6ea80.w512.b0", !2922, i64 0}
!2922 = !{!"0x1af6ea80.w1024.b0", !2923, i64 0}
!2923 = !{!"int64", !2924, i64 0}
!2924 = !{!"0x1af6ea80", !8, i64 0}
!2925 = !{!2926, !2926, i64 0}
!2926 = !{!"0x1af6ea80.w1.b0", !2927, i64 0}
!2927 = !{!"0x1af6ea80.w2.b0", !2928, i64 0}
!2928 = !{!"0x1af6ea80.w4.b0", !2915, i64 0}
!2929 = !{!2930, !2930, i64 0}
!2930 = !{!"0x1af6ecd0.w1.b0", !2931, i64 0}
!2931 = !{!"0x1af6ecd0.w2.b0", !2932, i64 0}
!2932 = !{!"0x1af6ecd0.w4.b0", !2933, i64 0}
!2933 = !{!"0x1af6ecd0.w8.b0", !2934, i64 0}
!2934 = !{!"0x1af6ecd0.w16.b0", !2935, i64 0}
!2935 = !{!"0x1af6ecd0.w32.b0", !2936, i64 0}
!2936 = !{!"0x1af6ecd0.w64.b0", !2937, i64 0}
!2937 = !{!"0x1af6ecd0.w128.b0", !2938, i64 0}
!2938 = !{!"0x1af6ecd0.w256.b0", !2939, i64 0}
!2939 = !{!"0x1af6ecd0.w512.b0", !2940, i64 0}
!2940 = !{!"0x1af6ecd0.w1024.b0", !2941, i64 0}
!2941 = !{!"int64", !2942, i64 0}
!2942 = !{!"0x1af6ecd0", !8, i64 0}
!2943 = !{!2944, !2944, i64 0}
!2944 = !{!"0x1af6ecd0.w1.b1", !2931, i64 0}
!2945 = !{!2946, !2946, i64 0}
!2946 = !{!"0x1af6ecd0.w1.b2", !2947, i64 0}
!2947 = !{!"0x1af6ecd0.w2.b2", !2932, i64 0}
!2948 = !{!2949, !2949, i64 0}
!2949 = !{!"0x1af6ecd0.w1.b3", !2947, i64 0}
!2950 = !{!2951, !2951, i64 0}
!2951 = !{!"0x1af6ecd0.w1.b4", !2952, i64 0}
!2952 = !{!"0x1af6ecd0.w2.b4", !2953, i64 0}
!2953 = !{!"0x1af6ecd0.w4.b4", !2933, i64 0}
!2954 = !{!2955, !2955, i64 0}
!2955 = !{!"0x1af6e6f0.w8.b0", !2956, i64 0}
!2956 = !{!"0x1af6e6f0.w16.b0", !2957, i64 0}
!2957 = !{!"0x1af6e6f0.w32.b0", !2958, i64 0}
!2958 = !{!"0x1af6e6f0.w64.b0", !2959, i64 0}
!2959 = !{!"0x1af6e6f0.w128.b0", !2960, i64 0}
!2960 = !{!"0x1af6e6f0.w256.b0", !2961, i64 0}
!2961 = !{!"0x1af6e6f0.w512.b0", !2962, i64 0}
!2962 = !{!"0x1af6e6f0.w1024.b0", !2963, i64 0}
!2963 = !{!"int64", !2964, i64 0}
!2964 = !{!"0x1af6e6f0", !8, i64 0}
!2965 = !{!2966, !2966, i64 0}
!2966 = !{!"0x1af6e6f0.w1.b0", !2967, i64 0}
!2967 = !{!"0x1af6e6f0.w2.b0", !2968, i64 0}
!2968 = !{!"0x1af6e6f0.w4.b0", !2955, i64 0}
!2969 = !{!2970, !2970, i64 0}
!2970 = !{!"float32", !2971, i64 0}
!2971 = !{!"0x1af63aa0", !8, i64 0}
!2972 = !{!2973, !2973, i64 0}
!2973 = !{!"float32", !2974, i64 0}
!2974 = !{!"0x1af638b0", !8, i64 0}
!2975 = !{!2976, !2976, i64 0}
!2976 = !{!"0x13f8bdb0.w1.b0", !2977, i64 0}
!2977 = !{!"0x13f8bdb0.w2.b0", !2978, i64 0}
!2978 = !{!"0x13f8bdb0.w4.b0", !2979, i64 0}
!2979 = !{!"0x13f8bdb0.w8.b0", !2980, i64 0}
!2980 = !{!"0x13f8bdb0.w16.b0", !2981, i64 0}
!2981 = !{!"0x13f8bdb0.w32.b0", !2982, i64 0}
!2982 = !{!"0x13f8bdb0.w64.b0", !2983, i64 0}
!2983 = !{!"0x13f8bdb0.w128.b0", !2984, i64 0}
!2984 = !{!"0x13f8bdb0.w256.b0", !2985, i64 0}
!2985 = !{!"0x13f8bdb0.w512.b0", !2986, i64 0}
!2986 = !{!"0x13f8bdb0.w1024.b0", !2987, i64 0}
!2987 = !{!"int32", !2988, i64 0}
!2988 = !{!"0x13f8bdb0", !8, i64 0}
!2989 = !{!2990, !2990, i64 0}
!2990 = !{!"0x13f8bdb0.w1.b1", !2977, i64 0}
!2991 = !{!2992, !2992, i64 0}
!2992 = !{!"0x13f92fb0.w1.b0", !2993, i64 0}
!2993 = !{!"0x13f92fb0.w2.b0", !2994, i64 0}
!2994 = !{!"0x13f92fb0.w4.b0", !2995, i64 0}
!2995 = !{!"0x13f92fb0.w8.b0", !2996, i64 0}
!2996 = !{!"0x13f92fb0.w16.b0", !2997, i64 0}
!2997 = !{!"0x13f92fb0.w32.b0", !2998, i64 0}
!2998 = !{!"0x13f92fb0.w64.b0", !2999, i64 0}
!2999 = !{!"0x13f92fb0.w128.b0", !3000, i64 0}
!3000 = !{!"0x13f92fb0.w256.b0", !3001, i64 0}
!3001 = !{!"0x13f92fb0.w512.b0", !3002, i64 0}
!3002 = !{!"0x13f92fb0.w1024.b0", !3003, i64 0}
!3003 = !{!"int64", !3004, i64 0}
!3004 = !{!"0x13f92fb0", !8, i64 0}
!3005 = !{!3006, !3006, i64 0}
!3006 = !{!"0x13f92fb0.w1.b1", !2993, i64 0}
!3007 = !{!3008, !3008, i64 0}
!3008 = !{!"0x13f92fb0.w1.b2", !3009, i64 0}
!3009 = !{!"0x13f92fb0.w2.b2", !2994, i64 0}
!3010 = !{!3011, !3011, i64 0}
!3011 = !{!"0x13f92fb0.w1.b3", !3009, i64 0}
!3012 = !{!3013, !3013, i64 0}
!3013 = !{!"0x13f92fb0.w1.b4", !3014, i64 0}
!3014 = !{!"0x13f92fb0.w2.b4", !3015, i64 0}
!3015 = !{!"0x13f92fb0.w4.b4", !2995, i64 0}
!3016 = !{!3017, !3017, i64 0}
!3017 = !{!"0x13f935e0.w8.b0", !3018, i64 0}
!3018 = !{!"0x13f935e0.w16.b0", !3019, i64 0}
!3019 = !{!"0x13f935e0.w32.b0", !3020, i64 0}
!3020 = !{!"0x13f935e0.w64.b0", !3021, i64 0}
!3021 = !{!"0x13f935e0.w128.b0", !3022, i64 0}
!3022 = !{!"0x13f935e0.w256.b0", !3023, i64 0}
!3023 = !{!"0x13f935e0.w512.b0", !3024, i64 0}
!3024 = !{!"0x13f935e0.w1024.b0", !3025, i64 0}
!3025 = !{!"int64", !3026, i64 0}
!3026 = !{!"0x13f935e0", !8, i64 0}
!3027 = !{!3028, !3028, i64 0}
!3028 = !{!"0x13f935e0.w1.b0", !3029, i64 0}
!3029 = !{!"0x13f935e0.w2.b0", !3030, i64 0}
!3030 = !{!"0x13f935e0.w4.b0", !3017, i64 0}
!3031 = !{!3032, !3032, i64 0}
!3032 = !{!"0x13f93930.w1.b0", !3033, i64 0}
!3033 = !{!"0x13f93930.w2.b0", !3034, i64 0}
!3034 = !{!"0x13f93930.w4.b0", !3035, i64 0}
!3035 = !{!"0x13f93930.w8.b0", !3036, i64 0}
!3036 = !{!"0x13f93930.w16.b0", !3037, i64 0}
!3037 = !{!"0x13f93930.w32.b0", !3038, i64 0}
!3038 = !{!"0x13f93930.w64.b0", !3039, i64 0}
!3039 = !{!"0x13f93930.w128.b0", !3040, i64 0}
!3040 = !{!"0x13f93930.w256.b0", !3041, i64 0}
!3041 = !{!"0x13f93930.w512.b0", !3042, i64 0}
!3042 = !{!"0x13f93930.w1024.b0", !3043, i64 0}
!3043 = !{!"int64", !3044, i64 0}
!3044 = !{!"0x13f93930", !8, i64 0}
!3045 = !{!3046, !3046, i64 0}
!3046 = !{!"0x13f93930.w1.b1", !3033, i64 0}
!3047 = !{!3048, !3048, i64 0}
!3048 = !{!"0x13f93930.w1.b2", !3049, i64 0}
!3049 = !{!"0x13f93930.w2.b2", !3034, i64 0}
!3050 = !{!3051, !3051, i64 0}
!3051 = !{!"0x13f93930.w1.b3", !3049, i64 0}
!3052 = !{!3053, !3053, i64 0}
!3053 = !{!"0x13f93930.w1.b4", !3054, i64 0}
!3054 = !{!"0x13f93930.w2.b4", !3055, i64 0}
!3055 = !{!"0x13f93930.w4.b4", !3035, i64 0}
!3056 = !{!3057, !3057, i64 0}
!3057 = !{!"0x13f931e0.w8.b0", !3058, i64 0}
!3058 = !{!"0x13f931e0.w16.b0", !3059, i64 0}
!3059 = !{!"0x13f931e0.w32.b0", !3060, i64 0}
!3060 = !{!"0x13f931e0.w64.b0", !3061, i64 0}
!3061 = !{!"0x13f931e0.w128.b0", !3062, i64 0}
!3062 = !{!"0x13f931e0.w256.b0", !3063, i64 0}
!3063 = !{!"0x13f931e0.w512.b0", !3064, i64 0}
!3064 = !{!"0x13f931e0.w1024.b0", !3065, i64 0}
!3065 = !{!"int64", !3066, i64 0}
!3066 = !{!"0x13f931e0", !8, i64 0}
!3067 = !{!3068, !3068, i64 0}
!3068 = !{!"0x13f931e0.w1.b0", !3069, i64 0}
!3069 = !{!"0x13f931e0.w2.b0", !3070, i64 0}
!3070 = !{!"0x13f931e0.w4.b0", !3057, i64 0}
!3071 = !{!3072, !3072, i64 0}
!3072 = !{!"float32", !3073, i64 0}
!3073 = !{!"0x14049270", !8, i64 0}
!3074 = !{!3075, !3075, i64 0}
!3075 = !{!"float32", !3076, i64 0}
!3076 = !{!"0x14049820", !8, i64 0}
!3077 = !{!3078, !3078, i64 0}
!3078 = !{!"0x7801310.w1.b0", !3079, i64 0}
!3079 = !{!"0x7801310.w2.b0", !3080, i64 0}
!3080 = !{!"0x7801310.w4.b0", !3081, i64 0}
!3081 = !{!"0x7801310.w8.b0", !3082, i64 0}
!3082 = !{!"0x7801310.w16.b0", !3083, i64 0}
!3083 = !{!"0x7801310.w32.b0", !3084, i64 0}
!3084 = !{!"0x7801310.w64.b0", !3085, i64 0}
!3085 = !{!"0x7801310.w128.b0", !3086, i64 0}
!3086 = !{!"0x7801310.w256.b0", !3087, i64 0}
!3087 = !{!"0x7801310.w512.b0", !3088, i64 0}
!3088 = !{!"0x7801310.w1024.b0", !3089, i64 0}
!3089 = !{!"int32", !3090, i64 0}
!3090 = !{!"0x7801310", !8, i64 0}
!3091 = !{!3092, !3092, i64 0}
!3092 = !{!"0x7801310.w1.b1", !3079, i64 0}
!3093 = !{!3094, !3094, i64 0}
!3094 = !{!"0x78042b0.w1.b0", !3095, i64 0}
!3095 = !{!"0x78042b0.w2.b0", !3096, i64 0}
!3096 = !{!"0x78042b0.w4.b0", !3097, i64 0}
!3097 = !{!"0x78042b0.w8.b0", !3098, i64 0}
!3098 = !{!"0x78042b0.w16.b0", !3099, i64 0}
!3099 = !{!"0x78042b0.w32.b0", !3100, i64 0}
!3100 = !{!"0x78042b0.w64.b0", !3101, i64 0}
!3101 = !{!"0x78042b0.w128.b0", !3102, i64 0}
!3102 = !{!"0x78042b0.w256.b0", !3103, i64 0}
!3103 = !{!"0x78042b0.w512.b0", !3104, i64 0}
!3104 = !{!"0x78042b0.w1024.b0", !3105, i64 0}
!3105 = !{!"int64", !3106, i64 0}
!3106 = !{!"0x78042b0", !8, i64 0}
!3107 = !{!3108, !3108, i64 0}
!3108 = !{!"0x78042b0.w1.b1", !3095, i64 0}
!3109 = !{!3110, !3110, i64 0}
!3110 = !{!"0x78042b0.w1.b2", !3111, i64 0}
!3111 = !{!"0x78042b0.w2.b2", !3096, i64 0}
!3112 = !{!3113, !3113, i64 0}
!3113 = !{!"0x78042b0.w1.b3", !3111, i64 0}
!3114 = !{!3115, !3115, i64 0}
!3115 = !{!"0x78042b0.w1.b4", !3116, i64 0}
!3116 = !{!"0x78042b0.w2.b4", !3117, i64 0}
!3117 = !{!"0x78042b0.w4.b4", !3097, i64 0}
!3118 = !{!3119, !3119, i64 0}
!3119 = !{!"0x7804810.w8.b0", !3120, i64 0}
!3120 = !{!"0x7804810.w16.b0", !3121, i64 0}
!3121 = !{!"0x7804810.w32.b0", !3122, i64 0}
!3122 = !{!"0x7804810.w64.b0", !3123, i64 0}
!3123 = !{!"0x7804810.w128.b0", !3124, i64 0}
!3124 = !{!"0x7804810.w256.b0", !3125, i64 0}
!3125 = !{!"0x7804810.w512.b0", !3126, i64 0}
!3126 = !{!"0x7804810.w1024.b0", !3127, i64 0}
!3127 = !{!"int64", !3128, i64 0}
!3128 = !{!"0x7804810", !8, i64 0}
!3129 = !{!3130, !3130, i64 0}
!3130 = !{!"0x7804810.w1.b0", !3131, i64 0}
!3131 = !{!"0x7804810.w2.b0", !3132, i64 0}
!3132 = !{!"0x7804810.w4.b0", !3119, i64 0}
!3133 = !{!3134, !3134, i64 0}
!3134 = !{!"0x7804a60.w1.b0", !3135, i64 0}
!3135 = !{!"0x7804a60.w2.b0", !3136, i64 0}
!3136 = !{!"0x7804a60.w4.b0", !3137, i64 0}
!3137 = !{!"0x7804a60.w8.b0", !3138, i64 0}
!3138 = !{!"0x7804a60.w16.b0", !3139, i64 0}
!3139 = !{!"0x7804a60.w32.b0", !3140, i64 0}
!3140 = !{!"0x7804a60.w64.b0", !3141, i64 0}
!3141 = !{!"0x7804a60.w128.b0", !3142, i64 0}
!3142 = !{!"0x7804a60.w256.b0", !3143, i64 0}
!3143 = !{!"0x7804a60.w512.b0", !3144, i64 0}
!3144 = !{!"0x7804a60.w1024.b0", !3145, i64 0}
!3145 = !{!"int64", !3146, i64 0}
!3146 = !{!"0x7804a60", !8, i64 0}
!3147 = !{!3148, !3148, i64 0}
!3148 = !{!"0x7804a60.w1.b1", !3135, i64 0}
!3149 = !{!3150, !3150, i64 0}
!3150 = !{!"0x7804a60.w1.b2", !3151, i64 0}
!3151 = !{!"0x7804a60.w2.b2", !3136, i64 0}
!3152 = !{!3153, !3153, i64 0}
!3153 = !{!"0x7804a60.w1.b3", !3151, i64 0}
!3154 = !{!3155, !3155, i64 0}
!3155 = !{!"0x7804a60.w1.b4", !3156, i64 0}
!3156 = !{!"0x7804a60.w2.b4", !3157, i64 0}
!3157 = !{!"0x7804a60.w4.b4", !3137, i64 0}
!3158 = !{!3159, !3159, i64 0}
!3159 = !{!"0x7804480.w8.b0", !3160, i64 0}
!3160 = !{!"0x7804480.w16.b0", !3161, i64 0}
!3161 = !{!"0x7804480.w32.b0", !3162, i64 0}
!3162 = !{!"0x7804480.w64.b0", !3163, i64 0}
!3163 = !{!"0x7804480.w128.b0", !3164, i64 0}
!3164 = !{!"0x7804480.w256.b0", !3165, i64 0}
!3165 = !{!"0x7804480.w512.b0", !3166, i64 0}
!3166 = !{!"0x7804480.w1024.b0", !3167, i64 0}
!3167 = !{!"int64", !3168, i64 0}
!3168 = !{!"0x7804480", !8, i64 0}
!3169 = !{!3170, !3170, i64 0}
!3170 = !{!"0x7804480.w1.b0", !3171, i64 0}
!3171 = !{!"0x7804480.w2.b0", !3172, i64 0}
!3172 = !{!"0x7804480.w4.b0", !3159, i64 0}
!3173 = !{!3174, !3174, i64 0}
!3174 = !{!"float32", !3175, i64 0}
!3175 = !{!"0x7801a30", !8, i64 0}
!3176 = !{!3177, !3177, i64 0}
!3177 = !{!"float32", !3178, i64 0}
!3178 = !{!"0x7a99390", !8, i64 0}
!3179 = !{!3180, !3180, i64 0}
!3180 = !{!"0x7a12490.w1.b0", !3181, i64 0}
!3181 = !{!"0x7a12490.w2.b0", !3182, i64 0}
!3182 = !{!"0x7a12490.w4.b0", !3183, i64 0}
!3183 = !{!"0x7a12490.w8.b0", !3184, i64 0}
!3184 = !{!"0x7a12490.w16.b0", !3185, i64 0}
!3185 = !{!"0x7a12490.w32.b0", !3186, i64 0}
!3186 = !{!"0x7a12490.w64.b0", !3187, i64 0}
!3187 = !{!"0x7a12490.w128.b0", !3188, i64 0}
!3188 = !{!"0x7a12490.w256.b0", !3189, i64 0}
!3189 = !{!"0x7a12490.w512.b0", !3190, i64 0}
!3190 = !{!"0x7a12490.w1024.b0", !3191, i64 0}
!3191 = !{!"int32", !3192, i64 0}
!3192 = !{!"0x7a12490", !8, i64 0}
!3193 = !{!3194, !3194, i64 0}
!3194 = !{!"0x7a12490.w1.b2", !3195, i64 0}
!3195 = !{!"0x7a12490.w2.b2", !3182, i64 0}
!3196 = !{!3197, !3197, i64 0}
!3197 = !{!"0x7a12490.w1.b3", !3195, i64 0}
!3198 = !{!3199, !3199, i64 0}
!3199 = !{!"0x7a12490.w1.b4", !3200, i64 0}
!3200 = !{!"0x7a12490.w2.b4", !3201, i64 0}
!3201 = !{!"0x7a12490.w4.b4", !3183, i64 0}
!3202 = !{!3203, !3203, i64 0}
!3203 = !{!"0x7a12490.w1.b1", !3181, i64 0}
!3204 = !{!3205, !3205, i64 0}
!3205 = !{!"0x7a18d40.w1.b0", !3206, i64 0}
!3206 = !{!"0x7a18d40.w2.b0", !3207, i64 0}
!3207 = !{!"0x7a18d40.w4.b0", !3208, i64 0}
!3208 = !{!"0x7a18d40.w8.b0", !3209, i64 0}
!3209 = !{!"0x7a18d40.w16.b0", !3210, i64 0}
!3210 = !{!"0x7a18d40.w32.b0", !3211, i64 0}
!3211 = !{!"0x7a18d40.w64.b0", !3212, i64 0}
!3212 = !{!"0x7a18d40.w128.b0", !3213, i64 0}
!3213 = !{!"0x7a18d40.w256.b0", !3214, i64 0}
!3214 = !{!"0x7a18d40.w512.b0", !3215, i64 0}
!3215 = !{!"0x7a18d40.w1024.b0", !3216, i64 0}
!3216 = !{!"int64", !3217, i64 0}
!3217 = !{!"0x7a18d40", !8, i64 0}
!3218 = !{!3219, !3219, i64 0}
!3219 = !{!"0x7a18d40.w1.b1", !3206, i64 0}
!3220 = !{!3221, !3221, i64 0}
!3221 = !{!"0x7a18d40.w1.b2", !3222, i64 0}
!3222 = !{!"0x7a18d40.w2.b2", !3207, i64 0}
!3223 = !{!3224, !3224, i64 0}
!3224 = !{!"0x7a18d40.w1.b3", !3222, i64 0}
!3225 = !{!3226, !3226, i64 0}
!3226 = !{!"0x7a18d40.w1.b4", !3227, i64 0}
!3227 = !{!"0x7a18d40.w2.b4", !3228, i64 0}
!3228 = !{!"0x7a18d40.w4.b4", !3208, i64 0}
!3229 = !{!3230, !3230, i64 0}
!3230 = !{!"0x7a17170.w8.b0", !3231, i64 0}
!3231 = !{!"0x7a17170.w16.b0", !3232, i64 0}
!3232 = !{!"0x7a17170.w32.b0", !3233, i64 0}
!3233 = !{!"0x7a17170.w64.b0", !3234, i64 0}
!3234 = !{!"0x7a17170.w128.b0", !3235, i64 0}
!3235 = !{!"0x7a17170.w256.b0", !3236, i64 0}
!3236 = !{!"0x7a17170.w512.b0", !3237, i64 0}
!3237 = !{!"0x7a17170.w1024.b0", !3238, i64 0}
!3238 = !{!"int64", !3239, i64 0}
!3239 = !{!"0x7a17170", !8, i64 0}
!3240 = !{!3241, !3241, i64 0}
!3241 = !{!"0x7a17170.w1.b0", !3242, i64 0}
!3242 = !{!"0x7a17170.w2.b0", !3243, i64 0}
!3243 = !{!"0x7a17170.w4.b0", !3230, i64 0}
!3244 = !{!3245, !3245, i64 0}
!3245 = !{!"0x7a1a8f0.w1.b0", !3246, i64 0}
!3246 = !{!"0x7a1a8f0.w2.b0", !3247, i64 0}
!3247 = !{!"0x7a1a8f0.w4.b0", !3248, i64 0}
!3248 = !{!"0x7a1a8f0.w8.b0", !3249, i64 0}
!3249 = !{!"0x7a1a8f0.w16.b0", !3250, i64 0}
!3250 = !{!"0x7a1a8f0.w32.b0", !3251, i64 0}
!3251 = !{!"0x7a1a8f0.w64.b0", !3252, i64 0}
!3252 = !{!"0x7a1a8f0.w128.b0", !3253, i64 0}
!3253 = !{!"0x7a1a8f0.w256.b0", !3254, i64 0}
!3254 = !{!"0x7a1a8f0.w512.b0", !3255, i64 0}
!3255 = !{!"0x7a1a8f0.w1024.b0", !3256, i64 0}
!3256 = !{!"int64", !3257, i64 0}
!3257 = !{!"0x7a1a8f0", !8, i64 0}
!3258 = !{!3259, !3259, i64 0}
!3259 = !{!"0x7a1a8f0.w1.b1", !3246, i64 0}
!3260 = !{!3261, !3261, i64 0}
!3261 = !{!"0x7a1a8f0.w1.b2", !3262, i64 0}
!3262 = !{!"0x7a1a8f0.w2.b2", !3247, i64 0}
!3263 = !{!3264, !3264, i64 0}
!3264 = !{!"0x7a1a8f0.w1.b3", !3262, i64 0}
!3265 = !{!3266, !3266, i64 0}
!3266 = !{!"0x7a1a8f0.w1.b4", !3267, i64 0}
!3267 = !{!"0x7a1a8f0.w2.b4", !3268, i64 0}
!3268 = !{!"0x7a1a8f0.w4.b4", !3248, i64 0}
!3269 = !{!3270, !3270, i64 0}
!3270 = !{!"0x7a1a8f0.w1.b5", !3267, i64 0}
!3271 = !{!3272, !3272, i64 0}
!3272 = !{!"0x7a1a6e0.w8.b0", !3273, i64 0}
!3273 = !{!"0x7a1a6e0.w16.b0", !3274, i64 0}
!3274 = !{!"0x7a1a6e0.w32.b0", !3275, i64 0}
!3275 = !{!"0x7a1a6e0.w64.b0", !3276, i64 0}
!3276 = !{!"0x7a1a6e0.w128.b0", !3277, i64 0}
!3277 = !{!"0x7a1a6e0.w256.b0", !3278, i64 0}
!3278 = !{!"0x7a1a6e0.w512.b0", !3279, i64 0}
!3279 = !{!"0x7a1a6e0.w1024.b0", !3280, i64 0}
!3280 = !{!"int64", !3281, i64 0}
!3281 = !{!"0x7a1a6e0", !8, i64 0}
!3282 = !{!3283, !3283, i64 0}
!3283 = !{!"0x7a1a6e0.w1.b1", !3284, i64 0}
!3284 = !{!"0x7a1a6e0.w2.b0", !3285, i64 0}
!3285 = !{!"0x7a1a6e0.w4.b0", !3272, i64 0}
!3286 = !{!3287, !3287, i64 0}
!3287 = !{!"0x7a1a6e0.w1.b0", !3284, i64 0}
!3288 = !{!3289, !3289, i64 0}
!3289 = !{!"0x7a1c340.w1.b0", !3290, i64 0}
!3290 = !{!"0x7a1c340.w2.b0", !3291, i64 0}
!3291 = !{!"0x7a1c340.w4.b0", !3292, i64 0}
!3292 = !{!"0x7a1c340.w8.b0", !3293, i64 0}
!3293 = !{!"0x7a1c340.w16.b0", !3294, i64 0}
!3294 = !{!"0x7a1c340.w32.b0", !3295, i64 0}
!3295 = !{!"0x7a1c340.w64.b0", !3296, i64 0}
!3296 = !{!"0x7a1c340.w128.b0", !3297, i64 0}
!3297 = !{!"0x7a1c340.w256.b0", !3298, i64 0}
!3298 = !{!"0x7a1c340.w512.b0", !3299, i64 0}
!3299 = !{!"0x7a1c340.w1024.b0", !3300, i64 0}
!3300 = !{!"int64", !3301, i64 0}
!3301 = !{!"0x7a1c340", !8, i64 0}
!3302 = !{!3303, !3303, i64 0}
!3303 = !{!"0x7a1c340.w1.b1", !3290, i64 0}
!3304 = !{!3305, !3305, i64 0}
!3305 = !{!"0x7a1c340.w1.b2", !3306, i64 0}
!3306 = !{!"0x7a1c340.w2.b2", !3291, i64 0}
!3307 = !{!3308, !3308, i64 0}
!3308 = !{!"0x7a1c340.w1.b3", !3306, i64 0}
!3309 = !{!3310, !3310, i64 0}
!3310 = !{!"0x7a1c340.w1.b4", !3311, i64 0}
!3311 = !{!"0x7a1c340.w2.b4", !3312, i64 0}
!3312 = !{!"0x7a1c340.w4.b4", !3292, i64 0}
!3313 = !{!3314, !3314, i64 0}
!3314 = !{!"0x7a1db40.w8.b0", !3315, i64 0}
!3315 = !{!"0x7a1db40.w16.b0", !3316, i64 0}
!3316 = !{!"0x7a1db40.w32.b0", !3317, i64 0}
!3317 = !{!"0x7a1db40.w64.b0", !3318, i64 0}
!3318 = !{!"0x7a1db40.w128.b0", !3319, i64 0}
!3319 = !{!"0x7a1db40.w256.b0", !3320, i64 0}
!3320 = !{!"0x7a1db40.w512.b0", !3321, i64 0}
!3321 = !{!"0x7a1db40.w1024.b0", !3322, i64 0}
!3322 = !{!"int64", !3323, i64 0}
!3323 = !{!"0x7a1db40", !8, i64 0}
!3324 = !{!3325, !3325, i64 0}
!3325 = !{!"0x7a1db40.w1.b0", !3326, i64 0}
!3326 = !{!"0x7a1db40.w2.b0", !3327, i64 0}
!3327 = !{!"0x7a1db40.w4.b0", !3314, i64 0}
!3328 = !{!3329, !3329, i64 0}
!3329 = !{!"0x7a1f050.w1.b0", !3330, i64 0}
!3330 = !{!"0x7a1f050.w2.b0", !3331, i64 0}
!3331 = !{!"0x7a1f050.w4.b0", !3332, i64 0}
!3332 = !{!"0x7a1f050.w8.b0", !3333, i64 0}
!3333 = !{!"0x7a1f050.w16.b0", !3334, i64 0}
!3334 = !{!"0x7a1f050.w32.b0", !3335, i64 0}
!3335 = !{!"0x7a1f050.w64.b0", !3336, i64 0}
!3336 = !{!"0x7a1f050.w128.b0", !3337, i64 0}
!3337 = !{!"0x7a1f050.w256.b0", !3338, i64 0}
!3338 = !{!"0x7a1f050.w512.b0", !3339, i64 0}
!3339 = !{!"0x7a1f050.w1024.b0", !3340, i64 0}
!3340 = !{!"int64", !3341, i64 0}
!3341 = !{!"0x7a1f050", !8, i64 0}
!3342 = !{!3343, !3343, i64 0}
!3343 = !{!"0x7a1f050.w1.b1", !3330, i64 0}
!3344 = !{!3345, !3345, i64 0}
!3345 = !{!"0x7a1f050.w1.b2", !3346, i64 0}
!3346 = !{!"0x7a1f050.w2.b2", !3331, i64 0}
!3347 = !{!3348, !3348, i64 0}
!3348 = !{!"0x7a1f050.w1.b3", !3346, i64 0}
!3349 = !{!3350, !3350, i64 0}
!3350 = !{!"0x7a1f050.w1.b4", !3351, i64 0}
!3351 = !{!"0x7a1f050.w2.b4", !3352, i64 0}
!3352 = !{!"0x7a1f050.w4.b4", !3332, i64 0}
!3353 = !{!3354, !3354, i64 0}
!3354 = !{!"0x7a1f0a0.w8.b0", !3355, i64 0}
!3355 = !{!"0x7a1f0a0.w16.b0", !3356, i64 0}
!3356 = !{!"0x7a1f0a0.w32.b0", !3357, i64 0}
!3357 = !{!"0x7a1f0a0.w64.b0", !3358, i64 0}
!3358 = !{!"0x7a1f0a0.w128.b0", !3359, i64 0}
!3359 = !{!"0x7a1f0a0.w256.b0", !3360, i64 0}
!3360 = !{!"0x7a1f0a0.w512.b0", !3361, i64 0}
!3361 = !{!"0x7a1f0a0.w1024.b0", !3362, i64 0}
!3362 = !{!"int64", !3363, i64 0}
!3363 = !{!"0x7a1f0a0", !8, i64 0}
!3364 = !{!3365, !3365, i64 0}
!3365 = !{!"0x7a1f0a0.w1.b0", !3366, i64 0}
!3366 = !{!"0x7a1f0a0.w2.b0", !3367, i64 0}
!3367 = !{!"0x7a1f0a0.w4.b0", !3354, i64 0}
!3368 = !{!3369, !3369, i64 0}
!3369 = !{!"0x7a20620.w1.b0", !3370, i64 0}
!3370 = !{!"0x7a20620.w2.b0", !3371, i64 0}
!3371 = !{!"0x7a20620.w4.b0", !3372, i64 0}
!3372 = !{!"0x7a20620.w8.b0", !3373, i64 0}
!3373 = !{!"0x7a20620.w16.b0", !3374, i64 0}
!3374 = !{!"0x7a20620.w32.b0", !3375, i64 0}
!3375 = !{!"0x7a20620.w64.b0", !3376, i64 0}
!3376 = !{!"0x7a20620.w128.b0", !3377, i64 0}
!3377 = !{!"0x7a20620.w256.b0", !3378, i64 0}
!3378 = !{!"0x7a20620.w512.b0", !3379, i64 0}
!3379 = !{!"0x7a20620.w1024.b0", !3380, i64 0}
!3380 = !{!"int64", !3381, i64 0}
!3381 = !{!"0x7a20620", !8, i64 0}
!3382 = !{!3383, !3383, i64 0}
!3383 = !{!"0x7a20620.w1.b1", !3370, i64 0}
!3384 = !{!3385, !3385, i64 0}
!3385 = !{!"0x7a20620.w1.b2", !3386, i64 0}
!3386 = !{!"0x7a20620.w2.b2", !3371, i64 0}
!3387 = !{!3388, !3388, i64 0}
!3388 = !{!"0x7a20620.w1.b3", !3386, i64 0}
!3389 = !{!3390, !3390, i64 0}
!3390 = !{!"0x7a20620.w1.b4", !3391, i64 0}
!3391 = !{!"0x7a20620.w2.b4", !3392, i64 0}
!3392 = !{!"0x7a20620.w4.b4", !3372, i64 0}
!3393 = !{!3394, !3394, i64 0}
!3394 = !{!"0x7a21de0.w8.b0", !3395, i64 0}
!3395 = !{!"0x7a21de0.w16.b0", !3396, i64 0}
!3396 = !{!"0x7a21de0.w32.b0", !3397, i64 0}
!3397 = !{!"0x7a21de0.w64.b0", !3398, i64 0}
!3398 = !{!"0x7a21de0.w128.b0", !3399, i64 0}
!3399 = !{!"0x7a21de0.w256.b0", !3400, i64 0}
!3400 = !{!"0x7a21de0.w512.b0", !3401, i64 0}
!3401 = !{!"0x7a21de0.w1024.b0", !3402, i64 0}
!3402 = !{!"int64", !3403, i64 0}
!3403 = !{!"0x7a21de0", !8, i64 0}
!3404 = !{!3405, !3405, i64 0}
!3405 = !{!"0x7a21de0.w1.b0", !3406, i64 0}
!3406 = !{!"0x7a21de0.w2.b0", !3407, i64 0}
!3407 = !{!"0x7a21de0.w4.b0", !3394, i64 0}
!3408 = !{!3409, !3409, i64 0}
!3409 = !{!"float32", !3410, i64 0}
!3410 = !{!"0x7a115d0", !8, i64 0}
!3411 = !{!3412, !3412, i64 0}
!3412 = !{!"float32", !3413, i64 0}
!3413 = !{!"0x7a0bce0", !8, i64 0}
!3414 = !{!3415, !3415, i64 0}
!3415 = !{!"float32", !3416, i64 0}
!3416 = !{!"0x7a0e0b0", !8, i64 0}
!3417 = !{!3418, !3418, i64 0}
!3418 = !{!"float32", !3419, i64 0}
!3419 = !{!"0x7a12940", !8, i64 0}
!3420 = !{!3421, !3421, i64 0}
!3421 = !{!"float32", !3422, i64 0}
!3422 = !{!"0x7a12300", !8, i64 0}
!3423 = !{!3424, !3424, i64 0}
!3424 = !{!"0x782cf80.w1.b0", !3425, i64 0}
!3425 = !{!"0x782cf80.w2.b0", !3426, i64 0}
!3426 = !{!"0x782cf80.w4.b0", !3427, i64 0}
!3427 = !{!"0x782cf80.w8.b0", !3428, i64 0}
!3428 = !{!"0x782cf80.w16.b0", !3429, i64 0}
!3429 = !{!"0x782cf80.w32.b0", !3430, i64 0}
!3430 = !{!"0x782cf80.w64.b0", !3431, i64 0}
!3431 = !{!"0x782cf80.w128.b0", !3432, i64 0}
!3432 = !{!"0x782cf80.w256.b0", !3433, i64 0}
!3433 = !{!"0x782cf80.w512.b0", !3434, i64 0}
!3434 = !{!"0x782cf80.w1024.b0", !3435, i64 0}
!3435 = !{!"int32", !3436, i64 0}
!3436 = !{!"0x782cf80", !8, i64 0}
!3437 = !{!3438, !3438, i64 0}
!3438 = !{!"0x782cf80.w1.b1", !3425, i64 0}
!3439 = !{!3440, !3440, i64 0}
!3440 = !{!"0x140818c0.w1.b0", !3441, i64 0}
!3441 = !{!"0x140818c0.w2.b0", !3442, i64 0}
!3442 = !{!"0x140818c0.w4.b0", !3443, i64 0}
!3443 = !{!"0x140818c0.w8.b0", !3444, i64 0}
!3444 = !{!"0x140818c0.w16.b0", !3445, i64 0}
!3445 = !{!"0x140818c0.w32.b0", !3446, i64 0}
!3446 = !{!"0x140818c0.w64.b0", !3447, i64 0}
!3447 = !{!"0x140818c0.w128.b0", !3448, i64 0}
!3448 = !{!"0x140818c0.w256.b0", !3449, i64 0}
!3449 = !{!"0x140818c0.w512.b0", !3450, i64 0}
!3450 = !{!"0x140818c0.w1024.b0", !3451, i64 0}
!3451 = !{!"int64", !3452, i64 0}
!3452 = !{!"0x140818c0", !8, i64 0}
!3453 = !{!3454, !3454, i64 0}
!3454 = !{!"0x140818c0.w1.b1", !3441, i64 0}
!3455 = !{!3456, !3456, i64 0}
!3456 = !{!"0x140818c0.w1.b2", !3457, i64 0}
!3457 = !{!"0x140818c0.w2.b2", !3442, i64 0}
!3458 = !{!3459, !3459, i64 0}
!3459 = !{!"0x140818c0.w1.b3", !3457, i64 0}
!3460 = !{!3461, !3461, i64 0}
!3461 = !{!"0x140818c0.w1.b4", !3462, i64 0}
!3462 = !{!"0x140818c0.w2.b4", !3463, i64 0}
!3463 = !{!"0x140818c0.w4.b4", !3443, i64 0}
!3464 = !{!3465, !3465, i64 0}
!3465 = !{!"0x14081e80.w8.b0", !3466, i64 0}
!3466 = !{!"0x14081e80.w16.b0", !3467, i64 0}
!3467 = !{!"0x14081e80.w32.b0", !3468, i64 0}
!3468 = !{!"0x14081e80.w64.b0", !3469, i64 0}
!3469 = !{!"0x14081e80.w128.b0", !3470, i64 0}
!3470 = !{!"0x14081e80.w256.b0", !3471, i64 0}
!3471 = !{!"0x14081e80.w512.b0", !3472, i64 0}
!3472 = !{!"0x14081e80.w1024.b0", !3473, i64 0}
!3473 = !{!"int64", !3474, i64 0}
!3474 = !{!"0x14081e80", !8, i64 0}
!3475 = !{!3476, !3476, i64 0}
!3476 = !{!"0x14081e80.w1.b0", !3477, i64 0}
!3477 = !{!"0x14081e80.w2.b0", !3478, i64 0}
!3478 = !{!"0x14081e80.w4.b0", !3465, i64 0}
!3479 = !{!3480, !3480, i64 0}
!3480 = !{!"0x140820d0.w1.b0", !3481, i64 0}
!3481 = !{!"0x140820d0.w2.b0", !3482, i64 0}
!3482 = !{!"0x140820d0.w4.b0", !3483, i64 0}
!3483 = !{!"0x140820d0.w8.b0", !3484, i64 0}
!3484 = !{!"0x140820d0.w16.b0", !3485, i64 0}
!3485 = !{!"0x140820d0.w32.b0", !3486, i64 0}
!3486 = !{!"0x140820d0.w64.b0", !3487, i64 0}
!3487 = !{!"0x140820d0.w128.b0", !3488, i64 0}
!3488 = !{!"0x140820d0.w256.b0", !3489, i64 0}
!3489 = !{!"0x140820d0.w512.b0", !3490, i64 0}
!3490 = !{!"0x140820d0.w1024.b0", !3491, i64 0}
!3491 = !{!"int64", !3492, i64 0}
!3492 = !{!"0x140820d0", !8, i64 0}
!3493 = !{!3494, !3494, i64 0}
!3494 = !{!"0x140820d0.w1.b1", !3481, i64 0}
!3495 = !{!3496, !3496, i64 0}
!3496 = !{!"0x140820d0.w1.b2", !3497, i64 0}
!3497 = !{!"0x140820d0.w2.b2", !3482, i64 0}
!3498 = !{!3499, !3499, i64 0}
!3499 = !{!"0x140820d0.w1.b3", !3497, i64 0}
!3500 = !{!3501, !3501, i64 0}
!3501 = !{!"0x140820d0.w1.b4", !3502, i64 0}
!3502 = !{!"0x140820d0.w2.b4", !3503, i64 0}
!3503 = !{!"0x140820d0.w4.b4", !3483, i64 0}
!3504 = !{!3505, !3505, i64 0}
!3505 = !{!"0x14081af0.w8.b0", !3506, i64 0}
!3506 = !{!"0x14081af0.w16.b0", !3507, i64 0}
!3507 = !{!"0x14081af0.w32.b0", !3508, i64 0}
!3508 = !{!"0x14081af0.w64.b0", !3509, i64 0}
!3509 = !{!"0x14081af0.w128.b0", !3510, i64 0}
!3510 = !{!"0x14081af0.w256.b0", !3511, i64 0}
!3511 = !{!"0x14081af0.w512.b0", !3512, i64 0}
!3512 = !{!"0x14081af0.w1024.b0", !3513, i64 0}
!3513 = !{!"int64", !3514, i64 0}
!3514 = !{!"0x14081af0", !8, i64 0}
!3515 = !{!3516, !3516, i64 0}
!3516 = !{!"0x14081af0.w1.b0", !3517, i64 0}
!3517 = !{!"0x14081af0.w2.b0", !3518, i64 0}
!3518 = !{!"0x14081af0.w4.b0", !3505, i64 0}
!3519 = !{!3520, !3520, i64 0}
!3520 = !{!"float32", !3521, i64 0}
!3521 = !{!"0x7811000", !8, i64 0}
!3522 = !{!3523, !3523, i64 0}
!3523 = !{!"float32", !3524, i64 0}
!3524 = !{!"0x7817240", !8, i64 0}
!3525 = !{!3526, !3526, i64 0}
!3526 = !{!"0x1afa80a0.w1.b0", !3527, i64 0}
!3527 = !{!"0x1afa80a0.w2.b0", !3528, i64 0}
!3528 = !{!"0x1afa80a0.w4.b0", !3529, i64 0}
!3529 = !{!"0x1afa80a0.w8.b0", !3530, i64 0}
!3530 = !{!"0x1afa80a0.w16.b0", !3531, i64 0}
!3531 = !{!"0x1afa80a0.w32.b0", !3532, i64 0}
!3532 = !{!"0x1afa80a0.w64.b0", !3533, i64 0}
!3533 = !{!"0x1afa80a0.w128.b0", !3534, i64 0}
!3534 = !{!"0x1afa80a0.w256.b0", !3535, i64 0}
!3535 = !{!"0x1afa80a0.w512.b0", !3536, i64 0}
!3536 = !{!"0x1afa80a0.w1024.b0", !3537, i64 0}
!3537 = !{!"int32", !3538, i64 0}
!3538 = !{!"0x1afa80a0", !8, i64 0}
!3539 = !{!3540, !3540, i64 0}
!3540 = !{!"0x1afa80a0.w1.b1", !3527, i64 0}
!3541 = !{!3542, !3542, i64 0}
!3542 = !{!"0x1adca200.w1.b0", !3543, i64 0}
!3543 = !{!"0x1adca200.w2.b0", !3544, i64 0}
!3544 = !{!"0x1adca200.w4.b0", !3545, i64 0}
!3545 = !{!"0x1adca200.w8.b0", !3546, i64 0}
!3546 = !{!"0x1adca200.w16.b0", !3547, i64 0}
!3547 = !{!"0x1adca200.w32.b0", !3548, i64 0}
!3548 = !{!"0x1adca200.w64.b0", !3549, i64 0}
!3549 = !{!"0x1adca200.w128.b0", !3550, i64 0}
!3550 = !{!"0x1adca200.w256.b0", !3551, i64 0}
!3551 = !{!"0x1adca200.w512.b0", !3552, i64 0}
!3552 = !{!"0x1adca200.w1024.b0", !3553, i64 0}
!3553 = !{!"int64", !3554, i64 0}
!3554 = !{!"0x1adca200", !8, i64 0}
!3555 = !{!3556, !3556, i64 0}
!3556 = !{!"0x1adca200.w1.b1", !3543, i64 0}
!3557 = !{!3558, !3558, i64 0}
!3558 = !{!"0x1adca200.w1.b2", !3559, i64 0}
!3559 = !{!"0x1adca200.w2.b2", !3544, i64 0}
!3560 = !{!3561, !3561, i64 0}
!3561 = !{!"0x1adca200.w1.b3", !3559, i64 0}
!3562 = !{!3563, !3563, i64 0}
!3563 = !{!"0x1adca200.w1.b4", !3564, i64 0}
!3564 = !{!"0x1adca200.w2.b4", !3565, i64 0}
!3565 = !{!"0x1adca200.w4.b4", !3545, i64 0}
!3566 = !{!3567, !3567, i64 0}
!3567 = !{!"0x1aef0010.w8.b0", !3568, i64 0}
!3568 = !{!"0x1aef0010.w16.b0", !3569, i64 0}
!3569 = !{!"0x1aef0010.w32.b0", !3570, i64 0}
!3570 = !{!"0x1aef0010.w64.b0", !3571, i64 0}
!3571 = !{!"0x1aef0010.w128.b0", !3572, i64 0}
!3572 = !{!"0x1aef0010.w256.b0", !3573, i64 0}
!3573 = !{!"0x1aef0010.w512.b0", !3574, i64 0}
!3574 = !{!"0x1aef0010.w1024.b0", !3575, i64 0}
!3575 = !{!"int64", !3576, i64 0}
!3576 = !{!"0x1aef0010", !8, i64 0}
!3577 = !{!3578, !3578, i64 0}
!3578 = !{!"0x1aef0010.w1.b0", !3579, i64 0}
!3579 = !{!"0x1aef0010.w2.b0", !3580, i64 0}
!3580 = !{!"0x1aef0010.w4.b0", !3567, i64 0}
!3581 = !{!3582, !3582, i64 0}
!3582 = !{!"0x1afb0340.w1.b0", !3583, i64 0}
!3583 = !{!"0x1afb0340.w2.b0", !3584, i64 0}
!3584 = !{!"0x1afb0340.w4.b0", !3585, i64 0}
!3585 = !{!"0x1afb0340.w8.b0", !3586, i64 0}
!3586 = !{!"0x1afb0340.w16.b0", !3587, i64 0}
!3587 = !{!"0x1afb0340.w32.b0", !3588, i64 0}
!3588 = !{!"0x1afb0340.w64.b0", !3589, i64 0}
!3589 = !{!"0x1afb0340.w128.b0", !3590, i64 0}
!3590 = !{!"0x1afb0340.w256.b0", !3591, i64 0}
!3591 = !{!"0x1afb0340.w512.b0", !3592, i64 0}
!3592 = !{!"0x1afb0340.w1024.b0", !3593, i64 0}
!3593 = !{!"int64", !3594, i64 0}
!3594 = !{!"0x1afb0340", !8, i64 0}
!3595 = !{!3596, !3596, i64 0}
!3596 = !{!"0x1afb0340.w1.b1", !3583, i64 0}
!3597 = !{!3598, !3598, i64 0}
!3598 = !{!"0x1aec6a60.w1.b1", !3599, i64 0}
!3599 = !{!"0x1aec6a60.w2.b0", !3600, i64 0}
!3600 = !{!"0x1aec6a60.w4.b0", !3601, i64 0}
!3601 = !{!"0x1aec6a60.w8.b0", !3602, i64 0}
!3602 = !{!"0x1aec6a60.w16.b0", !3603, i64 0}
!3603 = !{!"0x1aec6a60.w32.b0", !3604, i64 0}
!3604 = !{!"0x1aec6a60.w64.b0", !3605, i64 0}
!3605 = !{!"0x1aec6a60.w128.b0", !3606, i64 0}
!3606 = !{!"0x1aec6a60.w256.b0", !3607, i64 0}
!3607 = !{!"0x1aec6a60.w512.b0", !3608, i64 0}
!3608 = !{!"0x1aec6a60.w1024.b0", !3609, i64 0}
!3609 = !{!"int64", !3610, i64 0}
!3610 = !{!"0x1aec6a60", !8, i64 0}
!3611 = !{!3612, !3612, i64 0}
!3612 = !{!"0x1aec6a60.w1.b0", !3599, i64 0}
!3613 = !{!3614, !3614, i64 0}
!3614 = !{!"0x7916cf0.w1.b0", !3615, i64 0}
!3615 = !{!"0x7916cf0.w2.b0", !3616, i64 0}
!3616 = !{!"0x7916cf0.w4.b0", !3617, i64 0}
!3617 = !{!"0x7916cf0.w8.b0", !3618, i64 0}
!3618 = !{!"0x7916cf0.w16.b0", !3619, i64 0}
!3619 = !{!"0x7916cf0.w32.b0", !3620, i64 0}
!3620 = !{!"0x7916cf0.w64.b0", !3621, i64 0}
!3621 = !{!"0x7916cf0.w128.b0", !3622, i64 0}
!3622 = !{!"0x7916cf0.w256.b0", !3623, i64 0}
!3623 = !{!"0x7916cf0.w512.b0", !3624, i64 0}
!3624 = !{!"0x7916cf0.w1024.b0", !3625, i64 0}
!3625 = !{!"int32", !3626, i64 0}
!3626 = !{!"0x7916cf0", !8, i64 0}
!3627 = !{!3628, !3628, i64 0}
!3628 = !{!"0x7916cf0.w1.b2", !3629, i64 0}
!3629 = !{!"0x7916cf0.w2.b2", !3616, i64 0}
!3630 = !{!3631, !3631, i64 0}
!3631 = !{!"0x7916cf0.w1.b3", !3629, i64 0}
!3632 = !{!3633, !3633, i64 0}
!3633 = !{!"0x7916cf0.w1.b4", !3634, i64 0}
!3634 = !{!"0x7916cf0.w2.b4", !3635, i64 0}
!3635 = !{!"0x7916cf0.w4.b4", !3617, i64 0}
!3636 = !{!3637, !3637, i64 0}
!3637 = !{!"0x7916cf0.w1.b5", !3634, i64 0}
!3638 = !{!3639, !3639, i64 0}
!3639 = !{!"0x7916cf0.w1.b1", !3615, i64 0}
!3640 = !{!3641, !3641, i64 0}
!3641 = !{!"0x7918740.w1.b0", !3642, i64 0}
!3642 = !{!"0x7918740.w2.b0", !3643, i64 0}
!3643 = !{!"0x7918740.w4.b0", !3644, i64 0}
!3644 = !{!"0x7918740.w8.b0", !3645, i64 0}
!3645 = !{!"0x7918740.w16.b0", !3646, i64 0}
!3646 = !{!"0x7918740.w32.b0", !3647, i64 0}
!3647 = !{!"0x7918740.w64.b0", !3648, i64 0}
!3648 = !{!"0x7918740.w128.b0", !3649, i64 0}
!3649 = !{!"0x7918740.w256.b0", !3650, i64 0}
!3650 = !{!"0x7918740.w512.b0", !3651, i64 0}
!3651 = !{!"0x7918740.w1024.b0", !3652, i64 0}
!3652 = !{!"int64", !3653, i64 0}
!3653 = !{!"0x7918740", !8, i64 0}
!3654 = !{!3655, !3655, i64 0}
!3655 = !{!"0x7918740.w1.b1", !3642, i64 0}
!3656 = !{!3657, !3657, i64 0}
!3657 = !{!"0x7918740.w1.b2", !3658, i64 0}
!3658 = !{!"0x7918740.w2.b2", !3643, i64 0}
!3659 = !{!3660, !3660, i64 0}
!3660 = !{!"0x7918740.w1.b3", !3658, i64 0}
!3661 = !{!3662, !3662, i64 0}
!3662 = !{!"0x7918740.w1.b4", !3663, i64 0}
!3663 = !{!"0x7918740.w2.b4", !3664, i64 0}
!3664 = !{!"0x7918740.w4.b4", !3644, i64 0}
!3665 = !{!3666, !3666, i64 0}
!3666 = !{!"0x7918cc0.w8.b0", !3667, i64 0}
!3667 = !{!"0x7918cc0.w16.b0", !3668, i64 0}
!3668 = !{!"0x7918cc0.w32.b0", !3669, i64 0}
!3669 = !{!"0x7918cc0.w64.b0", !3670, i64 0}
!3670 = !{!"0x7918cc0.w128.b0", !3671, i64 0}
!3671 = !{!"0x7918cc0.w256.b0", !3672, i64 0}
!3672 = !{!"0x7918cc0.w512.b0", !3673, i64 0}
!3673 = !{!"0x7918cc0.w1024.b0", !3674, i64 0}
!3674 = !{!"int64", !3675, i64 0}
!3675 = !{!"0x7918cc0", !8, i64 0}
!3676 = !{!3677, !3677, i64 0}
!3677 = !{!"0x7918cc0.w1.b0", !3678, i64 0}
!3678 = !{!"0x7918cc0.w2.b0", !3679, i64 0}
!3679 = !{!"0x7918cc0.w4.b0", !3666, i64 0}
!3680 = !{!3681, !3681, i64 0}
!3681 = !{!"0x7912840.w1.b0", !3682, i64 0}
!3682 = !{!"0x7912840.w2.b0", !3683, i64 0}
!3683 = !{!"0x7912840.w4.b0", !3684, i64 0}
!3684 = !{!"0x7912840.w8.b0", !3685, i64 0}
!3685 = !{!"0x7912840.w16.b0", !3686, i64 0}
!3686 = !{!"0x7912840.w32.b0", !3687, i64 0}
!3687 = !{!"0x7912840.w64.b0", !3688, i64 0}
!3688 = !{!"0x7912840.w128.b0", !3689, i64 0}
!3689 = !{!"0x7912840.w256.b0", !3690, i64 0}
!3690 = !{!"0x7912840.w512.b0", !3691, i64 0}
!3691 = !{!"0x7912840.w1024.b0", !3692, i64 0}
!3692 = !{!"int64", !3693, i64 0}
!3693 = !{!"0x7912840", !8, i64 0}
!3694 = !{!3695, !3695, i64 0}
!3695 = !{!"0x7912840.w1.b1", !3682, i64 0}
!3696 = !{!3697, !3697, i64 0}
!3697 = !{!"0x7912840.w1.b2", !3698, i64 0}
!3698 = !{!"0x7912840.w2.b2", !3683, i64 0}
!3699 = !{!3700, !3700, i64 0}
!3700 = !{!"0x7912840.w1.b3", !3698, i64 0}
!3701 = !{!3702, !3702, i64 0}
!3702 = !{!"0x7912840.w1.b4", !3703, i64 0}
!3703 = !{!"0x7912840.w2.b4", !3704, i64 0}
!3704 = !{!"0x7912840.w4.b4", !3684, i64 0}
!3705 = !{!3706, !3706, i64 0}
!3706 = !{!"0x7912840.w1.b5", !3703, i64 0}
!3707 = !{!3708, !3708, i64 0}
!3708 = !{!"0x7918970.w8.b0", !3709, i64 0}
!3709 = !{!"0x7918970.w16.b0", !3710, i64 0}
!3710 = !{!"0x7918970.w32.b0", !3711, i64 0}
!3711 = !{!"0x7918970.w64.b0", !3712, i64 0}
!3712 = !{!"0x7918970.w128.b0", !3713, i64 0}
!3713 = !{!"0x7918970.w256.b0", !3714, i64 0}
!3714 = !{!"0x7918970.w512.b0", !3715, i64 0}
!3715 = !{!"0x7918970.w1024.b0", !3716, i64 0}
!3716 = !{!"int64", !3717, i64 0}
!3717 = !{!"0x7918970", !8, i64 0}
!3718 = !{!3719, !3719, i64 0}
!3719 = !{!"0x7918970.w1.b1", !3720, i64 0}
!3720 = !{!"0x7918970.w2.b0", !3721, i64 0}
!3721 = !{!"0x7918970.w4.b0", !3708, i64 0}
!3722 = !{!3723, !3723, i64 0}
!3723 = !{!"0x7918970.w1.b0", !3720, i64 0}
!3724 = !{!3725, !3725, i64 0}
!3725 = !{!"0x7919820.w1.b0", !3726, i64 0}
!3726 = !{!"0x7919820.w2.b0", !3727, i64 0}
!3727 = !{!"0x7919820.w4.b0", !3728, i64 0}
!3728 = !{!"0x7919820.w8.b0", !3729, i64 0}
!3729 = !{!"0x7919820.w16.b0", !3730, i64 0}
!3730 = !{!"0x7919820.w32.b0", !3731, i64 0}
!3731 = !{!"0x7919820.w64.b0", !3732, i64 0}
!3732 = !{!"0x7919820.w128.b0", !3733, i64 0}
!3733 = !{!"0x7919820.w256.b0", !3734, i64 0}
!3734 = !{!"0x7919820.w512.b0", !3735, i64 0}
!3735 = !{!"0x7919820.w1024.b0", !3736, i64 0}
!3736 = !{!"int64", !3737, i64 0}
!3737 = !{!"0x7919820", !8, i64 0}
!3738 = !{!3739, !3739, i64 0}
!3739 = !{!"0x7919820.w1.b1", !3726, i64 0}
!3740 = !{!3741, !3741, i64 0}
!3741 = !{!"0x7919820.w1.b2", !3742, i64 0}
!3742 = !{!"0x7919820.w2.b2", !3727, i64 0}
!3743 = !{!3744, !3744, i64 0}
!3744 = !{!"0x7919820.w1.b3", !3742, i64 0}
!3745 = !{!3746, !3746, i64 0}
!3746 = !{!"0x7919820.w1.b4", !3747, i64 0}
!3747 = !{!"0x7919820.w2.b4", !3748, i64 0}
!3748 = !{!"0x7919820.w4.b4", !3728, i64 0}
!3749 = !{!3750, !3750, i64 0}
!3750 = !{!"0x791afc0.w8.b0", !3751, i64 0}
!3751 = !{!"0x791afc0.w16.b0", !3752, i64 0}
!3752 = !{!"0x791afc0.w32.b0", !3753, i64 0}
!3753 = !{!"0x791afc0.w64.b0", !3754, i64 0}
!3754 = !{!"0x791afc0.w128.b0", !3755, i64 0}
!3755 = !{!"0x791afc0.w256.b0", !3756, i64 0}
!3756 = !{!"0x791afc0.w512.b0", !3757, i64 0}
!3757 = !{!"0x791afc0.w1024.b0", !3758, i64 0}
!3758 = !{!"int64", !3759, i64 0}
!3759 = !{!"0x791afc0", !8, i64 0}
!3760 = !{!3761, !3761, i64 0}
!3761 = !{!"0x791afc0.w1.b0", !3762, i64 0}
!3762 = !{!"0x791afc0.w2.b0", !3763, i64 0}
!3763 = !{!"0x791afc0.w4.b0", !3750, i64 0}
!3764 = !{!3765, !3765, i64 0}
!3765 = !{!"0x791c420.w1.b0", !3766, i64 0}
!3766 = !{!"0x791c420.w2.b0", !3767, i64 0}
!3767 = !{!"0x791c420.w4.b0", !3768, i64 0}
!3768 = !{!"0x791c420.w8.b0", !3769, i64 0}
!3769 = !{!"0x791c420.w16.b0", !3770, i64 0}
!3770 = !{!"0x791c420.w32.b0", !3771, i64 0}
!3771 = !{!"0x791c420.w64.b0", !3772, i64 0}
!3772 = !{!"0x791c420.w128.b0", !3773, i64 0}
!3773 = !{!"0x791c420.w256.b0", !3774, i64 0}
!3774 = !{!"0x791c420.w512.b0", !3775, i64 0}
!3775 = !{!"0x791c420.w1024.b0", !3776, i64 0}
!3776 = !{!"int64", !3777, i64 0}
!3777 = !{!"0x791c420", !8, i64 0}
!3778 = !{!3779, !3779, i64 0}
!3779 = !{!"0x791c420.w1.b1", !3766, i64 0}
!3780 = !{!3781, !3781, i64 0}
!3781 = !{!"0x791c420.w1.b2", !3782, i64 0}
!3782 = !{!"0x791c420.w2.b2", !3767, i64 0}
!3783 = !{!3784, !3784, i64 0}
!3784 = !{!"0x791c420.w1.b3", !3782, i64 0}
!3785 = !{!3786, !3786, i64 0}
!3786 = !{!"0x791c420.w1.b4", !3787, i64 0}
!3787 = !{!"0x791c420.w2.b4", !3788, i64 0}
!3788 = !{!"0x791c420.w4.b4", !3768, i64 0}
!3789 = !{!3790, !3790, i64 0}
!3790 = !{!"0x791c470.w8.b0", !3791, i64 0}
!3791 = !{!"0x791c470.w16.b0", !3792, i64 0}
!3792 = !{!"0x791c470.w32.b0", !3793, i64 0}
!3793 = !{!"0x791c470.w64.b0", !3794, i64 0}
!3794 = !{!"0x791c470.w128.b0", !3795, i64 0}
!3795 = !{!"0x791c470.w256.b0", !3796, i64 0}
!3796 = !{!"0x791c470.w512.b0", !3797, i64 0}
!3797 = !{!"0x791c470.w1024.b0", !3798, i64 0}
!3798 = !{!"int64", !3799, i64 0}
!3799 = !{!"0x791c470", !8, i64 0}
!3800 = !{!3801, !3801, i64 0}
!3801 = !{!"0x791c470.w1.b0", !3802, i64 0}
!3802 = !{!"0x791c470.w2.b0", !3803, i64 0}
!3803 = !{!"0x791c470.w4.b0", !3790, i64 0}
!3804 = !{!3805, !3805, i64 0}
!3805 = !{!"0x791d880.w1.b0", !3806, i64 0}
!3806 = !{!"0x791d880.w2.b0", !3807, i64 0}
!3807 = !{!"0x791d880.w4.b0", !3808, i64 0}
!3808 = !{!"0x791d880.w8.b0", !3809, i64 0}
!3809 = !{!"0x791d880.w16.b0", !3810, i64 0}
!3810 = !{!"0x791d880.w32.b0", !3811, i64 0}
!3811 = !{!"0x791d880.w64.b0", !3812, i64 0}
!3812 = !{!"0x791d880.w128.b0", !3813, i64 0}
!3813 = !{!"0x791d880.w256.b0", !3814, i64 0}
!3814 = !{!"0x791d880.w512.b0", !3815, i64 0}
!3815 = !{!"0x791d880.w1024.b0", !3816, i64 0}
!3816 = !{!"int64", !3817, i64 0}
!3817 = !{!"0x791d880", !8, i64 0}
!3818 = !{!3819, !3819, i64 0}
!3819 = !{!"0x791d880.w1.b1", !3806, i64 0}
!3820 = !{!3821, !3821, i64 0}
!3821 = !{!"0x791d880.w1.b2", !3822, i64 0}
!3822 = !{!"0x791d880.w2.b2", !3807, i64 0}
!3823 = !{!3824, !3824, i64 0}
!3824 = !{!"0x791d880.w1.b3", !3822, i64 0}
!3825 = !{!3826, !3826, i64 0}
!3826 = !{!"0x791d880.w1.b4", !3827, i64 0}
!3827 = !{!"0x791d880.w2.b4", !3828, i64 0}
!3828 = !{!"0x791d880.w4.b4", !3808, i64 0}
!3829 = !{!3830, !3830, i64 0}
!3830 = !{!"0x791f030.w8.b0", !3831, i64 0}
!3831 = !{!"0x791f030.w16.b0", !3832, i64 0}
!3832 = !{!"0x791f030.w32.b0", !3833, i64 0}
!3833 = !{!"0x791f030.w64.b0", !3834, i64 0}
!3834 = !{!"0x791f030.w128.b0", !3835, i64 0}
!3835 = !{!"0x791f030.w256.b0", !3836, i64 0}
!3836 = !{!"0x791f030.w512.b0", !3837, i64 0}
!3837 = !{!"0x791f030.w1024.b0", !3838, i64 0}
!3838 = !{!"int64", !3839, i64 0}
!3839 = !{!"0x791f030", !8, i64 0}
!3840 = !{!3841, !3841, i64 0}
!3841 = !{!"0x791f030.w1.b0", !3842, i64 0}
!3842 = !{!"0x791f030.w2.b0", !3843, i64 0}
!3843 = !{!"0x791f030.w4.b0", !3830, i64 0}
!3844 = !{!3845, !3845, i64 0}
!3845 = !{!"0x7920430.w1.b0", !3846, i64 0}
!3846 = !{!"0x7920430.w2.b0", !3847, i64 0}
!3847 = !{!"0x7920430.w4.b0", !3848, i64 0}
!3848 = !{!"0x7920430.w8.b0", !3849, i64 0}
!3849 = !{!"0x7920430.w16.b0", !3850, i64 0}
!3850 = !{!"0x7920430.w32.b0", !3851, i64 0}
!3851 = !{!"0x7920430.w64.b0", !3852, i64 0}
!3852 = !{!"0x7920430.w128.b0", !3853, i64 0}
!3853 = !{!"0x7920430.w256.b0", !3854, i64 0}
!3854 = !{!"0x7920430.w512.b0", !3855, i64 0}
!3855 = !{!"0x7920430.w1024.b0", !3856, i64 0}
!3856 = !{!"int64", !3857, i64 0}
!3857 = !{!"0x7920430", !8, i64 0}
!3858 = !{!3859, !3859, i64 0}
!3859 = !{!"0x7920430.w1.b1", !3846, i64 0}
!3860 = !{!3861, !3861, i64 0}
!3861 = !{!"0x7920430.w1.b2", !3862, i64 0}
!3862 = !{!"0x7920430.w2.b2", !3847, i64 0}
!3863 = !{!3864, !3864, i64 0}
!3864 = !{!"0x7920430.w1.b3", !3862, i64 0}
!3865 = !{!3866, !3866, i64 0}
!3866 = !{!"0x7920430.w1.b4", !3867, i64 0}
!3867 = !{!"0x7920430.w2.b4", !3868, i64 0}
!3868 = !{!"0x7920430.w4.b4", !3848, i64 0}
!3869 = !{!3870, !3870, i64 0}
!3870 = !{!"0x79218f0.w8.b0", !3871, i64 0}
!3871 = !{!"0x79218f0.w16.b0", !3872, i64 0}
!3872 = !{!"0x79218f0.w32.b0", !3873, i64 0}
!3873 = !{!"0x79218f0.w64.b0", !3874, i64 0}
!3874 = !{!"0x79218f0.w128.b0", !3875, i64 0}
!3875 = !{!"0x79218f0.w256.b0", !3876, i64 0}
!3876 = !{!"0x79218f0.w512.b0", !3877, i64 0}
!3877 = !{!"0x79218f0.w1024.b0", !3878, i64 0}
!3878 = !{!"int64", !3879, i64 0}
!3879 = !{!"0x79218f0", !8, i64 0}
!3880 = !{!3881, !3881, i64 0}
!3881 = !{!"0x79218f0.w1.b0", !3882, i64 0}
!3882 = !{!"0x79218f0.w2.b0", !3883, i64 0}
!3883 = !{!"0x79218f0.w4.b0", !3870, i64 0}
!3884 = !{!3885, !3885, i64 0}
!3885 = !{!"float32", !3886, i64 0}
!3886 = !{!"0x790d7f0", !8, i64 0}
!3887 = !{!3888, !3888, i64 0}
!3888 = !{!"float32", !3889, i64 0}
!3889 = !{!"0x790b710", !8, i64 0}
!3890 = !{!3891, !3891, i64 0}
!3891 = !{!"float32", !3892, i64 0}
!3892 = !{!"0x7907350", !8, i64 0}
!3893 = !{!3894, !3894, i64 0}
!3894 = !{!"float32", !3895, i64 0}
!3895 = !{!"0x7909560", !8, i64 0}
!3896 = !{!3897, !3897, i64 0}
!3897 = !{!"float32", !3898, i64 0}
!3898 = !{!"0x790ecb0", !8, i64 0}
!3899 = !{!3900, !3900, i64 0}
!3900 = !{!"float32", !3901, i64 0}
!3901 = !{!"0x7907ea0", !8, i64 0}
!3902 = !{!3903, !3903, i64 0}
!3903 = !{!"0x7a9a1c0.w1.b0", !3904, i64 0}
!3904 = !{!"0x7a9a1c0.w2.b0", !3905, i64 0}
!3905 = !{!"0x7a9a1c0.w4.b0", !3906, i64 0}
!3906 = !{!"0x7a9a1c0.w8.b0", !3907, i64 0}
!3907 = !{!"0x7a9a1c0.w16.b0", !3908, i64 0}
!3908 = !{!"0x7a9a1c0.w32.b0", !3909, i64 0}
!3909 = !{!"0x7a9a1c0.w64.b0", !3910, i64 0}
!3910 = !{!"0x7a9a1c0.w128.b0", !3911, i64 0}
!3911 = !{!"0x7a9a1c0.w256.b0", !3912, i64 0}
!3912 = !{!"0x7a9a1c0.w512.b0", !3913, i64 0}
!3913 = !{!"0x7a9a1c0.w1024.b0", !3914, i64 0}
!3914 = !{!"int32", !3915, i64 0}
!3915 = !{!"0x7a9a1c0", !8, i64 0}
!3916 = !{!3917, !3917, i64 0}
!3917 = !{!"0x7a9a1c0.w1.b1", !3904, i64 0}
!3918 = !{!3919, !3919, i64 0}
!3919 = !{!"0x7a9b910.w1.b0", !3920, i64 0}
!3920 = !{!"0x7a9b910.w2.b0", !3921, i64 0}
!3921 = !{!"0x7a9b910.w4.b0", !3922, i64 0}
!3922 = !{!"0x7a9b910.w8.b0", !3923, i64 0}
!3923 = !{!"0x7a9b910.w16.b0", !3924, i64 0}
!3924 = !{!"0x7a9b910.w32.b0", !3925, i64 0}
!3925 = !{!"0x7a9b910.w64.b0", !3926, i64 0}
!3926 = !{!"0x7a9b910.w128.b0", !3927, i64 0}
!3927 = !{!"0x7a9b910.w256.b0", !3928, i64 0}
!3928 = !{!"0x7a9b910.w512.b0", !3929, i64 0}
!3929 = !{!"0x7a9b910.w1024.b0", !3930, i64 0}
!3930 = !{!"int64", !3931, i64 0}
!3931 = !{!"0x7a9b910", !8, i64 0}
!3932 = !{!3933, !3933, i64 0}
!3933 = !{!"0x7a9b910.w1.b1", !3920, i64 0}
!3934 = !{!3935, !3935, i64 0}
!3935 = !{!"0x7a9b910.w1.b2", !3936, i64 0}
!3936 = !{!"0x7a9b910.w2.b2", !3921, i64 0}
!3937 = !{!3938, !3938, i64 0}
!3938 = !{!"0x7a9b910.w1.b3", !3936, i64 0}
!3939 = !{!3940, !3940, i64 0}
!3940 = !{!"0x7a9b910.w1.b4", !3941, i64 0}
!3941 = !{!"0x7a9b910.w2.b4", !3942, i64 0}
!3942 = !{!"0x7a9b910.w4.b4", !3922, i64 0}
!3943 = !{!3944, !3944, i64 0}
!3944 = !{!"0x7a9bf40.w8.b0", !3945, i64 0}
!3945 = !{!"0x7a9bf40.w16.b0", !3946, i64 0}
!3946 = !{!"0x7a9bf40.w32.b0", !3947, i64 0}
!3947 = !{!"0x7a9bf40.w64.b0", !3948, i64 0}
!3948 = !{!"0x7a9bf40.w128.b0", !3949, i64 0}
!3949 = !{!"0x7a9bf40.w256.b0", !3950, i64 0}
!3950 = !{!"0x7a9bf40.w512.b0", !3951, i64 0}
!3951 = !{!"0x7a9bf40.w1024.b0", !3952, i64 0}
!3952 = !{!"int64", !3953, i64 0}
!3953 = !{!"0x7a9bf40", !8, i64 0}
!3954 = !{!3955, !3955, i64 0}
!3955 = !{!"0x7a9bf40.w1.b0", !3956, i64 0}
!3956 = !{!"0x7a9bf40.w2.b0", !3957, i64 0}
!3957 = !{!"0x7a9bf40.w4.b0", !3944, i64 0}
!3958 = !{!3959, !3959, i64 0}
!3959 = !{!"0x7a9c290.w1.b0", !3960, i64 0}
!3960 = !{!"0x7a9c290.w2.b0", !3961, i64 0}
!3961 = !{!"0x7a9c290.w4.b0", !3962, i64 0}
!3962 = !{!"0x7a9c290.w8.b0", !3963, i64 0}
!3963 = !{!"0x7a9c290.w16.b0", !3964, i64 0}
!3964 = !{!"0x7a9c290.w32.b0", !3965, i64 0}
!3965 = !{!"0x7a9c290.w64.b0", !3966, i64 0}
!3966 = !{!"0x7a9c290.w128.b0", !3967, i64 0}
!3967 = !{!"0x7a9c290.w256.b0", !3968, i64 0}
!3968 = !{!"0x7a9c290.w512.b0", !3969, i64 0}
!3969 = !{!"0x7a9c290.w1024.b0", !3970, i64 0}
!3970 = !{!"int64", !3971, i64 0}
!3971 = !{!"0x7a9c290", !8, i64 0}
!3972 = !{!3973, !3973, i64 0}
!3973 = !{!"0x7a9c290.w1.b1", !3960, i64 0}
!3974 = !{!3975, !3975, i64 0}
!3975 = !{!"0x7a9c290.w1.b2", !3976, i64 0}
!3976 = !{!"0x7a9c290.w2.b2", !3961, i64 0}
!3977 = !{!3978, !3978, i64 0}
!3978 = !{!"0x7a9c290.w1.b3", !3976, i64 0}
!3979 = !{!3980, !3980, i64 0}
!3980 = !{!"0x7a9c290.w1.b4", !3981, i64 0}
!3981 = !{!"0x7a9c290.w2.b4", !3982, i64 0}
!3982 = !{!"0x7a9c290.w4.b4", !3962, i64 0}
!3983 = !{!3984, !3984, i64 0}
!3984 = !{!"0x7a9bb40.w8.b0", !3985, i64 0}
!3985 = !{!"0x7a9bb40.w16.b0", !3986, i64 0}
!3986 = !{!"0x7a9bb40.w32.b0", !3987, i64 0}
!3987 = !{!"0x7a9bb40.w64.b0", !3988, i64 0}
!3988 = !{!"0x7a9bb40.w128.b0", !3989, i64 0}
!3989 = !{!"0x7a9bb40.w256.b0", !3990, i64 0}
!3990 = !{!"0x7a9bb40.w512.b0", !3991, i64 0}
!3991 = !{!"0x7a9bb40.w1024.b0", !3992, i64 0}
!3992 = !{!"int64", !3993, i64 0}
!3993 = !{!"0x7a9bb40", !8, i64 0}
!3994 = !{!3995, !3995, i64 0}
!3995 = !{!"0x7a9bb40.w1.b0", !3996, i64 0}
!3996 = !{!"0x7a9bb40.w2.b0", !3997, i64 0}
!3997 = !{!"0x7a9bb40.w4.b0", !3984, i64 0}
!3998 = !{!3999, !3999, i64 0}
!3999 = !{!"float32", !4000, i64 0}
!4000 = !{!"0x7a96a10", !8, i64 0}
!4001 = !{!4002, !4002, i64 0}
!4002 = !{!"float32", !4003, i64 0}
!4003 = !{!"0x7a97df0", !8, i64 0}
!4004 = !{!4005, !4005, i64 0}
!4005 = !{!"0x7918790.w1.b0", !4006, i64 0}
!4006 = !{!"0x7918790.w2.b0", !4007, i64 0}
!4007 = !{!"0x7918790.w4.b0", !4008, i64 0}
!4008 = !{!"0x7918790.w8.b0", !4009, i64 0}
!4009 = !{!"0x7918790.w16.b0", !4010, i64 0}
!4010 = !{!"0x7918790.w32.b0", !4011, i64 0}
!4011 = !{!"0x7918790.w64.b0", !4012, i64 0}
!4012 = !{!"0x7918790.w128.b0", !4013, i64 0}
!4013 = !{!"0x7918790.w256.b0", !4014, i64 0}
!4014 = !{!"0x7918790.w512.b0", !4015, i64 0}
!4015 = !{!"0x7918790.w1024.b0", !4016, i64 0}
!4016 = !{!"int32", !4017, i64 0}
!4017 = !{!"0x7918790", !8, i64 0}
!4018 = !{!4019, !4019, i64 0}
!4019 = !{!"0x7918790.w1.b1", !4006, i64 0}
!4020 = !{!4021, !4021, i64 0}
!4021 = !{!"0x7928ba0.w1.b0", !4022, i64 0}
!4022 = !{!"0x7928ba0.w2.b0", !4023, i64 0}
!4023 = !{!"0x7928ba0.w4.b0", !4024, i64 0}
!4024 = !{!"0x7928ba0.w8.b0", !4025, i64 0}
!4025 = !{!"0x7928ba0.w16.b0", !4026, i64 0}
!4026 = !{!"0x7928ba0.w32.b0", !4027, i64 0}
!4027 = !{!"0x7928ba0.w64.b0", !4028, i64 0}
!4028 = !{!"0x7928ba0.w128.b0", !4029, i64 0}
!4029 = !{!"0x7928ba0.w256.b0", !4030, i64 0}
!4030 = !{!"0x7928ba0.w512.b0", !4031, i64 0}
!4031 = !{!"0x7928ba0.w1024.b0", !4032, i64 0}
!4032 = !{!"int64", !4033, i64 0}
!4033 = !{!"0x7928ba0", !8, i64 0}
!4034 = !{!4035, !4035, i64 0}
!4035 = !{!"0x7928ba0.w1.b1", !4022, i64 0}
!4036 = !{!4037, !4037, i64 0}
!4037 = !{!"0x7928ba0.w1.b2", !4038, i64 0}
!4038 = !{!"0x7928ba0.w2.b2", !4023, i64 0}
!4039 = !{!4040, !4040, i64 0}
!4040 = !{!"0x7928ba0.w1.b3", !4038, i64 0}
!4041 = !{!4042, !4042, i64 0}
!4042 = !{!"0x7928ba0.w1.b4", !4043, i64 0}
!4043 = !{!"0x7928ba0.w2.b4", !4044, i64 0}
!4044 = !{!"0x7928ba0.w4.b4", !4024, i64 0}
!4045 = !{!4046, !4046, i64 0}
!4046 = !{!"0x7929100.w8.b0", !4047, i64 0}
!4047 = !{!"0x7929100.w16.b0", !4048, i64 0}
!4048 = !{!"0x7929100.w32.b0", !4049, i64 0}
!4049 = !{!"0x7929100.w64.b0", !4050, i64 0}
!4050 = !{!"0x7929100.w128.b0", !4051, i64 0}
!4051 = !{!"0x7929100.w256.b0", !4052, i64 0}
!4052 = !{!"0x7929100.w512.b0", !4053, i64 0}
!4053 = !{!"0x7929100.w1024.b0", !4054, i64 0}
!4054 = !{!"int64", !4055, i64 0}
!4055 = !{!"0x7929100", !8, i64 0}
!4056 = !{!4057, !4057, i64 0}
!4057 = !{!"0x7929100.w1.b0", !4058, i64 0}
!4058 = !{!"0x7929100.w2.b0", !4059, i64 0}
!4059 = !{!"0x7929100.w4.b0", !4046, i64 0}
!4060 = !{!4061, !4061, i64 0}
!4061 = !{!"0x7929350.w1.b0", !4062, i64 0}
!4062 = !{!"0x7929350.w2.b0", !4063, i64 0}
!4063 = !{!"0x7929350.w4.b0", !4064, i64 0}
!4064 = !{!"0x7929350.w8.b0", !4065, i64 0}
!4065 = !{!"0x7929350.w16.b0", !4066, i64 0}
!4066 = !{!"0x7929350.w32.b0", !4067, i64 0}
!4067 = !{!"0x7929350.w64.b0", !4068, i64 0}
!4068 = !{!"0x7929350.w128.b0", !4069, i64 0}
!4069 = !{!"0x7929350.w256.b0", !4070, i64 0}
!4070 = !{!"0x7929350.w512.b0", !4071, i64 0}
!4071 = !{!"0x7929350.w1024.b0", !4072, i64 0}
!4072 = !{!"int64", !4073, i64 0}
!4073 = !{!"0x7929350", !8, i64 0}
!4074 = !{!4075, !4075, i64 0}
!4075 = !{!"0x7929350.w1.b1", !4062, i64 0}
!4076 = !{!4077, !4077, i64 0}
!4077 = !{!"0x7929350.w1.b2", !4078, i64 0}
!4078 = !{!"0x7929350.w2.b2", !4063, i64 0}
!4079 = !{!4080, !4080, i64 0}
!4080 = !{!"0x7929350.w1.b3", !4078, i64 0}
!4081 = !{!4082, !4082, i64 0}
!4082 = !{!"0x7929350.w1.b4", !4083, i64 0}
!4083 = !{!"0x7929350.w2.b4", !4084, i64 0}
!4084 = !{!"0x7929350.w4.b4", !4064, i64 0}
!4085 = !{!4086, !4086, i64 0}
!4086 = !{!"0x7928d70.w8.b0", !4087, i64 0}
!4087 = !{!"0x7928d70.w16.b0", !4088, i64 0}
!4088 = !{!"0x7928d70.w32.b0", !4089, i64 0}
!4089 = !{!"0x7928d70.w64.b0", !4090, i64 0}
!4090 = !{!"0x7928d70.w128.b0", !4091, i64 0}
!4091 = !{!"0x7928d70.w256.b0", !4092, i64 0}
!4092 = !{!"0x7928d70.w512.b0", !4093, i64 0}
!4093 = !{!"0x7928d70.w1024.b0", !4094, i64 0}
!4094 = !{!"int64", !4095, i64 0}
!4095 = !{!"0x7928d70", !8, i64 0}
!4096 = !{!4097, !4097, i64 0}
!4097 = !{!"0x7928d70.w1.b0", !4098, i64 0}
!4098 = !{!"0x7928d70.w2.b0", !4099, i64 0}
!4099 = !{!"0x7928d70.w4.b0", !4086, i64 0}
!4100 = !{!4101, !4101, i64 0}
!4101 = !{!"float32", !4102, i64 0}
!4102 = !{!"0x7916af0", !8, i64 0}
!4103 = !{!4104, !4104, i64 0}
!4104 = !{!"float32", !4105, i64 0}
!4105 = !{!"0x791b250", !8, i64 0}
!4106 = !{!4107, !4107, i64 0}
!4107 = !{!"0x78a0d00.w1.b0", !4108, i64 0}
!4108 = !{!"0x78a0d00.w2.b0", !4109, i64 0}
!4109 = !{!"0x78a0d00.w4.b0", !4110, i64 0}
!4110 = !{!"0x78a0d00.w8.b0", !4111, i64 0}
!4111 = !{!"0x78a0d00.w16.b0", !4112, i64 0}
!4112 = !{!"0x78a0d00.w32.b0", !4113, i64 0}
!4113 = !{!"0x78a0d00.w64.b0", !4114, i64 0}
!4114 = !{!"0x78a0d00.w128.b0", !4115, i64 0}
!4115 = !{!"0x78a0d00.w256.b0", !4116, i64 0}
!4116 = !{!"0x78a0d00.w512.b0", !4117, i64 0}
!4117 = !{!"0x78a0d00.w1024.b0", !4118, i64 0}
!4118 = !{!"int32", !4119, i64 0}
!4119 = !{!"0x78a0d00", !8, i64 0}
!4120 = !{!4121, !4121, i64 0}
!4121 = !{!"0x78a0d00.w1.b2", !4122, i64 0}
!4122 = !{!"0x78a0d00.w2.b2", !4109, i64 0}
!4123 = !{!4124, !4124, i64 0}
!4124 = !{!"0x78a0d00.w1.b3", !4122, i64 0}
!4125 = !{!4126, !4126, i64 0}
!4126 = !{!"0x78a0d00.w1.b4", !4127, i64 0}
!4127 = !{!"0x78a0d00.w2.b4", !4128, i64 0}
!4128 = !{!"0x78a0d00.w4.b4", !4110, i64 0}
!4129 = !{!4130, !4130, i64 0}
!4130 = !{!"0x78a0d00.w1.b1", !4108, i64 0}
!4131 = !{!4132, !4132, i64 0}
!4132 = !{!"0x78abc30.w1.b0", !4133, i64 0}
!4133 = !{!"0x78abc30.w2.b0", !4134, i64 0}
!4134 = !{!"0x78abc30.w4.b0", !4135, i64 0}
!4135 = !{!"0x78abc30.w8.b0", !4136, i64 0}
!4136 = !{!"0x78abc30.w16.b0", !4137, i64 0}
!4137 = !{!"0x78abc30.w32.b0", !4138, i64 0}
!4138 = !{!"0x78abc30.w64.b0", !4139, i64 0}
!4139 = !{!"0x78abc30.w128.b0", !4140, i64 0}
!4140 = !{!"0x78abc30.w256.b0", !4141, i64 0}
!4141 = !{!"0x78abc30.w512.b0", !4142, i64 0}
!4142 = !{!"0x78abc30.w1024.b0", !4143, i64 0}
!4143 = !{!"int64", !4144, i64 0}
!4144 = !{!"0x78abc30", !8, i64 0}
!4145 = !{!4146, !4146, i64 0}
!4146 = !{!"0x78abc30.w1.b1", !4133, i64 0}
!4147 = !{!4148, !4148, i64 0}
!4148 = !{!"0x78abc30.w1.b2", !4149, i64 0}
!4149 = !{!"0x78abc30.w2.b2", !4134, i64 0}
!4150 = !{!4151, !4151, i64 0}
!4151 = !{!"0x78abc30.w1.b3", !4149, i64 0}
!4152 = !{!4153, !4153, i64 0}
!4153 = !{!"0x78abc30.w1.b4", !4154, i64 0}
!4154 = !{!"0x78abc30.w2.b4", !4155, i64 0}
!4155 = !{!"0x78abc30.w4.b4", !4135, i64 0}
!4156 = !{!4157, !4157, i64 0}
!4157 = !{!"0x78ab360.w8.b0", !4158, i64 0}
!4158 = !{!"0x78ab360.w16.b0", !4159, i64 0}
!4159 = !{!"0x78ab360.w32.b0", !4160, i64 0}
!4160 = !{!"0x78ab360.w64.b0", !4161, i64 0}
!4161 = !{!"0x78ab360.w128.b0", !4162, i64 0}
!4162 = !{!"0x78ab360.w256.b0", !4163, i64 0}
!4163 = !{!"0x78ab360.w512.b0", !4164, i64 0}
!4164 = !{!"0x78ab360.w1024.b0", !4165, i64 0}
!4165 = !{!"int64", !4166, i64 0}
!4166 = !{!"0x78ab360", !8, i64 0}
!4167 = !{!4168, !4168, i64 0}
!4168 = !{!"0x78ab360.w1.b0", !4169, i64 0}
!4169 = !{!"0x78ab360.w2.b0", !4170, i64 0}
!4170 = !{!"0x78ab360.w4.b0", !4157, i64 0}
!4171 = !{!4172, !4172, i64 0}
!4172 = !{!"0x78ab400.w1.b0", !4173, i64 0}
!4173 = !{!"0x78ab400.w2.b0", !4174, i64 0}
!4174 = !{!"0x78ab400.w4.b0", !4175, i64 0}
!4175 = !{!"0x78ab400.w8.b0", !4176, i64 0}
!4176 = !{!"0x78ab400.w16.b0", !4177, i64 0}
!4177 = !{!"0x78ab400.w32.b0", !4178, i64 0}
!4178 = !{!"0x78ab400.w64.b0", !4179, i64 0}
!4179 = !{!"0x78ab400.w128.b0", !4180, i64 0}
!4180 = !{!"0x78ab400.w256.b0", !4181, i64 0}
!4181 = !{!"0x78ab400.w512.b0", !4182, i64 0}
!4182 = !{!"0x78ab400.w1024.b0", !4183, i64 0}
!4183 = !{!"int64", !4184, i64 0}
!4184 = !{!"0x78ab400", !8, i64 0}
!4185 = !{!4186, !4186, i64 0}
!4186 = !{!"0x78ab400.w1.b1", !4173, i64 0}
!4187 = !{!4188, !4188, i64 0}
!4188 = !{!"0x78ab400.w1.b2", !4189, i64 0}
!4189 = !{!"0x78ab400.w2.b2", !4174, i64 0}
!4190 = !{!4191, !4191, i64 0}
!4191 = !{!"0x78ab400.w1.b3", !4189, i64 0}
!4192 = !{!4193, !4193, i64 0}
!4193 = !{!"0x78ab400.w1.b4", !4194, i64 0}
!4194 = !{!"0x78ab400.w2.b4", !4195, i64 0}
!4195 = !{!"0x78ab400.w4.b4", !4175, i64 0}
!4196 = !{!4197, !4197, i64 0}
!4197 = !{!"0x78ab400.w1.b5", !4194, i64 0}
!4198 = !{!4199, !4199, i64 0}
!4199 = !{!"0x78abce0.w8.b0", !4200, i64 0}
!4200 = !{!"0x78abce0.w16.b0", !4201, i64 0}
!4201 = !{!"0x78abce0.w32.b0", !4202, i64 0}
!4202 = !{!"0x78abce0.w64.b0", !4203, i64 0}
!4203 = !{!"0x78abce0.w128.b0", !4204, i64 0}
!4204 = !{!"0x78abce0.w256.b0", !4205, i64 0}
!4205 = !{!"0x78abce0.w512.b0", !4206, i64 0}
!4206 = !{!"0x78abce0.w1024.b0", !4207, i64 0}
!4207 = !{!"int64", !4208, i64 0}
!4208 = !{!"0x78abce0", !8, i64 0}
!4209 = !{!4210, !4210, i64 0}
!4210 = !{!"0x78abce0.w1.b1", !4211, i64 0}
!4211 = !{!"0x78abce0.w2.b0", !4212, i64 0}
!4212 = !{!"0x78abce0.w4.b0", !4199, i64 0}
!4213 = !{!4214, !4214, i64 0}
!4214 = !{!"0x78abce0.w1.b0", !4211, i64 0}
!4215 = !{!4216, !4216, i64 0}
!4216 = !{!"0x78adbb0.w1.b0", !4217, i64 0}
!4217 = !{!"0x78adbb0.w2.b0", !4218, i64 0}
!4218 = !{!"0x78adbb0.w4.b0", !4219, i64 0}
!4219 = !{!"0x78adbb0.w8.b0", !4220, i64 0}
!4220 = !{!"0x78adbb0.w16.b0", !4221, i64 0}
!4221 = !{!"0x78adbb0.w32.b0", !4222, i64 0}
!4222 = !{!"0x78adbb0.w64.b0", !4223, i64 0}
!4223 = !{!"0x78adbb0.w128.b0", !4224, i64 0}
!4224 = !{!"0x78adbb0.w256.b0", !4225, i64 0}
!4225 = !{!"0x78adbb0.w512.b0", !4226, i64 0}
!4226 = !{!"0x78adbb0.w1024.b0", !4227, i64 0}
!4227 = !{!"int64", !4228, i64 0}
!4228 = !{!"0x78adbb0", !8, i64 0}
!4229 = !{!4230, !4230, i64 0}
!4230 = !{!"0x78adbb0.w1.b1", !4217, i64 0}
!4231 = !{!4232, !4232, i64 0}
!4232 = !{!"0x78adbb0.w1.b2", !4233, i64 0}
!4233 = !{!"0x78adbb0.w2.b2", !4218, i64 0}
!4234 = !{!4235, !4235, i64 0}
!4235 = !{!"0x78adbb0.w1.b3", !4233, i64 0}
!4236 = !{!4237, !4237, i64 0}
!4237 = !{!"0x78adbb0.w1.b4", !4238, i64 0}
!4238 = !{!"0x78adbb0.w2.b4", !4239, i64 0}
!4239 = !{!"0x78adbb0.w4.b4", !4219, i64 0}
!4240 = !{!4241, !4241, i64 0}
!4241 = !{!"0x78bf260.w8.b0", !4242, i64 0}
!4242 = !{!"0x78bf260.w16.b0", !4243, i64 0}
!4243 = !{!"0x78bf260.w32.b0", !4244, i64 0}
!4244 = !{!"0x78bf260.w64.b0", !4245, i64 0}
!4245 = !{!"0x78bf260.w128.b0", !4246, i64 0}
!4246 = !{!"0x78bf260.w256.b0", !4247, i64 0}
!4247 = !{!"0x78bf260.w512.b0", !4248, i64 0}
!4248 = !{!"0x78bf260.w1024.b0", !4249, i64 0}
!4249 = !{!"int64", !4250, i64 0}
!4250 = !{!"0x78bf260", !8, i64 0}
!4251 = !{!4252, !4252, i64 0}
!4252 = !{!"0x78bf260.w1.b0", !4253, i64 0}
!4253 = !{!"0x78bf260.w2.b0", !4254, i64 0}
!4254 = !{!"0x78bf260.w4.b0", !4241, i64 0}
!4255 = !{!4256, !4256, i64 0}
!4256 = !{!"0x78c06c0.w1.b0", !4257, i64 0}
!4257 = !{!"0x78c06c0.w2.b0", !4258, i64 0}
!4258 = !{!"0x78c06c0.w4.b0", !4259, i64 0}
!4259 = !{!"0x78c06c0.w8.b0", !4260, i64 0}
!4260 = !{!"0x78c06c0.w16.b0", !4261, i64 0}
!4261 = !{!"0x78c06c0.w32.b0", !4262, i64 0}
!4262 = !{!"0x78c06c0.w64.b0", !4263, i64 0}
!4263 = !{!"0x78c06c0.w128.b0", !4264, i64 0}
!4264 = !{!"0x78c06c0.w256.b0", !4265, i64 0}
!4265 = !{!"0x78c06c0.w512.b0", !4266, i64 0}
!4266 = !{!"0x78c06c0.w1024.b0", !4267, i64 0}
!4267 = !{!"int64", !4268, i64 0}
!4268 = !{!"0x78c06c0", !8, i64 0}
!4269 = !{!4270, !4270, i64 0}
!4270 = !{!"0x78c06c0.w1.b1", !4257, i64 0}
!4271 = !{!4272, !4272, i64 0}
!4272 = !{!"0x78c06c0.w1.b2", !4273, i64 0}
!4273 = !{!"0x78c06c0.w2.b2", !4258, i64 0}
!4274 = !{!4275, !4275, i64 0}
!4275 = !{!"0x78c06c0.w1.b3", !4273, i64 0}
!4276 = !{!4277, !4277, i64 0}
!4277 = !{!"0x78c06c0.w1.b4", !4278, i64 0}
!4278 = !{!"0x78c06c0.w2.b4", !4279, i64 0}
!4279 = !{!"0x78c06c0.w4.b4", !4259, i64 0}
!4280 = !{!4281, !4281, i64 0}
!4281 = !{!"0x78c0710.w8.b0", !4282, i64 0}
!4282 = !{!"0x78c0710.w16.b0", !4283, i64 0}
!4283 = !{!"0x78c0710.w32.b0", !4284, i64 0}
!4284 = !{!"0x78c0710.w64.b0", !4285, i64 0}
!4285 = !{!"0x78c0710.w128.b0", !4286, i64 0}
!4286 = !{!"0x78c0710.w256.b0", !4287, i64 0}
!4287 = !{!"0x78c0710.w512.b0", !4288, i64 0}
!4288 = !{!"0x78c0710.w1024.b0", !4289, i64 0}
!4289 = !{!"int64", !4290, i64 0}
!4290 = !{!"0x78c0710", !8, i64 0}
!4291 = !{!4292, !4292, i64 0}
!4292 = !{!"0x78c0710.w1.b0", !4293, i64 0}
!4293 = !{!"0x78c0710.w2.b0", !4294, i64 0}
!4294 = !{!"0x78c0710.w4.b0", !4281, i64 0}
!4295 = !{!4296, !4296, i64 0}
!4296 = !{!"0x78c1b20.w1.b0", !4297, i64 0}
!4297 = !{!"0x78c1b20.w2.b0", !4298, i64 0}
!4298 = !{!"0x78c1b20.w4.b0", !4299, i64 0}
!4299 = !{!"0x78c1b20.w8.b0", !4300, i64 0}
!4300 = !{!"0x78c1b20.w16.b0", !4301, i64 0}
!4301 = !{!"0x78c1b20.w32.b0", !4302, i64 0}
!4302 = !{!"0x78c1b20.w64.b0", !4303, i64 0}
!4303 = !{!"0x78c1b20.w128.b0", !4304, i64 0}
!4304 = !{!"0x78c1b20.w256.b0", !4305, i64 0}
!4305 = !{!"0x78c1b20.w512.b0", !4306, i64 0}
!4306 = !{!"0x78c1b20.w1024.b0", !4307, i64 0}
!4307 = !{!"int64", !4308, i64 0}
!4308 = !{!"0x78c1b20", !8, i64 0}
!4309 = !{!4310, !4310, i64 0}
!4310 = !{!"0x78c1b20.w1.b1", !4297, i64 0}
!4311 = !{!4312, !4312, i64 0}
!4312 = !{!"0x78c1b20.w1.b2", !4313, i64 0}
!4313 = !{!"0x78c1b20.w2.b2", !4298, i64 0}
!4314 = !{!4315, !4315, i64 0}
!4315 = !{!"0x78c1b20.w1.b3", !4313, i64 0}
!4316 = !{!4317, !4317, i64 0}
!4317 = !{!"0x78c1b20.w1.b4", !4318, i64 0}
!4318 = !{!"0x78c1b20.w2.b4", !4319, i64 0}
!4319 = !{!"0x78c1b20.w4.b4", !4299, i64 0}
!4320 = !{!4321, !4321, i64 0}
!4321 = !{!"0x78c3290.w8.b0", !4322, i64 0}
!4322 = !{!"0x78c3290.w16.b0", !4323, i64 0}
!4323 = !{!"0x78c3290.w32.b0", !4324, i64 0}
!4324 = !{!"0x78c3290.w64.b0", !4325, i64 0}
!4325 = !{!"0x78c3290.w128.b0", !4326, i64 0}
!4326 = !{!"0x78c3290.w256.b0", !4327, i64 0}
!4327 = !{!"0x78c3290.w512.b0", !4328, i64 0}
!4328 = !{!"0x78c3290.w1024.b0", !4329, i64 0}
!4329 = !{!"int64", !4330, i64 0}
!4330 = !{!"0x78c3290", !8, i64 0}
!4331 = !{!4332, !4332, i64 0}
!4332 = !{!"0x78c3290.w1.b0", !4333, i64 0}
!4333 = !{!"0x78c3290.w2.b0", !4334, i64 0}
!4334 = !{!"0x78c3290.w4.b0", !4321, i64 0}
!4335 = !{!4336, !4336, i64 0}
!4336 = !{!"float32", !4337, i64 0}
!4337 = !{!"0x78a2fe0", !8, i64 0}
!4338 = !{!4339, !4339, i64 0}
!4339 = !{!"float32", !4340, i64 0}
!4340 = !{!"0x789d8c0", !8, i64 0}
!4341 = !{!4342, !4342, i64 0}
!4342 = !{!"float32", !4343, i64 0}
!4343 = !{!"0x78a4150", !8, i64 0}
!4344 = !{!4345, !4345, i64 0}
!4345 = !{!"float32", !4346, i64 0}
!4346 = !{!"0x789fc10", !8, i64 0}
!4347 = !{!4348, !4348, i64 0}
!4348 = !{!"float32", !4349, i64 0}
!4349 = !{!"0x78a4340", !8, i64 0}
!4350 = !{!4351, !4351, i64 0}
!4351 = !{!"float32", !4352, i64 0}
!4352 = !{!"0x78a3d00", !8, i64 0}
!4353 = !{!4354, !4354, i64 0}
!4354 = !{!"0x78e6600.w1.b0", !4355, i64 0}
!4355 = !{!"0x78e6600.w2.b0", !4356, i64 0}
!4356 = !{!"0x78e6600.w4.b0", !4357, i64 0}
!4357 = !{!"0x78e6600.w8.b0", !4358, i64 0}
!4358 = !{!"0x78e6600.w16.b0", !4359, i64 0}
!4359 = !{!"0x78e6600.w32.b0", !4360, i64 0}
!4360 = !{!"0x78e6600.w64.b0", !4361, i64 0}
!4361 = !{!"0x78e6600.w128.b0", !4362, i64 0}
!4362 = !{!"0x78e6600.w256.b0", !4363, i64 0}
!4363 = !{!"0x78e6600.w512.b0", !4364, i64 0}
!4364 = !{!"0x78e6600.w1024.b0", !4365, i64 0}
!4365 = !{!"int32", !4366, i64 0}
!4366 = !{!"0x78e6600", !8, i64 0}
!4367 = !{!4368, !4368, i64 0}
!4368 = !{!"0x78e6600.w1.b1", !4355, i64 0}
!4369 = !{!4370, !4370, i64 0}
!4370 = !{!"0x78e7e60.w1.b0", !4371, i64 0}
!4371 = !{!"0x78e7e60.w2.b0", !4372, i64 0}
!4372 = !{!"0x78e7e60.w4.b0", !4373, i64 0}
!4373 = !{!"0x78e7e60.w8.b0", !4374, i64 0}
!4374 = !{!"0x78e7e60.w16.b0", !4375, i64 0}
!4375 = !{!"0x78e7e60.w32.b0", !4376, i64 0}
!4376 = !{!"0x78e7e60.w64.b0", !4377, i64 0}
!4377 = !{!"0x78e7e60.w128.b0", !4378, i64 0}
!4378 = !{!"0x78e7e60.w256.b0", !4379, i64 0}
!4379 = !{!"0x78e7e60.w512.b0", !4380, i64 0}
!4380 = !{!"0x78e7e60.w1024.b0", !4381, i64 0}
!4381 = !{!"int64", !4382, i64 0}
!4382 = !{!"0x78e7e60", !8, i64 0}
!4383 = !{!4384, !4384, i64 0}
!4384 = !{!"0x78e7e60.w1.b1", !4371, i64 0}
!4385 = !{!4386, !4386, i64 0}
!4386 = !{!"0x78e7e60.w1.b2", !4387, i64 0}
!4387 = !{!"0x78e7e60.w2.b2", !4372, i64 0}
!4388 = !{!4389, !4389, i64 0}
!4389 = !{!"0x78e7e60.w1.b3", !4387, i64 0}
!4390 = !{!4391, !4391, i64 0}
!4391 = !{!"0x78e7e60.w1.b4", !4392, i64 0}
!4392 = !{!"0x78e7e60.w2.b4", !4393, i64 0}
!4393 = !{!"0x78e7e60.w4.b4", !4373, i64 0}
!4394 = !{!4395, !4395, i64 0}
!4395 = !{!"0x78e83c0.w8.b0", !4396, i64 0}
!4396 = !{!"0x78e83c0.w16.b0", !4397, i64 0}
!4397 = !{!"0x78e83c0.w32.b0", !4398, i64 0}
!4398 = !{!"0x78e83c0.w64.b0", !4399, i64 0}
!4399 = !{!"0x78e83c0.w128.b0", !4400, i64 0}
!4400 = !{!"0x78e83c0.w256.b0", !4401, i64 0}
!4401 = !{!"0x78e83c0.w512.b0", !4402, i64 0}
!4402 = !{!"0x78e83c0.w1024.b0", !4403, i64 0}
!4403 = !{!"int64", !4404, i64 0}
!4404 = !{!"0x78e83c0", !8, i64 0}
!4405 = !{!4406, !4406, i64 0}
!4406 = !{!"0x78e83c0.w1.b0", !4407, i64 0}
!4407 = !{!"0x78e83c0.w2.b0", !4408, i64 0}
!4408 = !{!"0x78e83c0.w4.b0", !4395, i64 0}
!4409 = !{!4410, !4410, i64 0}
!4410 = !{!"0x78e8610.w1.b0", !4411, i64 0}
!4411 = !{!"0x78e8610.w2.b0", !4412, i64 0}
!4412 = !{!"0x78e8610.w4.b0", !4413, i64 0}
!4413 = !{!"0x78e8610.w8.b0", !4414, i64 0}
!4414 = !{!"0x78e8610.w16.b0", !4415, i64 0}
!4415 = !{!"0x78e8610.w32.b0", !4416, i64 0}
!4416 = !{!"0x78e8610.w64.b0", !4417, i64 0}
!4417 = !{!"0x78e8610.w128.b0", !4418, i64 0}
!4418 = !{!"0x78e8610.w256.b0", !4419, i64 0}
!4419 = !{!"0x78e8610.w512.b0", !4420, i64 0}
!4420 = !{!"0x78e8610.w1024.b0", !4421, i64 0}
!4421 = !{!"int64", !4422, i64 0}
!4422 = !{!"0x78e8610", !8, i64 0}
!4423 = !{!4424, !4424, i64 0}
!4424 = !{!"0x78e8610.w1.b1", !4411, i64 0}
!4425 = !{!4426, !4426, i64 0}
!4426 = !{!"0x78e8610.w1.b2", !4427, i64 0}
!4427 = !{!"0x78e8610.w2.b2", !4412, i64 0}
!4428 = !{!4429, !4429, i64 0}
!4429 = !{!"0x78e8610.w1.b3", !4427, i64 0}
!4430 = !{!4431, !4431, i64 0}
!4431 = !{!"0x78e8610.w1.b4", !4432, i64 0}
!4432 = !{!"0x78e8610.w2.b4", !4433, i64 0}
!4433 = !{!"0x78e8610.w4.b4", !4413, i64 0}
!4434 = !{!4435, !4435, i64 0}
!4435 = !{!"0x78e8030.w8.b0", !4436, i64 0}
!4436 = !{!"0x78e8030.w16.b0", !4437, i64 0}
!4437 = !{!"0x78e8030.w32.b0", !4438, i64 0}
!4438 = !{!"0x78e8030.w64.b0", !4439, i64 0}
!4439 = !{!"0x78e8030.w128.b0", !4440, i64 0}
!4440 = !{!"0x78e8030.w256.b0", !4441, i64 0}
!4441 = !{!"0x78e8030.w512.b0", !4442, i64 0}
!4442 = !{!"0x78e8030.w1024.b0", !4443, i64 0}
!4443 = !{!"int64", !4444, i64 0}
!4444 = !{!"0x78e8030", !8, i64 0}
!4445 = !{!4446, !4446, i64 0}
!4446 = !{!"0x78e8030.w1.b0", !4447, i64 0}
!4447 = !{!"0x78e8030.w2.b0", !4448, i64 0}
!4448 = !{!"0x78e8030.w4.b0", !4435, i64 0}
!4449 = !{!4450, !4450, i64 0}
!4450 = !{!"float32", !4451, i64 0}
!4451 = !{!"0x78d1910", !8, i64 0}
!4452 = !{!4453, !4453, i64 0}
!4453 = !{!"float32", !4454, i64 0}
!4454 = !{!"0x78cc860", !8, i64 0}
!4455 = !{!4456, !4456, i64 0}
!4456 = !{!"0x65c5f40.w1.b0", !4457, i64 0}
!4457 = !{!"0x65c5f40.w2.b0", !4458, i64 0}
!4458 = !{!"0x65c5f40.w4.b0", !4459, i64 0}
!4459 = !{!"0x65c5f40.w8.b0", !4460, i64 0}
!4460 = !{!"0x65c5f40.w16.b0", !4461, i64 0}
!4461 = !{!"0x65c5f40.w32.b0", !4462, i64 0}
!4462 = !{!"0x65c5f40.w64.b0", !4463, i64 0}
!4463 = !{!"0x65c5f40.w128.b0", !4464, i64 0}
!4464 = !{!"0x65c5f40.w256.b0", !4465, i64 0}
!4465 = !{!"0x65c5f40.w512.b0", !4466, i64 0}
!4466 = !{!"0x65c5f40.w1024.b0", !4467, i64 0}
!4467 = !{!"int32", !4468, i64 0}
!4468 = !{!"0x65c5f40", !8, i64 0}
!4469 = !{!4470, !4470, i64 0}
!4470 = !{!"0x65c5f40.w1.b1", !4457, i64 0}
!4471 = !{!4472, !4472, i64 0}
!4472 = !{!"0x4daaad0.w1.b0", !4473, i64 0}
!4473 = !{!"0x4daaad0.w2.b0", !4474, i64 0}
!4474 = !{!"0x4daaad0.w4.b0", !4475, i64 0}
!4475 = !{!"0x4daaad0.w8.b0", !4476, i64 0}
!4476 = !{!"0x4daaad0.w16.b0", !4477, i64 0}
!4477 = !{!"0x4daaad0.w32.b0", !4478, i64 0}
!4478 = !{!"0x4daaad0.w64.b0", !4479, i64 0}
!4479 = !{!"0x4daaad0.w128.b0", !4480, i64 0}
!4480 = !{!"0x4daaad0.w256.b0", !4481, i64 0}
!4481 = !{!"0x4daaad0.w512.b0", !4482, i64 0}
!4482 = !{!"0x4daaad0.w1024.b0", !4483, i64 0}
!4483 = !{!"int64", !4484, i64 0}
!4484 = !{!"0x4daaad0", !8, i64 0}
!4485 = !{!4486, !4486, i64 0}
!4486 = !{!"0x4daaad0.w1.b1", !4473, i64 0}
!4487 = !{!4488, !4488, i64 0}
!4488 = !{!"0x80ecaa0.w1.b1", !4489, i64 0}
!4489 = !{!"0x80ecaa0.w2.b0", !4490, i64 0}
!4490 = !{!"0x80ecaa0.w4.b0", !4491, i64 0}
!4491 = !{!"0x80ecaa0.w8.b0", !4492, i64 0}
!4492 = !{!"0x80ecaa0.w16.b0", !4493, i64 0}
!4493 = !{!"0x80ecaa0.w32.b0", !4494, i64 0}
!4494 = !{!"0x80ecaa0.w64.b0", !4495, i64 0}
!4495 = !{!"0x80ecaa0.w128.b0", !4496, i64 0}
!4496 = !{!"0x80ecaa0.w256.b0", !4497, i64 0}
!4497 = !{!"0x80ecaa0.w512.b0", !4498, i64 0}
!4498 = !{!"0x80ecaa0.w1024.b0", !4499, i64 0}
!4499 = !{!"int64", !4500, i64 0}
!4500 = !{!"0x80ecaa0", !8, i64 0}
!4501 = !{!4502, !4502, i64 0}
!4502 = !{!"0x80ecaa0.w1.b0", !4489, i64 0}
!4503 = !{!4504, !4504, i64 0}
!4504 = !{!"0x8167340.w1.b0", !4505, i64 0}
!4505 = !{!"0x8167340.w2.b0", !4506, i64 0}
!4506 = !{!"0x8167340.w4.b0", !4507, i64 0}
!4507 = !{!"0x8167340.w8.b0", !4508, i64 0}
!4508 = !{!"0x8167340.w16.b0", !4509, i64 0}
!4509 = !{!"0x8167340.w32.b0", !4510, i64 0}
!4510 = !{!"0x8167340.w64.b0", !4511, i64 0}
!4511 = !{!"0x8167340.w128.b0", !4512, i64 0}
!4512 = !{!"0x8167340.w256.b0", !4513, i64 0}
!4513 = !{!"0x8167340.w512.b0", !4514, i64 0}
!4514 = !{!"0x8167340.w1024.b0", !4515, i64 0}
!4515 = !{!"int64", !4516, i64 0}
!4516 = !{!"0x8167340", !8, i64 0}
!4517 = !{!4518, !4518, i64 0}
!4518 = !{!"0x8167340.w1.b1", !4505, i64 0}
!4519 = !{!4520, !4520, i64 0}
!4520 = !{!"0x80f1d60.w1.b1", !4521, i64 0}
!4521 = !{!"0x80f1d60.w2.b0", !4522, i64 0}
!4522 = !{!"0x80f1d60.w4.b0", !4523, i64 0}
!4523 = !{!"0x80f1d60.w8.b0", !4524, i64 0}
!4524 = !{!"0x80f1d60.w16.b0", !4525, i64 0}
!4525 = !{!"0x80f1d60.w32.b0", !4526, i64 0}
!4526 = !{!"0x80f1d60.w64.b0", !4527, i64 0}
!4527 = !{!"0x80f1d60.w128.b0", !4528, i64 0}
!4528 = !{!"0x80f1d60.w256.b0", !4529, i64 0}
!4529 = !{!"0x80f1d60.w512.b0", !4530, i64 0}
!4530 = !{!"0x80f1d60.w1024.b0", !4531, i64 0}
!4531 = !{!"int64", !4532, i64 0}
!4532 = !{!"0x80f1d60", !8, i64 0}
!4533 = !{!4534, !4534, i64 0}
!4534 = !{!"0x80f1d60.w1.b0", !4521, i64 0}
!4535 = !{!4536, !4536, i64 0}
!4536 = !{!"float32", !4537, i64 0}
!4537 = !{!"0xf90f640", !8, i64 0}
!4538 = !{!4539, !4539, i64 0}
!4539 = !{!"float32", !4540, i64 0}
!4540 = !{!"0x18bb2200", !8, i64 0}
!4541 = distinct !{!4541, !4542}
!4542 = !{!"llvm.loop.isvectorized", i32 1}
!4543 = !{!4544, !4544, i64 0}
!4544 = !{!"float32", !4545, i64 0}
!4545 = !{!"0x8168930", !8, i64 0}
!4546 = distinct !{!4546, !4542}
!4547 = !{!4548, !4548, i64 0}
!4548 = !{!"0x1029c900.w1.b0", !4549, i64 0}
!4549 = !{!"0x1029c900.w2.b0", !4550, i64 0}
!4550 = !{!"0x1029c900.w4.b0", !4551, i64 0}
!4551 = !{!"0x1029c900.w8.b0", !4552, i64 0}
!4552 = !{!"0x1029c900.w16.b0", !4553, i64 0}
!4553 = !{!"0x1029c900.w32.b0", !4554, i64 0}
!4554 = !{!"0x1029c900.w64.b0", !4555, i64 0}
!4555 = !{!"0x1029c900.w128.b0", !4556, i64 0}
!4556 = !{!"0x1029c900.w256.b0", !4557, i64 0}
!4557 = !{!"0x1029c900.w512.b0", !4558, i64 0}
!4558 = !{!"0x1029c900.w1024.b0", !4559, i64 0}
!4559 = !{!"int32", !4560, i64 0}
!4560 = !{!"0x1029c900", !8, i64 0}
!4561 = !{!4562, !4562, i64 0}
!4562 = !{!"0x1029c900.w1.b2", !4563, i64 0}
!4563 = !{!"0x1029c900.w2.b2", !4550, i64 0}
!4564 = !{!4565, !4565, i64 0}
!4565 = !{!"0x1029c900.w1.b1", !4549, i64 0}
!4566 = !{!4567, !4567, i64 0}
!4567 = !{!"0x14723dd0.w1.b0", !4568, i64 0}
!4568 = !{!"0x14723dd0.w2.b0", !4569, i64 0}
!4569 = !{!"0x14723dd0.w4.b0", !4570, i64 0}
!4570 = !{!"0x14723dd0.w8.b0", !4571, i64 0}
!4571 = !{!"0x14723dd0.w16.b0", !4572, i64 0}
!4572 = !{!"0x14723dd0.w32.b0", !4573, i64 0}
!4573 = !{!"0x14723dd0.w64.b0", !4574, i64 0}
!4574 = !{!"0x14723dd0.w128.b0", !4575, i64 0}
!4575 = !{!"0x14723dd0.w256.b0", !4576, i64 0}
!4576 = !{!"0x14723dd0.w512.b0", !4577, i64 0}
!4577 = !{!"0x14723dd0.w1024.b0", !4578, i64 0}
!4578 = !{!"int64", !4579, i64 0}
!4579 = !{!"0x14723dd0", !8, i64 0}
!4580 = !{!4581, !4581, i64 0}
!4581 = !{!"0x14723dd0.w1.b1", !4568, i64 0}
!4582 = !{!4583, !4583, i64 0}
!4583 = !{!"0x14723dd0.w1.b2", !4584, i64 0}
!4584 = !{!"0x14723dd0.w2.b2", !4569, i64 0}
!4585 = !{!4586, !4586, i64 0}
!4586 = !{!"0x14723dd0.w1.b3", !4584, i64 0}
!4587 = !{!4588, !4588, i64 0}
!4588 = !{!"0x14723dd0.w1.b4", !4589, i64 0}
!4589 = !{!"0x14723dd0.w2.b4", !4590, i64 0}
!4590 = !{!"0x14723dd0.w4.b4", !4570, i64 0}
!4591 = !{!4592, !4592, i64 0}
!4592 = !{!"0x5e95620.w8.b0", !4593, i64 0}
!4593 = !{!"0x5e95620.w16.b0", !4594, i64 0}
!4594 = !{!"0x5e95620.w32.b0", !4595, i64 0}
!4595 = !{!"0x5e95620.w64.b0", !4596, i64 0}
!4596 = !{!"0x5e95620.w128.b0", !4597, i64 0}
!4597 = !{!"0x5e95620.w256.b0", !4598, i64 0}
!4598 = !{!"0x5e95620.w512.b0", !4599, i64 0}
!4599 = !{!"0x5e95620.w1024.b0", !4600, i64 0}
!4600 = !{!"int64", !4601, i64 0}
!4601 = !{!"0x5e95620", !8, i64 0}
!4602 = !{!4603, !4603, i64 0}
!4603 = !{!"0x5e95620.w1.b0", !4604, i64 0}
!4604 = !{!"0x5e95620.w2.b0", !4605, i64 0}
!4605 = !{!"0x5e95620.w4.b0", !4592, i64 0}
!4606 = !{!4607, !4607, i64 0}
!4607 = !{!"0x10329c20.w1.b0", !4608, i64 0}
!4608 = !{!"0x10329c20.w2.b0", !4609, i64 0}
!4609 = !{!"0x10329c20.w4.b0", !4610, i64 0}
!4610 = !{!"0x10329c20.w8.b0", !4611, i64 0}
!4611 = !{!"0x10329c20.w16.b0", !4612, i64 0}
!4612 = !{!"0x10329c20.w32.b0", !4613, i64 0}
!4613 = !{!"0x10329c20.w64.b0", !4614, i64 0}
!4614 = !{!"0x10329c20.w128.b0", !4615, i64 0}
!4615 = !{!"0x10329c20.w256.b0", !4616, i64 0}
!4616 = !{!"0x10329c20.w512.b0", !4617, i64 0}
!4617 = !{!"0x10329c20.w1024.b0", !4618, i64 0}
!4618 = !{!"int64", !4619, i64 0}
!4619 = !{!"0x10329c20", !8, i64 0}
!4620 = !{!4621, !4621, i64 0}
!4621 = !{!"0x10329c20.w1.b1", !4608, i64 0}
!4622 = !{!4623, !4623, i64 0}
!4623 = !{!"0x10329c20.w1.b2", !4624, i64 0}
!4624 = !{!"0x10329c20.w2.b2", !4609, i64 0}
!4625 = !{!4626, !4626, i64 0}
!4626 = !{!"0x10329c20.w1.b3", !4624, i64 0}
!4627 = !{!4628, !4628, i64 0}
!4628 = !{!"0x10329c20.w1.b4", !4629, i64 0}
!4629 = !{!"0x10329c20.w2.b4", !4630, i64 0}
!4630 = !{!"0x10329c20.w4.b4", !4610, i64 0}
!4631 = !{!4632, !4632, i64 0}
!4632 = !{!"0xf7db9e0.w8.b0", !4633, i64 0}
!4633 = !{!"0xf7db9e0.w16.b0", !4634, i64 0}
!4634 = !{!"0xf7db9e0.w32.b0", !4635, i64 0}
!4635 = !{!"0xf7db9e0.w64.b0", !4636, i64 0}
!4636 = !{!"0xf7db9e0.w128.b0", !4637, i64 0}
!4637 = !{!"0xf7db9e0.w256.b0", !4638, i64 0}
!4638 = !{!"0xf7db9e0.w512.b0", !4639, i64 0}
!4639 = !{!"0xf7db9e0.w1024.b0", !4640, i64 0}
!4640 = !{!"int64", !4641, i64 0}
!4641 = !{!"0xf7db9e0", !8, i64 0}
!4642 = !{!4643, !4643, i64 0}
!4643 = !{!"0xf7db9e0.w1.b0", !4644, i64 0}
!4644 = !{!"0xf7db9e0.w2.b0", !4645, i64 0}
!4645 = !{!"0xf7db9e0.w4.b0", !4632, i64 0}
!4646 = !{!4647, !4647, i64 0}
!4647 = !{!"0x5a77010.w1.b0", !4648, i64 0}
!4648 = !{!"0x5a77010.w2.b0", !4649, i64 0}
!4649 = !{!"0x5a77010.w4.b0", !4650, i64 0}
!4650 = !{!"0x5a77010.w8.b0", !4651, i64 0}
!4651 = !{!"0x5a77010.w16.b0", !4652, i64 0}
!4652 = !{!"0x5a77010.w32.b0", !4653, i64 0}
!4653 = !{!"0x5a77010.w64.b0", !4654, i64 0}
!4654 = !{!"0x5a77010.w128.b0", !4655, i64 0}
!4655 = !{!"0x5a77010.w256.b0", !4656, i64 0}
!4656 = !{!"0x5a77010.w512.b0", !4657, i64 0}
!4657 = !{!"0x5a77010.w1024.b0", !4658, i64 0}
!4658 = !{!"int64", !4659, i64 0}
!4659 = !{!"0x5a77010", !8, i64 0}
!4660 = !{!4661, !4661, i64 0}
!4661 = !{!"0x5a77010.w1.b1", !4648, i64 0}
!4662 = !{!4663, !4663, i64 0}
!4663 = !{!"0x5a77010.w1.b2", !4664, i64 0}
!4664 = !{!"0x5a77010.w2.b2", !4649, i64 0}
!4665 = !{!4666, !4666, i64 0}
!4666 = !{!"0x5a77010.w1.b3", !4664, i64 0}
!4667 = !{!4668, !4668, i64 0}
!4668 = !{!"0x5a77010.w1.b4", !4669, i64 0}
!4669 = !{!"0x5a77010.w2.b4", !4670, i64 0}
!4670 = !{!"0x5a77010.w4.b4", !4650, i64 0}
!4671 = !{!4672, !4672, i64 0}
!4672 = !{!"0x5a76f70.w8.b0", !4673, i64 0}
!4673 = !{!"0x5a76f70.w16.b0", !4674, i64 0}
!4674 = !{!"0x5a76f70.w32.b0", !4675, i64 0}
!4675 = !{!"0x5a76f70.w64.b0", !4676, i64 0}
!4676 = !{!"0x5a76f70.w128.b0", !4677, i64 0}
!4677 = !{!"0x5a76f70.w256.b0", !4678, i64 0}
!4678 = !{!"0x5a76f70.w512.b0", !4679, i64 0}
!4679 = !{!"0x5a76f70.w1024.b0", !4680, i64 0}
!4680 = !{!"int64", !4681, i64 0}
!4681 = !{!"0x5a76f70", !8, i64 0}
!4682 = !{!4683, !4683, i64 0}
!4683 = !{!"0x5a76f70.w1.b0", !4684, i64 0}
!4684 = !{!"0x5a76f70.w2.b0", !4685, i64 0}
!4685 = !{!"0x5a76f70.w4.b0", !4672, i64 0}
!4686 = !{!4687, !4687, i64 0}
!4687 = !{!"float32", !4688, i64 0}
!4688 = !{!"0x72e93d0", !8, i64 0}
!4689 = !{!4690, !4690, i64 0}
!4690 = !{!"float32", !4691, i64 0}
!4691 = !{!"0x7456990", !8, i64 0}
!4692 = !{!4693, !4693, i64 0}
!4693 = !{!"float32", !4694, i64 0}
!4694 = !{!"0x9398a30", !8, i64 0}
!4695 = !{!4696, !4696, i64 0}
!4696 = !{!"0x17bcd090.w1.b0", !4697, i64 0}
!4697 = !{!"0x17bcd090.w2.b0", !4698, i64 0}
!4698 = !{!"0x17bcd090.w4.b0", !4699, i64 0}
!4699 = !{!"0x17bcd090.w8.b0", !4700, i64 0}
!4700 = !{!"0x17bcd090.w16.b0", !4701, i64 0}
!4701 = !{!"0x17bcd090.w32.b0", !4702, i64 0}
!4702 = !{!"0x17bcd090.w64.b0", !4703, i64 0}
!4703 = !{!"0x17bcd090.w128.b0", !4704, i64 0}
!4704 = !{!"0x17bcd090.w256.b0", !4705, i64 0}
!4705 = !{!"0x17bcd090.w512.b0", !4706, i64 0}
!4706 = !{!"0x17bcd090.w1024.b0", !4707, i64 0}
!4707 = !{!"int32", !4708, i64 0}
!4708 = !{!"0x17bcd090", !8, i64 0}
!4709 = !{!4710, !4710, i64 0}
!4710 = !{!"0x17bcd090.w1.b2", !4711, i64 0}
!4711 = !{!"0x17bcd090.w2.b2", !4698, i64 0}
!4712 = !{!4713, !4713, i64 0}
!4713 = !{!"0x17bcd090.w1.b3", !4711, i64 0}
!4714 = !{!4715, !4715, i64 0}
!4715 = !{!"0x17bcd090.w1.b1", !4697, i64 0}
!4716 = !{!4717, !4717, i64 0}
!4717 = !{!"0xf90f070.w1.b0", !4718, i64 0}
!4718 = !{!"0xf90f070.w2.b0", !4719, i64 0}
!4719 = !{!"0xf90f070.w4.b0", !4720, i64 0}
!4720 = !{!"0xf90f070.w8.b0", !4721, i64 0}
!4721 = !{!"0xf90f070.w16.b0", !4722, i64 0}
!4722 = !{!"0xf90f070.w32.b0", !4723, i64 0}
!4723 = !{!"0xf90f070.w64.b0", !4724, i64 0}
!4724 = !{!"0xf90f070.w128.b0", !4725, i64 0}
!4725 = !{!"0xf90f070.w256.b0", !4726, i64 0}
!4726 = !{!"0xf90f070.w512.b0", !4727, i64 0}
!4727 = !{!"0xf90f070.w1024.b0", !4728, i64 0}
!4728 = !{!"int64", !4729, i64 0}
!4729 = !{!"0xf90f070", !8, i64 0}
!4730 = !{!4731, !4731, i64 0}
!4731 = !{!"0xf90f070.w1.b1", !4718, i64 0}
!4732 = !{!4733, !4733, i64 0}
!4733 = !{!"0xf90eff0.w1.b1", !4734, i64 0}
!4734 = !{!"0xf90eff0.w2.b0", !4735, i64 0}
!4735 = !{!"0xf90eff0.w4.b0", !4736, i64 0}
!4736 = !{!"0xf90eff0.w8.b0", !4737, i64 0}
!4737 = !{!"0xf90eff0.w16.b0", !4738, i64 0}
!4738 = !{!"0xf90eff0.w32.b0", !4739, i64 0}
!4739 = !{!"0xf90eff0.w64.b0", !4740, i64 0}
!4740 = !{!"0xf90eff0.w128.b0", !4741, i64 0}
!4741 = !{!"0xf90eff0.w256.b0", !4742, i64 0}
!4742 = !{!"0xf90eff0.w512.b0", !4743, i64 0}
!4743 = !{!"0xf90eff0.w1024.b0", !4744, i64 0}
!4744 = !{!"int64", !4745, i64 0}
!4745 = !{!"0xf90eff0", !8, i64 0}
!4746 = !{!4747, !4747, i64 0}
!4747 = !{!"0xf90eff0.w1.b0", !4734, i64 0}
!4748 = !{!4749, !4749, i64 0}
!4749 = !{!"0x80e9b10.w1.b0", !4750, i64 0}
!4750 = !{!"0x80e9b10.w2.b0", !4751, i64 0}
!4751 = !{!"0x80e9b10.w4.b0", !4752, i64 0}
!4752 = !{!"0x80e9b10.w8.b0", !4753, i64 0}
!4753 = !{!"0x80e9b10.w16.b0", !4754, i64 0}
!4754 = !{!"0x80e9b10.w32.b0", !4755, i64 0}
!4755 = !{!"0x80e9b10.w64.b0", !4756, i64 0}
!4756 = !{!"0x80e9b10.w128.b0", !4757, i64 0}
!4757 = !{!"0x80e9b10.w256.b0", !4758, i64 0}
!4758 = !{!"0x80e9b10.w512.b0", !4759, i64 0}
!4759 = !{!"0x80e9b10.w1024.b0", !4760, i64 0}
!4760 = !{!"int64", !4761, i64 0}
!4761 = !{!"0x80e9b10", !8, i64 0}
!4762 = !{!4763, !4763, i64 0}
!4763 = !{!"0x80e9b10.w1.b1", !4750, i64 0}
!4764 = !{!4765, !4765, i64 0}
!4765 = !{!"0x4d2d690.w1.b1", !4766, i64 0}
!4766 = !{!"0x4d2d690.w2.b0", !4767, i64 0}
!4767 = !{!"0x4d2d690.w4.b0", !4768, i64 0}
!4768 = !{!"0x4d2d690.w8.b0", !4769, i64 0}
!4769 = !{!"0x4d2d690.w16.b0", !4770, i64 0}
!4770 = !{!"0x4d2d690.w32.b0", !4771, i64 0}
!4771 = !{!"0x4d2d690.w64.b0", !4772, i64 0}
!4772 = !{!"0x4d2d690.w128.b0", !4773, i64 0}
!4773 = !{!"0x4d2d690.w256.b0", !4774, i64 0}
!4774 = !{!"0x4d2d690.w512.b0", !4775, i64 0}
!4775 = !{!"0x4d2d690.w1024.b0", !4776, i64 0}
!4776 = !{!"int64", !4777, i64 0}
!4777 = !{!"0x4d2d690", !8, i64 0}
!4778 = !{!4779, !4779, i64 0}
!4779 = !{!"0x4d2d690.w1.b0", !4766, i64 0}
!4780 = !{!4781, !4781, i64 0}
!4781 = !{!"0x8dbd3a0.w1.b0", !4782, i64 0}
!4782 = !{!"0x8dbd3a0.w2.b0", !4783, i64 0}
!4783 = !{!"0x8dbd3a0.w4.b0", !4784, i64 0}
!4784 = !{!"0x8dbd3a0.w8.b0", !4785, i64 0}
!4785 = !{!"0x8dbd3a0.w16.b0", !4786, i64 0}
!4786 = !{!"0x8dbd3a0.w32.b0", !4787, i64 0}
!4787 = !{!"0x8dbd3a0.w64.b0", !4788, i64 0}
!4788 = !{!"0x8dbd3a0.w128.b0", !4789, i64 0}
!4789 = !{!"0x8dbd3a0.w256.b0", !4790, i64 0}
!4790 = !{!"0x8dbd3a0.w512.b0", !4791, i64 0}
!4791 = !{!"0x8dbd3a0.w1024.b0", !4792, i64 0}
!4792 = !{!"int64", !4793, i64 0}
!4793 = !{!"0x8dbd3a0", !8, i64 0}
!4794 = !{!4795, !4795, i64 0}
!4795 = !{!"0x188ff780.w1.b0", !4796, i64 0}
!4796 = !{!"0x188ff780.w2.b0", !4797, i64 0}
!4797 = !{!"0x188ff780.w4.b0", !4798, i64 0}
!4798 = !{!"0x188ff780.w8.b0", !4799, i64 0}
!4799 = !{!"0x188ff780.w16.b0", !4800, i64 0}
!4800 = !{!"0x188ff780.w32.b0", !4801, i64 0}
!4801 = !{!"0x188ff780.w64.b0", !4802, i64 0}
!4802 = !{!"0x188ff780.w128.b0", !4803, i64 0}
!4803 = !{!"0x188ff780.w256.b0", !4804, i64 0}
!4804 = !{!"0x188ff780.w512.b0", !4805, i64 0}
!4805 = !{!"0x188ff780.w1024.b0", !4806, i64 0}
!4806 = !{!"int64", !4807, i64 0}
!4807 = !{!"0x188ff780", !8, i64 0}
!4808 = !{!4809, !4809, i64 0}
!4809 = !{!"0x934ecd0.w1.b0", !4810, i64 0}
!4810 = !{!"0x934ecd0.w2.b0", !4811, i64 0}
!4811 = !{!"0x934ecd0.w4.b0", !4812, i64 0}
!4812 = !{!"0x934ecd0.w8.b0", !4813, i64 0}
!4813 = !{!"0x934ecd0.w16.b0", !4814, i64 0}
!4814 = !{!"0x934ecd0.w32.b0", !4815, i64 0}
!4815 = !{!"0x934ecd0.w64.b0", !4816, i64 0}
!4816 = !{!"0x934ecd0.w128.b0", !4817, i64 0}
!4817 = !{!"0x934ecd0.w256.b0", !4818, i64 0}
!4818 = !{!"0x934ecd0.w512.b0", !4819, i64 0}
!4819 = !{!"0x934ecd0.w1024.b0", !4820, i64 0}
!4820 = !{!"int64", !4821, i64 0}
!4821 = !{!"0x934ecd0", !8, i64 0}
!4822 = !{!4823, !4823, i64 0}
!4823 = !{!"0x934ecd0.w1.b1", !4810, i64 0}
!4824 = !{!4825, !4825, i64 0}
!4825 = !{!"0x18ccf940.w1.b1", !4826, i64 0}
!4826 = !{!"0x18ccf940.w2.b0", !4827, i64 0}
!4827 = !{!"0x18ccf940.w4.b0", !4828, i64 0}
!4828 = !{!"0x18ccf940.w8.b0", !4829, i64 0}
!4829 = !{!"0x18ccf940.w16.b0", !4830, i64 0}
!4830 = !{!"0x18ccf940.w32.b0", !4831, i64 0}
!4831 = !{!"0x18ccf940.w64.b0", !4832, i64 0}
!4832 = !{!"0x18ccf940.w128.b0", !4833, i64 0}
!4833 = !{!"0x18ccf940.w256.b0", !4834, i64 0}
!4834 = !{!"0x18ccf940.w512.b0", !4835, i64 0}
!4835 = !{!"0x18ccf940.w1024.b0", !4836, i64 0}
!4836 = !{!"int64", !4837, i64 0}
!4837 = !{!"0x18ccf940", !8, i64 0}
!4838 = !{!4839, !4839, i64 0}
!4839 = !{!"0x18ccf940.w1.b0", !4826, i64 0}
!4840 = !{!4841, !4841, i64 0}
!4841 = !{!"float32", !4842, i64 0}
!4842 = !{!"0x169551f0", !8, i64 0}
!4843 = !{!4844, !4844, i64 0}
!4844 = !{!"float32", !4845, i64 0}
!4845 = !{!"0x80f4a40", !8, i64 0}
!4846 = !{!4847, !4847, i64 0}
!4847 = !{!"float32", !4848, i64 0}
!4848 = !{!"0x5a6d320", !8, i64 0}
!4849 = distinct !{!4849, !4542}
!4850 = !{!4851, !4851, i64 0}
!4851 = !{!"float32", !4852, i64 0}
!4852 = !{!"0x6372c30", !8, i64 0}
!4853 = !{!4854, !4854, i64 0}
!4854 = !{!"float32", !4855, i64 0}
!4855 = !{!"0x4d16360", !8, i64 0}
!4856 = !{!4857, !4857, i64 0}
!4857 = !{!"0x937c020.w1.b0", !4858, i64 0}
!4858 = !{!"0x937c020.w2.b0", !4859, i64 0}
!4859 = !{!"0x937c020.w4.b0", !4860, i64 0}
!4860 = !{!"0x937c020.w8.b0", !4861, i64 0}
!4861 = !{!"0x937c020.w16.b0", !4862, i64 0}
!4862 = !{!"0x937c020.w32.b0", !4863, i64 0}
!4863 = !{!"0x937c020.w64.b0", !4864, i64 0}
!4864 = !{!"0x937c020.w128.b0", !4865, i64 0}
!4865 = !{!"0x937c020.w256.b0", !4866, i64 0}
!4866 = !{!"0x937c020.w512.b0", !4867, i64 0}
!4867 = !{!"0x937c020.w1024.b0", !4868, i64 0}
!4868 = !{!"int32", !4869, i64 0}
!4869 = !{!"0x937c020", !8, i64 0}
!4870 = !{!4871, !4871, i64 0}
!4871 = !{!"0x937c020.w1.b2", !4872, i64 0}
!4872 = !{!"0x937c020.w2.b2", !4859, i64 0}
!4873 = !{!4874, !4874, i64 0}
!4874 = !{!"0x937c020.w1.b3", !4872, i64 0}
!4875 = !{!4876, !4876, i64 0}
!4876 = !{!"0x937c020.w1.b4", !4877, i64 0}
!4877 = !{!"0x937c020.w2.b4", !4878, i64 0}
!4878 = !{!"0x937c020.w4.b4", !4860, i64 0}
!4879 = !{!4880, !4880, i64 0}
!4880 = !{!"0x937c020.w1.b5", !4877, i64 0}
!4881 = !{!4882, !4882, i64 0}
!4882 = !{!"0x937c020.w1.b1", !4858, i64 0}
!4883 = !{!4884, !4884, i64 0}
!4884 = !{!"0x1ae15c10.w1.b0", !4885, i64 0}
!4885 = !{!"0x1ae15c10.w2.b0", !4886, i64 0}
!4886 = !{!"0x1ae15c10.w4.b0", !4887, i64 0}
!4887 = !{!"0x1ae15c10.w8.b0", !4888, i64 0}
!4888 = !{!"0x1ae15c10.w16.b0", !4889, i64 0}
!4889 = !{!"0x1ae15c10.w32.b0", !4890, i64 0}
!4890 = !{!"0x1ae15c10.w64.b0", !4891, i64 0}
!4891 = !{!"0x1ae15c10.w128.b0", !4892, i64 0}
!4892 = !{!"0x1ae15c10.w256.b0", !4893, i64 0}
!4893 = !{!"0x1ae15c10.w512.b0", !4894, i64 0}
!4894 = !{!"0x1ae15c10.w1024.b0", !4895, i64 0}
!4895 = !{!"int64", !4896, i64 0}
!4896 = !{!"0x1ae15c10", !8, i64 0}
!4897 = !{!4898, !4898, i64 0}
!4898 = !{!"0x1ae15c10.w1.b1", !4885, i64 0}
!4899 = !{!4900, !4900, i64 0}
!4900 = !{!"0x1ae15c10.w1.b2", !4901, i64 0}
!4901 = !{!"0x1ae15c10.w2.b2", !4886, i64 0}
!4902 = !{!4903, !4903, i64 0}
!4903 = !{!"0x1ae15c10.w1.b3", !4901, i64 0}
!4904 = !{!4905, !4905, i64 0}
!4905 = !{!"0x1ae15c10.w1.b4", !4906, i64 0}
!4906 = !{!"0x1ae15c10.w2.b4", !4907, i64 0}
!4907 = !{!"0x1ae15c10.w4.b4", !4887, i64 0}
!4908 = !{!4909, !4909, i64 0}
!4909 = !{!"0x1ae15f20.w8.b0", !4910, i64 0}
!4910 = !{!"0x1ae15f20.w16.b0", !4911, i64 0}
!4911 = !{!"0x1ae15f20.w32.b0", !4912, i64 0}
!4912 = !{!"0x1ae15f20.w64.b0", !4913, i64 0}
!4913 = !{!"0x1ae15f20.w128.b0", !4914, i64 0}
!4914 = !{!"0x1ae15f20.w256.b0", !4915, i64 0}
!4915 = !{!"0x1ae15f20.w512.b0", !4916, i64 0}
!4916 = !{!"0x1ae15f20.w1024.b0", !4917, i64 0}
!4917 = !{!"int64", !4918, i64 0}
!4918 = !{!"0x1ae15f20", !8, i64 0}
!4919 = !{!4920, !4920, i64 0}
!4920 = !{!"0x1ae15f20.w1.b0", !4921, i64 0}
!4921 = !{!"0x1ae15f20.w2.b0", !4922, i64 0}
!4922 = !{!"0x1ae15f20.w4.b0", !4909, i64 0}
!4923 = !{!4924, !4924, i64 0}
!4924 = !{!"0x1ae15fc0.w1.b0", !4925, i64 0}
!4925 = !{!"0x1ae15fc0.w2.b0", !4926, i64 0}
!4926 = !{!"0x1ae15fc0.w4.b0", !4927, i64 0}
!4927 = !{!"0x1ae15fc0.w8.b0", !4928, i64 0}
!4928 = !{!"0x1ae15fc0.w16.b0", !4929, i64 0}
!4929 = !{!"0x1ae15fc0.w32.b0", !4930, i64 0}
!4930 = !{!"0x1ae15fc0.w64.b0", !4931, i64 0}
!4931 = !{!"0x1ae15fc0.w128.b0", !4932, i64 0}
!4932 = !{!"0x1ae15fc0.w256.b0", !4933, i64 0}
!4933 = !{!"0x1ae15fc0.w512.b0", !4934, i64 0}
!4934 = !{!"0x1ae15fc0.w1024.b0", !4935, i64 0}
!4935 = !{!"int64", !4936, i64 0}
!4936 = !{!"0x1ae15fc0", !8, i64 0}
!4937 = !{!4938, !4938, i64 0}
!4938 = !{!"0x1ae15fc0.w1.b1", !4925, i64 0}
!4939 = !{!4940, !4940, i64 0}
!4940 = !{!"0x1ae15fc0.w1.b2", !4941, i64 0}
!4941 = !{!"0x1ae15fc0.w2.b2", !4926, i64 0}
!4942 = !{!4943, !4943, i64 0}
!4943 = !{!"0x1ae15fc0.w1.b3", !4941, i64 0}
!4944 = !{!4945, !4945, i64 0}
!4945 = !{!"0x1ae15fc0.w1.b4", !4946, i64 0}
!4946 = !{!"0x1ae15fc0.w2.b4", !4947, i64 0}
!4947 = !{!"0x1ae15fc0.w4.b4", !4927, i64 0}
!4948 = !{!4949, !4949, i64 0}
!4949 = !{!"0x1ae15fc0.w1.b5", !4946, i64 0}
!4950 = !{!4951, !4951, i64 0}
!4951 = !{!"0x1ae15cc0.w8.b0", !4952, i64 0}
!4952 = !{!"0x1ae15cc0.w16.b0", !4953, i64 0}
!4953 = !{!"0x1ae15cc0.w32.b0", !4954, i64 0}
!4954 = !{!"0x1ae15cc0.w64.b0", !4955, i64 0}
!4955 = !{!"0x1ae15cc0.w128.b0", !4956, i64 0}
!4956 = !{!"0x1ae15cc0.w256.b0", !4957, i64 0}
!4957 = !{!"0x1ae15cc0.w512.b0", !4958, i64 0}
!4958 = !{!"0x1ae15cc0.w1024.b0", !4959, i64 0}
!4959 = !{!"int64", !4960, i64 0}
!4960 = !{!"0x1ae15cc0", !8, i64 0}
!4961 = !{!4962, !4962, i64 0}
!4962 = !{!"0x1ae15cc0.w1.b1", !4963, i64 0}
!4963 = !{!"0x1ae15cc0.w2.b0", !4964, i64 0}
!4964 = !{!"0x1ae15cc0.w4.b0", !4951, i64 0}
!4965 = !{!4966, !4966, i64 0}
!4966 = !{!"0x1ae15cc0.w1.b0", !4963, i64 0}
!4967 = !{!4968, !4968, i64 0}
!4968 = !{!"0x1ae16600.w1.b0", !4969, i64 0}
!4969 = !{!"0x1ae16600.w2.b0", !4970, i64 0}
!4970 = !{!"0x1ae16600.w4.b0", !4971, i64 0}
!4971 = !{!"0x1ae16600.w8.b0", !4972, i64 0}
!4972 = !{!"0x1ae16600.w16.b0", !4973, i64 0}
!4973 = !{!"0x1ae16600.w32.b0", !4974, i64 0}
!4974 = !{!"0x1ae16600.w64.b0", !4975, i64 0}
!4975 = !{!"0x1ae16600.w128.b0", !4976, i64 0}
!4976 = !{!"0x1ae16600.w256.b0", !4977, i64 0}
!4977 = !{!"0x1ae16600.w512.b0", !4978, i64 0}
!4978 = !{!"0x1ae16600.w1024.b0", !4979, i64 0}
!4979 = !{!"int64", !4980, i64 0}
!4980 = !{!"0x1ae16600", !8, i64 0}
!4981 = !{!4982, !4982, i64 0}
!4982 = !{!"0x1ae16600.w1.b1", !4969, i64 0}
!4983 = !{!4984, !4984, i64 0}
!4984 = !{!"0x1ae16600.w1.b2", !4985, i64 0}
!4985 = !{!"0x1ae16600.w2.b2", !4970, i64 0}
!4986 = !{!4987, !4987, i64 0}
!4987 = !{!"0x1ae16600.w1.b3", !4985, i64 0}
!4988 = !{!4989, !4989, i64 0}
!4989 = !{!"0x1ae16600.w1.b4", !4990, i64 0}
!4990 = !{!"0x1ae16600.w2.b4", !4991, i64 0}
!4991 = !{!"0x1ae16600.w4.b4", !4971, i64 0}
!4992 = !{!4993, !4993, i64 0}
!4993 = !{!"0x1ae16490.w8.b0", !4994, i64 0}
!4994 = !{!"0x1ae16490.w16.b0", !4995, i64 0}
!4995 = !{!"0x1ae16490.w32.b0", !4996, i64 0}
!4996 = !{!"0x1ae16490.w64.b0", !4997, i64 0}
!4997 = !{!"0x1ae16490.w128.b0", !4998, i64 0}
!4998 = !{!"0x1ae16490.w256.b0", !4999, i64 0}
!4999 = !{!"0x1ae16490.w512.b0", !5000, i64 0}
!5000 = !{!"0x1ae16490.w1024.b0", !5001, i64 0}
!5001 = !{!"int64", !5002, i64 0}
!5002 = !{!"0x1ae16490", !8, i64 0}
!5003 = !{!5004, !5004, i64 0}
!5004 = !{!"0x1ae16490.w1.b0", !5005, i64 0}
!5005 = !{!"0x1ae16490.w2.b0", !5006, i64 0}
!5006 = !{!"0x1ae16490.w4.b0", !4993, i64 0}
!5007 = !{!5008, !5008, i64 0}
!5008 = !{!"0x1ae17a50.w1.b0", !5009, i64 0}
!5009 = !{!"0x1ae17a50.w2.b0", !5010, i64 0}
!5010 = !{!"0x1ae17a50.w4.b0", !5011, i64 0}
!5011 = !{!"0x1ae17a50.w8.b0", !5012, i64 0}
!5012 = !{!"0x1ae17a50.w16.b0", !5013, i64 0}
!5013 = !{!"0x1ae17a50.w32.b0", !5014, i64 0}
!5014 = !{!"0x1ae17a50.w64.b0", !5015, i64 0}
!5015 = !{!"0x1ae17a50.w128.b0", !5016, i64 0}
!5016 = !{!"0x1ae17a50.w256.b0", !5017, i64 0}
!5017 = !{!"0x1ae17a50.w512.b0", !5018, i64 0}
!5018 = !{!"0x1ae17a50.w1024.b0", !5019, i64 0}
!5019 = !{!"int64", !5020, i64 0}
!5020 = !{!"0x1ae17a50", !8, i64 0}
!5021 = !{!5022, !5022, i64 0}
!5022 = !{!"0x1ae17a50.w1.b1", !5009, i64 0}
!5023 = !{!5024, !5024, i64 0}
!5024 = !{!"0x1ae17a50.w1.b2", !5025, i64 0}
!5025 = !{!"0x1ae17a50.w2.b2", !5010, i64 0}
!5026 = !{!5027, !5027, i64 0}
!5027 = !{!"0x1ae17a50.w1.b3", !5025, i64 0}
!5028 = !{!5029, !5029, i64 0}
!5029 = !{!"0x1ae17a50.w1.b4", !5030, i64 0}
!5030 = !{!"0x1ae17a50.w2.b4", !5031, i64 0}
!5031 = !{!"0x1ae17a50.w4.b4", !5011, i64 0}
!5032 = !{!5033, !5033, i64 0}
!5033 = !{!"0x1ae17aa0.w8.b0", !5034, i64 0}
!5034 = !{!"0x1ae17aa0.w16.b0", !5035, i64 0}
!5035 = !{!"0x1ae17aa0.w32.b0", !5036, i64 0}
!5036 = !{!"0x1ae17aa0.w64.b0", !5037, i64 0}
!5037 = !{!"0x1ae17aa0.w128.b0", !5038, i64 0}
!5038 = !{!"0x1ae17aa0.w256.b0", !5039, i64 0}
!5039 = !{!"0x1ae17aa0.w512.b0", !5040, i64 0}
!5040 = !{!"0x1ae17aa0.w1024.b0", !5041, i64 0}
!5041 = !{!"int64", !5042, i64 0}
!5042 = !{!"0x1ae17aa0", !8, i64 0}
!5043 = !{!5044, !5044, i64 0}
!5044 = !{!"0x1ae17aa0.w1.b0", !5045, i64 0}
!5045 = !{!"0x1ae17aa0.w2.b0", !5046, i64 0}
!5046 = !{!"0x1ae17aa0.w4.b0", !5033, i64 0}
!5047 = !{!5048, !5048, i64 0}
!5048 = !{!"0x1ae18920.w1.b0", !5049, i64 0}
!5049 = !{!"0x1ae18920.w2.b0", !5050, i64 0}
!5050 = !{!"0x1ae18920.w4.b0", !5051, i64 0}
!5051 = !{!"0x1ae18920.w8.b0", !5052, i64 0}
!5052 = !{!"0x1ae18920.w16.b0", !5053, i64 0}
!5053 = !{!"0x1ae18920.w32.b0", !5054, i64 0}
!5054 = !{!"0x1ae18920.w64.b0", !5055, i64 0}
!5055 = !{!"0x1ae18920.w128.b0", !5056, i64 0}
!5056 = !{!"0x1ae18920.w256.b0", !5057, i64 0}
!5057 = !{!"0x1ae18920.w512.b0", !5058, i64 0}
!5058 = !{!"0x1ae18920.w1024.b0", !5059, i64 0}
!5059 = !{!"int64", !5060, i64 0}
!5060 = !{!"0x1ae18920", !8, i64 0}
!5061 = !{!5062, !5062, i64 0}
!5062 = !{!"0x1ae18920.w1.b1", !5049, i64 0}
!5063 = !{!5064, !5064, i64 0}
!5064 = !{!"0x1ae18920.w1.b2", !5065, i64 0}
!5065 = !{!"0x1ae18920.w2.b2", !5050, i64 0}
!5066 = !{!5067, !5067, i64 0}
!5067 = !{!"0x1ae18920.w1.b3", !5065, i64 0}
!5068 = !{!5069, !5069, i64 0}
!5069 = !{!"0x1ae18920.w1.b4", !5070, i64 0}
!5070 = !{!"0x1ae18920.w2.b4", !5071, i64 0}
!5071 = !{!"0x1ae18920.w4.b4", !5051, i64 0}
!5072 = !{!5073, !5073, i64 0}
!5073 = !{!"0x1ae19da0.w8.b0", !5074, i64 0}
!5074 = !{!"0x1ae19da0.w16.b0", !5075, i64 0}
!5075 = !{!"0x1ae19da0.w32.b0", !5076, i64 0}
!5076 = !{!"0x1ae19da0.w64.b0", !5077, i64 0}
!5077 = !{!"0x1ae19da0.w128.b0", !5078, i64 0}
!5078 = !{!"0x1ae19da0.w256.b0", !5079, i64 0}
!5079 = !{!"0x1ae19da0.w512.b0", !5080, i64 0}
!5080 = !{!"0x1ae19da0.w1024.b0", !5081, i64 0}
!5081 = !{!"int64", !5082, i64 0}
!5082 = !{!"0x1ae19da0", !8, i64 0}
!5083 = !{!5084, !5084, i64 0}
!5084 = !{!"0x1ae19da0.w1.b0", !5085, i64 0}
!5085 = !{!"0x1ae19da0.w2.b0", !5086, i64 0}
!5086 = !{!"0x1ae19da0.w4.b0", !5073, i64 0}
!5087 = !{!5088, !5088, i64 0}
!5088 = !{!"0x1ae1ab90.w1.b0", !5089, i64 0}
!5089 = !{!"0x1ae1ab90.w2.b0", !5090, i64 0}
!5090 = !{!"0x1ae1ab90.w4.b0", !5091, i64 0}
!5091 = !{!"0x1ae1ab90.w8.b0", !5092, i64 0}
!5092 = !{!"0x1ae1ab90.w16.b0", !5093, i64 0}
!5093 = !{!"0x1ae1ab90.w32.b0", !5094, i64 0}
!5094 = !{!"0x1ae1ab90.w64.b0", !5095, i64 0}
!5095 = !{!"0x1ae1ab90.w128.b0", !5096, i64 0}
!5096 = !{!"0x1ae1ab90.w256.b0", !5097, i64 0}
!5097 = !{!"0x1ae1ab90.w512.b0", !5098, i64 0}
!5098 = !{!"0x1ae1ab90.w1024.b0", !5099, i64 0}
!5099 = !{!"int64", !5100, i64 0}
!5100 = !{!"0x1ae1ab90", !8, i64 0}
!5101 = !{!5102, !5102, i64 0}
!5102 = !{!"0x1ae1ab90.w1.b1", !5089, i64 0}
!5103 = !{!5104, !5104, i64 0}
!5104 = !{!"0x1ae1ab90.w1.b2", !5105, i64 0}
!5105 = !{!"0x1ae1ab90.w2.b2", !5090, i64 0}
!5106 = !{!5107, !5107, i64 0}
!5107 = !{!"0x1ae1ab90.w1.b3", !5105, i64 0}
!5108 = !{!5109, !5109, i64 0}
!5109 = !{!"0x1ae1ab90.w1.b4", !5110, i64 0}
!5110 = !{!"0x1ae1ab90.w2.b4", !5111, i64 0}
!5111 = !{!"0x1ae1ab90.w4.b4", !5091, i64 0}
!5112 = !{!5113, !5113, i64 0}
!5113 = !{!"0x1ca3a420.w8.b0", !5114, i64 0}
!5114 = !{!"0x1ca3a420.w16.b0", !5115, i64 0}
!5115 = !{!"0x1ca3a420.w32.b0", !5116, i64 0}
!5116 = !{!"0x1ca3a420.w64.b0", !5117, i64 0}
!5117 = !{!"0x1ca3a420.w128.b0", !5118, i64 0}
!5118 = !{!"0x1ca3a420.w256.b0", !5119, i64 0}
!5119 = !{!"0x1ca3a420.w512.b0", !5120, i64 0}
!5120 = !{!"0x1ca3a420.w1024.b0", !5121, i64 0}
!5121 = !{!"int64", !5122, i64 0}
!5122 = !{!"0x1ca3a420", !8, i64 0}
!5123 = !{!5124, !5124, i64 0}
!5124 = !{!"0x1ca3a420.w1.b0", !5125, i64 0}
!5125 = !{!"0x1ca3a420.w2.b0", !5126, i64 0}
!5126 = !{!"0x1ca3a420.w4.b0", !5113, i64 0}
!5127 = !{!5128, !5128, i64 0}
!5128 = !{!"float32", !5129, i64 0}
!5129 = !{!"0x1af1dfa0", !8, i64 0}
!5130 = !{!5131, !5131, i64 0}
!5131 = !{!"float32", !5132, i64 0}
!5132 = !{!"0x1aef3c80", !8, i64 0}
!5133 = !{!5134, !5134, i64 0}
!5134 = !{!"float32", !5135, i64 0}
!5135 = !{!"0x1af1e4a0", !8, i64 0}
!5136 = !{!5137, !5137, i64 0}
!5137 = !{!"float32", !5138, i64 0}
!5138 = !{!"0x1af1d9f0", !8, i64 0}
!5139 = !{!5140, !5140, i64 0}
!5140 = !{!"float32", !5141, i64 0}
!5141 = !{!"0x1af67950", !8, i64 0}
!5142 = !{!5143, !5143, i64 0}
!5143 = !{!"0x1afacc50.w8.b0", !5144, i64 0}
!5144 = !{!"0x1afacc50.w16.b0", !5145, i64 0}
!5145 = !{!"0x1afacc50.w32.b0", !5146, i64 0}
!5146 = !{!"0x1afacc50.w64.b0", !5147, i64 0}
!5147 = !{!"0x1afacc50.w128.b0", !5148, i64 0}
!5148 = !{!"0x1afacc50.w256.b0", !5149, i64 0}
!5149 = !{!"0x1afacc50.w512.b0", !5150, i64 0}
!5150 = !{!"0x1afacc50.w1024.b0", !5151, i64 0}
!5151 = !{!"float32", !5152, i64 0}
!5152 = !{!"0x1afacc50", !8, i64 0}
!5153 = !{!5151, !5151, i64 0}
!5154 = !{!5155, !5155, i64 0}
!5155 = !{!"float32", !5156, i64 0}
!5156 = !{!"0x1afacf60", !8, i64 0}
!5157 = !{!5158, !5158, i64 0}
!5158 = !{!"float32", !5159, i64 0}
!5159 = !{!"0x1af1e3a0", !8, i64 0}
!5160 = !{!5161, !5161, i64 0}
!5161 = !{!"0x9e07210.w1.b0", !5162, i64 0}
!5162 = !{!"0x9e07210.w2.b0", !5163, i64 0}
!5163 = !{!"0x9e07210.w4.b0", !5164, i64 0}
!5164 = !{!"0x9e07210.w8.b0", !5165, i64 0}
!5165 = !{!"0x9e07210.w16.b0", !5166, i64 0}
!5166 = !{!"0x9e07210.w32.b0", !5167, i64 0}
!5167 = !{!"0x9e07210.w64.b0", !5168, i64 0}
!5168 = !{!"0x9e07210.w128.b0", !5169, i64 0}
!5169 = !{!"0x9e07210.w256.b0", !5170, i64 0}
!5170 = !{!"0x9e07210.w512.b0", !5171, i64 0}
!5171 = !{!"0x9e07210.w1024.b0", !5172, i64 0}
!5172 = !{!"int32", !5173, i64 0}
!5173 = !{!"0x9e07210", !8, i64 0}
!5174 = !{!5175, !5175, i64 0}
!5175 = !{!"0x9e07210.w1.b2", !5176, i64 0}
!5176 = !{!"0x9e07210.w2.b2", !5163, i64 0}
!5177 = !{!5178, !5178, i64 0}
!5178 = !{!"0x9e07210.w1.b1", !5162, i64 0}
!5179 = !{!5180, !5180, i64 0}
!5180 = !{!"0xb5f2180.w1.b0", !5181, i64 0}
!5181 = !{!"0xb5f2180.w2.b0", !5182, i64 0}
!5182 = !{!"0xb5f2180.w4.b0", !5183, i64 0}
!5183 = !{!"0xb5f2180.w8.b0", !5184, i64 0}
!5184 = !{!"0xb5f2180.w16.b0", !5185, i64 0}
!5185 = !{!"0xb5f2180.w32.b0", !5186, i64 0}
!5186 = !{!"0xb5f2180.w64.b0", !5187, i64 0}
!5187 = !{!"0xb5f2180.w128.b0", !5188, i64 0}
!5188 = !{!"0xb5f2180.w256.b0", !5189, i64 0}
!5189 = !{!"0xb5f2180.w512.b0", !5190, i64 0}
!5190 = !{!"0xb5f2180.w1024.b0", !5191, i64 0}
!5191 = !{!"int64", !5192, i64 0}
!5192 = !{!"0xb5f2180", !8, i64 0}
!5193 = !{!5194, !5194, i64 0}
!5194 = !{!"0xb5f2180.w1.b1", !5181, i64 0}
!5195 = !{!5196, !5196, i64 0}
!5196 = !{!"0xb5f2180.w1.b2", !5197, i64 0}
!5197 = !{!"0xb5f2180.w2.b2", !5182, i64 0}
!5198 = !{!5199, !5199, i64 0}
!5199 = !{!"0xb5f2180.w1.b3", !5197, i64 0}
!5200 = !{!5201, !5201, i64 0}
!5201 = !{!"0xb5f2180.w1.b4", !5202, i64 0}
!5202 = !{!"0xb5f2180.w2.b4", !5203, i64 0}
!5203 = !{!"0xb5f2180.w4.b4", !5183, i64 0}
!5204 = !{!5205, !5205, i64 0}
!5205 = !{!"0x80de850.w8.b0", !5206, i64 0}
!5206 = !{!"0x80de850.w16.b0", !5207, i64 0}
!5207 = !{!"0x80de850.w32.b0", !5208, i64 0}
!5208 = !{!"0x80de850.w64.b0", !5209, i64 0}
!5209 = !{!"0x80de850.w128.b0", !5210, i64 0}
!5210 = !{!"0x80de850.w256.b0", !5211, i64 0}
!5211 = !{!"0x80de850.w512.b0", !5212, i64 0}
!5212 = !{!"0x80de850.w1024.b0", !5213, i64 0}
!5213 = !{!"int64", !5214, i64 0}
!5214 = !{!"0x80de850", !8, i64 0}
!5215 = !{!5216, !5216, i64 0}
!5216 = !{!"0x80de850.w1.b0", !5217, i64 0}
!5217 = !{!"0x80de850.w2.b0", !5218, i64 0}
!5218 = !{!"0x80de850.w4.b0", !5205, i64 0}
!5219 = !{!5220, !5220, i64 0}
!5220 = !{!"0x1ae51630.w1.b0", !5221, i64 0}
!5221 = !{!"0x1ae51630.w2.b0", !5222, i64 0}
!5222 = !{!"0x1ae51630.w4.b0", !5223, i64 0}
!5223 = !{!"0x1ae51630.w8.b0", !5224, i64 0}
!5224 = !{!"0x1ae51630.w16.b0", !5225, i64 0}
!5225 = !{!"0x1ae51630.w32.b0", !5226, i64 0}
!5226 = !{!"0x1ae51630.w64.b0", !5227, i64 0}
!5227 = !{!"0x1ae51630.w128.b0", !5228, i64 0}
!5228 = !{!"0x1ae51630.w256.b0", !5229, i64 0}
!5229 = !{!"0x1ae51630.w512.b0", !5230, i64 0}
!5230 = !{!"0x1ae51630.w1024.b0", !5231, i64 0}
!5231 = !{!"int64", !5232, i64 0}
!5232 = !{!"0x1ae51630", !8, i64 0}
!5233 = !{!5234, !5234, i64 0}
!5234 = !{!"0x1ae51630.w1.b1", !5221, i64 0}
!5235 = !{!5236, !5236, i64 0}
!5236 = !{!"0x1ae51630.w1.b2", !5237, i64 0}
!5237 = !{!"0x1ae51630.w2.b2", !5222, i64 0}
!5238 = !{!5239, !5239, i64 0}
!5239 = !{!"0x1ae51630.w1.b3", !5237, i64 0}
!5240 = !{!5241, !5241, i64 0}
!5241 = !{!"0x1ae51630.w1.b4", !5242, i64 0}
!5242 = !{!"0x1ae51630.w2.b4", !5243, i64 0}
!5243 = !{!"0x1ae51630.w4.b4", !5223, i64 0}
!5244 = !{!5245, !5245, i64 0}
!5245 = !{!"0x80de700.w8.b0", !5246, i64 0}
!5246 = !{!"0x80de700.w16.b0", !5247, i64 0}
!5247 = !{!"0x80de700.w32.b0", !5248, i64 0}
!5248 = !{!"0x80de700.w64.b0", !5249, i64 0}
!5249 = !{!"0x80de700.w128.b0", !5250, i64 0}
!5250 = !{!"0x80de700.w256.b0", !5251, i64 0}
!5251 = !{!"0x80de700.w512.b0", !5252, i64 0}
!5252 = !{!"0x80de700.w1024.b0", !5253, i64 0}
!5253 = !{!"int64", !5254, i64 0}
!5254 = !{!"0x80de700", !8, i64 0}
!5255 = !{!5256, !5256, i64 0}
!5256 = !{!"0x80de700.w1.b0", !5257, i64 0}
!5257 = !{!"0x80de700.w2.b0", !5258, i64 0}
!5258 = !{!"0x80de700.w4.b0", !5245, i64 0}
!5259 = !{!5260, !5260, i64 0}
!5260 = !{!"0xdd99b00.w1.b0", !5261, i64 0}
!5261 = !{!"0xdd99b00.w2.b0", !5262, i64 0}
!5262 = !{!"0xdd99b00.w4.b0", !5263, i64 0}
!5263 = !{!"0xdd99b00.w8.b0", !5264, i64 0}
!5264 = !{!"0xdd99b00.w16.b0", !5265, i64 0}
!5265 = !{!"0xdd99b00.w32.b0", !5266, i64 0}
!5266 = !{!"0xdd99b00.w64.b0", !5267, i64 0}
!5267 = !{!"0xdd99b00.w128.b0", !5268, i64 0}
!5268 = !{!"0xdd99b00.w256.b0", !5269, i64 0}
!5269 = !{!"0xdd99b00.w512.b0", !5270, i64 0}
!5270 = !{!"0xdd99b00.w1024.b0", !5271, i64 0}
!5271 = !{!"int64", !5272, i64 0}
!5272 = !{!"0xdd99b00", !8, i64 0}
!5273 = !{!5274, !5274, i64 0}
!5274 = !{!"0xdd99b00.w1.b1", !5261, i64 0}
!5275 = !{!5276, !5276, i64 0}
!5276 = !{!"0xdd99b00.w1.b2", !5277, i64 0}
!5277 = !{!"0xdd99b00.w2.b2", !5262, i64 0}
!5278 = !{!5279, !5279, i64 0}
!5279 = !{!"0xdd99b00.w1.b3", !5277, i64 0}
!5280 = !{!5281, !5281, i64 0}
!5281 = !{!"0xdd99b00.w1.b4", !5282, i64 0}
!5282 = !{!"0xdd99b00.w2.b4", !5283, i64 0}
!5283 = !{!"0xdd99b00.w4.b4", !5263, i64 0}
!5284 = !{!5285, !5285, i64 0}
!5285 = !{!"0x102fcba0.w8.b0", !5286, i64 0}
!5286 = !{!"0x102fcba0.w16.b0", !5287, i64 0}
!5287 = !{!"0x102fcba0.w32.b0", !5288, i64 0}
!5288 = !{!"0x102fcba0.w64.b0", !5289, i64 0}
!5289 = !{!"0x102fcba0.w128.b0", !5290, i64 0}
!5290 = !{!"0x102fcba0.w256.b0", !5291, i64 0}
!5291 = !{!"0x102fcba0.w512.b0", !5292, i64 0}
!5292 = !{!"0x102fcba0.w1024.b0", !5293, i64 0}
!5293 = !{!"int64", !5294, i64 0}
!5294 = !{!"0x102fcba0", !8, i64 0}
!5295 = !{!5296, !5296, i64 0}
!5296 = !{!"0x102fcba0.w1.b0", !5297, i64 0}
!5297 = !{!"0x102fcba0.w2.b0", !5298, i64 0}
!5298 = !{!"0x102fcba0.w4.b0", !5285, i64 0}
!5299 = !{!5300, !5300, i64 0}
!5300 = !{!"float32", !5301, i64 0}
!5301 = !{!"0xb5be610", !8, i64 0}
!5302 = !{!5303, !5303, i64 0}
!5303 = !{!"float32", !5304, i64 0}
!5304 = !{!"0x13c962f0", !8, i64 0}
!5305 = !{!5306, !5306, i64 0}
!5306 = !{!"float32", !5307, i64 0}
!5307 = !{!"0x1afccc70", !8, i64 0}
!5308 = !{!5309, !5309, i64 0}
!5309 = !{!"0x1afa68c0.w1.b0", !5310, i64 0}
!5310 = !{!"0x1afa68c0.w2.b0", !5311, i64 0}
!5311 = !{!"0x1afa68c0.w4.b0", !5312, i64 0}
!5312 = !{!"0x1afa68c0.w8.b0", !5313, i64 0}
!5313 = !{!"0x1afa68c0.w16.b0", !5314, i64 0}
!5314 = !{!"0x1afa68c0.w32.b0", !5315, i64 0}
!5315 = !{!"0x1afa68c0.w64.b0", !5316, i64 0}
!5316 = !{!"0x1afa68c0.w128.b0", !5317, i64 0}
!5317 = !{!"0x1afa68c0.w256.b0", !5318, i64 0}
!5318 = !{!"0x1afa68c0.w512.b0", !5319, i64 0}
!5319 = !{!"0x1afa68c0.w1024.b0", !5320, i64 0}
!5320 = !{!"int32", !5321, i64 0}
!5321 = !{!"0x1afa68c0", !8, i64 0}
!5322 = !{!5323, !5323, i64 0}
!5323 = !{!"0x1afa68c0.w1.b1", !5310, i64 0}
!5324 = !{!5325, !5325, i64 0}
!5325 = !{!"0x1401aaa0.w1.b0", !5326, i64 0}
!5326 = !{!"0x1401aaa0.w2.b0", !5327, i64 0}
!5327 = !{!"0x1401aaa0.w4.b0", !5328, i64 0}
!5328 = !{!"0x1401aaa0.w8.b0", !5329, i64 0}
!5329 = !{!"0x1401aaa0.w16.b0", !5330, i64 0}
!5330 = !{!"0x1401aaa0.w32.b0", !5331, i64 0}
!5331 = !{!"0x1401aaa0.w64.b0", !5332, i64 0}
!5332 = !{!"0x1401aaa0.w128.b0", !5333, i64 0}
!5333 = !{!"0x1401aaa0.w256.b0", !5334, i64 0}
!5334 = !{!"0x1401aaa0.w512.b0", !5335, i64 0}
!5335 = !{!"0x1401aaa0.w1024.b0", !5336, i64 0}
!5336 = !{!"int64", !5337, i64 0}
!5337 = !{!"0x1401aaa0", !8, i64 0}
!5338 = !{!5339, !5339, i64 0}
!5339 = !{!"0x1401aaa0.w1.b1", !5326, i64 0}
!5340 = !{!5341, !5341, i64 0}
!5341 = !{!"0x1401aaa0.w1.b2", !5342, i64 0}
!5342 = !{!"0x1401aaa0.w2.b2", !5327, i64 0}
!5343 = !{!5344, !5344, i64 0}
!5344 = !{!"0x1401aaa0.w1.b3", !5342, i64 0}
!5345 = !{!5346, !5346, i64 0}
!5346 = !{!"0x1401aaa0.w1.b4", !5347, i64 0}
!5347 = !{!"0x1401aaa0.w2.b4", !5348, i64 0}
!5348 = !{!"0x1401aaa0.w4.b4", !5328, i64 0}
!5349 = !{!5350, !5350, i64 0}
!5350 = !{!"0x1401b000.w8.b0", !5351, i64 0}
!5351 = !{!"0x1401b000.w16.b0", !5352, i64 0}
!5352 = !{!"0x1401b000.w32.b0", !5353, i64 0}
!5353 = !{!"0x1401b000.w64.b0", !5354, i64 0}
!5354 = !{!"0x1401b000.w128.b0", !5355, i64 0}
!5355 = !{!"0x1401b000.w256.b0", !5356, i64 0}
!5356 = !{!"0x1401b000.w512.b0", !5357, i64 0}
!5357 = !{!"0x1401b000.w1024.b0", !5358, i64 0}
!5358 = !{!"int64", !5359, i64 0}
!5359 = !{!"0x1401b000", !8, i64 0}
!5360 = !{!5361, !5361, i64 0}
!5361 = !{!"0x1401b000.w1.b0", !5362, i64 0}
!5362 = !{!"0x1401b000.w2.b0", !5363, i64 0}
!5363 = !{!"0x1401b000.w4.b0", !5350, i64 0}
!5364 = !{!5365, !5365, i64 0}
!5365 = !{!"0x1401b250.w1.b0", !5366, i64 0}
!5366 = !{!"0x1401b250.w2.b0", !5367, i64 0}
!5367 = !{!"0x1401b250.w4.b0", !5368, i64 0}
!5368 = !{!"0x1401b250.w8.b0", !5369, i64 0}
!5369 = !{!"0x1401b250.w16.b0", !5370, i64 0}
!5370 = !{!"0x1401b250.w32.b0", !5371, i64 0}
!5371 = !{!"0x1401b250.w64.b0", !5372, i64 0}
!5372 = !{!"0x1401b250.w128.b0", !5373, i64 0}
!5373 = !{!"0x1401b250.w256.b0", !5374, i64 0}
!5374 = !{!"0x1401b250.w512.b0", !5375, i64 0}
!5375 = !{!"0x1401b250.w1024.b0", !5376, i64 0}
!5376 = !{!"int64", !5377, i64 0}
!5377 = !{!"0x1401b250", !8, i64 0}
!5378 = !{!5379, !5379, i64 0}
!5379 = !{!"0x1401b250.w1.b1", !5366, i64 0}
!5380 = !{!5381, !5381, i64 0}
!5381 = !{!"0x1401b250.w1.b2", !5382, i64 0}
!5382 = !{!"0x1401b250.w2.b2", !5367, i64 0}
!5383 = !{!5384, !5384, i64 0}
!5384 = !{!"0x1401b250.w1.b3", !5382, i64 0}
!5385 = !{!5386, !5386, i64 0}
!5386 = !{!"0x1401b250.w1.b4", !5387, i64 0}
!5387 = !{!"0x1401b250.w2.b4", !5388, i64 0}
!5388 = !{!"0x1401b250.w4.b4", !5368, i64 0}
!5389 = !{!5390, !5390, i64 0}
!5390 = !{!"0x1401ac70.w8.b0", !5391, i64 0}
!5391 = !{!"0x1401ac70.w16.b0", !5392, i64 0}
!5392 = !{!"0x1401ac70.w32.b0", !5393, i64 0}
!5393 = !{!"0x1401ac70.w64.b0", !5394, i64 0}
!5394 = !{!"0x1401ac70.w128.b0", !5395, i64 0}
!5395 = !{!"0x1401ac70.w256.b0", !5396, i64 0}
!5396 = !{!"0x1401ac70.w512.b0", !5397, i64 0}
!5397 = !{!"0x1401ac70.w1024.b0", !5398, i64 0}
!5398 = !{!"int64", !5399, i64 0}
!5399 = !{!"0x1401ac70", !8, i64 0}
!5400 = !{!5401, !5401, i64 0}
!5401 = !{!"0x1401ac70.w1.b0", !5402, i64 0}
!5402 = !{!"0x1401ac70.w2.b0", !5403, i64 0}
!5403 = !{!"0x1401ac70.w4.b0", !5390, i64 0}
!5404 = !{!5405, !5405, i64 0}
!5405 = !{!"float32", !5406, i64 0}
!5406 = !{!"0x1afa6be0", !8, i64 0}
!5407 = !{!5408, !5408, i64 0}
!5408 = !{!"float32", !5409, i64 0}
!5409 = !{!"0x1afa6200", !8, i64 0}
!5410 = !{!5411, !5411, i64 0}
!5411 = !{!"0x79e12f0.w1.b0", !5412, i64 0}
!5412 = !{!"0x79e12f0.w2.b0", !5413, i64 0}
!5413 = !{!"0x79e12f0.w4.b0", !5414, i64 0}
!5414 = !{!"0x79e12f0.w8.b0", !5415, i64 0}
!5415 = !{!"0x79e12f0.w16.b0", !5416, i64 0}
!5416 = !{!"0x79e12f0.w32.b0", !5417, i64 0}
!5417 = !{!"0x79e12f0.w64.b0", !5418, i64 0}
!5418 = !{!"0x79e12f0.w128.b0", !5419, i64 0}
!5419 = !{!"0x79e12f0.w256.b0", !5420, i64 0}
!5420 = !{!"0x79e12f0.w512.b0", !5421, i64 0}
!5421 = !{!"0x79e12f0.w1024.b0", !5422, i64 0}
!5422 = !{!"int32", !5423, i64 0}
!5423 = !{!"0x79e12f0", !8, i64 0}
!5424 = !{!5425, !5425, i64 0}
!5425 = !{!"0x79e12f0.w1.b1", !5412, i64 0}
!5426 = !{!5427, !5427, i64 0}
!5427 = !{!"0x79e41d0.w1.b0", !5428, i64 0}
!5428 = !{!"0x79e41d0.w2.b0", !5429, i64 0}
!5429 = !{!"0x79e41d0.w4.b0", !5430, i64 0}
!5430 = !{!"0x79e41d0.w8.b0", !5431, i64 0}
!5431 = !{!"0x79e41d0.w16.b0", !5432, i64 0}
!5432 = !{!"0x79e41d0.w32.b0", !5433, i64 0}
!5433 = !{!"0x79e41d0.w64.b0", !5434, i64 0}
!5434 = !{!"0x79e41d0.w128.b0", !5435, i64 0}
!5435 = !{!"0x79e41d0.w256.b0", !5436, i64 0}
!5436 = !{!"0x79e41d0.w512.b0", !5437, i64 0}
!5437 = !{!"0x79e41d0.w1024.b0", !5438, i64 0}
!5438 = !{!"int64", !5439, i64 0}
!5439 = !{!"0x79e41d0", !8, i64 0}
!5440 = !{!5441, !5441, i64 0}
!5441 = !{!"0x79e41d0.w1.b1", !5428, i64 0}
!5442 = !{!5443, !5443, i64 0}
!5443 = !{!"0x79e41d0.w1.b2", !5444, i64 0}
!5444 = !{!"0x79e41d0.w2.b2", !5429, i64 0}
!5445 = !{!5446, !5446, i64 0}
!5446 = !{!"0x79e41d0.w1.b3", !5444, i64 0}
!5447 = !{!5448, !5448, i64 0}
!5448 = !{!"0x79e41d0.w1.b4", !5449, i64 0}
!5449 = !{!"0x79e41d0.w2.b4", !5450, i64 0}
!5450 = !{!"0x79e41d0.w4.b4", !5430, i64 0}
!5451 = !{!5452, !5452, i64 0}
!5452 = !{!"0x79e4790.w8.b0", !5453, i64 0}
!5453 = !{!"0x79e4790.w16.b0", !5454, i64 0}
!5454 = !{!"0x79e4790.w32.b0", !5455, i64 0}
!5455 = !{!"0x79e4790.w64.b0", !5456, i64 0}
!5456 = !{!"0x79e4790.w128.b0", !5457, i64 0}
!5457 = !{!"0x79e4790.w256.b0", !5458, i64 0}
!5458 = !{!"0x79e4790.w512.b0", !5459, i64 0}
!5459 = !{!"0x79e4790.w1024.b0", !5460, i64 0}
!5460 = !{!"int64", !5461, i64 0}
!5461 = !{!"0x79e4790", !8, i64 0}
!5462 = !{!5463, !5463, i64 0}
!5463 = !{!"0x79e4790.w1.b0", !5464, i64 0}
!5464 = !{!"0x79e4790.w2.b0", !5465, i64 0}
!5465 = !{!"0x79e4790.w4.b0", !5452, i64 0}
!5466 = !{!5467, !5467, i64 0}
!5467 = !{!"0x79e49e0.w1.b0", !5468, i64 0}
!5468 = !{!"0x79e49e0.w2.b0", !5469, i64 0}
!5469 = !{!"0x79e49e0.w4.b0", !5470, i64 0}
!5470 = !{!"0x79e49e0.w8.b0", !5471, i64 0}
!5471 = !{!"0x79e49e0.w16.b0", !5472, i64 0}
!5472 = !{!"0x79e49e0.w32.b0", !5473, i64 0}
!5473 = !{!"0x79e49e0.w64.b0", !5474, i64 0}
!5474 = !{!"0x79e49e0.w128.b0", !5475, i64 0}
!5475 = !{!"0x79e49e0.w256.b0", !5476, i64 0}
!5476 = !{!"0x79e49e0.w512.b0", !5477, i64 0}
!5477 = !{!"0x79e49e0.w1024.b0", !5478, i64 0}
!5478 = !{!"int64", !5479, i64 0}
!5479 = !{!"0x79e49e0", !8, i64 0}
!5480 = !{!5481, !5481, i64 0}
!5481 = !{!"0x79e49e0.w1.b1", !5468, i64 0}
!5482 = !{!5483, !5483, i64 0}
!5483 = !{!"0x79e49e0.w1.b2", !5484, i64 0}
!5484 = !{!"0x79e49e0.w2.b2", !5469, i64 0}
!5485 = !{!5486, !5486, i64 0}
!5486 = !{!"0x79e49e0.w1.b3", !5484, i64 0}
!5487 = !{!5488, !5488, i64 0}
!5488 = !{!"0x79e49e0.w1.b4", !5489, i64 0}
!5489 = !{!"0x79e49e0.w2.b4", !5490, i64 0}
!5490 = !{!"0x79e49e0.w4.b4", !5470, i64 0}
!5491 = !{!5492, !5492, i64 0}
!5492 = !{!"0x79e4400.w8.b0", !5493, i64 0}
!5493 = !{!"0x79e4400.w16.b0", !5494, i64 0}
!5494 = !{!"0x79e4400.w32.b0", !5495, i64 0}
!5495 = !{!"0x79e4400.w64.b0", !5496, i64 0}
!5496 = !{!"0x79e4400.w128.b0", !5497, i64 0}
!5497 = !{!"0x79e4400.w256.b0", !5498, i64 0}
!5498 = !{!"0x79e4400.w512.b0", !5499, i64 0}
!5499 = !{!"0x79e4400.w1024.b0", !5500, i64 0}
!5500 = !{!"int64", !5501, i64 0}
!5501 = !{!"0x79e4400", !8, i64 0}
!5502 = !{!5503, !5503, i64 0}
!5503 = !{!"0x79e4400.w1.b0", !5504, i64 0}
!5504 = !{!"0x79e4400.w2.b0", !5505, i64 0}
!5505 = !{!"0x79e4400.w4.b0", !5492, i64 0}
!5506 = !{!5507, !5507, i64 0}
!5507 = !{!"float32", !5508, i64 0}
!5508 = !{!"0x793bf60", !8, i64 0}
!5509 = !{!5510, !5510, i64 0}
!5510 = !{!"float32", !5511, i64 0}
!5511 = !{!"0x790e6c0", !8, i64 0}
!5512 = !{!5513, !5513, i64 0}
!5513 = !{!"0x7143ac0.w1.b0", !5514, i64 0}
!5514 = !{!"0x7143ac0.w2.b0", !5515, i64 0}
!5515 = !{!"0x7143ac0.w4.b0", !5516, i64 0}
!5516 = !{!"0x7143ac0.w8.b0", !5517, i64 0}
!5517 = !{!"0x7143ac0.w16.b0", !5518, i64 0}
!5518 = !{!"0x7143ac0.w32.b0", !5519, i64 0}
!5519 = !{!"0x7143ac0.w64.b0", !5520, i64 0}
!5520 = !{!"0x7143ac0.w128.b0", !5521, i64 0}
!5521 = !{!"0x7143ac0.w256.b0", !5522, i64 0}
!5522 = !{!"0x7143ac0.w512.b0", !5523, i64 0}
!5523 = !{!"0x7143ac0.w1024.b0", !5524, i64 0}
!5524 = !{!"int32", !5525, i64 0}
!5525 = !{!"0x7143ac0", !8, i64 0}
!5526 = !{!5527, !5527, i64 0}
!5527 = !{!"0x7143ac0.w1.b1", !5514, i64 0}
!5528 = !{!5529, !5529, i64 0}
!5529 = !{!"0xb686120.w1.b0", !5530, i64 0}
!5530 = !{!"0xb686120.w2.b0", !5531, i64 0}
!5531 = !{!"0xb686120.w4.b0", !5532, i64 0}
!5532 = !{!"0xb686120.w8.b0", !5533, i64 0}
!5533 = !{!"0xb686120.w16.b0", !5534, i64 0}
!5534 = !{!"0xb686120.w32.b0", !5535, i64 0}
!5535 = !{!"0xb686120.w64.b0", !5536, i64 0}
!5536 = !{!"0xb686120.w128.b0", !5537, i64 0}
!5537 = !{!"0xb686120.w256.b0", !5538, i64 0}
!5538 = !{!"0xb686120.w512.b0", !5539, i64 0}
!5539 = !{!"0xb686120.w1024.b0", !5540, i64 0}
!5540 = !{!"int64", !5541, i64 0}
!5541 = !{!"0xb686120", !8, i64 0}
!5542 = !{!5543, !5543, i64 0}
!5543 = !{!"0xb686120.w1.b1", !5530, i64 0}
!5544 = !{!5545, !5545, i64 0}
!5545 = !{!"0xb686120.w1.b2", !5546, i64 0}
!5546 = !{!"0xb686120.w2.b2", !5531, i64 0}
!5547 = !{!5548, !5548, i64 0}
!5548 = !{!"0xb686120.w1.b3", !5546, i64 0}
!5549 = !{!5550, !5550, i64 0}
!5550 = !{!"0xb686120.w1.b4", !5551, i64 0}
!5551 = !{!"0xb686120.w2.b4", !5552, i64 0}
!5552 = !{!"0xb686120.w4.b4", !5532, i64 0}
!5553 = !{!5554, !5554, i64 0}
!5554 = !{!"0x1ae2c930.w8.b0", !5555, i64 0}
!5555 = !{!"0x1ae2c930.w16.b0", !5556, i64 0}
!5556 = !{!"0x1ae2c930.w32.b0", !5557, i64 0}
!5557 = !{!"0x1ae2c930.w64.b0", !5558, i64 0}
!5558 = !{!"0x1ae2c930.w128.b0", !5559, i64 0}
!5559 = !{!"0x1ae2c930.w256.b0", !5560, i64 0}
!5560 = !{!"0x1ae2c930.w512.b0", !5561, i64 0}
!5561 = !{!"0x1ae2c930.w1024.b0", !5562, i64 0}
!5562 = !{!"int64", !5563, i64 0}
!5563 = !{!"0x1ae2c930", !8, i64 0}
!5564 = !{!5565, !5565, i64 0}
!5565 = !{!"0x1ae2c930.w1.b0", !5566, i64 0}
!5566 = !{!"0x1ae2c930.w2.b0", !5567, i64 0}
!5567 = !{!"0x1ae2c930.w4.b0", !5554, i64 0}
!5568 = !{!5569, !5569, i64 0}
!5569 = !{!"0x80f1f30.w1.b0", !5570, i64 0}
!5570 = !{!"0x80f1f30.w2.b0", !5571, i64 0}
!5571 = !{!"0x80f1f30.w4.b0", !5572, i64 0}
!5572 = !{!"0x80f1f30.w8.b0", !5573, i64 0}
!5573 = !{!"0x80f1f30.w16.b0", !5574, i64 0}
!5574 = !{!"0x80f1f30.w32.b0", !5575, i64 0}
!5575 = !{!"0x80f1f30.w64.b0", !5576, i64 0}
!5576 = !{!"0x80f1f30.w128.b0", !5577, i64 0}
!5577 = !{!"0x80f1f30.w256.b0", !5578, i64 0}
!5578 = !{!"0x80f1f30.w512.b0", !5579, i64 0}
!5579 = !{!"0x80f1f30.w1024.b0", !5580, i64 0}
!5580 = !{!"int64", !5581, i64 0}
!5581 = !{!"0x80f1f30", !8, i64 0}
!5582 = !{!5583, !5583, i64 0}
!5583 = !{!"0x80f1f30.w1.b1", !5570, i64 0}
!5584 = !{!5585, !5585, i64 0}
!5585 = !{!"0x80f1f30.w1.b2", !5586, i64 0}
!5586 = !{!"0x80f1f30.w2.b2", !5571, i64 0}
!5587 = !{!5588, !5588, i64 0}
!5588 = !{!"0x80f1f30.w1.b3", !5586, i64 0}
!5589 = !{!5590, !5590, i64 0}
!5590 = !{!"0x80f1f30.w1.b4", !5591, i64 0}
!5591 = !{!"0x80f1f30.w2.b4", !5592, i64 0}
!5592 = !{!"0x80f1f30.w4.b4", !5572, i64 0}
!5593 = !{!5594, !5594, i64 0}
!5594 = !{!"0x80ee970.w8.b0", !5595, i64 0}
!5595 = !{!"0x80ee970.w16.b0", !5596, i64 0}
!5596 = !{!"0x80ee970.w32.b0", !5597, i64 0}
!5597 = !{!"0x80ee970.w64.b0", !5598, i64 0}
!5598 = !{!"0x80ee970.w128.b0", !5599, i64 0}
!5599 = !{!"0x80ee970.w256.b0", !5600, i64 0}
!5600 = !{!"0x80ee970.w512.b0", !5601, i64 0}
!5601 = !{!"0x80ee970.w1024.b0", !5602, i64 0}
!5602 = !{!"int64", !5603, i64 0}
!5603 = !{!"0x80ee970", !8, i64 0}
!5604 = !{!5605, !5605, i64 0}
!5605 = !{!"0x80ee970.w1.b0", !5606, i64 0}
!5606 = !{!"0x80ee970.w2.b0", !5607, i64 0}
!5607 = !{!"0x80ee970.w4.b0", !5594, i64 0}
!5608 = !{!5609, !5609, i64 0}
!5609 = !{!"float32", !5610, i64 0}
!5610 = !{!"0xdd7f480", !8, i64 0}
!5611 = !{!5612, !5612, i64 0}
!5612 = !{!"float32", !5613, i64 0}
!5613 = !{!"0xb6c7e40", !8, i64 0}
!5614 = !{!5615, !5615, i64 0}
!5615 = !{!"0x78d5560.w1.b0", !5616, i64 0}
!5616 = !{!"0x78d5560.w2.b0", !5617, i64 0}
!5617 = !{!"0x78d5560.w4.b0", !5618, i64 0}
!5618 = !{!"0x78d5560.w8.b0", !5619, i64 0}
!5619 = !{!"0x78d5560.w16.b0", !5620, i64 0}
!5620 = !{!"0x78d5560.w32.b0", !5621, i64 0}
!5621 = !{!"0x78d5560.w64.b0", !5622, i64 0}
!5622 = !{!"0x78d5560.w128.b0", !5623, i64 0}
!5623 = !{!"0x78d5560.w256.b0", !5624, i64 0}
!5624 = !{!"0x78d5560.w512.b0", !5625, i64 0}
!5625 = !{!"0x78d5560.w1024.b0", !5626, i64 0}
!5626 = !{!"int32", !5627, i64 0}
!5627 = !{!"0x78d5560", !8, i64 0}
!5628 = !{!5629, !5629, i64 0}
!5629 = !{!"0x78d5560.w1.b2", !5630, i64 0}
!5630 = !{!"0x78d5560.w2.b2", !5617, i64 0}
!5631 = !{!5632, !5632, i64 0}
!5632 = !{!"0x78d5560.w1.b3", !5630, i64 0}
!5633 = !{!5634, !5634, i64 0}
!5634 = !{!"0x78d5560.w1.b4", !5635, i64 0}
!5635 = !{!"0x78d5560.w2.b4", !5636, i64 0}
!5636 = !{!"0x78d5560.w4.b4", !5618, i64 0}
!5637 = !{!5638, !5638, i64 0}
!5638 = !{!"0x78d5560.w1.b1", !5616, i64 0}
!5639 = !{!5640, !5640, i64 0}
!5640 = !{!"0x78d9820.w1.b0", !5641, i64 0}
!5641 = !{!"0x78d9820.w2.b0", !5642, i64 0}
!5642 = !{!"0x78d9820.w4.b0", !5643, i64 0}
!5643 = !{!"0x78d9820.w8.b0", !5644, i64 0}
!5644 = !{!"0x78d9820.w16.b0", !5645, i64 0}
!5645 = !{!"0x78d9820.w32.b0", !5646, i64 0}
!5646 = !{!"0x78d9820.w64.b0", !5647, i64 0}
!5647 = !{!"0x78d9820.w128.b0", !5648, i64 0}
!5648 = !{!"0x78d9820.w256.b0", !5649, i64 0}
!5649 = !{!"0x78d9820.w512.b0", !5650, i64 0}
!5650 = !{!"0x78d9820.w1024.b0", !5651, i64 0}
!5651 = !{!"int64", !5652, i64 0}
!5652 = !{!"0x78d9820", !8, i64 0}
!5653 = !{!5654, !5654, i64 0}
!5654 = !{!"0x78d9820.w1.b1", !5641, i64 0}
!5655 = !{!5656, !5656, i64 0}
!5656 = !{!"0x78d9820.w1.b2", !5657, i64 0}
!5657 = !{!"0x78d9820.w2.b2", !5642, i64 0}
!5658 = !{!5659, !5659, i64 0}
!5659 = !{!"0x78d9820.w1.b3", !5657, i64 0}
!5660 = !{!5661, !5661, i64 0}
!5661 = !{!"0x78d9820.w1.b4", !5662, i64 0}
!5662 = !{!"0x78d9820.w2.b4", !5663, i64 0}
!5663 = !{!"0x78d9820.w4.b4", !5643, i64 0}
!5664 = !{!5665, !5665, i64 0}
!5665 = !{!"0x78d2030.w8.b0", !5666, i64 0}
!5666 = !{!"0x78d2030.w16.b0", !5667, i64 0}
!5667 = !{!"0x78d2030.w32.b0", !5668, i64 0}
!5668 = !{!"0x78d2030.w64.b0", !5669, i64 0}
!5669 = !{!"0x78d2030.w128.b0", !5670, i64 0}
!5670 = !{!"0x78d2030.w256.b0", !5671, i64 0}
!5671 = !{!"0x78d2030.w512.b0", !5672, i64 0}
!5672 = !{!"0x78d2030.w1024.b0", !5673, i64 0}
!5673 = !{!"int64", !5674, i64 0}
!5674 = !{!"0x78d2030", !8, i64 0}
!5675 = !{!5676, !5676, i64 0}
!5676 = !{!"0x78d2030.w1.b0", !5677, i64 0}
!5677 = !{!"0x78d2030.w2.b0", !5678, i64 0}
!5678 = !{!"0x78d2030.w4.b0", !5665, i64 0}
!5679 = !{!5680, !5680, i64 0}
!5680 = !{!"0x78d9a90.w1.b0", !5681, i64 0}
!5681 = !{!"0x78d9a90.w2.b0", !5682, i64 0}
!5682 = !{!"0x78d9a90.w4.b0", !5683, i64 0}
!5683 = !{!"0x78d9a90.w8.b0", !5684, i64 0}
!5684 = !{!"0x78d9a90.w16.b0", !5685, i64 0}
!5685 = !{!"0x78d9a90.w32.b0", !5686, i64 0}
!5686 = !{!"0x78d9a90.w64.b0", !5687, i64 0}
!5687 = !{!"0x78d9a90.w128.b0", !5688, i64 0}
!5688 = !{!"0x78d9a90.w256.b0", !5689, i64 0}
!5689 = !{!"0x78d9a90.w512.b0", !5690, i64 0}
!5690 = !{!"0x78d9a90.w1024.b0", !5691, i64 0}
!5691 = !{!"int64", !5692, i64 0}
!5692 = !{!"0x78d9a90", !8, i64 0}
!5693 = !{!5694, !5694, i64 0}
!5694 = !{!"0x78d9a90.w1.b1", !5681, i64 0}
!5695 = !{!5696, !5696, i64 0}
!5696 = !{!"0x78d9a90.w1.b2", !5697, i64 0}
!5697 = !{!"0x78d9a90.w2.b2", !5682, i64 0}
!5698 = !{!5699, !5699, i64 0}
!5699 = !{!"0x78d9a90.w1.b3", !5697, i64 0}
!5700 = !{!5701, !5701, i64 0}
!5701 = !{!"0x78d9a90.w1.b4", !5702, i64 0}
!5702 = !{!"0x78d9a90.w2.b4", !5703, i64 0}
!5703 = !{!"0x78d9a90.w4.b4", !5683, i64 0}
!5704 = !{!5705, !5705, i64 0}
!5705 = !{!"0x78d9a90.w1.b5", !5702, i64 0}
!5706 = !{!5707, !5707, i64 0}
!5707 = !{!"0x78d9ae0.w8.b0", !5708, i64 0}
!5708 = !{!"0x78d9ae0.w16.b0", !5709, i64 0}
!5709 = !{!"0x78d9ae0.w32.b0", !5710, i64 0}
!5710 = !{!"0x78d9ae0.w64.b0", !5711, i64 0}
!5711 = !{!"0x78d9ae0.w128.b0", !5712, i64 0}
!5712 = !{!"0x78d9ae0.w256.b0", !5713, i64 0}
!5713 = !{!"0x78d9ae0.w512.b0", !5714, i64 0}
!5714 = !{!"0x78d9ae0.w1024.b0", !5715, i64 0}
!5715 = !{!"int64", !5716, i64 0}
!5716 = !{!"0x78d9ae0", !8, i64 0}
!5717 = !{!5718, !5718, i64 0}
!5718 = !{!"0x78d9ae0.w1.b1", !5719, i64 0}
!5719 = !{!"0x78d9ae0.w2.b0", !5720, i64 0}
!5720 = !{!"0x78d9ae0.w4.b0", !5707, i64 0}
!5721 = !{!5722, !5722, i64 0}
!5722 = !{!"0x78d9ae0.w1.b0", !5719, i64 0}
!5723 = !{!5724, !5724, i64 0}
!5724 = !{!"0x78db3d0.w1.b0", !5725, i64 0}
!5725 = !{!"0x78db3d0.w2.b0", !5726, i64 0}
!5726 = !{!"0x78db3d0.w4.b0", !5727, i64 0}
!5727 = !{!"0x78db3d0.w8.b0", !5728, i64 0}
!5728 = !{!"0x78db3d0.w16.b0", !5729, i64 0}
!5729 = !{!"0x78db3d0.w32.b0", !5730, i64 0}
!5730 = !{!"0x78db3d0.w64.b0", !5731, i64 0}
!5731 = !{!"0x78db3d0.w128.b0", !5732, i64 0}
!5732 = !{!"0x78db3d0.w256.b0", !5733, i64 0}
!5733 = !{!"0x78db3d0.w512.b0", !5734, i64 0}
!5734 = !{!"0x78db3d0.w1024.b0", !5735, i64 0}
!5735 = !{!"int64", !5736, i64 0}
!5736 = !{!"0x78db3d0", !8, i64 0}
!5737 = !{!5738, !5738, i64 0}
!5738 = !{!"0x78db3d0.w1.b1", !5725, i64 0}
!5739 = !{!5740, !5740, i64 0}
!5740 = !{!"0x78db3d0.w1.b2", !5741, i64 0}
!5741 = !{!"0x78db3d0.w2.b2", !5726, i64 0}
!5742 = !{!5743, !5743, i64 0}
!5743 = !{!"0x78db3d0.w1.b3", !5741, i64 0}
!5744 = !{!5745, !5745, i64 0}
!5745 = !{!"0x78db3d0.w1.b4", !5746, i64 0}
!5746 = !{!"0x78db3d0.w2.b4", !5747, i64 0}
!5747 = !{!"0x78db3d0.w4.b4", !5727, i64 0}
!5748 = !{!5749, !5749, i64 0}
!5749 = !{!"0x78dcb70.w8.b0", !5750, i64 0}
!5750 = !{!"0x78dcb70.w16.b0", !5751, i64 0}
!5751 = !{!"0x78dcb70.w32.b0", !5752, i64 0}
!5752 = !{!"0x78dcb70.w64.b0", !5753, i64 0}
!5753 = !{!"0x78dcb70.w128.b0", !5754, i64 0}
!5754 = !{!"0x78dcb70.w256.b0", !5755, i64 0}
!5755 = !{!"0x78dcb70.w512.b0", !5756, i64 0}
!5756 = !{!"0x78dcb70.w1024.b0", !5757, i64 0}
!5757 = !{!"int64", !5758, i64 0}
!5758 = !{!"0x78dcb70", !8, i64 0}
!5759 = !{!5760, !5760, i64 0}
!5760 = !{!"0x78dcb70.w1.b0", !5761, i64 0}
!5761 = !{!"0x78dcb70.w2.b0", !5762, i64 0}
!5762 = !{!"0x78dcb70.w4.b0", !5749, i64 0}
!5763 = !{!5764, !5764, i64 0}
!5764 = !{!"0x78ddfd0.w1.b0", !5765, i64 0}
!5765 = !{!"0x78ddfd0.w2.b0", !5766, i64 0}
!5766 = !{!"0x78ddfd0.w4.b0", !5767, i64 0}
!5767 = !{!"0x78ddfd0.w8.b0", !5768, i64 0}
!5768 = !{!"0x78ddfd0.w16.b0", !5769, i64 0}
!5769 = !{!"0x78ddfd0.w32.b0", !5770, i64 0}
!5770 = !{!"0x78ddfd0.w64.b0", !5771, i64 0}
!5771 = !{!"0x78ddfd0.w128.b0", !5772, i64 0}
!5772 = !{!"0x78ddfd0.w256.b0", !5773, i64 0}
!5773 = !{!"0x78ddfd0.w512.b0", !5774, i64 0}
!5774 = !{!"0x78ddfd0.w1024.b0", !5775, i64 0}
!5775 = !{!"int64", !5776, i64 0}
!5776 = !{!"0x78ddfd0", !8, i64 0}
!5777 = !{!5778, !5778, i64 0}
!5778 = !{!"0x78ddfd0.w1.b1", !5765, i64 0}
!5779 = !{!5780, !5780, i64 0}
!5780 = !{!"0x78ddfd0.w1.b2", !5781, i64 0}
!5781 = !{!"0x78ddfd0.w2.b2", !5766, i64 0}
!5782 = !{!5783, !5783, i64 0}
!5783 = !{!"0x78ddfd0.w1.b3", !5781, i64 0}
!5784 = !{!5785, !5785, i64 0}
!5785 = !{!"0x78ddfd0.w1.b4", !5786, i64 0}
!5786 = !{!"0x78ddfd0.w2.b4", !5787, i64 0}
!5787 = !{!"0x78ddfd0.w4.b4", !5767, i64 0}
!5788 = !{!5789, !5789, i64 0}
!5789 = !{!"0x78de020.w8.b0", !5790, i64 0}
!5790 = !{!"0x78de020.w16.b0", !5791, i64 0}
!5791 = !{!"0x78de020.w32.b0", !5792, i64 0}
!5792 = !{!"0x78de020.w64.b0", !5793, i64 0}
!5793 = !{!"0x78de020.w128.b0", !5794, i64 0}
!5794 = !{!"0x78de020.w256.b0", !5795, i64 0}
!5795 = !{!"0x78de020.w512.b0", !5796, i64 0}
!5796 = !{!"0x78de020.w1024.b0", !5797, i64 0}
!5797 = !{!"int64", !5798, i64 0}
!5798 = !{!"0x78de020", !8, i64 0}
!5799 = !{!5800, !5800, i64 0}
!5800 = !{!"0x78de020.w1.b0", !5801, i64 0}
!5801 = !{!"0x78de020.w2.b0", !5802, i64 0}
!5802 = !{!"0x78de020.w4.b0", !5789, i64 0}
!5803 = !{!5804, !5804, i64 0}
!5804 = !{!"0x78df430.w1.b0", !5805, i64 0}
!5805 = !{!"0x78df430.w2.b0", !5806, i64 0}
!5806 = !{!"0x78df430.w4.b0", !5807, i64 0}
!5807 = !{!"0x78df430.w8.b0", !5808, i64 0}
!5808 = !{!"0x78df430.w16.b0", !5809, i64 0}
!5809 = !{!"0x78df430.w32.b0", !5810, i64 0}
!5810 = !{!"0x78df430.w64.b0", !5811, i64 0}
!5811 = !{!"0x78df430.w128.b0", !5812, i64 0}
!5812 = !{!"0x78df430.w256.b0", !5813, i64 0}
!5813 = !{!"0x78df430.w512.b0", !5814, i64 0}
!5814 = !{!"0x78df430.w1024.b0", !5815, i64 0}
!5815 = !{!"int64", !5816, i64 0}
!5816 = !{!"0x78df430", !8, i64 0}
!5817 = !{!5818, !5818, i64 0}
!5818 = !{!"0x78df430.w1.b1", !5805, i64 0}
!5819 = !{!5820, !5820, i64 0}
!5820 = !{!"0x78df430.w1.b2", !5821, i64 0}
!5821 = !{!"0x78df430.w2.b2", !5806, i64 0}
!5822 = !{!5823, !5823, i64 0}
!5823 = !{!"0x78df430.w1.b3", !5821, i64 0}
!5824 = !{!5825, !5825, i64 0}
!5825 = !{!"0x78df430.w1.b4", !5826, i64 0}
!5826 = !{!"0x78df430.w2.b4", !5827, i64 0}
!5827 = !{!"0x78df430.w4.b4", !5807, i64 0}
!5828 = !{!5829, !5829, i64 0}
!5829 = !{!"0x78e0ba0.w8.b0", !5830, i64 0}
!5830 = !{!"0x78e0ba0.w16.b0", !5831, i64 0}
!5831 = !{!"0x78e0ba0.w32.b0", !5832, i64 0}
!5832 = !{!"0x78e0ba0.w64.b0", !5833, i64 0}
!5833 = !{!"0x78e0ba0.w128.b0", !5834, i64 0}
!5834 = !{!"0x78e0ba0.w256.b0", !5835, i64 0}
!5835 = !{!"0x78e0ba0.w512.b0", !5836, i64 0}
!5836 = !{!"0x78e0ba0.w1024.b0", !5837, i64 0}
!5837 = !{!"int64", !5838, i64 0}
!5838 = !{!"0x78e0ba0", !8, i64 0}
!5839 = !{!5840, !5840, i64 0}
!5840 = !{!"0x78e0ba0.w1.b0", !5841, i64 0}
!5841 = !{!"0x78e0ba0.w2.b0", !5842, i64 0}
!5842 = !{!"0x78e0ba0.w4.b0", !5829, i64 0}
!5843 = !{!5844, !5844, i64 0}
!5844 = !{!"float32", !5845, i64 0}
!5845 = !{!"0x78d15b0", !8, i64 0}
!5846 = !{!5847, !5847, i64 0}
!5847 = !{!"float32", !5848, i64 0}
!5848 = !{!"0x78d1560", !8, i64 0}
!5849 = !{!5850, !5850, i64 0}
!5850 = !{!"float32", !5851, i64 0}
!5851 = !{!"0x78d1960", !8, i64 0}
!5852 = !{!5853, !5853, i64 0}
!5853 = !{!"float32", !5854, i64 0}
!5854 = !{!"0x78d1510", !8, i64 0}
!5855 = !{!5856, !5856, i64 0}
!5856 = !{!"float32", !5857, i64 0}
!5857 = !{!"0x78d1b50", !8, i64 0}
!5858 = !{!5859, !5859, i64 0}
!5859 = !{!"float32", !5860, i64 0}
!5860 = !{!"0x78d1650", !8, i64 0}
!5861 = !{!5862, !5862, i64 0}
!5862 = !{!"0x7a1e9a0.w1.b0", !5863, i64 0}
!5863 = !{!"0x7a1e9a0.w2.b0", !5864, i64 0}
!5864 = !{!"0x7a1e9a0.w4.b0", !5865, i64 0}
!5865 = !{!"0x7a1e9a0.w8.b0", !5866, i64 0}
!5866 = !{!"0x7a1e9a0.w16.b0", !5867, i64 0}
!5867 = !{!"0x7a1e9a0.w32.b0", !5868, i64 0}
!5868 = !{!"0x7a1e9a0.w64.b0", !5869, i64 0}
!5869 = !{!"0x7a1e9a0.w128.b0", !5870, i64 0}
!5870 = !{!"0x7a1e9a0.w256.b0", !5871, i64 0}
!5871 = !{!"0x7a1e9a0.w512.b0", !5872, i64 0}
!5872 = !{!"0x7a1e9a0.w1024.b0", !5873, i64 0}
!5873 = !{!"int32", !5874, i64 0}
!5874 = !{!"0x7a1e9a0", !8, i64 0}
!5875 = !{!5876, !5876, i64 0}
!5876 = !{!"0x7a1e9a0.w1.b1", !5863, i64 0}
!5877 = !{!5878, !5878, i64 0}
!5878 = !{!"0x7a28f70.w1.b0", !5879, i64 0}
!5879 = !{!"0x7a28f70.w2.b0", !5880, i64 0}
!5880 = !{!"0x7a28f70.w4.b0", !5881, i64 0}
!5881 = !{!"0x7a28f70.w8.b0", !5882, i64 0}
!5882 = !{!"0x7a28f70.w16.b0", !5883, i64 0}
!5883 = !{!"0x7a28f70.w32.b0", !5884, i64 0}
!5884 = !{!"0x7a28f70.w64.b0", !5885, i64 0}
!5885 = !{!"0x7a28f70.w128.b0", !5886, i64 0}
!5886 = !{!"0x7a28f70.w256.b0", !5887, i64 0}
!5887 = !{!"0x7a28f70.w512.b0", !5888, i64 0}
!5888 = !{!"0x7a28f70.w1024.b0", !5889, i64 0}
!5889 = !{!"int64", !5890, i64 0}
!5890 = !{!"0x7a28f70", !8, i64 0}
!5891 = !{!5892, !5892, i64 0}
!5892 = !{!"0x7a28f70.w1.b1", !5879, i64 0}
!5893 = !{!5894, !5894, i64 0}
!5894 = !{!"0x7a28f70.w1.b2", !5895, i64 0}
!5895 = !{!"0x7a28f70.w2.b2", !5880, i64 0}
!5896 = !{!5897, !5897, i64 0}
!5897 = !{!"0x7a28f70.w1.b3", !5895, i64 0}
!5898 = !{!5899, !5899, i64 0}
!5899 = !{!"0x7a28f70.w1.b4", !5900, i64 0}
!5900 = !{!"0x7a28f70.w2.b4", !5901, i64 0}
!5901 = !{!"0x7a28f70.w4.b4", !5881, i64 0}
!5902 = !{!5903, !5903, i64 0}
!5903 = !{!"0x7a29530.w8.b0", !5904, i64 0}
!5904 = !{!"0x7a29530.w16.b0", !5905, i64 0}
!5905 = !{!"0x7a29530.w32.b0", !5906, i64 0}
!5906 = !{!"0x7a29530.w64.b0", !5907, i64 0}
!5907 = !{!"0x7a29530.w128.b0", !5908, i64 0}
!5908 = !{!"0x7a29530.w256.b0", !5909, i64 0}
!5909 = !{!"0x7a29530.w512.b0", !5910, i64 0}
!5910 = !{!"0x7a29530.w1024.b0", !5911, i64 0}
!5911 = !{!"int64", !5912, i64 0}
!5912 = !{!"0x7a29530", !8, i64 0}
!5913 = !{!5914, !5914, i64 0}
!5914 = !{!"0x7a29530.w1.b0", !5915, i64 0}
!5915 = !{!"0x7a29530.w2.b0", !5916, i64 0}
!5916 = !{!"0x7a29530.w4.b0", !5903, i64 0}
!5917 = !{!5918, !5918, i64 0}
!5918 = !{!"0x7a29780.w1.b0", !5919, i64 0}
!5919 = !{!"0x7a29780.w2.b0", !5920, i64 0}
!5920 = !{!"0x7a29780.w4.b0", !5921, i64 0}
!5921 = !{!"0x7a29780.w8.b0", !5922, i64 0}
!5922 = !{!"0x7a29780.w16.b0", !5923, i64 0}
!5923 = !{!"0x7a29780.w32.b0", !5924, i64 0}
!5924 = !{!"0x7a29780.w64.b0", !5925, i64 0}
!5925 = !{!"0x7a29780.w128.b0", !5926, i64 0}
!5926 = !{!"0x7a29780.w256.b0", !5927, i64 0}
!5927 = !{!"0x7a29780.w512.b0", !5928, i64 0}
!5928 = !{!"0x7a29780.w1024.b0", !5929, i64 0}
!5929 = !{!"int64", !5930, i64 0}
!5930 = !{!"0x7a29780", !8, i64 0}
!5931 = !{!5932, !5932, i64 0}
!5932 = !{!"0x7a29780.w1.b1", !5919, i64 0}
!5933 = !{!5934, !5934, i64 0}
!5934 = !{!"0x7a29780.w1.b2", !5935, i64 0}
!5935 = !{!"0x7a29780.w2.b2", !5920, i64 0}
!5936 = !{!5937, !5937, i64 0}
!5937 = !{!"0x7a29780.w1.b3", !5935, i64 0}
!5938 = !{!5939, !5939, i64 0}
!5939 = !{!"0x7a29780.w1.b4", !5940, i64 0}
!5940 = !{!"0x7a29780.w2.b4", !5941, i64 0}
!5941 = !{!"0x7a29780.w4.b4", !5921, i64 0}
!5942 = !{!5943, !5943, i64 0}
!5943 = !{!"0x7a291a0.w8.b0", !5944, i64 0}
!5944 = !{!"0x7a291a0.w16.b0", !5945, i64 0}
!5945 = !{!"0x7a291a0.w32.b0", !5946, i64 0}
!5946 = !{!"0x7a291a0.w64.b0", !5947, i64 0}
!5947 = !{!"0x7a291a0.w128.b0", !5948, i64 0}
!5948 = !{!"0x7a291a0.w256.b0", !5949, i64 0}
!5949 = !{!"0x7a291a0.w512.b0", !5950, i64 0}
!5950 = !{!"0x7a291a0.w1024.b0", !5951, i64 0}
!5951 = !{!"int64", !5952, i64 0}
!5952 = !{!"0x7a291a0", !8, i64 0}
!5953 = !{!5954, !5954, i64 0}
!5954 = !{!"0x7a291a0.w1.b0", !5955, i64 0}
!5955 = !{!"0x7a291a0.w2.b0", !5956, i64 0}
!5956 = !{!"0x7a291a0.w4.b0", !5943, i64 0}
!5957 = !{!5958, !5958, i64 0}
!5958 = !{!"float32", !5959, i64 0}
!5959 = !{!"0x7a23fd0", !8, i64 0}
!5960 = !{!5961, !5961, i64 0}
!5961 = !{!"float32", !5962, i64 0}
!5962 = !{!"0x7a18cc0", !8, i64 0}
!5963 = !{!5964, !5964, i64 0}
!5964 = !{!"0x1aef01c0.w1.b0", !5965, i64 0}
!5965 = !{!"0x1aef01c0.w2.b0", !5966, i64 0}
!5966 = !{!"0x1aef01c0.w4.b0", !5967, i64 0}
!5967 = !{!"0x1aef01c0.w8.b0", !5968, i64 0}
!5968 = !{!"0x1aef01c0.w16.b0", !5969, i64 0}
!5969 = !{!"0x1aef01c0.w32.b0", !5970, i64 0}
!5970 = !{!"0x1aef01c0.w64.b0", !5971, i64 0}
!5971 = !{!"0x1aef01c0.w128.b0", !5972, i64 0}
!5972 = !{!"0x1aef01c0.w256.b0", !5973, i64 0}
!5973 = !{!"0x1aef01c0.w512.b0", !5974, i64 0}
!5974 = !{!"0x1aef01c0.w1024.b0", !5975, i64 0}
!5975 = !{!"int32", !5976, i64 0}
!5976 = !{!"0x1aef01c0", !8, i64 0}
!5977 = !{!5978, !5978, i64 0}
!5978 = !{!"0x1aef01c0.w1.b2", !5979, i64 0}
!5979 = !{!"0x1aef01c0.w2.b2", !5966, i64 0}
!5980 = !{!5981, !5981, i64 0}
!5981 = !{!"0x1aef01c0.w1.b3", !5979, i64 0}
!5982 = !{!5983, !5983, i64 0}
!5983 = !{!"0x1aef01c0.w1.b4", !5984, i64 0}
!5984 = !{!"0x1aef01c0.w2.b4", !5985, i64 0}
!5985 = !{!"0x1aef01c0.w4.b4", !5967, i64 0}
!5986 = !{!5987, !5987, i64 0}
!5987 = !{!"0x1aef01c0.w1.b5", !5984, i64 0}
!5988 = !{!5989, !5989, i64 0}
!5989 = !{!"0x1aef01c0.w1.b6", !5990, i64 0}
!5990 = !{!"0x1aef01c0.w2.b6", !5985, i64 0}
!5991 = !{!5992, !5992, i64 0}
!5992 = !{!"0x1aef01c0.w1.b1", !5965, i64 0}
!5993 = !{!5994, !5994, i64 0}
!5994 = !{!"0x9343cc0.w1.b0", !5995, i64 0}
!5995 = !{!"0x9343cc0.w2.b0", !5996, i64 0}
!5996 = !{!"0x9343cc0.w4.b0", !5997, i64 0}
!5997 = !{!"0x9343cc0.w8.b0", !5998, i64 0}
!5998 = !{!"0x9343cc0.w16.b0", !5999, i64 0}
!5999 = !{!"0x9343cc0.w32.b0", !6000, i64 0}
!6000 = !{!"0x9343cc0.w64.b0", !6001, i64 0}
!6001 = !{!"0x9343cc0.w128.b0", !6002, i64 0}
!6002 = !{!"0x9343cc0.w256.b0", !6003, i64 0}
!6003 = !{!"0x9343cc0.w512.b0", !6004, i64 0}
!6004 = !{!"0x9343cc0.w1024.b0", !6005, i64 0}
!6005 = !{!"int64", !6006, i64 0}
!6006 = !{!"0x9343cc0", !8, i64 0}
!6007 = !{!6008, !6008, i64 0}
!6008 = !{!"0x9343cc0.w1.b1", !5995, i64 0}
!6009 = !{!6010, !6010, i64 0}
!6010 = !{!"0x9343cc0.w1.b2", !6011, i64 0}
!6011 = !{!"0x9343cc0.w2.b2", !5996, i64 0}
!6012 = !{!6013, !6013, i64 0}
!6013 = !{!"0x9343cc0.w1.b3", !6011, i64 0}
!6014 = !{!6015, !6015, i64 0}
!6015 = !{!"0x9343cc0.w1.b4", !6016, i64 0}
!6016 = !{!"0x9343cc0.w2.b4", !6017, i64 0}
!6017 = !{!"0x9343cc0.w4.b4", !5997, i64 0}
!6018 = !{!6019, !6019, i64 0}
!6019 = !{!"0x80e09d0.w8.b0", !6020, i64 0}
!6020 = !{!"0x80e09d0.w16.b0", !6021, i64 0}
!6021 = !{!"0x80e09d0.w32.b0", !6022, i64 0}
!6022 = !{!"0x80e09d0.w64.b0", !6023, i64 0}
!6023 = !{!"0x80e09d0.w128.b0", !6024, i64 0}
!6024 = !{!"0x80e09d0.w256.b0", !6025, i64 0}
!6025 = !{!"0x80e09d0.w512.b0", !6026, i64 0}
!6026 = !{!"0x80e09d0.w1024.b0", !6027, i64 0}
!6027 = !{!"int64", !6028, i64 0}
!6028 = !{!"0x80e09d0", !8, i64 0}
!6029 = !{!6030, !6030, i64 0}
!6030 = !{!"0x80e09d0.w1.b0", !6031, i64 0}
!6031 = !{!"0x80e09d0.w2.b0", !6032, i64 0}
!6032 = !{!"0x80e09d0.w4.b0", !6019, i64 0}
!6033 = !{!6034, !6034, i64 0}
!6034 = !{!"0x8daf330.w1.b0", !6035, i64 0}
!6035 = !{!"0x8daf330.w2.b0", !6036, i64 0}
!6036 = !{!"0x8daf330.w4.b0", !6037, i64 0}
!6037 = !{!"0x8daf330.w8.b0", !6038, i64 0}
!6038 = !{!"0x8daf330.w16.b0", !6039, i64 0}
!6039 = !{!"0x8daf330.w32.b0", !6040, i64 0}
!6040 = !{!"0x8daf330.w64.b0", !6041, i64 0}
!6041 = !{!"0x8daf330.w128.b0", !6042, i64 0}
!6042 = !{!"0x8daf330.w256.b0", !6043, i64 0}
!6043 = !{!"0x8daf330.w512.b0", !6044, i64 0}
!6044 = !{!"0x8daf330.w1024.b0", !6045, i64 0}
!6045 = !{!"int64", !6046, i64 0}
!6046 = !{!"0x8daf330", !8, i64 0}
!6047 = !{!6048, !6048, i64 0}
!6048 = !{!"0x8daf330.w1.b1", !6035, i64 0}
!6049 = !{!6050, !6050, i64 0}
!6050 = !{!"0x8daf330.w1.b2", !6051, i64 0}
!6051 = !{!"0x8daf330.w2.b2", !6036, i64 0}
!6052 = !{!6053, !6053, i64 0}
!6053 = !{!"0x8daf330.w1.b3", !6051, i64 0}
!6054 = !{!6055, !6055, i64 0}
!6055 = !{!"0x8daf330.w1.b4", !6056, i64 0}
!6056 = !{!"0x8daf330.w2.b4", !6057, i64 0}
!6057 = !{!"0x8daf330.w4.b4", !6037, i64 0}
!6058 = !{!6059, !6059, i64 0}
!6059 = !{!"0x8daf330.w1.b5", !6056, i64 0}
!6060 = !{!6061, !6061, i64 0}
!6061 = !{!"0x80ef540.w8.b0", !6062, i64 0}
!6062 = !{!"0x80ef540.w16.b0", !6063, i64 0}
!6063 = !{!"0x80ef540.w32.b0", !6064, i64 0}
!6064 = !{!"0x80ef540.w64.b0", !6065, i64 0}
!6065 = !{!"0x80ef540.w128.b0", !6066, i64 0}
!6066 = !{!"0x80ef540.w256.b0", !6067, i64 0}
!6067 = !{!"0x80ef540.w512.b0", !6068, i64 0}
!6068 = !{!"0x80ef540.w1024.b0", !6069, i64 0}
!6069 = !{!"int64", !6070, i64 0}
!6070 = !{!"0x80ef540", !8, i64 0}
!6071 = !{!6072, !6072, i64 0}
!6072 = !{!"0x80ef540.w1.b1", !6073, i64 0}
!6073 = !{!"0x80ef540.w2.b0", !6074, i64 0}
!6074 = !{!"0x80ef540.w4.b0", !6061, i64 0}
!6075 = !{!6076, !6076, i64 0}
!6076 = !{!"0x80ef540.w1.b0", !6073, i64 0}
!6077 = !{!6078, !6078, i64 0}
!6078 = !{!"0xdd5c9f0.w1.b0", !6079, i64 0}
!6079 = !{!"0xdd5c9f0.w2.b0", !6080, i64 0}
!6080 = !{!"0xdd5c9f0.w4.b0", !6081, i64 0}
!6081 = !{!"0xdd5c9f0.w8.b0", !6082, i64 0}
!6082 = !{!"0xdd5c9f0.w16.b0", !6083, i64 0}
!6083 = !{!"0xdd5c9f0.w32.b0", !6084, i64 0}
!6084 = !{!"0xdd5c9f0.w64.b0", !6085, i64 0}
!6085 = !{!"0xdd5c9f0.w128.b0", !6086, i64 0}
!6086 = !{!"0xdd5c9f0.w256.b0", !6087, i64 0}
!6087 = !{!"0xdd5c9f0.w512.b0", !6088, i64 0}
!6088 = !{!"0xdd5c9f0.w1024.b0", !6089, i64 0}
!6089 = !{!"int64", !6090, i64 0}
!6090 = !{!"0xdd5c9f0", !8, i64 0}
!6091 = !{!6092, !6092, i64 0}
!6092 = !{!"0xdd5c9f0.w1.b1", !6079, i64 0}
!6093 = !{!6094, !6094, i64 0}
!6094 = !{!"0xdd5c9f0.w1.b2", !6095, i64 0}
!6095 = !{!"0xdd5c9f0.w2.b2", !6080, i64 0}
!6096 = !{!6097, !6097, i64 0}
!6097 = !{!"0xdd5c9f0.w1.b3", !6095, i64 0}
!6098 = !{!6099, !6099, i64 0}
!6099 = !{!"0xdd5c9f0.w1.b4", !6100, i64 0}
!6100 = !{!"0xdd5c9f0.w2.b4", !6101, i64 0}
!6101 = !{!"0xdd5c9f0.w4.b4", !6081, i64 0}
!6102 = !{!6103, !6103, i64 0}
!6103 = !{!"0xa2a8140.w8.b0", !6104, i64 0}
!6104 = !{!"0xa2a8140.w16.b0", !6105, i64 0}
!6105 = !{!"0xa2a8140.w32.b0", !6106, i64 0}
!6106 = !{!"0xa2a8140.w64.b0", !6107, i64 0}
!6107 = !{!"0xa2a8140.w128.b0", !6108, i64 0}
!6108 = !{!"0xa2a8140.w256.b0", !6109, i64 0}
!6109 = !{!"0xa2a8140.w512.b0", !6110, i64 0}
!6110 = !{!"0xa2a8140.w1024.b0", !6111, i64 0}
!6111 = !{!"int64", !6112, i64 0}
!6112 = !{!"0xa2a8140", !8, i64 0}
!6113 = !{!6114, !6114, i64 0}
!6114 = !{!"0xa2a8140.w1.b0", !6115, i64 0}
!6115 = !{!"0xa2a8140.w2.b0", !6116, i64 0}
!6116 = !{!"0xa2a8140.w4.b0", !6103, i64 0}
!6117 = !{!6118, !6118, i64 0}
!6118 = !{!"0x169550c0.w1.b0", !6119, i64 0}
!6119 = !{!"0x169550c0.w2.b0", !6120, i64 0}
!6120 = !{!"0x169550c0.w4.b0", !6121, i64 0}
!6121 = !{!"0x169550c0.w8.b0", !6122, i64 0}
!6122 = !{!"0x169550c0.w16.b0", !6123, i64 0}
!6123 = !{!"0x169550c0.w32.b0", !6124, i64 0}
!6124 = !{!"0x169550c0.w64.b0", !6125, i64 0}
!6125 = !{!"0x169550c0.w128.b0", !6126, i64 0}
!6126 = !{!"0x169550c0.w256.b0", !6127, i64 0}
!6127 = !{!"0x169550c0.w512.b0", !6128, i64 0}
!6128 = !{!"0x169550c0.w1024.b0", !6129, i64 0}
!6129 = !{!"int64", !6130, i64 0}
!6130 = !{!"0x169550c0", !8, i64 0}
!6131 = !{!6132, !6132, i64 0}
!6132 = !{!"0x169550c0.w1.b1", !6119, i64 0}
!6133 = !{!6134, !6134, i64 0}
!6134 = !{!"0x169550c0.w1.b2", !6135, i64 0}
!6135 = !{!"0x169550c0.w2.b2", !6120, i64 0}
!6136 = !{!6137, !6137, i64 0}
!6137 = !{!"0x169550c0.w1.b3", !6135, i64 0}
!6138 = !{!6139, !6139, i64 0}
!6139 = !{!"0x169550c0.w1.b4", !6140, i64 0}
!6140 = !{!"0x169550c0.w2.b4", !6141, i64 0}
!6141 = !{!"0x169550c0.w4.b4", !6121, i64 0}
!6142 = !{!6143, !6143, i64 0}
!6143 = !{!"0x1aef63c0.w8.b0", !6144, i64 0}
!6144 = !{!"0x1aef63c0.w16.b0", !6145, i64 0}
!6145 = !{!"0x1aef63c0.w32.b0", !6146, i64 0}
!6146 = !{!"0x1aef63c0.w64.b0", !6147, i64 0}
!6147 = !{!"0x1aef63c0.w128.b0", !6148, i64 0}
!6148 = !{!"0x1aef63c0.w256.b0", !6149, i64 0}
!6149 = !{!"0x1aef63c0.w512.b0", !6150, i64 0}
!6150 = !{!"0x1aef63c0.w1024.b0", !6151, i64 0}
!6151 = !{!"int64", !6152, i64 0}
!6152 = !{!"0x1aef63c0", !8, i64 0}
!6153 = !{!6154, !6154, i64 0}
!6154 = !{!"0x1aef63c0.w1.b0", !6155, i64 0}
!6155 = !{!"0x1aef63c0.w2.b0", !6156, i64 0}
!6156 = !{!"0x1aef63c0.w4.b0", !6143, i64 0}
!6157 = !{!6158, !6158, i64 0}
!6158 = !{!"0x9343840.w1.b0", !6159, i64 0}
!6159 = !{!"0x9343840.w2.b0", !6160, i64 0}
!6160 = !{!"0x9343840.w4.b0", !6161, i64 0}
!6161 = !{!"0x9343840.w8.b0", !6162, i64 0}
!6162 = !{!"0x9343840.w16.b0", !6163, i64 0}
!6163 = !{!"0x9343840.w32.b0", !6164, i64 0}
!6164 = !{!"0x9343840.w64.b0", !6165, i64 0}
!6165 = !{!"0x9343840.w128.b0", !6166, i64 0}
!6166 = !{!"0x9343840.w256.b0", !6167, i64 0}
!6167 = !{!"0x9343840.w512.b0", !6168, i64 0}
!6168 = !{!"0x9343840.w1024.b0", !6169, i64 0}
!6169 = !{!"int64", !6170, i64 0}
!6170 = !{!"0x9343840", !8, i64 0}
!6171 = !{!6172, !6172, i64 0}
!6172 = !{!"0x9343840.w1.b1", !6159, i64 0}
!6173 = !{!6174, !6174, i64 0}
!6174 = !{!"0x9343840.w1.b2", !6175, i64 0}
!6175 = !{!"0x9343840.w2.b2", !6160, i64 0}
!6176 = !{!6177, !6177, i64 0}
!6177 = !{!"0x9343840.w1.b3", !6175, i64 0}
!6178 = !{!6179, !6179, i64 0}
!6179 = !{!"0x9343840.w1.b4", !6180, i64 0}
!6180 = !{!"0x9343840.w2.b4", !6181, i64 0}
!6181 = !{!"0x9343840.w4.b4", !6161, i64 0}
!6182 = !{!6183, !6183, i64 0}
!6183 = !{!"0x93a1ef0.w8.b0", !6184, i64 0}
!6184 = !{!"0x93a1ef0.w16.b0", !6185, i64 0}
!6185 = !{!"0x93a1ef0.w32.b0", !6186, i64 0}
!6186 = !{!"0x93a1ef0.w64.b0", !6187, i64 0}
!6187 = !{!"0x93a1ef0.w128.b0", !6188, i64 0}
!6188 = !{!"0x93a1ef0.w256.b0", !6189, i64 0}
!6189 = !{!"0x93a1ef0.w512.b0", !6190, i64 0}
!6190 = !{!"0x93a1ef0.w1024.b0", !6191, i64 0}
!6191 = !{!"int64", !6192, i64 0}
!6192 = !{!"0x93a1ef0", !8, i64 0}
!6193 = !{!6194, !6194, i64 0}
!6194 = !{!"0x93a1ef0.w1.b0", !6195, i64 0}
!6195 = !{!"0x93a1ef0.w2.b0", !6196, i64 0}
!6196 = !{!"0x93a1ef0.w4.b0", !6183, i64 0}
!6197 = !{!6198, !6198, i64 0}
!6198 = !{!"0x1ae8fee0.w1.b0", !6199, i64 0}
!6199 = !{!"0x1ae8fee0.w2.b0", !6200, i64 0}
!6200 = !{!"0x1ae8fee0.w4.b0", !6201, i64 0}
!6201 = !{!"0x1ae8fee0.w8.b0", !6202, i64 0}
!6202 = !{!"0x1ae8fee0.w16.b0", !6203, i64 0}
!6203 = !{!"0x1ae8fee0.w32.b0", !6204, i64 0}
!6204 = !{!"0x1ae8fee0.w64.b0", !6205, i64 0}
!6205 = !{!"0x1ae8fee0.w128.b0", !6206, i64 0}
!6206 = !{!"0x1ae8fee0.w256.b0", !6207, i64 0}
!6207 = !{!"0x1ae8fee0.w512.b0", !6208, i64 0}
!6208 = !{!"0x1ae8fee0.w1024.b0", !6209, i64 0}
!6209 = !{!"int64", !6210, i64 0}
!6210 = !{!"0x1ae8fee0", !8, i64 0}
!6211 = !{!6212, !6212, i64 0}
!6212 = !{!"0x1ae8fee0.w1.b1", !6199, i64 0}
!6213 = !{!6214, !6214, i64 0}
!6214 = !{!"0x1ae8fee0.w1.b2", !6215, i64 0}
!6215 = !{!"0x1ae8fee0.w2.b2", !6200, i64 0}
!6216 = !{!6217, !6217, i64 0}
!6217 = !{!"0x1ae8fee0.w1.b3", !6215, i64 0}
!6218 = !{!6219, !6219, i64 0}
!6219 = !{!"0x1ae8fee0.w1.b4", !6220, i64 0}
!6220 = !{!"0x1ae8fee0.w2.b4", !6221, i64 0}
!6221 = !{!"0x1ae8fee0.w4.b4", !6201, i64 0}
!6222 = !{!6223, !6223, i64 0}
!6223 = !{!"0x13cec8d0.w8.b0", !6224, i64 0}
!6224 = !{!"0x13cec8d0.w16.b0", !6225, i64 0}
!6225 = !{!"0x13cec8d0.w32.b0", !6226, i64 0}
!6226 = !{!"0x13cec8d0.w64.b0", !6227, i64 0}
!6227 = !{!"0x13cec8d0.w128.b0", !6228, i64 0}
!6228 = !{!"0x13cec8d0.w256.b0", !6229, i64 0}
!6229 = !{!"0x13cec8d0.w512.b0", !6230, i64 0}
!6230 = !{!"0x13cec8d0.w1024.b0", !6231, i64 0}
!6231 = !{!"int64", !6232, i64 0}
!6232 = !{!"0x13cec8d0", !8, i64 0}
!6233 = !{!6234, !6234, i64 0}
!6234 = !{!"0x13cec8d0.w1.b0", !6235, i64 0}
!6235 = !{!"0x13cec8d0.w2.b0", !6236, i64 0}
!6236 = !{!"0x13cec8d0.w4.b0", !6223, i64 0}
!6237 = !{!6238, !6238, i64 0}
!6238 = !{!"0x80ca550.w1.b0", !6239, i64 0}
!6239 = !{!"0x80ca550.w2.b0", !6240, i64 0}
!6240 = !{!"0x80ca550.w4.b0", !6241, i64 0}
!6241 = !{!"0x80ca550.w8.b0", !6242, i64 0}
!6242 = !{!"0x80ca550.w16.b0", !6243, i64 0}
!6243 = !{!"0x80ca550.w32.b0", !6244, i64 0}
!6244 = !{!"0x80ca550.w64.b0", !6245, i64 0}
!6245 = !{!"0x80ca550.w128.b0", !6246, i64 0}
!6246 = !{!"0x80ca550.w256.b0", !6247, i64 0}
!6247 = !{!"0x80ca550.w512.b0", !6248, i64 0}
!6248 = !{!"0x80ca550.w1024.b0", !6249, i64 0}
!6249 = !{!"int64", !6250, i64 0}
!6250 = !{!"0x80ca550", !8, i64 0}
!6251 = !{!6252, !6252, i64 0}
!6252 = !{!"0x80ca550.w1.b1", !6239, i64 0}
!6253 = !{!6254, !6254, i64 0}
!6254 = !{!"0x80ca550.w1.b2", !6255, i64 0}
!6255 = !{!"0x80ca550.w2.b2", !6240, i64 0}
!6256 = !{!6257, !6257, i64 0}
!6257 = !{!"0x80ca550.w1.b3", !6255, i64 0}
!6258 = !{!6259, !6259, i64 0}
!6259 = !{!"0x80ca550.w1.b4", !6260, i64 0}
!6260 = !{!"0x80ca550.w2.b4", !6261, i64 0}
!6261 = !{!"0x80ca550.w4.b4", !6241, i64 0}
!6262 = !{!6263, !6263, i64 0}
!6263 = !{!"0x14b57cc0.w8.b0", !6264, i64 0}
!6264 = !{!"0x14b57cc0.w16.b0", !6265, i64 0}
!6265 = !{!"0x14b57cc0.w32.b0", !6266, i64 0}
!6266 = !{!"0x14b57cc0.w64.b0", !6267, i64 0}
!6267 = !{!"0x14b57cc0.w128.b0", !6268, i64 0}
!6268 = !{!"0x14b57cc0.w256.b0", !6269, i64 0}
!6269 = !{!"0x14b57cc0.w512.b0", !6270, i64 0}
!6270 = !{!"0x14b57cc0.w1024.b0", !6271, i64 0}
!6271 = !{!"int64", !6272, i64 0}
!6272 = !{!"0x14b57cc0", !8, i64 0}
!6273 = !{!6274, !6274, i64 0}
!6274 = !{!"0x14b57cc0.w1.b0", !6275, i64 0}
!6275 = !{!"0x14b57cc0.w2.b0", !6276, i64 0}
!6276 = !{!"0x14b57cc0.w4.b0", !6263, i64 0}
!6277 = !{!6278, !6278, i64 0}
!6278 = !{!"float32", !6279, i64 0}
!6279 = !{!"0x8107300", !8, i64 0}
!6280 = !{!6281, !6281, i64 0}
!6281 = !{!"float32", !6282, i64 0}
!6282 = !{!"0x8105ca0", !8, i64 0}
!6283 = !{!6284, !6284, i64 0}
!6284 = !{!"float32", !6285, i64 0}
!6285 = !{!"0x66be9c0", !8, i64 0}
!6286 = !{!6287, !6287, i64 0}
!6287 = !{!"float32", !6288, i64 0}
!6288 = !{!"0x102febd0", !8, i64 0}
!6289 = !{!6290, !6290, i64 0}
!6290 = !{!"float32", !6291, i64 0}
!6291 = !{!"0x714f270", !8, i64 0}
!6292 = !{!6293, !6293, i64 0}
!6293 = !{!"float32", !6294, i64 0}
!6294 = !{!"0x5a870a0", !8, i64 0}
!6295 = !{!6296, !6296, i64 0}
!6296 = !{!"float32", !6297, i64 0}
!6297 = !{!"0x80fb480", !8, i64 0}
!6298 = !{!6299, !6299, i64 0}
!6299 = !{!"0x1ab3b360.w1.b0", !6300, i64 0}
!6300 = !{!"0x1ab3b360.w2.b0", !6301, i64 0}
!6301 = !{!"0x1ab3b360.w4.b0", !6302, i64 0}
!6302 = !{!"0x1ab3b360.w8.b0", !6303, i64 0}
!6303 = !{!"0x1ab3b360.w16.b0", !6304, i64 0}
!6304 = !{!"0x1ab3b360.w32.b0", !6305, i64 0}
!6305 = !{!"0x1ab3b360.w64.b0", !6306, i64 0}
!6306 = !{!"0x1ab3b360.w128.b0", !6307, i64 0}
!6307 = !{!"0x1ab3b360.w256.b0", !6308, i64 0}
!6308 = !{!"0x1ab3b360.w512.b0", !6309, i64 0}
!6309 = !{!"0x1ab3b360.w1024.b0", !6310, i64 0}
!6310 = !{!"int32", !6311, i64 0}
!6311 = !{!"0x1ab3b360", !8, i64 0}
!6312 = !{!6313, !6313, i64 0}
!6313 = !{!"0x1ab3b360.w1.b1", !6300, i64 0}
!6314 = !{!6315, !6315, i64 0}
!6315 = !{!"0x1add47a0.w1.b0", !6316, i64 0}
!6316 = !{!"0x1add47a0.w2.b0", !6317, i64 0}
!6317 = !{!"0x1add47a0.w4.b0", !6318, i64 0}
!6318 = !{!"0x1add47a0.w8.b0", !6319, i64 0}
!6319 = !{!"0x1add47a0.w16.b0", !6320, i64 0}
!6320 = !{!"0x1add47a0.w32.b0", !6321, i64 0}
!6321 = !{!"0x1add47a0.w64.b0", !6322, i64 0}
!6322 = !{!"0x1add47a0.w128.b0", !6323, i64 0}
!6323 = !{!"0x1add47a0.w256.b0", !6324, i64 0}
!6324 = !{!"0x1add47a0.w512.b0", !6325, i64 0}
!6325 = !{!"0x1add47a0.w1024.b0", !6326, i64 0}
!6326 = !{!"int64", !6327, i64 0}
!6327 = !{!"0x1add47a0", !8, i64 0}
!6328 = !{!6329, !6329, i64 0}
!6329 = !{!"0x1add47a0.w1.b1", !6316, i64 0}
!6330 = !{!6331, !6331, i64 0}
!6331 = !{!"0x1add47a0.w1.b2", !6332, i64 0}
!6332 = !{!"0x1add47a0.w2.b2", !6317, i64 0}
!6333 = !{!6334, !6334, i64 0}
!6334 = !{!"0x1add47a0.w1.b3", !6332, i64 0}
!6335 = !{!6336, !6336, i64 0}
!6336 = !{!"0x1add47a0.w1.b4", !6337, i64 0}
!6337 = !{!"0x1add47a0.w2.b4", !6338, i64 0}
!6338 = !{!"0x1add47a0.w4.b4", !6318, i64 0}
!6339 = !{!6340, !6340, i64 0}
!6340 = !{!"0x1add4d00.w8.b0", !6341, i64 0}
!6341 = !{!"0x1add4d00.w16.b0", !6342, i64 0}
!6342 = !{!"0x1add4d00.w32.b0", !6343, i64 0}
!6343 = !{!"0x1add4d00.w64.b0", !6344, i64 0}
!6344 = !{!"0x1add4d00.w128.b0", !6345, i64 0}
!6345 = !{!"0x1add4d00.w256.b0", !6346, i64 0}
!6346 = !{!"0x1add4d00.w512.b0", !6347, i64 0}
!6347 = !{!"0x1add4d00.w1024.b0", !6348, i64 0}
!6348 = !{!"int64", !6349, i64 0}
!6349 = !{!"0x1add4d00", !8, i64 0}
!6350 = !{!6351, !6351, i64 0}
!6351 = !{!"0x1add4d00.w1.b0", !6352, i64 0}
!6352 = !{!"0x1add4d00.w2.b0", !6353, i64 0}
!6353 = !{!"0x1add4d00.w4.b0", !6340, i64 0}
!6354 = !{!6355, !6355, i64 0}
!6355 = !{!"0x1add4f50.w1.b0", !6356, i64 0}
!6356 = !{!"0x1add4f50.w2.b0", !6357, i64 0}
!6357 = !{!"0x1add4f50.w4.b0", !6358, i64 0}
!6358 = !{!"0x1add4f50.w8.b0", !6359, i64 0}
!6359 = !{!"0x1add4f50.w16.b0", !6360, i64 0}
!6360 = !{!"0x1add4f50.w32.b0", !6361, i64 0}
!6361 = !{!"0x1add4f50.w64.b0", !6362, i64 0}
!6362 = !{!"0x1add4f50.w128.b0", !6363, i64 0}
!6363 = !{!"0x1add4f50.w256.b0", !6364, i64 0}
!6364 = !{!"0x1add4f50.w512.b0", !6365, i64 0}
!6365 = !{!"0x1add4f50.w1024.b0", !6366, i64 0}
!6366 = !{!"int64", !6367, i64 0}
!6367 = !{!"0x1add4f50", !8, i64 0}
!6368 = !{!6369, !6369, i64 0}
!6369 = !{!"0x1add4f50.w1.b1", !6356, i64 0}
!6370 = !{!6371, !6371, i64 0}
!6371 = !{!"0x1add4f50.w1.b2", !6372, i64 0}
!6372 = !{!"0x1add4f50.w2.b2", !6357, i64 0}
!6373 = !{!6374, !6374, i64 0}
!6374 = !{!"0x1add4f50.w1.b3", !6372, i64 0}
!6375 = !{!6376, !6376, i64 0}
!6376 = !{!"0x1add4f50.w1.b4", !6377, i64 0}
!6377 = !{!"0x1add4f50.w2.b4", !6378, i64 0}
!6378 = !{!"0x1add4f50.w4.b4", !6358, i64 0}
!6379 = !{!6380, !6380, i64 0}
!6380 = !{!"0x1add4970.w8.b0", !6381, i64 0}
!6381 = !{!"0x1add4970.w16.b0", !6382, i64 0}
!6382 = !{!"0x1add4970.w32.b0", !6383, i64 0}
!6383 = !{!"0x1add4970.w64.b0", !6384, i64 0}
!6384 = !{!"0x1add4970.w128.b0", !6385, i64 0}
!6385 = !{!"0x1add4970.w256.b0", !6386, i64 0}
!6386 = !{!"0x1add4970.w512.b0", !6387, i64 0}
!6387 = !{!"0x1add4970.w1024.b0", !6388, i64 0}
!6388 = !{!"int64", !6389, i64 0}
!6389 = !{!"0x1add4970", !8, i64 0}
!6390 = !{!6391, !6391, i64 0}
!6391 = !{!"0x1add4970.w1.b0", !6392, i64 0}
!6392 = !{!"0x1add4970.w2.b0", !6393, i64 0}
!6393 = !{!"0x1add4970.w4.b0", !6380, i64 0}
!6394 = !{!6395, !6395, i64 0}
!6395 = !{!"float32", !6396, i64 0}
!6396 = !{!"0x63d2120", !8, i64 0}
!6397 = !{!6398, !6398, i64 0}
!6398 = !{!"float32", !6399, i64 0}
!6399 = !{!"0x63a3560", !8, i64 0}
!6400 = !{!6401, !6401, i64 0}
!6401 = !{!"0x80e4370.w1.b0", !6402, i64 0}
!6402 = !{!"0x80e4370.w2.b0", !6403, i64 0}
!6403 = !{!"0x80e4370.w4.b0", !6404, i64 0}
!6404 = !{!"0x80e4370.w8.b0", !6405, i64 0}
!6405 = !{!"0x80e4370.w16.b0", !6406, i64 0}
!6406 = !{!"0x80e4370.w32.b0", !6407, i64 0}
!6407 = !{!"0x80e4370.w64.b0", !6408, i64 0}
!6408 = !{!"0x80e4370.w128.b0", !6409, i64 0}
!6409 = !{!"0x80e4370.w256.b0", !6410, i64 0}
!6410 = !{!"0x80e4370.w512.b0", !6411, i64 0}
!6411 = !{!"0x80e4370.w1024.b0", !6412, i64 0}
!6412 = !{!"int32", !6413, i64 0}
!6413 = !{!"0x80e4370", !8, i64 0}
!6414 = !{!6415, !6415, i64 0}
!6415 = !{!"0x80e4370.w1.b2", !6416, i64 0}
!6416 = !{!"0x80e4370.w2.b2", !6403, i64 0}
!6417 = !{!6418, !6418, i64 0}
!6418 = !{!"0x80e4370.w1.b1", !6402, i64 0}
!6419 = !{!6420, !6420, i64 0}
!6420 = !{!"0x74244f0.w1.b0", !6421, i64 0}
!6421 = !{!"0x74244f0.w2.b0", !6422, i64 0}
!6422 = !{!"0x74244f0.w4.b0", !6423, i64 0}
!6423 = !{!"0x74244f0.w8.b0", !6424, i64 0}
!6424 = !{!"0x74244f0.w16.b0", !6425, i64 0}
!6425 = !{!"0x74244f0.w32.b0", !6426, i64 0}
!6426 = !{!"0x74244f0.w64.b0", !6427, i64 0}
!6427 = !{!"0x74244f0.w128.b0", !6428, i64 0}
!6428 = !{!"0x74244f0.w256.b0", !6429, i64 0}
!6429 = !{!"0x74244f0.w512.b0", !6430, i64 0}
!6430 = !{!"0x74244f0.w1024.b0", !6431, i64 0}
!6431 = !{!"int64", !6432, i64 0}
!6432 = !{!"0x74244f0", !8, i64 0}
!6433 = !{!6434, !6434, i64 0}
!6434 = !{!"0x74244f0.w1.b1", !6421, i64 0}
!6435 = !{!6436, !6436, i64 0}
!6436 = !{!"0x74244f0.w1.b2", !6437, i64 0}
!6437 = !{!"0x74244f0.w2.b2", !6422, i64 0}
!6438 = !{!6439, !6439, i64 0}
!6439 = !{!"0x74244f0.w1.b3", !6437, i64 0}
!6440 = !{!6441, !6441, i64 0}
!6441 = !{!"0x74244f0.w1.b4", !6442, i64 0}
!6442 = !{!"0x74244f0.w2.b4", !6443, i64 0}
!6443 = !{!"0x74244f0.w4.b4", !6423, i64 0}
!6444 = !{!6445, !6445, i64 0}
!6445 = !{!"0x8168290.w8.b0", !6446, i64 0}
!6446 = !{!"0x8168290.w16.b0", !6447, i64 0}
!6447 = !{!"0x8168290.w32.b0", !6448, i64 0}
!6448 = !{!"0x8168290.w64.b0", !6449, i64 0}
!6449 = !{!"0x8168290.w128.b0", !6450, i64 0}
!6450 = !{!"0x8168290.w256.b0", !6451, i64 0}
!6451 = !{!"0x8168290.w512.b0", !6452, i64 0}
!6452 = !{!"0x8168290.w1024.b0", !6453, i64 0}
!6453 = !{!"int64", !6454, i64 0}
!6454 = !{!"0x8168290", !8, i64 0}
!6455 = !{!6456, !6456, i64 0}
!6456 = !{!"0x8168290.w1.b0", !6457, i64 0}
!6457 = !{!"0x8168290.w2.b0", !6458, i64 0}
!6458 = !{!"0x8168290.w4.b0", !6445, i64 0}
!6459 = !{!6460, !6460, i64 0}
!6460 = !{!"0x8171700.w1.b0", !6461, i64 0}
!6461 = !{!"0x8171700.w2.b0", !6462, i64 0}
!6462 = !{!"0x8171700.w4.b0", !6463, i64 0}
!6463 = !{!"0x8171700.w8.b0", !6464, i64 0}
!6464 = !{!"0x8171700.w16.b0", !6465, i64 0}
!6465 = !{!"0x8171700.w32.b0", !6466, i64 0}
!6466 = !{!"0x8171700.w64.b0", !6467, i64 0}
!6467 = !{!"0x8171700.w128.b0", !6468, i64 0}
!6468 = !{!"0x8171700.w256.b0", !6469, i64 0}
!6469 = !{!"0x8171700.w512.b0", !6470, i64 0}
!6470 = !{!"0x8171700.w1024.b0", !6471, i64 0}
!6471 = !{!"int64", !6472, i64 0}
!6472 = !{!"0x8171700", !8, i64 0}
!6473 = !{!6474, !6474, i64 0}
!6474 = !{!"0x8171700.w1.b1", !6461, i64 0}
!6475 = !{!6476, !6476, i64 0}
!6476 = !{!"0x8171700.w1.b2", !6477, i64 0}
!6477 = !{!"0x8171700.w2.b2", !6462, i64 0}
!6478 = !{!6479, !6479, i64 0}
!6479 = !{!"0x8171700.w1.b3", !6477, i64 0}
!6480 = !{!6481, !6481, i64 0}
!6481 = !{!"0x8171700.w1.b4", !6482, i64 0}
!6482 = !{!"0x8171700.w2.b4", !6483, i64 0}
!6483 = !{!"0x8171700.w4.b4", !6463, i64 0}
!6484 = !{!6485, !6485, i64 0}
!6485 = !{!"0x714fc90.w8.b0", !6486, i64 0}
!6486 = !{!"0x714fc90.w16.b0", !6487, i64 0}
!6487 = !{!"0x714fc90.w32.b0", !6488, i64 0}
!6488 = !{!"0x714fc90.w64.b0", !6489, i64 0}
!6489 = !{!"0x714fc90.w128.b0", !6490, i64 0}
!6490 = !{!"0x714fc90.w256.b0", !6491, i64 0}
!6491 = !{!"0x714fc90.w512.b0", !6492, i64 0}
!6492 = !{!"0x714fc90.w1024.b0", !6493, i64 0}
!6493 = !{!"int64", !6494, i64 0}
!6494 = !{!"0x714fc90", !8, i64 0}
!6495 = !{!6496, !6496, i64 0}
!6496 = !{!"0x714fc90.w1.b0", !6497, i64 0}
!6497 = !{!"0x714fc90.w2.b0", !6498, i64 0}
!6498 = !{!"0x714fc90.w4.b0", !6485, i64 0}
!6499 = !{!6500, !6500, i64 0}
!6500 = !{!"0x81050d0.w1.b0", !6501, i64 0}
!6501 = !{!"0x81050d0.w2.b0", !6502, i64 0}
!6502 = !{!"0x81050d0.w4.b0", !6503, i64 0}
!6503 = !{!"0x81050d0.w8.b0", !6504, i64 0}
!6504 = !{!"0x81050d0.w16.b0", !6505, i64 0}
!6505 = !{!"0x81050d0.w32.b0", !6506, i64 0}
!6506 = !{!"0x81050d0.w64.b0", !6507, i64 0}
!6507 = !{!"0x81050d0.w128.b0", !6508, i64 0}
!6508 = !{!"0x81050d0.w256.b0", !6509, i64 0}
!6509 = !{!"0x81050d0.w512.b0", !6510, i64 0}
!6510 = !{!"0x81050d0.w1024.b0", !6511, i64 0}
!6511 = !{!"int64", !6512, i64 0}
!6512 = !{!"0x81050d0", !8, i64 0}
!6513 = !{!6514, !6514, i64 0}
!6514 = !{!"0x81050d0.w1.b1", !6501, i64 0}
!6515 = !{!6516, !6516, i64 0}
!6516 = !{!"0x81050d0.w1.b2", !6517, i64 0}
!6517 = !{!"0x81050d0.w2.b2", !6502, i64 0}
!6518 = !{!6519, !6519, i64 0}
!6519 = !{!"0x81050d0.w1.b3", !6517, i64 0}
!6520 = !{!6521, !6521, i64 0}
!6521 = !{!"0x81050d0.w1.b4", !6522, i64 0}
!6522 = !{!"0x81050d0.w2.b4", !6523, i64 0}
!6523 = !{!"0x81050d0.w4.b4", !6503, i64 0}
!6524 = !{!6525, !6525, i64 0}
!6525 = !{!"0x10323cb0.w8.b0", !6526, i64 0}
!6526 = !{!"0x10323cb0.w16.b0", !6527, i64 0}
!6527 = !{!"0x10323cb0.w32.b0", !6528, i64 0}
!6528 = !{!"0x10323cb0.w64.b0", !6529, i64 0}
!6529 = !{!"0x10323cb0.w128.b0", !6530, i64 0}
!6530 = !{!"0x10323cb0.w256.b0", !6531, i64 0}
!6531 = !{!"0x10323cb0.w512.b0", !6532, i64 0}
!6532 = !{!"0x10323cb0.w1024.b0", !6533, i64 0}
!6533 = !{!"int64", !6534, i64 0}
!6534 = !{!"0x10323cb0", !8, i64 0}
!6535 = !{!6536, !6536, i64 0}
!6536 = !{!"0x10323cb0.w1.b0", !6537, i64 0}
!6537 = !{!"0x10323cb0.w2.b0", !6538, i64 0}
!6538 = !{!"0x10323cb0.w4.b0", !6525, i64 0}
!6539 = !{!6540, !6540, i64 0}
!6540 = !{!"float32", !6541, i64 0}
!6541 = !{!"0x1b25bee0", !8, i64 0}
!6542 = !{!6543, !6543, i64 0}
!6543 = !{!"float32", !6544, i64 0}
!6544 = !{!"0x1b25b880", !8, i64 0}
!6545 = !{!6546, !6546, i64 0}
!6546 = !{!"float32", !6547, i64 0}
!6547 = !{!"0x8d98d70", !8, i64 0}
!6548 = !{!6549, !6549, i64 0}
!6549 = !{!"0x1aebd6d0.w1.b0", !6550, i64 0}
!6550 = !{!"0x1aebd6d0.w2.b0", !6551, i64 0}
!6551 = !{!"0x1aebd6d0.w4.b0", !6552, i64 0}
!6552 = !{!"0x1aebd6d0.w8.b0", !6553, i64 0}
!6553 = !{!"0x1aebd6d0.w16.b0", !6554, i64 0}
!6554 = !{!"0x1aebd6d0.w32.b0", !6555, i64 0}
!6555 = !{!"0x1aebd6d0.w64.b0", !6556, i64 0}
!6556 = !{!"0x1aebd6d0.w128.b0", !6557, i64 0}
!6557 = !{!"0x1aebd6d0.w256.b0", !6558, i64 0}
!6558 = !{!"0x1aebd6d0.w512.b0", !6559, i64 0}
!6559 = !{!"0x1aebd6d0.w1024.b0", !6560, i64 0}
!6560 = !{!"int32", !6561, i64 0}
!6561 = !{!"0x1aebd6d0", !8, i64 0}
!6562 = !{!6563, !6563, i64 0}
!6563 = !{!"0x1aebd6d0.w1.b2", !6564, i64 0}
!6564 = !{!"0x1aebd6d0.w2.b2", !6551, i64 0}
!6565 = !{!6566, !6566, i64 0}
!6566 = !{!"0x1aebd6d0.w1.b3", !6564, i64 0}
!6567 = !{!6568, !6568, i64 0}
!6568 = !{!"0x1aebd6d0.w1.b4", !6569, i64 0}
!6569 = !{!"0x1aebd6d0.w2.b4", !6570, i64 0}
!6570 = !{!"0x1aebd6d0.w4.b4", !6552, i64 0}
!6571 = !{!6572, !6572, i64 0}
!6572 = !{!"0x1aebd6d0.w1.b5", !6569, i64 0}
!6573 = !{!6574, !6574, i64 0}
!6574 = !{!"0x1aebd6d0.w1.b6", !6575, i64 0}
!6575 = !{!"0x1aebd6d0.w2.b6", !6570, i64 0}
!6576 = !{!6577, !6577, i64 0}
!6577 = !{!"0x1aebd6d0.w1.b1", !6550, i64 0}
!6578 = !{!6579, !6579, i64 0}
!6579 = !{!"0x80efc10.w1.b0", !6580, i64 0}
!6580 = !{!"0x80efc10.w2.b0", !6581, i64 0}
!6581 = !{!"0x80efc10.w4.b0", !6582, i64 0}
!6582 = !{!"0x80efc10.w8.b0", !6583, i64 0}
!6583 = !{!"0x80efc10.w16.b0", !6584, i64 0}
!6584 = !{!"0x80efc10.w32.b0", !6585, i64 0}
!6585 = !{!"0x80efc10.w64.b0", !6586, i64 0}
!6586 = !{!"0x80efc10.w128.b0", !6587, i64 0}
!6587 = !{!"0x80efc10.w256.b0", !6588, i64 0}
!6588 = !{!"0x80efc10.w512.b0", !6589, i64 0}
!6589 = !{!"0x80efc10.w1024.b0", !6590, i64 0}
!6590 = !{!"int64", !6591, i64 0}
!6591 = !{!"0x80efc10", !8, i64 0}
!6592 = !{!6593, !6593, i64 0}
!6593 = !{!"0x80efc10.w1.b1", !6580, i64 0}
!6594 = !{!6595, !6595, i64 0}
!6595 = !{!"0x80efc10.w1.b2", !6596, i64 0}
!6596 = !{!"0x80efc10.w2.b2", !6581, i64 0}
!6597 = !{!6598, !6598, i64 0}
!6598 = !{!"0x80efc10.w1.b3", !6596, i64 0}
!6599 = !{!6600, !6600, i64 0}
!6600 = !{!"0x80efc10.w1.b4", !6601, i64 0}
!6601 = !{!"0x80efc10.w2.b4", !6602, i64 0}
!6602 = !{!"0x80efc10.w4.b4", !6582, i64 0}
!6603 = !{!6604, !6604, i64 0}
!6604 = !{!"0x80f00c0.w8.b0", !6605, i64 0}
!6605 = !{!"0x80f00c0.w16.b0", !6606, i64 0}
!6606 = !{!"0x80f00c0.w32.b0", !6607, i64 0}
!6607 = !{!"0x80f00c0.w64.b0", !6608, i64 0}
!6608 = !{!"0x80f00c0.w128.b0", !6609, i64 0}
!6609 = !{!"0x80f00c0.w256.b0", !6610, i64 0}
!6610 = !{!"0x80f00c0.w512.b0", !6611, i64 0}
!6611 = !{!"0x80f00c0.w1024.b0", !6612, i64 0}
!6612 = !{!"int64", !6613, i64 0}
!6613 = !{!"0x80f00c0", !8, i64 0}
!6614 = !{!6615, !6615, i64 0}
!6615 = !{!"0x80f00c0.w1.b0", !6616, i64 0}
!6616 = !{!"0x80f00c0.w2.b0", !6617, i64 0}
!6617 = !{!"0x80f00c0.w4.b0", !6604, i64 0}
!6618 = !{!6619, !6619, i64 0}
!6619 = !{!"0x1ae80c50.w1.b0", !6620, i64 0}
!6620 = !{!"0x1ae80c50.w2.b0", !6621, i64 0}
!6621 = !{!"0x1ae80c50.w4.b0", !6622, i64 0}
!6622 = !{!"0x1ae80c50.w8.b0", !6623, i64 0}
!6623 = !{!"0x1ae80c50.w16.b0", !6624, i64 0}
!6624 = !{!"0x1ae80c50.w32.b0", !6625, i64 0}
!6625 = !{!"0x1ae80c50.w64.b0", !6626, i64 0}
!6626 = !{!"0x1ae80c50.w128.b0", !6627, i64 0}
!6627 = !{!"0x1ae80c50.w256.b0", !6628, i64 0}
!6628 = !{!"0x1ae80c50.w512.b0", !6629, i64 0}
!6629 = !{!"0x1ae80c50.w1024.b0", !6630, i64 0}
!6630 = !{!"int64", !6631, i64 0}
!6631 = !{!"0x1ae80c50", !8, i64 0}
!6632 = !{!6633, !6633, i64 0}
!6633 = !{!"0x1ae80c50.w1.b1", !6620, i64 0}
!6634 = !{!6635, !6635, i64 0}
!6635 = !{!"0x1ae80c50.w1.b2", !6636, i64 0}
!6636 = !{!"0x1ae80c50.w2.b2", !6621, i64 0}
!6637 = !{!6638, !6638, i64 0}
!6638 = !{!"0x1ae80c50.w1.b3", !6636, i64 0}
!6639 = !{!6640, !6640, i64 0}
!6640 = !{!"0x1ae80c50.w1.b4", !6641, i64 0}
!6641 = !{!"0x1ae80c50.w2.b4", !6642, i64 0}
!6642 = !{!"0x1ae80c50.w4.b4", !6622, i64 0}
!6643 = !{!6644, !6644, i64 0}
!6644 = !{!"0x1ae80c50.w1.b5", !6641, i64 0}
!6645 = !{!6646, !6646, i64 0}
!6646 = !{!"0x80f0070.w8.b0", !6647, i64 0}
!6647 = !{!"0x80f0070.w16.b0", !6648, i64 0}
!6648 = !{!"0x80f0070.w32.b0", !6649, i64 0}
!6649 = !{!"0x80f0070.w64.b0", !6650, i64 0}
!6650 = !{!"0x80f0070.w128.b0", !6651, i64 0}
!6651 = !{!"0x80f0070.w256.b0", !6652, i64 0}
!6652 = !{!"0x80f0070.w512.b0", !6653, i64 0}
!6653 = !{!"0x80f0070.w1024.b0", !6654, i64 0}
!6654 = !{!"int64", !6655, i64 0}
!6655 = !{!"0x80f0070", !8, i64 0}
!6656 = !{!6657, !6657, i64 0}
!6657 = !{!"0x80f0070.w1.b1", !6658, i64 0}
!6658 = !{!"0x80f0070.w2.b0", !6659, i64 0}
!6659 = !{!"0x80f0070.w4.b0", !6646, i64 0}
!6660 = !{!6661, !6661, i64 0}
!6661 = !{!"0x80f0070.w1.b0", !6658, i64 0}
!6662 = !{!6663, !6663, i64 0}
!6663 = !{!"0x56d2a70.w1.b0", !6664, i64 0}
!6664 = !{!"0x56d2a70.w2.b0", !6665, i64 0}
!6665 = !{!"0x56d2a70.w4.b0", !6666, i64 0}
!6666 = !{!"0x56d2a70.w8.b0", !6667, i64 0}
!6667 = !{!"0x56d2a70.w16.b0", !6668, i64 0}
!6668 = !{!"0x56d2a70.w32.b0", !6669, i64 0}
!6669 = !{!"0x56d2a70.w64.b0", !6670, i64 0}
!6670 = !{!"0x56d2a70.w128.b0", !6671, i64 0}
!6671 = !{!"0x56d2a70.w256.b0", !6672, i64 0}
!6672 = !{!"0x56d2a70.w512.b0", !6673, i64 0}
!6673 = !{!"0x56d2a70.w1024.b0", !6674, i64 0}
!6674 = !{!"int64", !6675, i64 0}
!6675 = !{!"0x56d2a70", !8, i64 0}
!6676 = !{!6677, !6677, i64 0}
!6677 = !{!"0x56d2a70.w1.b1", !6664, i64 0}
!6678 = !{!6679, !6679, i64 0}
!6679 = !{!"0x56d2a70.w1.b2", !6680, i64 0}
!6680 = !{!"0x56d2a70.w2.b2", !6665, i64 0}
!6681 = !{!6682, !6682, i64 0}
!6682 = !{!"0x56d2a70.w1.b3", !6680, i64 0}
!6683 = !{!6684, !6684, i64 0}
!6684 = !{!"0x56d2a70.w1.b4", !6685, i64 0}
!6685 = !{!"0x56d2a70.w2.b4", !6686, i64 0}
!6686 = !{!"0x56d2a70.w4.b4", !6666, i64 0}
!6687 = !{!6688, !6688, i64 0}
!6688 = !{!"0xa311a60.w8.b0", !6689, i64 0}
!6689 = !{!"0xa311a60.w16.b0", !6690, i64 0}
!6690 = !{!"0xa311a60.w32.b0", !6691, i64 0}
!6691 = !{!"0xa311a60.w64.b0", !6692, i64 0}
!6692 = !{!"0xa311a60.w128.b0", !6693, i64 0}
!6693 = !{!"0xa311a60.w256.b0", !6694, i64 0}
!6694 = !{!"0xa311a60.w512.b0", !6695, i64 0}
!6695 = !{!"0xa311a60.w1024.b0", !6696, i64 0}
!6696 = !{!"int64", !6697, i64 0}
!6697 = !{!"0xa311a60", !8, i64 0}
!6698 = !{!6699, !6699, i64 0}
!6699 = !{!"0xa311a60.w1.b0", !6700, i64 0}
!6700 = !{!"0xa311a60.w2.b0", !6701, i64 0}
!6701 = !{!"0xa311a60.w4.b0", !6688, i64 0}
!6702 = !{!6703, !6703, i64 0}
!6703 = !{!"0xf766df0.w1.b0", !6704, i64 0}
!6704 = !{!"0xf766df0.w2.b0", !6705, i64 0}
!6705 = !{!"0xf766df0.w4.b0", !6706, i64 0}
!6706 = !{!"0xf766df0.w8.b0", !6707, i64 0}
!6707 = !{!"0xf766df0.w16.b0", !6708, i64 0}
!6708 = !{!"0xf766df0.w32.b0", !6709, i64 0}
!6709 = !{!"0xf766df0.w64.b0", !6710, i64 0}
!6710 = !{!"0xf766df0.w128.b0", !6711, i64 0}
!6711 = !{!"0xf766df0.w256.b0", !6712, i64 0}
!6712 = !{!"0xf766df0.w512.b0", !6713, i64 0}
!6713 = !{!"0xf766df0.w1024.b0", !6714, i64 0}
!6714 = !{!"int64", !6715, i64 0}
!6715 = !{!"0xf766df0", !8, i64 0}
!6716 = !{!6717, !6717, i64 0}
!6717 = !{!"0xf766df0.w1.b1", !6704, i64 0}
!6718 = !{!6719, !6719, i64 0}
!6719 = !{!"0xf766df0.w1.b2", !6720, i64 0}
!6720 = !{!"0xf766df0.w2.b2", !6705, i64 0}
!6721 = !{!6722, !6722, i64 0}
!6722 = !{!"0xf766df0.w1.b3", !6720, i64 0}
!6723 = !{!6724, !6724, i64 0}
!6724 = !{!"0xf766df0.w1.b4", !6725, i64 0}
!6725 = !{!"0xf766df0.w2.b4", !6726, i64 0}
!6726 = !{!"0xf766df0.w4.b4", !6706, i64 0}
!6727 = !{!6728, !6728, i64 0}
!6728 = !{!"0xf766e40.w8.b0", !6729, i64 0}
!6729 = !{!"0xf766e40.w16.b0", !6730, i64 0}
!6730 = !{!"0xf766e40.w32.b0", !6731, i64 0}
!6731 = !{!"0xf766e40.w64.b0", !6732, i64 0}
!6732 = !{!"0xf766e40.w128.b0", !6733, i64 0}
!6733 = !{!"0xf766e40.w256.b0", !6734, i64 0}
!6734 = !{!"0xf766e40.w512.b0", !6735, i64 0}
!6735 = !{!"0xf766e40.w1024.b0", !6736, i64 0}
!6736 = !{!"int64", !6737, i64 0}
!6737 = !{!"0xf766e40", !8, i64 0}
!6738 = !{!6739, !6739, i64 0}
!6739 = !{!"0xf766e40.w1.b0", !6740, i64 0}
!6740 = !{!"0xf766e40.w2.b0", !6741, i64 0}
!6741 = !{!"0xf766e40.w4.b0", !6728, i64 0}
!6742 = !{!6743, !6743, i64 0}
!6743 = !{!"0x102d24c0.w1.b0", !6744, i64 0}
!6744 = !{!"0x102d24c0.w2.b0", !6745, i64 0}
!6745 = !{!"0x102d24c0.w4.b0", !6746, i64 0}
!6746 = !{!"0x102d24c0.w8.b0", !6747, i64 0}
!6747 = !{!"0x102d24c0.w16.b0", !6748, i64 0}
!6748 = !{!"0x102d24c0.w32.b0", !6749, i64 0}
!6749 = !{!"0x102d24c0.w64.b0", !6750, i64 0}
!6750 = !{!"0x102d24c0.w128.b0", !6751, i64 0}
!6751 = !{!"0x102d24c0.w256.b0", !6752, i64 0}
!6752 = !{!"0x102d24c0.w512.b0", !6753, i64 0}
!6753 = !{!"0x102d24c0.w1024.b0", !6754, i64 0}
!6754 = !{!"int64", !6755, i64 0}
!6755 = !{!"0x102d24c0", !8, i64 0}
!6756 = !{!6757, !6757, i64 0}
!6757 = !{!"0x102d24c0.w1.b1", !6744, i64 0}
!6758 = !{!6759, !6759, i64 0}
!6759 = !{!"0x102d24c0.w1.b2", !6760, i64 0}
!6760 = !{!"0x102d24c0.w2.b2", !6745, i64 0}
!6761 = !{!6762, !6762, i64 0}
!6762 = !{!"0x102d24c0.w1.b3", !6760, i64 0}
!6763 = !{!6764, !6764, i64 0}
!6764 = !{!"0x102d24c0.w1.b4", !6765, i64 0}
!6765 = !{!"0x102d24c0.w2.b4", !6766, i64 0}
!6766 = !{!"0x102d24c0.w4.b4", !6746, i64 0}
!6767 = !{!6768, !6768, i64 0}
!6768 = !{!"0x14740740.w8.b0", !6769, i64 0}
!6769 = !{!"0x14740740.w16.b0", !6770, i64 0}
!6770 = !{!"0x14740740.w32.b0", !6771, i64 0}
!6771 = !{!"0x14740740.w64.b0", !6772, i64 0}
!6772 = !{!"0x14740740.w128.b0", !6773, i64 0}
!6773 = !{!"0x14740740.w256.b0", !6774, i64 0}
!6774 = !{!"0x14740740.w512.b0", !6775, i64 0}
!6775 = !{!"0x14740740.w1024.b0", !6776, i64 0}
!6776 = !{!"int64", !6777, i64 0}
!6777 = !{!"0x14740740", !8, i64 0}
!6778 = !{!6779, !6779, i64 0}
!6779 = !{!"0x14740740.w1.b0", !6780, i64 0}
!6780 = !{!"0x14740740.w2.b0", !6781, i64 0}
!6781 = !{!"0x14740740.w4.b0", !6768, i64 0}
!6782 = !{!6783, !6783, i64 0}
!6783 = !{!"0x5a6e770.w1.b0", !6784, i64 0}
!6784 = !{!"0x5a6e770.w2.b0", !6785, i64 0}
!6785 = !{!"0x5a6e770.w4.b0", !6786, i64 0}
!6786 = !{!"0x5a6e770.w8.b0", !6787, i64 0}
!6787 = !{!"0x5a6e770.w16.b0", !6788, i64 0}
!6788 = !{!"0x5a6e770.w32.b0", !6789, i64 0}
!6789 = !{!"0x5a6e770.w64.b0", !6790, i64 0}
!6790 = !{!"0x5a6e770.w128.b0", !6791, i64 0}
!6791 = !{!"0x5a6e770.w256.b0", !6792, i64 0}
!6792 = !{!"0x5a6e770.w512.b0", !6793, i64 0}
!6793 = !{!"0x5a6e770.w1024.b0", !6794, i64 0}
!6794 = !{!"int64", !6795, i64 0}
!6795 = !{!"0x5a6e770", !8, i64 0}
!6796 = !{!6797, !6797, i64 0}
!6797 = !{!"0x5a6e770.w1.b1", !6784, i64 0}
!6798 = !{!6799, !6799, i64 0}
!6799 = !{!"0x5a6e770.w1.b2", !6800, i64 0}
!6800 = !{!"0x5a6e770.w2.b2", !6785, i64 0}
!6801 = !{!6802, !6802, i64 0}
!6802 = !{!"0x5a6e770.w1.b3", !6800, i64 0}
!6803 = !{!6804, !6804, i64 0}
!6804 = !{!"0x5a6e770.w1.b4", !6805, i64 0}
!6805 = !{!"0x5a6e770.w2.b4", !6806, i64 0}
!6806 = !{!"0x5a6e770.w4.b4", !6786, i64 0}
!6807 = !{!6808, !6808, i64 0}
!6808 = !{!"0x18a36a80.w8.b0", !6809, i64 0}
!6809 = !{!"0x18a36a80.w16.b0", !6810, i64 0}
!6810 = !{!"0x18a36a80.w32.b0", !6811, i64 0}
!6811 = !{!"0x18a36a80.w64.b0", !6812, i64 0}
!6812 = !{!"0x18a36a80.w128.b0", !6813, i64 0}
!6813 = !{!"0x18a36a80.w256.b0", !6814, i64 0}
!6814 = !{!"0x18a36a80.w512.b0", !6815, i64 0}
!6815 = !{!"0x18a36a80.w1024.b0", !6816, i64 0}
!6816 = !{!"int64", !6817, i64 0}
!6817 = !{!"0x18a36a80", !8, i64 0}
!6818 = !{!6819, !6819, i64 0}
!6819 = !{!"0x18a36a80.w1.b0", !6820, i64 0}
!6820 = !{!"0x18a36a80.w2.b0", !6821, i64 0}
!6821 = !{!"0x18a36a80.w4.b0", !6808, i64 0}
!6822 = !{!6823, !6823, i64 0}
!6823 = !{!"0x9343fc0.w1.b0", !6824, i64 0}
!6824 = !{!"0x9343fc0.w2.b0", !6825, i64 0}
!6825 = !{!"0x9343fc0.w4.b0", !6826, i64 0}
!6826 = !{!"0x9343fc0.w8.b0", !6827, i64 0}
!6827 = !{!"0x9343fc0.w16.b0", !6828, i64 0}
!6828 = !{!"0x9343fc0.w32.b0", !6829, i64 0}
!6829 = !{!"0x9343fc0.w64.b0", !6830, i64 0}
!6830 = !{!"0x9343fc0.w128.b0", !6831, i64 0}
!6831 = !{!"0x9343fc0.w256.b0", !6832, i64 0}
!6832 = !{!"0x9343fc0.w512.b0", !6833, i64 0}
!6833 = !{!"0x9343fc0.w1024.b0", !6834, i64 0}
!6834 = !{!"int64", !6835, i64 0}
!6835 = !{!"0x9343fc0", !8, i64 0}
!6836 = !{!6837, !6837, i64 0}
!6837 = !{!"0x9343fc0.w1.b1", !6824, i64 0}
!6838 = !{!6839, !6839, i64 0}
!6839 = !{!"0x9343fc0.w1.b2", !6840, i64 0}
!6840 = !{!"0x9343fc0.w2.b2", !6825, i64 0}
!6841 = !{!6842, !6842, i64 0}
!6842 = !{!"0x9343fc0.w1.b3", !6840, i64 0}
!6843 = !{!6844, !6844, i64 0}
!6844 = !{!"0x9343fc0.w1.b4", !6845, i64 0}
!6845 = !{!"0x9343fc0.w2.b4", !6846, i64 0}
!6846 = !{!"0x9343fc0.w4.b4", !6826, i64 0}
!6847 = !{!6848, !6848, i64 0}
!6848 = !{!"0x5e91230.w8.b0", !6849, i64 0}
!6849 = !{!"0x5e91230.w16.b0", !6850, i64 0}
!6850 = !{!"0x5e91230.w32.b0", !6851, i64 0}
!6851 = !{!"0x5e91230.w64.b0", !6852, i64 0}
!6852 = !{!"0x5e91230.w128.b0", !6853, i64 0}
!6853 = !{!"0x5e91230.w256.b0", !6854, i64 0}
!6854 = !{!"0x5e91230.w512.b0", !6855, i64 0}
!6855 = !{!"0x5e91230.w1024.b0", !6856, i64 0}
!6856 = !{!"int64", !6857, i64 0}
!6857 = !{!"0x5e91230", !8, i64 0}
!6858 = !{!6859, !6859, i64 0}
!6859 = !{!"0x5e91230.w1.b0", !6860, i64 0}
!6860 = !{!"0x5e91230.w2.b0", !6861, i64 0}
!6861 = !{!"0x5e91230.w4.b0", !6848, i64 0}
!6862 = !{!6863, !6863, i64 0}
!6863 = !{!"float32", !6864, i64 0}
!6864 = !{!"0x103082b0", !8, i64 0}
!6865 = !{!6866, !6866, i64 0}
!6866 = !{!"float32", !6867, i64 0}
!6867 = !{!"0x8d6d780", !8, i64 0}
!6868 = !{!6869, !6869, i64 0}
!6869 = !{!"float32", !6870, i64 0}
!6870 = !{!"0x80c9930", !8, i64 0}
!6871 = !{!6872, !6872, i64 0}
!6872 = !{!"float32", !6873, i64 0}
!6873 = !{!"0x102dc8d0", !8, i64 0}
!6874 = !{!6875, !6875, i64 0}
!6875 = !{!"float32", !6876, i64 0}
!6876 = !{!"0x1ae507b0", !8, i64 0}
!6877 = !{!6878, !6878, i64 0}
!6878 = !{!"float32", !6879, i64 0}
!6879 = !{!"0x1afdb810", !8, i64 0}
!6880 = !{!6881, !6881, i64 0}
!6881 = !{!"float32", !6882, i64 0}
!6882 = !{!"0xa335330", !8, i64 0}
!6883 = !{!6884, !6884, i64 0}
!6884 = !{!"float32", !6885, i64 0}
!6885 = !{!"0xdd84130", !8, i64 0}
!6886 = !{!6887, !6887, i64 0}
!6887 = !{!"0x140a60b0.w1.b0", !6888, i64 0}
!6888 = !{!"0x140a60b0.w2.b0", !6889, i64 0}
!6889 = !{!"0x140a60b0.w4.b0", !6890, i64 0}
!6890 = !{!"0x140a60b0.w8.b0", !6891, i64 0}
!6891 = !{!"0x140a60b0.w16.b0", !6892, i64 0}
!6892 = !{!"0x140a60b0.w32.b0", !6893, i64 0}
!6893 = !{!"0x140a60b0.w64.b0", !6894, i64 0}
!6894 = !{!"0x140a60b0.w128.b0", !6895, i64 0}
!6895 = !{!"0x140a60b0.w256.b0", !6896, i64 0}
!6896 = !{!"0x140a60b0.w512.b0", !6897, i64 0}
!6897 = !{!"0x140a60b0.w1024.b0", !6898, i64 0}
!6898 = !{!"int32", !6899, i64 0}
!6899 = !{!"0x140a60b0", !8, i64 0}
!6900 = !{!6901, !6901, i64 0}
!6901 = !{!"0x140a60b0.w1.b1", !6888, i64 0}
!6902 = !{!6903, !6903, i64 0}
!6903 = !{!"0x140a9d60.w1.b0", !6904, i64 0}
!6904 = !{!"0x140a9d60.w2.b0", !6905, i64 0}
!6905 = !{!"0x140a9d60.w4.b0", !6906, i64 0}
!6906 = !{!"0x140a9d60.w8.b0", !6907, i64 0}
!6907 = !{!"0x140a9d60.w16.b0", !6908, i64 0}
!6908 = !{!"0x140a9d60.w32.b0", !6909, i64 0}
!6909 = !{!"0x140a9d60.w64.b0", !6910, i64 0}
!6910 = !{!"0x140a9d60.w128.b0", !6911, i64 0}
!6911 = !{!"0x140a9d60.w256.b0", !6912, i64 0}
!6912 = !{!"0x140a9d60.w512.b0", !6913, i64 0}
!6913 = !{!"0x140a9d60.w1024.b0", !6914, i64 0}
!6914 = !{!"int64", !6915, i64 0}
!6915 = !{!"0x140a9d60", !8, i64 0}
!6916 = !{!6917, !6917, i64 0}
!6917 = !{!"0x140a9d60.w1.b1", !6904, i64 0}
!6918 = !{!6919, !6919, i64 0}
!6919 = !{!"0x140a9d60.w1.b2", !6920, i64 0}
!6920 = !{!"0x140a9d60.w2.b2", !6905, i64 0}
!6921 = !{!6922, !6922, i64 0}
!6922 = !{!"0x140a9d60.w1.b3", !6920, i64 0}
!6923 = !{!6924, !6924, i64 0}
!6924 = !{!"0x140a9d60.w1.b4", !6925, i64 0}
!6925 = !{!"0x140a9d60.w2.b4", !6926, i64 0}
!6926 = !{!"0x140a9d60.w4.b4", !6906, i64 0}
!6927 = !{!6928, !6928, i64 0}
!6928 = !{!"0x140aa390.w8.b0", !6929, i64 0}
!6929 = !{!"0x140aa390.w16.b0", !6930, i64 0}
!6930 = !{!"0x140aa390.w32.b0", !6931, i64 0}
!6931 = !{!"0x140aa390.w64.b0", !6932, i64 0}
!6932 = !{!"0x140aa390.w128.b0", !6933, i64 0}
!6933 = !{!"0x140aa390.w256.b0", !6934, i64 0}
!6934 = !{!"0x140aa390.w512.b0", !6935, i64 0}
!6935 = !{!"0x140aa390.w1024.b0", !6936, i64 0}
!6936 = !{!"int64", !6937, i64 0}
!6937 = !{!"0x140aa390", !8, i64 0}
!6938 = !{!6939, !6939, i64 0}
!6939 = !{!"0x140aa390.w1.b0", !6940, i64 0}
!6940 = !{!"0x140aa390.w2.b0", !6941, i64 0}
!6941 = !{!"0x140aa390.w4.b0", !6928, i64 0}
!6942 = !{!6943, !6943, i64 0}
!6943 = !{!"0x140aa6e0.w1.b0", !6944, i64 0}
!6944 = !{!"0x140aa6e0.w2.b0", !6945, i64 0}
!6945 = !{!"0x140aa6e0.w4.b0", !6946, i64 0}
!6946 = !{!"0x140aa6e0.w8.b0", !6947, i64 0}
!6947 = !{!"0x140aa6e0.w16.b0", !6948, i64 0}
!6948 = !{!"0x140aa6e0.w32.b0", !6949, i64 0}
!6949 = !{!"0x140aa6e0.w64.b0", !6950, i64 0}
!6950 = !{!"0x140aa6e0.w128.b0", !6951, i64 0}
!6951 = !{!"0x140aa6e0.w256.b0", !6952, i64 0}
!6952 = !{!"0x140aa6e0.w512.b0", !6953, i64 0}
!6953 = !{!"0x140aa6e0.w1024.b0", !6954, i64 0}
!6954 = !{!"int64", !6955, i64 0}
!6955 = !{!"0x140aa6e0", !8, i64 0}
!6956 = !{!6957, !6957, i64 0}
!6957 = !{!"0x140aa6e0.w1.b1", !6944, i64 0}
!6958 = !{!6959, !6959, i64 0}
!6959 = !{!"0x140aa6e0.w1.b2", !6960, i64 0}
!6960 = !{!"0x140aa6e0.w2.b2", !6945, i64 0}
!6961 = !{!6962, !6962, i64 0}
!6962 = !{!"0x140aa6e0.w1.b3", !6960, i64 0}
!6963 = !{!6964, !6964, i64 0}
!6964 = !{!"0x140aa6e0.w1.b4", !6965, i64 0}
!6965 = !{!"0x140aa6e0.w2.b4", !6966, i64 0}
!6966 = !{!"0x140aa6e0.w4.b4", !6946, i64 0}
!6967 = !{!6968, !6968, i64 0}
!6968 = !{!"0x140a9f90.w8.b0", !6969, i64 0}
!6969 = !{!"0x140a9f90.w16.b0", !6970, i64 0}
!6970 = !{!"0x140a9f90.w32.b0", !6971, i64 0}
!6971 = !{!"0x140a9f90.w64.b0", !6972, i64 0}
!6972 = !{!"0x140a9f90.w128.b0", !6973, i64 0}
!6973 = !{!"0x140a9f90.w256.b0", !6974, i64 0}
!6974 = !{!"0x140a9f90.w512.b0", !6975, i64 0}
!6975 = !{!"0x140a9f90.w1024.b0", !6976, i64 0}
!6976 = !{!"int64", !6977, i64 0}
!6977 = !{!"0x140a9f90", !8, i64 0}
!6978 = !{!6979, !6979, i64 0}
!6979 = !{!"0x140a9f90.w1.b0", !6980, i64 0}
!6980 = !{!"0x140a9f90.w2.b0", !6981, i64 0}
!6981 = !{!"0x140a9f90.w4.b0", !6968, i64 0}
!6982 = !{!6983, !6983, i64 0}
!6983 = !{!"float32", !6984, i64 0}
!6984 = !{!"0x140a63c0", !8, i64 0}
!6985 = !{!6986, !6986, i64 0}
!6986 = !{!"float32", !6987, i64 0}
!6987 = !{!"0x140a8ac0", !8, i64 0}
!6988 = !{!6989, !6989, i64 0}
!6989 = !{!"0x1408e5d0.w1.b0", !6990, i64 0}
!6990 = !{!"0x1408e5d0.w2.b0", !6991, i64 0}
!6991 = !{!"0x1408e5d0.w4.b0", !6992, i64 0}
!6992 = !{!"0x1408e5d0.w8.b0", !6993, i64 0}
!6993 = !{!"0x1408e5d0.w16.b0", !6994, i64 0}
!6994 = !{!"0x1408e5d0.w32.b0", !6995, i64 0}
!6995 = !{!"0x1408e5d0.w64.b0", !6996, i64 0}
!6996 = !{!"0x1408e5d0.w128.b0", !6997, i64 0}
!6997 = !{!"0x1408e5d0.w256.b0", !6998, i64 0}
!6998 = !{!"0x1408e5d0.w512.b0", !6999, i64 0}
!6999 = !{!"0x1408e5d0.w1024.b0", !7000, i64 0}
!7000 = !{!"int32", !7001, i64 0}
!7001 = !{!"0x1408e5d0", !8, i64 0}
!7002 = !{!7003, !7003, i64 0}
!7003 = !{!"0x1408e5d0.w1.b2", !7004, i64 0}
!7004 = !{!"0x1408e5d0.w2.b2", !6991, i64 0}
!7005 = !{!7006, !7006, i64 0}
!7006 = !{!"0x1408e5d0.w1.b3", !7004, i64 0}
!7007 = !{!7008, !7008, i64 0}
!7008 = !{!"0x1408e5d0.w1.b4", !7009, i64 0}
!7009 = !{!"0x1408e5d0.w2.b4", !7010, i64 0}
!7010 = !{!"0x1408e5d0.w4.b4", !6992, i64 0}
!7011 = !{!7012, !7012, i64 0}
!7012 = !{!"0x1408e5d0.w1.b1", !6990, i64 0}
!7013 = !{!7014, !7014, i64 0}
!7014 = !{!"0x14097400.w1.b0", !7015, i64 0}
!7015 = !{!"0x14097400.w2.b0", !7016, i64 0}
!7016 = !{!"0x14097400.w4.b0", !7017, i64 0}
!7017 = !{!"0x14097400.w8.b0", !7018, i64 0}
!7018 = !{!"0x14097400.w16.b0", !7019, i64 0}
!7019 = !{!"0x14097400.w32.b0", !7020, i64 0}
!7020 = !{!"0x14097400.w64.b0", !7021, i64 0}
!7021 = !{!"0x14097400.w128.b0", !7022, i64 0}
!7022 = !{!"0x14097400.w256.b0", !7023, i64 0}
!7023 = !{!"0x14097400.w512.b0", !7024, i64 0}
!7024 = !{!"0x14097400.w1024.b0", !7025, i64 0}
!7025 = !{!"int64", !7026, i64 0}
!7026 = !{!"0x14097400", !8, i64 0}
!7027 = !{!7028, !7028, i64 0}
!7028 = !{!"0x14097400.w1.b1", !7015, i64 0}
!7029 = !{!7030, !7030, i64 0}
!7030 = !{!"0x14097400.w1.b2", !7031, i64 0}
!7031 = !{!"0x14097400.w2.b2", !7016, i64 0}
!7032 = !{!7033, !7033, i64 0}
!7033 = !{!"0x14097400.w1.b3", !7031, i64 0}
!7034 = !{!7035, !7035, i64 0}
!7035 = !{!"0x14097400.w1.b4", !7036, i64 0}
!7036 = !{!"0x14097400.w2.b4", !7037, i64 0}
!7037 = !{!"0x14097400.w4.b4", !7017, i64 0}
!7038 = !{!7039, !7039, i64 0}
!7039 = !{!"0x14091bd0.w8.b0", !7040, i64 0}
!7040 = !{!"0x14091bd0.w16.b0", !7041, i64 0}
!7041 = !{!"0x14091bd0.w32.b0", !7042, i64 0}
!7042 = !{!"0x14091bd0.w64.b0", !7043, i64 0}
!7043 = !{!"0x14091bd0.w128.b0", !7044, i64 0}
!7044 = !{!"0x14091bd0.w256.b0", !7045, i64 0}
!7045 = !{!"0x14091bd0.w512.b0", !7046, i64 0}
!7046 = !{!"0x14091bd0.w1024.b0", !7047, i64 0}
!7047 = !{!"int64", !7048, i64 0}
!7048 = !{!"0x14091bd0", !8, i64 0}
!7049 = !{!7050, !7050, i64 0}
!7050 = !{!"0x14091bd0.w1.b0", !7051, i64 0}
!7051 = !{!"0x14091bd0.w2.b0", !7052, i64 0}
!7052 = !{!"0x14091bd0.w4.b0", !7039, i64 0}
!7053 = !{!7054, !7054, i64 0}
!7054 = !{!"0x14097670.w1.b0", !7055, i64 0}
!7055 = !{!"0x14097670.w2.b0", !7056, i64 0}
!7056 = !{!"0x14097670.w4.b0", !7057, i64 0}
!7057 = !{!"0x14097670.w8.b0", !7058, i64 0}
!7058 = !{!"0x14097670.w16.b0", !7059, i64 0}
!7059 = !{!"0x14097670.w32.b0", !7060, i64 0}
!7060 = !{!"0x14097670.w64.b0", !7061, i64 0}
!7061 = !{!"0x14097670.w128.b0", !7062, i64 0}
!7062 = !{!"0x14097670.w256.b0", !7063, i64 0}
!7063 = !{!"0x14097670.w512.b0", !7064, i64 0}
!7064 = !{!"0x14097670.w1024.b0", !7065, i64 0}
!7065 = !{!"int64", !7066, i64 0}
!7066 = !{!"0x14097670", !8, i64 0}
!7067 = !{!7068, !7068, i64 0}
!7068 = !{!"0x14097670.w1.b1", !7055, i64 0}
!7069 = !{!7070, !7070, i64 0}
!7070 = !{!"0x14097670.w1.b2", !7071, i64 0}
!7071 = !{!"0x14097670.w2.b2", !7056, i64 0}
!7072 = !{!7073, !7073, i64 0}
!7073 = !{!"0x14097670.w1.b3", !7071, i64 0}
!7074 = !{!7075, !7075, i64 0}
!7075 = !{!"0x14097670.w1.b4", !7076, i64 0}
!7076 = !{!"0x14097670.w2.b4", !7077, i64 0}
!7077 = !{!"0x14097670.w4.b4", !7057, i64 0}
!7078 = !{!7079, !7079, i64 0}
!7079 = !{!"0x14097670.w1.b5", !7076, i64 0}
!7080 = !{!7081, !7081, i64 0}
!7081 = !{!"0x140976c0.w8.b0", !7082, i64 0}
!7082 = !{!"0x140976c0.w16.b0", !7083, i64 0}
!7083 = !{!"0x140976c0.w32.b0", !7084, i64 0}
!7084 = !{!"0x140976c0.w64.b0", !7085, i64 0}
!7085 = !{!"0x140976c0.w128.b0", !7086, i64 0}
!7086 = !{!"0x140976c0.w256.b0", !7087, i64 0}
!7087 = !{!"0x140976c0.w512.b0", !7088, i64 0}
!7088 = !{!"0x140976c0.w1024.b0", !7089, i64 0}
!7089 = !{!"int64", !7090, i64 0}
!7090 = !{!"0x140976c0", !8, i64 0}
!7091 = !{!7092, !7092, i64 0}
!7092 = !{!"0x140976c0.w1.b1", !7093, i64 0}
!7093 = !{!"0x140976c0.w2.b0", !7094, i64 0}
!7094 = !{!"0x140976c0.w4.b0", !7081, i64 0}
!7095 = !{!7096, !7096, i64 0}
!7096 = !{!"0x140976c0.w1.b0", !7093, i64 0}
!7097 = !{!7098, !7098, i64 0}
!7098 = !{!"0x14098ef0.w1.b0", !7099, i64 0}
!7099 = !{!"0x14098ef0.w2.b0", !7100, i64 0}
!7100 = !{!"0x14098ef0.w4.b0", !7101, i64 0}
!7101 = !{!"0x14098ef0.w8.b0", !7102, i64 0}
!7102 = !{!"0x14098ef0.w16.b0", !7103, i64 0}
!7103 = !{!"0x14098ef0.w32.b0", !7104, i64 0}
!7104 = !{!"0x14098ef0.w64.b0", !7105, i64 0}
!7105 = !{!"0x14098ef0.w128.b0", !7106, i64 0}
!7106 = !{!"0x14098ef0.w256.b0", !7107, i64 0}
!7107 = !{!"0x14098ef0.w512.b0", !7108, i64 0}
!7108 = !{!"0x14098ef0.w1024.b0", !7109, i64 0}
!7109 = !{!"int64", !7110, i64 0}
!7110 = !{!"0x14098ef0", !8, i64 0}
!7111 = !{!7112, !7112, i64 0}
!7112 = !{!"0x14098ef0.w1.b1", !7099, i64 0}
!7113 = !{!7114, !7114, i64 0}
!7114 = !{!"0x14098ef0.w1.b2", !7115, i64 0}
!7115 = !{!"0x14098ef0.w2.b2", !7100, i64 0}
!7116 = !{!7117, !7117, i64 0}
!7117 = !{!"0x14098ef0.w1.b3", !7115, i64 0}
!7118 = !{!7119, !7119, i64 0}
!7119 = !{!"0x14098ef0.w1.b4", !7120, i64 0}
!7120 = !{!"0x14098ef0.w2.b4", !7121, i64 0}
!7121 = !{!"0x14098ef0.w4.b4", !7101, i64 0}
!7122 = !{!7123, !7123, i64 0}
!7123 = !{!"0x1409a690.w8.b0", !7124, i64 0}
!7124 = !{!"0x1409a690.w16.b0", !7125, i64 0}
!7125 = !{!"0x1409a690.w32.b0", !7126, i64 0}
!7126 = !{!"0x1409a690.w64.b0", !7127, i64 0}
!7127 = !{!"0x1409a690.w128.b0", !7128, i64 0}
!7128 = !{!"0x1409a690.w256.b0", !7129, i64 0}
!7129 = !{!"0x1409a690.w512.b0", !7130, i64 0}
!7130 = !{!"0x1409a690.w1024.b0", !7131, i64 0}
!7131 = !{!"int64", !7132, i64 0}
!7132 = !{!"0x1409a690", !8, i64 0}
!7133 = !{!7134, !7134, i64 0}
!7134 = !{!"0x1409a690.w1.b0", !7135, i64 0}
!7135 = !{!"0x1409a690.w2.b0", !7136, i64 0}
!7136 = !{!"0x1409a690.w4.b0", !7123, i64 0}
!7137 = !{!7138, !7138, i64 0}
!7138 = !{!"0x1409baf0.w1.b0", !7139, i64 0}
!7139 = !{!"0x1409baf0.w2.b0", !7140, i64 0}
!7140 = !{!"0x1409baf0.w4.b0", !7141, i64 0}
!7141 = !{!"0x1409baf0.w8.b0", !7142, i64 0}
!7142 = !{!"0x1409baf0.w16.b0", !7143, i64 0}
!7143 = !{!"0x1409baf0.w32.b0", !7144, i64 0}
!7144 = !{!"0x1409baf0.w64.b0", !7145, i64 0}
!7145 = !{!"0x1409baf0.w128.b0", !7146, i64 0}
!7146 = !{!"0x1409baf0.w256.b0", !7147, i64 0}
!7147 = !{!"0x1409baf0.w512.b0", !7148, i64 0}
!7148 = !{!"0x1409baf0.w1024.b0", !7149, i64 0}
!7149 = !{!"int64", !7150, i64 0}
!7150 = !{!"0x1409baf0", !8, i64 0}
!7151 = !{!7152, !7152, i64 0}
!7152 = !{!"0x1409baf0.w1.b1", !7139, i64 0}
!7153 = !{!7154, !7154, i64 0}
!7154 = !{!"0x1409baf0.w1.b2", !7155, i64 0}
!7155 = !{!"0x1409baf0.w2.b2", !7140, i64 0}
!7156 = !{!7157, !7157, i64 0}
!7157 = !{!"0x1409baf0.w1.b3", !7155, i64 0}
!7158 = !{!7159, !7159, i64 0}
!7159 = !{!"0x1409baf0.w1.b4", !7160, i64 0}
!7160 = !{!"0x1409baf0.w2.b4", !7161, i64 0}
!7161 = !{!"0x1409baf0.w4.b4", !7141, i64 0}
!7162 = !{!7163, !7163, i64 0}
!7163 = !{!"0x1409bb40.w8.b0", !7164, i64 0}
!7164 = !{!"0x1409bb40.w16.b0", !7165, i64 0}
!7165 = !{!"0x1409bb40.w32.b0", !7166, i64 0}
!7166 = !{!"0x1409bb40.w64.b0", !7167, i64 0}
!7167 = !{!"0x1409bb40.w128.b0", !7168, i64 0}
!7168 = !{!"0x1409bb40.w256.b0", !7169, i64 0}
!7169 = !{!"0x1409bb40.w512.b0", !7170, i64 0}
!7170 = !{!"0x1409bb40.w1024.b0", !7171, i64 0}
!7171 = !{!"int64", !7172, i64 0}
!7172 = !{!"0x1409bb40", !8, i64 0}
!7173 = !{!7174, !7174, i64 0}
!7174 = !{!"0x1409bb40.w1.b0", !7175, i64 0}
!7175 = !{!"0x1409bb40.w2.b0", !7176, i64 0}
!7176 = !{!"0x1409bb40.w4.b0", !7163, i64 0}
!7177 = !{!7178, !7178, i64 0}
!7178 = !{!"0x1409cf50.w1.b0", !7179, i64 0}
!7179 = !{!"0x1409cf50.w2.b0", !7180, i64 0}
!7180 = !{!"0x1409cf50.w4.b0", !7181, i64 0}
!7181 = !{!"0x1409cf50.w8.b0", !7182, i64 0}
!7182 = !{!"0x1409cf50.w16.b0", !7183, i64 0}
!7183 = !{!"0x1409cf50.w32.b0", !7184, i64 0}
!7184 = !{!"0x1409cf50.w64.b0", !7185, i64 0}
!7185 = !{!"0x1409cf50.w128.b0", !7186, i64 0}
!7186 = !{!"0x1409cf50.w256.b0", !7187, i64 0}
!7187 = !{!"0x1409cf50.w512.b0", !7188, i64 0}
!7188 = !{!"0x1409cf50.w1024.b0", !7189, i64 0}
!7189 = !{!"int64", !7190, i64 0}
!7190 = !{!"0x1409cf50", !8, i64 0}
!7191 = !{!7192, !7192, i64 0}
!7192 = !{!"0x1409cf50.w1.b1", !7179, i64 0}
!7193 = !{!7194, !7194, i64 0}
!7194 = !{!"0x1409cf50.w1.b2", !7195, i64 0}
!7195 = !{!"0x1409cf50.w2.b2", !7180, i64 0}
!7196 = !{!7197, !7197, i64 0}
!7197 = !{!"0x1409cf50.w1.b3", !7195, i64 0}
!7198 = !{!7199, !7199, i64 0}
!7199 = !{!"0x1409cf50.w1.b4", !7200, i64 0}
!7200 = !{!"0x1409cf50.w2.b4", !7201, i64 0}
!7201 = !{!"0x1409cf50.w4.b4", !7181, i64 0}
!7202 = !{!7203, !7203, i64 0}
!7203 = !{!"0x1409e6c0.w8.b0", !7204, i64 0}
!7204 = !{!"0x1409e6c0.w16.b0", !7205, i64 0}
!7205 = !{!"0x1409e6c0.w32.b0", !7206, i64 0}
!7206 = !{!"0x1409e6c0.w64.b0", !7207, i64 0}
!7207 = !{!"0x1409e6c0.w128.b0", !7208, i64 0}
!7208 = !{!"0x1409e6c0.w256.b0", !7209, i64 0}
!7209 = !{!"0x1409e6c0.w512.b0", !7210, i64 0}
!7210 = !{!"0x1409e6c0.w1024.b0", !7211, i64 0}
!7211 = !{!"int64", !7212, i64 0}
!7212 = !{!"0x1409e6c0", !8, i64 0}
!7213 = !{!7214, !7214, i64 0}
!7214 = !{!"0x1409e6c0.w1.b0", !7215, i64 0}
!7215 = !{!"0x1409e6c0.w2.b0", !7216, i64 0}
!7216 = !{!"0x1409e6c0.w4.b0", !7203, i64 0}
!7217 = !{!7218, !7218, i64 0}
!7218 = !{!"float32", !7219, i64 0}
!7219 = !{!"0x1408ebc0", !8, i64 0}
!7220 = !{!7221, !7221, i64 0}
!7221 = !{!"float32", !7222, i64 0}
!7222 = !{!"0x1408e6c0", !8, i64 0}
!7223 = !{!7224, !7224, i64 0}
!7224 = !{!"float32", !7225, i64 0}
!7225 = !{!"0x1408e9d0", !8, i64 0}
!7226 = !{!7227, !7227, i64 0}
!7227 = !{!"float32", !7228, i64 0}
!7228 = !{!"0x140880f0", !8, i64 0}
!7229 = !{!7230, !7230, i64 0}
!7230 = !{!"float32", !7231, i64 0}
!7231 = !{!"0x1408a440", !8, i64 0}
!7232 = !{!7233, !7233, i64 0}
!7233 = !{!"float32", !7234, i64 0}
!7234 = !{!"0x1408e580", !8, i64 0}
!7235 = !{!7236, !7236, i64 0}
!7236 = !{!"0x7a87e80.w1.b0", !7237, i64 0}
!7237 = !{!"0x7a87e80.w2.b0", !7238, i64 0}
!7238 = !{!"0x7a87e80.w4.b0", !7239, i64 0}
!7239 = !{!"0x7a87e80.w8.b0", !7240, i64 0}
!7240 = !{!"0x7a87e80.w16.b0", !7241, i64 0}
!7241 = !{!"0x7a87e80.w32.b0", !7242, i64 0}
!7242 = !{!"0x7a87e80.w64.b0", !7243, i64 0}
!7243 = !{!"0x7a87e80.w128.b0", !7244, i64 0}
!7244 = !{!"0x7a87e80.w256.b0", !7245, i64 0}
!7245 = !{!"0x7a87e80.w512.b0", !7246, i64 0}
!7246 = !{!"0x7a87e80.w1024.b0", !7247, i64 0}
!7247 = !{!"int32", !7248, i64 0}
!7248 = !{!"0x7a87e80", !8, i64 0}
!7249 = !{!7250, !7250, i64 0}
!7250 = !{!"0x7a87e80.w1.b1", !7237, i64 0}
!7251 = !{!7252, !7252, i64 0}
!7252 = !{!"0x7a88d40.w1.b0", !7253, i64 0}
!7253 = !{!"0x7a88d40.w2.b0", !7254, i64 0}
!7254 = !{!"0x7a88d40.w4.b0", !7255, i64 0}
!7255 = !{!"0x7a88d40.w8.b0", !7256, i64 0}
!7256 = !{!"0x7a88d40.w16.b0", !7257, i64 0}
!7257 = !{!"0x7a88d40.w32.b0", !7258, i64 0}
!7258 = !{!"0x7a88d40.w64.b0", !7259, i64 0}
!7259 = !{!"0x7a88d40.w128.b0", !7260, i64 0}
!7260 = !{!"0x7a88d40.w256.b0", !7261, i64 0}
!7261 = !{!"0x7a88d40.w512.b0", !7262, i64 0}
!7262 = !{!"0x7a88d40.w1024.b0", !7263, i64 0}
!7263 = !{!"int64", !7264, i64 0}
!7264 = !{!"0x7a88d40", !8, i64 0}
!7265 = !{!7266, !7266, i64 0}
!7266 = !{!"0x7a88d40.w1.b1", !7253, i64 0}
!7267 = !{!7268, !7268, i64 0}
!7268 = !{!"0x7a88d40.w1.b2", !7269, i64 0}
!7269 = !{!"0x7a88d40.w2.b2", !7254, i64 0}
!7270 = !{!7271, !7271, i64 0}
!7271 = !{!"0x7a88d40.w1.b3", !7269, i64 0}
!7272 = !{!7273, !7273, i64 0}
!7273 = !{!"0x7a88d40.w1.b4", !7274, i64 0}
!7274 = !{!"0x7a88d40.w2.b4", !7275, i64 0}
!7275 = !{!"0x7a88d40.w4.b4", !7255, i64 0}
!7276 = !{!7277, !7277, i64 0}
!7277 = !{!"0x7a89300.w8.b0", !7278, i64 0}
!7278 = !{!"0x7a89300.w16.b0", !7279, i64 0}
!7279 = !{!"0x7a89300.w32.b0", !7280, i64 0}
!7280 = !{!"0x7a89300.w64.b0", !7281, i64 0}
!7281 = !{!"0x7a89300.w128.b0", !7282, i64 0}
!7282 = !{!"0x7a89300.w256.b0", !7283, i64 0}
!7283 = !{!"0x7a89300.w512.b0", !7284, i64 0}
!7284 = !{!"0x7a89300.w1024.b0", !7285, i64 0}
!7285 = !{!"int64", !7286, i64 0}
!7286 = !{!"0x7a89300", !8, i64 0}
!7287 = !{!7288, !7288, i64 0}
!7288 = !{!"0x7a89300.w1.b0", !7289, i64 0}
!7289 = !{!"0x7a89300.w2.b0", !7290, i64 0}
!7290 = !{!"0x7a89300.w4.b0", !7277, i64 0}
!7291 = !{!7292, !7292, i64 0}
!7292 = !{!"0x7a89550.w1.b0", !7293, i64 0}
!7293 = !{!"0x7a89550.w2.b0", !7294, i64 0}
!7294 = !{!"0x7a89550.w4.b0", !7295, i64 0}
!7295 = !{!"0x7a89550.w8.b0", !7296, i64 0}
!7296 = !{!"0x7a89550.w16.b0", !7297, i64 0}
!7297 = !{!"0x7a89550.w32.b0", !7298, i64 0}
!7298 = !{!"0x7a89550.w64.b0", !7299, i64 0}
!7299 = !{!"0x7a89550.w128.b0", !7300, i64 0}
!7300 = !{!"0x7a89550.w256.b0", !7301, i64 0}
!7301 = !{!"0x7a89550.w512.b0", !7302, i64 0}
!7302 = !{!"0x7a89550.w1024.b0", !7303, i64 0}
!7303 = !{!"int64", !7304, i64 0}
!7304 = !{!"0x7a89550", !8, i64 0}
!7305 = !{!7306, !7306, i64 0}
!7306 = !{!"0x7a89550.w1.b1", !7293, i64 0}
!7307 = !{!7308, !7308, i64 0}
!7308 = !{!"0x7a89550.w1.b2", !7309, i64 0}
!7309 = !{!"0x7a89550.w2.b2", !7294, i64 0}
!7310 = !{!7311, !7311, i64 0}
!7311 = !{!"0x7a89550.w1.b3", !7309, i64 0}
!7312 = !{!7313, !7313, i64 0}
!7313 = !{!"0x7a89550.w1.b4", !7314, i64 0}
!7314 = !{!"0x7a89550.w2.b4", !7315, i64 0}
!7315 = !{!"0x7a89550.w4.b4", !7295, i64 0}
!7316 = !{!7317, !7317, i64 0}
!7317 = !{!"0x7a88f70.w8.b0", !7318, i64 0}
!7318 = !{!"0x7a88f70.w16.b0", !7319, i64 0}
!7319 = !{!"0x7a88f70.w32.b0", !7320, i64 0}
!7320 = !{!"0x7a88f70.w64.b0", !7321, i64 0}
!7321 = !{!"0x7a88f70.w128.b0", !7322, i64 0}
!7322 = !{!"0x7a88f70.w256.b0", !7323, i64 0}
!7323 = !{!"0x7a88f70.w512.b0", !7324, i64 0}
!7324 = !{!"0x7a88f70.w1024.b0", !7325, i64 0}
!7325 = !{!"int64", !7326, i64 0}
!7326 = !{!"0x7a88f70", !8, i64 0}
!7327 = !{!7328, !7328, i64 0}
!7328 = !{!"0x7a88f70.w1.b0", !7329, i64 0}
!7329 = !{!"0x7a88f70.w2.b0", !7330, i64 0}
!7330 = !{!"0x7a88f70.w4.b0", !7317, i64 0}
!7331 = !{!7332, !7332, i64 0}
!7332 = !{!"float32", !7333, i64 0}
!7333 = !{!"0x7a864a0", !8, i64 0}
!7334 = !{!7335, !7335, i64 0}
!7335 = !{!"float32", !7336, i64 0}
!7336 = !{!"0x7a79900", !8, i64 0}
!7337 = !{!7338, !7338, i64 0}
!7338 = !{!"0x14021ba0.w1.b0", !7339, i64 0}
!7339 = !{!"0x14021ba0.w2.b0", !7340, i64 0}
!7340 = !{!"0x14021ba0.w4.b0", !7341, i64 0}
!7341 = !{!"0x14021ba0.w8.b0", !7342, i64 0}
!7342 = !{!"0x14021ba0.w16.b0", !7343, i64 0}
!7343 = !{!"0x14021ba0.w32.b0", !7344, i64 0}
!7344 = !{!"0x14021ba0.w64.b0", !7345, i64 0}
!7345 = !{!"0x14021ba0.w128.b0", !7346, i64 0}
!7346 = !{!"0x14021ba0.w256.b0", !7347, i64 0}
!7347 = !{!"0x14021ba0.w512.b0", !7348, i64 0}
!7348 = !{!"0x14021ba0.w1024.b0", !7349, i64 0}
!7349 = !{!"int32", !7350, i64 0}
!7350 = !{!"0x14021ba0", !8, i64 0}
!7351 = !{!7352, !7352, i64 0}
!7352 = !{!"0x14021ba0.w1.b2", !7353, i64 0}
!7353 = !{!"0x14021ba0.w2.b2", !7340, i64 0}
!7354 = !{!7355, !7355, i64 0}
!7355 = !{!"0x14021ba0.w1.b3", !7353, i64 0}
!7356 = !{!7357, !7357, i64 0}
!7357 = !{!"0x14021ba0.w1.b4", !7358, i64 0}
!7358 = !{!"0x14021ba0.w2.b4", !7359, i64 0}
!7359 = !{!"0x14021ba0.w4.b4", !7341, i64 0}
!7360 = !{!7361, !7361, i64 0}
!7361 = !{!"0x14021ba0.w1.b1", !7339, i64 0}
!7362 = !{!7363, !7363, i64 0}
!7363 = !{!"0x13f87dd0.w1.b0", !7364, i64 0}
!7364 = !{!"0x13f87dd0.w2.b0", !7365, i64 0}
!7365 = !{!"0x13f87dd0.w4.b0", !7366, i64 0}
!7366 = !{!"0x13f87dd0.w8.b0", !7367, i64 0}
!7367 = !{!"0x13f87dd0.w16.b0", !7368, i64 0}
!7368 = !{!"0x13f87dd0.w32.b0", !7369, i64 0}
!7369 = !{!"0x13f87dd0.w64.b0", !7370, i64 0}
!7370 = !{!"0x13f87dd0.w128.b0", !7371, i64 0}
!7371 = !{!"0x13f87dd0.w256.b0", !7372, i64 0}
!7372 = !{!"0x13f87dd0.w512.b0", !7373, i64 0}
!7373 = !{!"0x13f87dd0.w1024.b0", !7374, i64 0}
!7374 = !{!"int64", !7375, i64 0}
!7375 = !{!"0x13f87dd0", !8, i64 0}
!7376 = !{!7377, !7377, i64 0}
!7377 = !{!"0x13f87dd0.w1.b1", !7364, i64 0}
!7378 = !{!7379, !7379, i64 0}
!7379 = !{!"0x13f87dd0.w1.b2", !7380, i64 0}
!7380 = !{!"0x13f87dd0.w2.b2", !7365, i64 0}
!7381 = !{!7382, !7382, i64 0}
!7382 = !{!"0x13f87dd0.w1.b3", !7380, i64 0}
!7383 = !{!7384, !7384, i64 0}
!7384 = !{!"0x13f87dd0.w1.b4", !7385, i64 0}
!7385 = !{!"0x13f87dd0.w2.b4", !7386, i64 0}
!7386 = !{!"0x13f87dd0.w4.b4", !7366, i64 0}
!7387 = !{!7388, !7388, i64 0}
!7388 = !{!"0x14053750.w8.b0", !7389, i64 0}
!7389 = !{!"0x14053750.w16.b0", !7390, i64 0}
!7390 = !{!"0x14053750.w32.b0", !7391, i64 0}
!7391 = !{!"0x14053750.w64.b0", !7392, i64 0}
!7392 = !{!"0x14053750.w128.b0", !7393, i64 0}
!7393 = !{!"0x14053750.w256.b0", !7394, i64 0}
!7394 = !{!"0x14053750.w512.b0", !7395, i64 0}
!7395 = !{!"0x14053750.w1024.b0", !7396, i64 0}
!7396 = !{!"int64", !7397, i64 0}
!7397 = !{!"0x14053750", !8, i64 0}
!7398 = !{!7399, !7399, i64 0}
!7399 = !{!"0x14053750.w1.b0", !7400, i64 0}
!7400 = !{!"0x14053750.w2.b0", !7401, i64 0}
!7401 = !{!"0x14053750.w4.b0", !7388, i64 0}
!7402 = !{!7403, !7403, i64 0}
!7403 = !{!"0x14019950.w1.b0", !7404, i64 0}
!7404 = !{!"0x14019950.w2.b0", !7405, i64 0}
!7405 = !{!"0x14019950.w4.b0", !7406, i64 0}
!7406 = !{!"0x14019950.w8.b0", !7407, i64 0}
!7407 = !{!"0x14019950.w16.b0", !7408, i64 0}
!7408 = !{!"0x14019950.w32.b0", !7409, i64 0}
!7409 = !{!"0x14019950.w64.b0", !7410, i64 0}
!7410 = !{!"0x14019950.w128.b0", !7411, i64 0}
!7411 = !{!"0x14019950.w256.b0", !7412, i64 0}
!7412 = !{!"0x14019950.w512.b0", !7413, i64 0}
!7413 = !{!"0x14019950.w1024.b0", !7414, i64 0}
!7414 = !{!"int64", !7415, i64 0}
!7415 = !{!"0x14019950", !8, i64 0}
!7416 = !{!7417, !7417, i64 0}
!7417 = !{!"0x14019950.w1.b1", !7404, i64 0}
!7418 = !{!7419, !7419, i64 0}
!7419 = !{!"0x14019950.w1.b2", !7420, i64 0}
!7420 = !{!"0x14019950.w2.b2", !7405, i64 0}
!7421 = !{!7422, !7422, i64 0}
!7422 = !{!"0x14019950.w1.b3", !7420, i64 0}
!7423 = !{!7424, !7424, i64 0}
!7424 = !{!"0x14019950.w1.b4", !7425, i64 0}
!7425 = !{!"0x14019950.w2.b4", !7426, i64 0}
!7426 = !{!"0x14019950.w4.b4", !7406, i64 0}
!7427 = !{!7428, !7428, i64 0}
!7428 = !{!"0x14019950.w1.b5", !7425, i64 0}
!7429 = !{!7430, !7430, i64 0}
!7430 = !{!"0x1404d5c0.w8.b0", !7431, i64 0}
!7431 = !{!"0x1404d5c0.w16.b0", !7432, i64 0}
!7432 = !{!"0x1404d5c0.w32.b0", !7433, i64 0}
!7433 = !{!"0x1404d5c0.w64.b0", !7434, i64 0}
!7434 = !{!"0x1404d5c0.w128.b0", !7435, i64 0}
!7435 = !{!"0x1404d5c0.w256.b0", !7436, i64 0}
!7436 = !{!"0x1404d5c0.w512.b0", !7437, i64 0}
!7437 = !{!"0x1404d5c0.w1024.b0", !7438, i64 0}
!7438 = !{!"int64", !7439, i64 0}
!7439 = !{!"0x1404d5c0", !8, i64 0}
!7440 = !{!7441, !7441, i64 0}
!7441 = !{!"0x1404d5c0.w1.b1", !7442, i64 0}
!7442 = !{!"0x1404d5c0.w2.b0", !7443, i64 0}
!7443 = !{!"0x1404d5c0.w4.b0", !7430, i64 0}
!7444 = !{!7445, !7445, i64 0}
!7445 = !{!"0x1404d5c0.w1.b0", !7442, i64 0}
!7446 = !{!7447, !7447, i64 0}
!7447 = !{!"0x140569d0.w1.b0", !7448, i64 0}
!7448 = !{!"0x140569d0.w2.b0", !7449, i64 0}
!7449 = !{!"0x140569d0.w4.b0", !7450, i64 0}
!7450 = !{!"0x140569d0.w8.b0", !7451, i64 0}
!7451 = !{!"0x140569d0.w16.b0", !7452, i64 0}
!7452 = !{!"0x140569d0.w32.b0", !7453, i64 0}
!7453 = !{!"0x140569d0.w64.b0", !7454, i64 0}
!7454 = !{!"0x140569d0.w128.b0", !7455, i64 0}
!7455 = !{!"0x140569d0.w256.b0", !7456, i64 0}
!7456 = !{!"0x140569d0.w512.b0", !7457, i64 0}
!7457 = !{!"0x140569d0.w1024.b0", !7458, i64 0}
!7458 = !{!"int64", !7459, i64 0}
!7459 = !{!"0x140569d0", !8, i64 0}
!7460 = !{!7461, !7461, i64 0}
!7461 = !{!"0x140569d0.w1.b1", !7448, i64 0}
!7462 = !{!7463, !7463, i64 0}
!7463 = !{!"0x140569d0.w1.b2", !7464, i64 0}
!7464 = !{!"0x140569d0.w2.b2", !7449, i64 0}
!7465 = !{!7466, !7466, i64 0}
!7466 = !{!"0x140569d0.w1.b3", !7464, i64 0}
!7467 = !{!7468, !7468, i64 0}
!7468 = !{!"0x140569d0.w1.b4", !7469, i64 0}
!7469 = !{!"0x140569d0.w2.b4", !7470, i64 0}
!7470 = !{!"0x140569d0.w4.b4", !7450, i64 0}
!7471 = !{!7472, !7472, i64 0}
!7472 = !{!"0x13f88420.w8.b0", !7473, i64 0}
!7473 = !{!"0x13f88420.w16.b0", !7474, i64 0}
!7474 = !{!"0x13f88420.w32.b0", !7475, i64 0}
!7475 = !{!"0x13f88420.w64.b0", !7476, i64 0}
!7476 = !{!"0x13f88420.w128.b0", !7477, i64 0}
!7477 = !{!"0x13f88420.w256.b0", !7478, i64 0}
!7478 = !{!"0x13f88420.w512.b0", !7479, i64 0}
!7479 = !{!"0x13f88420.w1024.b0", !7480, i64 0}
!7480 = !{!"int64", !7481, i64 0}
!7481 = !{!"0x13f88420", !8, i64 0}
!7482 = !{!7483, !7483, i64 0}
!7483 = !{!"0x13f88420.w1.b0", !7484, i64 0}
!7484 = !{!"0x13f88420.w2.b0", !7485, i64 0}
!7485 = !{!"0x13f88420.w4.b0", !7472, i64 0}
!7486 = !{!7487, !7487, i64 0}
!7487 = !{!"0x13f89840.w1.b0", !7488, i64 0}
!7488 = !{!"0x13f89840.w2.b0", !7489, i64 0}
!7489 = !{!"0x13f89840.w4.b0", !7490, i64 0}
!7490 = !{!"0x13f89840.w8.b0", !7491, i64 0}
!7491 = !{!"0x13f89840.w16.b0", !7492, i64 0}
!7492 = !{!"0x13f89840.w32.b0", !7493, i64 0}
!7493 = !{!"0x13f89840.w64.b0", !7494, i64 0}
!7494 = !{!"0x13f89840.w128.b0", !7495, i64 0}
!7495 = !{!"0x13f89840.w256.b0", !7496, i64 0}
!7496 = !{!"0x13f89840.w512.b0", !7497, i64 0}
!7497 = !{!"0x13f89840.w1024.b0", !7498, i64 0}
!7498 = !{!"int64", !7499, i64 0}
!7499 = !{!"0x13f89840", !8, i64 0}
!7500 = !{!7501, !7501, i64 0}
!7501 = !{!"0x13f89840.w1.b1", !7488, i64 0}
!7502 = !{!7503, !7503, i64 0}
!7503 = !{!"0x13f89840.w1.b2", !7504, i64 0}
!7504 = !{!"0x13f89840.w2.b2", !7489, i64 0}
!7505 = !{!7506, !7506, i64 0}
!7506 = !{!"0x13f89840.w1.b3", !7504, i64 0}
!7507 = !{!7508, !7508, i64 0}
!7508 = !{!"0x13f89840.w1.b4", !7509, i64 0}
!7509 = !{!"0x13f89840.w2.b4", !7510, i64 0}
!7510 = !{!"0x13f89840.w4.b4", !7490, i64 0}
!7511 = !{!7512, !7512, i64 0}
!7512 = !{!"0x13f89890.w8.b0", !7513, i64 0}
!7513 = !{!"0x13f89890.w16.b0", !7514, i64 0}
!7514 = !{!"0x13f89890.w32.b0", !7515, i64 0}
!7515 = !{!"0x13f89890.w64.b0", !7516, i64 0}
!7516 = !{!"0x13f89890.w128.b0", !7517, i64 0}
!7517 = !{!"0x13f89890.w256.b0", !7518, i64 0}
!7518 = !{!"0x13f89890.w512.b0", !7519, i64 0}
!7519 = !{!"0x13f89890.w1024.b0", !7520, i64 0}
!7520 = !{!"int64", !7521, i64 0}
!7521 = !{!"0x13f89890", !8, i64 0}
!7522 = !{!7523, !7523, i64 0}
!7523 = !{!"0x13f89890.w1.b0", !7524, i64 0}
!7524 = !{!"0x13f89890.w2.b0", !7525, i64 0}
!7525 = !{!"0x13f89890.w4.b0", !7512, i64 0}
!7526 = !{!7527, !7527, i64 0}
!7527 = !{!"0x13f8aca0.w1.b0", !7528, i64 0}
!7528 = !{!"0x13f8aca0.w2.b0", !7529, i64 0}
!7529 = !{!"0x13f8aca0.w4.b0", !7530, i64 0}
!7530 = !{!"0x13f8aca0.w8.b0", !7531, i64 0}
!7531 = !{!"0x13f8aca0.w16.b0", !7532, i64 0}
!7532 = !{!"0x13f8aca0.w32.b0", !7533, i64 0}
!7533 = !{!"0x13f8aca0.w64.b0", !7534, i64 0}
!7534 = !{!"0x13f8aca0.w128.b0", !7535, i64 0}
!7535 = !{!"0x13f8aca0.w256.b0", !7536, i64 0}
!7536 = !{!"0x13f8aca0.w512.b0", !7537, i64 0}
!7537 = !{!"0x13f8aca0.w1024.b0", !7538, i64 0}
!7538 = !{!"int64", !7539, i64 0}
!7539 = !{!"0x13f8aca0", !8, i64 0}
!7540 = !{!7541, !7541, i64 0}
!7541 = !{!"0x13f8aca0.w1.b1", !7528, i64 0}
!7542 = !{!7543, !7543, i64 0}
!7543 = !{!"0x13f8aca0.w1.b2", !7544, i64 0}
!7544 = !{!"0x13f8aca0.w2.b2", !7529, i64 0}
!7545 = !{!7546, !7546, i64 0}
!7546 = !{!"0x13f8aca0.w1.b3", !7544, i64 0}
!7547 = !{!7548, !7548, i64 0}
!7548 = !{!"0x13f8aca0.w1.b4", !7549, i64 0}
!7549 = !{!"0x13f8aca0.w2.b4", !7550, i64 0}
!7550 = !{!"0x13f8aca0.w4.b4", !7530, i64 0}
!7551 = !{!7552, !7552, i64 0}
!7552 = !{!"0x13f8c410.w8.b0", !7553, i64 0}
!7553 = !{!"0x13f8c410.w16.b0", !7554, i64 0}
!7554 = !{!"0x13f8c410.w32.b0", !7555, i64 0}
!7555 = !{!"0x13f8c410.w64.b0", !7556, i64 0}
!7556 = !{!"0x13f8c410.w128.b0", !7557, i64 0}
!7557 = !{!"0x13f8c410.w256.b0", !7558, i64 0}
!7558 = !{!"0x13f8c410.w512.b0", !7559, i64 0}
!7559 = !{!"0x13f8c410.w1024.b0", !7560, i64 0}
!7560 = !{!"int64", !7561, i64 0}
!7561 = !{!"0x13f8c410", !8, i64 0}
!7562 = !{!7563, !7563, i64 0}
!7563 = !{!"0x13f8c410.w1.b0", !7564, i64 0}
!7564 = !{!"0x13f8c410.w2.b0", !7565, i64 0}
!7565 = !{!"0x13f8c410.w4.b0", !7552, i64 0}
!7566 = !{!7567, !7567, i64 0}
!7567 = !{!"float32", !7568, i64 0}
!7568 = !{!"0x1404ea90", !8, i64 0}
!7569 = !{!7570, !7570, i64 0}
!7570 = !{!"float32", !7571, i64 0}
!7571 = !{!"0x1404b520", !8, i64 0}
!7572 = !{!7573, !7573, i64 0}
!7573 = !{!"float32", !7574, i64 0}
!7574 = !{!"0x1404e4a0", !8, i64 0}
!7575 = !{!7576, !7576, i64 0}
!7576 = !{!"float32", !7577, i64 0}
!7577 = !{!"0x1404e3a0", !8, i64 0}
!7578 = !{!7579, !7579, i64 0}
!7579 = !{!"float32", !7580, i64 0}
!7580 = !{!"0x1404e5d0", !8, i64 0}
!7581 = !{!7582, !7582, i64 0}
!7582 = !{!"float32", !7583, i64 0}
!7583 = !{!"0x14049c20", !8, i64 0}
!7584 = !{!7585, !7585, i64 0}
!7585 = !{!"float32", !7586, i64 0}
!7586 = !{!"0x14049cc0", !8, i64 0}
!7587 = !{!7588, !7588, i64 0}
!7588 = !{!"0x1404e620.w32.b0", !7589, i64 0}
!7589 = !{!"0x1404e620.w64.b0", !7590, i64 0}
!7590 = !{!"0x1404e620.w128.b0", !7591, i64 0}
!7591 = !{!"0x1404e620.w256.b0", !7592, i64 0}
!7592 = !{!"0x1404e620.w512.b0", !7593, i64 0}
!7593 = !{!"0x1404e620.w1024.b0", !7594, i64 0}
!7594 = !{!"float32", !7595, i64 0}
!7595 = !{!"0x1404e620", !8, i64 0}
!7596 = !{!7597, !7597, i64 0}
!7597 = !{!"0x13f9e670.w1.b0", !7598, i64 0}
!7598 = !{!"0x13f9e670.w2.b0", !7599, i64 0}
!7599 = !{!"0x13f9e670.w4.b0", !7600, i64 0}
!7600 = !{!"0x13f9e670.w8.b0", !7601, i64 0}
!7601 = !{!"0x13f9e670.w16.b0", !7602, i64 0}
!7602 = !{!"0x13f9e670.w32.b0", !7603, i64 0}
!7603 = !{!"0x13f9e670.w64.b0", !7604, i64 0}
!7604 = !{!"0x13f9e670.w128.b0", !7605, i64 0}
!7605 = !{!"0x13f9e670.w256.b0", !7606, i64 0}
!7606 = !{!"0x13f9e670.w512.b0", !7607, i64 0}
!7607 = !{!"0x13f9e670.w1024.b0", !7608, i64 0}
!7608 = !{!"int32", !7609, i64 0}
!7609 = !{!"0x13f9e670", !8, i64 0}
!7610 = !{!7611, !7611, i64 0}
!7611 = !{!"0x13f9e670.w1.b2", !7612, i64 0}
!7612 = !{!"0x13f9e670.w2.b2", !7599, i64 0}
!7613 = !{!7614, !7614, i64 0}
!7614 = !{!"0x13f9e670.w1.b3", !7612, i64 0}
!7615 = !{!7616, !7616, i64 0}
!7616 = !{!"0x13f9e670.w1.b4", !7617, i64 0}
!7617 = !{!"0x13f9e670.w2.b4", !7618, i64 0}
!7618 = !{!"0x13f9e670.w4.b4", !7600, i64 0}
!7619 = !{!7620, !7620, i64 0}
!7620 = !{!"0x13f9e670.w1.b1", !7598, i64 0}
!7621 = !{!7622, !7622, i64 0}
!7622 = !{!"0x1ca52aa0.w1.b0", !7623, i64 0}
!7623 = !{!"0x1ca52aa0.w2.b0", !7624, i64 0}
!7624 = !{!"0x1ca52aa0.w4.b0", !7625, i64 0}
!7625 = !{!"0x1ca52aa0.w8.b0", !7626, i64 0}
!7626 = !{!"0x1ca52aa0.w16.b0", !7627, i64 0}
!7627 = !{!"0x1ca52aa0.w32.b0", !7628, i64 0}
!7628 = !{!"0x1ca52aa0.w64.b0", !7629, i64 0}
!7629 = !{!"0x1ca52aa0.w128.b0", !7630, i64 0}
!7630 = !{!"0x1ca52aa0.w256.b0", !7631, i64 0}
!7631 = !{!"0x1ca52aa0.w512.b0", !7632, i64 0}
!7632 = !{!"0x1ca52aa0.w1024.b0", !7633, i64 0}
!7633 = !{!"int64", !7634, i64 0}
!7634 = !{!"0x1ca52aa0", !8, i64 0}
!7635 = !{!7636, !7636, i64 0}
!7636 = !{!"0x1ca52aa0.w1.b1", !7623, i64 0}
!7637 = !{!7638, !7638, i64 0}
!7638 = !{!"0x1ca52aa0.w1.b2", !7639, i64 0}
!7639 = !{!"0x1ca52aa0.w2.b2", !7624, i64 0}
!7640 = !{!7641, !7641, i64 0}
!7641 = !{!"0x1ca52aa0.w1.b3", !7639, i64 0}
!7642 = !{!7643, !7643, i64 0}
!7643 = !{!"0x1ca52aa0.w1.b4", !7644, i64 0}
!7644 = !{!"0x1ca52aa0.w2.b4", !7645, i64 0}
!7645 = !{!"0x1ca52aa0.w4.b4", !7625, i64 0}
!7646 = !{!7647, !7647, i64 0}
!7647 = !{!"0x13f9f240.w8.b0", !7648, i64 0}
!7648 = !{!"0x13f9f240.w16.b0", !7649, i64 0}
!7649 = !{!"0x13f9f240.w32.b0", !7650, i64 0}
!7650 = !{!"0x13f9f240.w64.b0", !7651, i64 0}
!7651 = !{!"0x13f9f240.w128.b0", !7652, i64 0}
!7652 = !{!"0x13f9f240.w256.b0", !7653, i64 0}
!7653 = !{!"0x13f9f240.w512.b0", !7654, i64 0}
!7654 = !{!"0x13f9f240.w1024.b0", !7655, i64 0}
!7655 = !{!"int64", !7656, i64 0}
!7656 = !{!"0x13f9f240", !8, i64 0}
!7657 = !{!7658, !7658, i64 0}
!7658 = !{!"0x13f9f240.w1.b0", !7659, i64 0}
!7659 = !{!"0x13f9f240.w2.b0", !7660, i64 0}
!7660 = !{!"0x13f9f240.w4.b0", !7647, i64 0}
!7661 = !{!7662, !7662, i64 0}
!7662 = !{!"0x13f9fc90.w1.b0", !7663, i64 0}
!7663 = !{!"0x13f9fc90.w2.b0", !7664, i64 0}
!7664 = !{!"0x13f9fc90.w4.b0", !7665, i64 0}
!7665 = !{!"0x13f9fc90.w8.b0", !7666, i64 0}
!7666 = !{!"0x13f9fc90.w16.b0", !7667, i64 0}
!7667 = !{!"0x13f9fc90.w32.b0", !7668, i64 0}
!7668 = !{!"0x13f9fc90.w64.b0", !7669, i64 0}
!7669 = !{!"0x13f9fc90.w128.b0", !7670, i64 0}
!7670 = !{!"0x13f9fc90.w256.b0", !7671, i64 0}
!7671 = !{!"0x13f9fc90.w512.b0", !7672, i64 0}
!7672 = !{!"0x13f9fc90.w1024.b0", !7673, i64 0}
!7673 = !{!"int64", !7674, i64 0}
!7674 = !{!"0x13f9fc90", !8, i64 0}
!7675 = !{!7676, !7676, i64 0}
!7676 = !{!"0x13f9fc90.w1.b1", !7663, i64 0}
!7677 = !{!7678, !7678, i64 0}
!7678 = !{!"0x13f9fc90.w1.b2", !7679, i64 0}
!7679 = !{!"0x13f9fc90.w2.b2", !7664, i64 0}
!7680 = !{!7681, !7681, i64 0}
!7681 = !{!"0x13f9fc90.w1.b3", !7679, i64 0}
!7682 = !{!7683, !7683, i64 0}
!7683 = !{!"0x13f9fc90.w1.b4", !7684, i64 0}
!7684 = !{!"0x13f9fc90.w2.b4", !7685, i64 0}
!7685 = !{!"0x13f9fc90.w4.b4", !7665, i64 0}
!7686 = !{!7687, !7687, i64 0}
!7687 = !{!"0x13f9fc90.w1.b5", !7684, i64 0}
!7688 = !{!7689, !7689, i64 0}
!7689 = !{!"0x13fa0840.w8.b0", !7690, i64 0}
!7690 = !{!"0x13fa0840.w16.b0", !7691, i64 0}
!7691 = !{!"0x13fa0840.w32.b0", !7692, i64 0}
!7692 = !{!"0x13fa0840.w64.b0", !7693, i64 0}
!7693 = !{!"0x13fa0840.w128.b0", !7694, i64 0}
!7694 = !{!"0x13fa0840.w256.b0", !7695, i64 0}
!7695 = !{!"0x13fa0840.w512.b0", !7696, i64 0}
!7696 = !{!"0x13fa0840.w1024.b0", !7697, i64 0}
!7697 = !{!"int64", !7698, i64 0}
!7698 = !{!"0x13fa0840", !8, i64 0}
!7699 = !{!7700, !7700, i64 0}
!7700 = !{!"0x13fa0840.w1.b1", !7701, i64 0}
!7701 = !{!"0x13fa0840.w2.b0", !7702, i64 0}
!7702 = !{!"0x13fa0840.w4.b0", !7689, i64 0}
!7703 = !{!7704, !7704, i64 0}
!7704 = !{!"0x13fa0840.w1.b0", !7701, i64 0}
!7705 = !{!7706, !7706, i64 0}
!7706 = !{!"0x13f9e980.w1.b0", !7707, i64 0}
!7707 = !{!"0x13f9e980.w2.b0", !7708, i64 0}
!7708 = !{!"0x13f9e980.w4.b0", !7709, i64 0}
!7709 = !{!"0x13f9e980.w8.b0", !7710, i64 0}
!7710 = !{!"0x13f9e980.w16.b0", !7711, i64 0}
!7711 = !{!"0x13f9e980.w32.b0", !7712, i64 0}
!7712 = !{!"0x13f9e980.w64.b0", !7713, i64 0}
!7713 = !{!"0x13f9e980.w128.b0", !7714, i64 0}
!7714 = !{!"0x13f9e980.w256.b0", !7715, i64 0}
!7715 = !{!"0x13f9e980.w512.b0", !7716, i64 0}
!7716 = !{!"0x13f9e980.w1024.b0", !7717, i64 0}
!7717 = !{!"int64", !7718, i64 0}
!7718 = !{!"0x13f9e980", !8, i64 0}
!7719 = !{!7720, !7720, i64 0}
!7720 = !{!"0x13f9e980.w1.b1", !7707, i64 0}
!7721 = !{!7722, !7722, i64 0}
!7722 = !{!"0x13f9e980.w1.b2", !7723, i64 0}
!7723 = !{!"0x13f9e980.w2.b2", !7708, i64 0}
!7724 = !{!7725, !7725, i64 0}
!7725 = !{!"0x13f9e980.w1.b3", !7723, i64 0}
!7726 = !{!7727, !7727, i64 0}
!7727 = !{!"0x13f9e980.w1.b4", !7728, i64 0}
!7728 = !{!"0x13f9e980.w2.b4", !7729, i64 0}
!7729 = !{!"0x13f9e980.w4.b4", !7709, i64 0}
!7730 = !{!7731, !7731, i64 0}
!7731 = !{!"0x1ca53e50.w8.b0", !7732, i64 0}
!7732 = !{!"0x1ca53e50.w16.b0", !7733, i64 0}
!7733 = !{!"0x1ca53e50.w32.b0", !7734, i64 0}
!7734 = !{!"0x1ca53e50.w64.b0", !7735, i64 0}
!7735 = !{!"0x1ca53e50.w128.b0", !7736, i64 0}
!7736 = !{!"0x1ca53e50.w256.b0", !7737, i64 0}
!7737 = !{!"0x1ca53e50.w512.b0", !7738, i64 0}
!7738 = !{!"0x1ca53e50.w1024.b0", !7739, i64 0}
!7739 = !{!"int64", !7740, i64 0}
!7740 = !{!"0x1ca53e50", !8, i64 0}
!7741 = !{!7742, !7742, i64 0}
!7742 = !{!"0x1ca53e50.w1.b0", !7743, i64 0}
!7743 = !{!"0x1ca53e50.w2.b0", !7744, i64 0}
!7744 = !{!"0x1ca53e50.w4.b0", !7731, i64 0}
!7745 = !{!7746, !7746, i64 0}
!7746 = !{!"0x1ca552b0.w1.b0", !7747, i64 0}
!7747 = !{!"0x1ca552b0.w2.b0", !7748, i64 0}
!7748 = !{!"0x1ca552b0.w4.b0", !7749, i64 0}
!7749 = !{!"0x1ca552b0.w8.b0", !7750, i64 0}
!7750 = !{!"0x1ca552b0.w16.b0", !7751, i64 0}
!7751 = !{!"0x1ca552b0.w32.b0", !7752, i64 0}
!7752 = !{!"0x1ca552b0.w64.b0", !7753, i64 0}
!7753 = !{!"0x1ca552b0.w128.b0", !7754, i64 0}
!7754 = !{!"0x1ca552b0.w256.b0", !7755, i64 0}
!7755 = !{!"0x1ca552b0.w512.b0", !7756, i64 0}
!7756 = !{!"0x1ca552b0.w1024.b0", !7757, i64 0}
!7757 = !{!"int64", !7758, i64 0}
!7758 = !{!"0x1ca552b0", !8, i64 0}
!7759 = !{!7760, !7760, i64 0}
!7760 = !{!"0x1ca552b0.w1.b1", !7747, i64 0}
!7761 = !{!7762, !7762, i64 0}
!7762 = !{!"0x1ca552b0.w1.b2", !7763, i64 0}
!7763 = !{!"0x1ca552b0.w2.b2", !7748, i64 0}
!7764 = !{!7765, !7765, i64 0}
!7765 = !{!"0x1ca552b0.w1.b3", !7763, i64 0}
!7766 = !{!7767, !7767, i64 0}
!7767 = !{!"0x1ca552b0.w1.b4", !7768, i64 0}
!7768 = !{!"0x1ca552b0.w2.b4", !7769, i64 0}
!7769 = !{!"0x1ca552b0.w4.b4", !7749, i64 0}
!7770 = !{!7771, !7771, i64 0}
!7771 = !{!"0x1ca55300.w8.b0", !7772, i64 0}
!7772 = !{!"0x1ca55300.w16.b0", !7773, i64 0}
!7773 = !{!"0x1ca55300.w32.b0", !7774, i64 0}
!7774 = !{!"0x1ca55300.w64.b0", !7775, i64 0}
!7775 = !{!"0x1ca55300.w128.b0", !7776, i64 0}
!7776 = !{!"0x1ca55300.w256.b0", !7777, i64 0}
!7777 = !{!"0x1ca55300.w512.b0", !7778, i64 0}
!7778 = !{!"0x1ca55300.w1024.b0", !7779, i64 0}
!7779 = !{!"int64", !7780, i64 0}
!7780 = !{!"0x1ca55300", !8, i64 0}
!7781 = !{!7782, !7782, i64 0}
!7782 = !{!"0x1ca55300.w1.b0", !7783, i64 0}
!7783 = !{!"0x1ca55300.w2.b0", !7784, i64 0}
!7784 = !{!"0x1ca55300.w4.b0", !7771, i64 0}
!7785 = !{!7786, !7786, i64 0}
!7786 = !{!"0x1ca56710.w1.b0", !7787, i64 0}
!7787 = !{!"0x1ca56710.w2.b0", !7788, i64 0}
!7788 = !{!"0x1ca56710.w4.b0", !7789, i64 0}
!7789 = !{!"0x1ca56710.w8.b0", !7790, i64 0}
!7790 = !{!"0x1ca56710.w16.b0", !7791, i64 0}
!7791 = !{!"0x1ca56710.w32.b0", !7792, i64 0}
!7792 = !{!"0x1ca56710.w64.b0", !7793, i64 0}
!7793 = !{!"0x1ca56710.w128.b0", !7794, i64 0}
!7794 = !{!"0x1ca56710.w256.b0", !7795, i64 0}
!7795 = !{!"0x1ca56710.w512.b0", !7796, i64 0}
!7796 = !{!"0x1ca56710.w1024.b0", !7797, i64 0}
!7797 = !{!"int64", !7798, i64 0}
!7798 = !{!"0x1ca56710", !8, i64 0}
!7799 = !{!7800, !7800, i64 0}
!7800 = !{!"0x1ca56710.w1.b1", !7787, i64 0}
!7801 = !{!7802, !7802, i64 0}
!7802 = !{!"0x1ca56710.w1.b2", !7803, i64 0}
!7803 = !{!"0x1ca56710.w2.b2", !7788, i64 0}
!7804 = !{!7805, !7805, i64 0}
!7805 = !{!"0x1ca56710.w1.b3", !7803, i64 0}
!7806 = !{!7807, !7807, i64 0}
!7807 = !{!"0x1ca56710.w1.b4", !7808, i64 0}
!7808 = !{!"0x1ca56710.w2.b4", !7809, i64 0}
!7809 = !{!"0x1ca56710.w4.b4", !7789, i64 0}
!7810 = !{!7811, !7811, i64 0}
!7811 = !{!"0x1ca57e80.w8.b0", !7812, i64 0}
!7812 = !{!"0x1ca57e80.w16.b0", !7813, i64 0}
!7813 = !{!"0x1ca57e80.w32.b0", !7814, i64 0}
!7814 = !{!"0x1ca57e80.w64.b0", !7815, i64 0}
!7815 = !{!"0x1ca57e80.w128.b0", !7816, i64 0}
!7816 = !{!"0x1ca57e80.w256.b0", !7817, i64 0}
!7817 = !{!"0x1ca57e80.w512.b0", !7818, i64 0}
!7818 = !{!"0x1ca57e80.w1024.b0", !7819, i64 0}
!7819 = !{!"int64", !7820, i64 0}
!7820 = !{!"0x1ca57e80", !8, i64 0}
!7821 = !{!7822, !7822, i64 0}
!7822 = !{!"0x1ca57e80.w1.b0", !7823, i64 0}
!7823 = !{!"0x1ca57e80.w2.b0", !7824, i64 0}
!7824 = !{!"0x1ca57e80.w4.b0", !7811, i64 0}
!7825 = !{!7826, !7826, i64 0}
!7826 = !{!"float32", !7827, i64 0}
!7827 = !{!"0x13f9e310", !8, i64 0}
!7828 = !{!7829, !7829, i64 0}
!7829 = !{!"float32", !7830, i64 0}
!7830 = !{!"0x13f9e2c0", !8, i64 0}
!7831 = !{!7832, !7832, i64 0}
!7832 = !{!"float32", !7833, i64 0}
!7833 = !{!"0x13f9e6c0", !8, i64 0}
!7834 = !{!7835, !7835, i64 0}
!7835 = !{!"float32", !7836, i64 0}
!7836 = !{!"0x13f9e8b0", !8, i64 0}
!7837 = !{!7838, !7838, i64 0}
!7838 = !{!"float32", !7839, i64 0}
!7839 = !{!"0x13f9e3b0", !8, i64 0}
!7840 = !{!7841, !7841, i64 0}
!7841 = !{!"float32", !7842, i64 0}
!7842 = !{!"0xdd95640", !8, i64 0}
!7843 = !{!7844, !7844, i64 0}
!7844 = !{!"0x1ca5d8c0.w1.b0", !7845, i64 0}
!7845 = !{!"0x1ca5d8c0.w2.b0", !7846, i64 0}
!7846 = !{!"0x1ca5d8c0.w4.b0", !7847, i64 0}
!7847 = !{!"0x1ca5d8c0.w8.b0", !7848, i64 0}
!7848 = !{!"0x1ca5d8c0.w16.b0", !7849, i64 0}
!7849 = !{!"0x1ca5d8c0.w32.b0", !7850, i64 0}
!7850 = !{!"0x1ca5d8c0.w64.b0", !7851, i64 0}
!7851 = !{!"0x1ca5d8c0.w128.b0", !7852, i64 0}
!7852 = !{!"0x1ca5d8c0.w256.b0", !7853, i64 0}
!7853 = !{!"0x1ca5d8c0.w512.b0", !7854, i64 0}
!7854 = !{!"0x1ca5d8c0.w1024.b0", !7855, i64 0}
!7855 = !{!"int32", !7856, i64 0}
!7856 = !{!"0x1ca5d8c0", !8, i64 0}
!7857 = !{!7858, !7858, i64 0}
!7858 = !{!"0x1ca5d8c0.w1.b1", !7845, i64 0}
!7859 = !{!7860, !7860, i64 0}
!7860 = !{!"0x1ca5f1b0.w1.b0", !7861, i64 0}
!7861 = !{!"0x1ca5f1b0.w2.b0", !7862, i64 0}
!7862 = !{!"0x1ca5f1b0.w4.b0", !7863, i64 0}
!7863 = !{!"0x1ca5f1b0.w8.b0", !7864, i64 0}
!7864 = !{!"0x1ca5f1b0.w16.b0", !7865, i64 0}
!7865 = !{!"0x1ca5f1b0.w32.b0", !7866, i64 0}
!7866 = !{!"0x1ca5f1b0.w64.b0", !7867, i64 0}
!7867 = !{!"0x1ca5f1b0.w128.b0", !7868, i64 0}
!7868 = !{!"0x1ca5f1b0.w256.b0", !7869, i64 0}
!7869 = !{!"0x1ca5f1b0.w512.b0", !7870, i64 0}
!7870 = !{!"0x1ca5f1b0.w1024.b0", !7871, i64 0}
!7871 = !{!"int64", !7872, i64 0}
!7872 = !{!"0x1ca5f1b0", !8, i64 0}
!7873 = !{!7874, !7874, i64 0}
!7874 = !{!"0x1ca5f1b0.w1.b1", !7861, i64 0}
!7875 = !{!7876, !7876, i64 0}
!7876 = !{!"0x1ca5f1b0.w1.b2", !7877, i64 0}
!7877 = !{!"0x1ca5f1b0.w2.b2", !7862, i64 0}
!7878 = !{!7879, !7879, i64 0}
!7879 = !{!"0x1ca5f1b0.w1.b3", !7877, i64 0}
!7880 = !{!7881, !7881, i64 0}
!7881 = !{!"0x1ca5f1b0.w1.b4", !7882, i64 0}
!7882 = !{!"0x1ca5f1b0.w2.b4", !7883, i64 0}
!7883 = !{!"0x1ca5f1b0.w4.b4", !7863, i64 0}
!7884 = !{!7885, !7885, i64 0}
!7885 = !{!"0x1ca5f710.w8.b0", !7886, i64 0}
!7886 = !{!"0x1ca5f710.w16.b0", !7887, i64 0}
!7887 = !{!"0x1ca5f710.w32.b0", !7888, i64 0}
!7888 = !{!"0x1ca5f710.w64.b0", !7889, i64 0}
!7889 = !{!"0x1ca5f710.w128.b0", !7890, i64 0}
!7890 = !{!"0x1ca5f710.w256.b0", !7891, i64 0}
!7891 = !{!"0x1ca5f710.w512.b0", !7892, i64 0}
!7892 = !{!"0x1ca5f710.w1024.b0", !7893, i64 0}
!7893 = !{!"int64", !7894, i64 0}
!7894 = !{!"0x1ca5f710", !8, i64 0}
!7895 = !{!7896, !7896, i64 0}
!7896 = !{!"0x1ca5f710.w1.b0", !7897, i64 0}
!7897 = !{!"0x1ca5f710.w2.b0", !7898, i64 0}
!7898 = !{!"0x1ca5f710.w4.b0", !7885, i64 0}
!7899 = !{!7900, !7900, i64 0}
!7900 = !{!"0x1ca5f960.w1.b0", !7901, i64 0}
!7901 = !{!"0x1ca5f960.w2.b0", !7902, i64 0}
!7902 = !{!"0x1ca5f960.w4.b0", !7903, i64 0}
!7903 = !{!"0x1ca5f960.w8.b0", !7904, i64 0}
!7904 = !{!"0x1ca5f960.w16.b0", !7905, i64 0}
!7905 = !{!"0x1ca5f960.w32.b0", !7906, i64 0}
!7906 = !{!"0x1ca5f960.w64.b0", !7907, i64 0}
!7907 = !{!"0x1ca5f960.w128.b0", !7908, i64 0}
!7908 = !{!"0x1ca5f960.w256.b0", !7909, i64 0}
!7909 = !{!"0x1ca5f960.w512.b0", !7910, i64 0}
!7910 = !{!"0x1ca5f960.w1024.b0", !7911, i64 0}
!7911 = !{!"int64", !7912, i64 0}
!7912 = !{!"0x1ca5f960", !8, i64 0}
!7913 = !{!7914, !7914, i64 0}
!7914 = !{!"0x1ca5f960.w1.b1", !7901, i64 0}
!7915 = !{!7916, !7916, i64 0}
!7916 = !{!"0x1ca5f960.w1.b2", !7917, i64 0}
!7917 = !{!"0x1ca5f960.w2.b2", !7902, i64 0}
!7918 = !{!7919, !7919, i64 0}
!7919 = !{!"0x1ca5f960.w1.b3", !7917, i64 0}
!7920 = !{!7921, !7921, i64 0}
!7921 = !{!"0x1ca5f960.w1.b4", !7922, i64 0}
!7922 = !{!"0x1ca5f960.w2.b4", !7923, i64 0}
!7923 = !{!"0x1ca5f960.w4.b4", !7903, i64 0}
!7924 = !{!7925, !7925, i64 0}
!7925 = !{!"0x1ca5f380.w8.b0", !7926, i64 0}
!7926 = !{!"0x1ca5f380.w16.b0", !7927, i64 0}
!7927 = !{!"0x1ca5f380.w32.b0", !7928, i64 0}
!7928 = !{!"0x1ca5f380.w64.b0", !7929, i64 0}
!7929 = !{!"0x1ca5f380.w128.b0", !7930, i64 0}
!7930 = !{!"0x1ca5f380.w256.b0", !7931, i64 0}
!7931 = !{!"0x1ca5f380.w512.b0", !7932, i64 0}
!7932 = !{!"0x1ca5f380.w1024.b0", !7933, i64 0}
!7933 = !{!"int64", !7934, i64 0}
!7934 = !{!"0x1ca5f380", !8, i64 0}
!7935 = !{!7936, !7936, i64 0}
!7936 = !{!"0x1ca5f380.w1.b0", !7937, i64 0}
!7937 = !{!"0x1ca5f380.w2.b0", !7938, i64 0}
!7938 = !{!"0x1ca5f380.w4.b0", !7925, i64 0}
!7939 = !{!7940, !7940, i64 0}
!7940 = !{!"float32", !7941, i64 0}
!7941 = !{!"0x13fa36c0", !8, i64 0}
!7942 = !{!7943, !7943, i64 0}
!7943 = !{!"float32", !7944, i64 0}
!7944 = !{!"0x13f99a10", !8, i64 0}
!7945 = !{!7946, !7946, i64 0}
!7946 = !{!"0x1ca68180.w1.b0", !7947, i64 0}
!7947 = !{!"0x1ca68180.w2.b0", !7948, i64 0}
!7948 = !{!"0x1ca68180.w4.b0", !7949, i64 0}
!7949 = !{!"0x1ca68180.w8.b0", !7950, i64 0}
!7950 = !{!"0x1ca68180.w16.b0", !7951, i64 0}
!7951 = !{!"0x1ca68180.w32.b0", !7952, i64 0}
!7952 = !{!"0x1ca68180.w64.b0", !7953, i64 0}
!7953 = !{!"0x1ca68180.w128.b0", !7954, i64 0}
!7954 = !{!"0x1ca68180.w256.b0", !7955, i64 0}
!7955 = !{!"0x1ca68180.w512.b0", !7956, i64 0}
!7956 = !{!"0x1ca68180.w1024.b0", !7957, i64 0}
!7957 = !{!"int32", !7958, i64 0}
!7958 = !{!"0x1ca68180", !8, i64 0}
!7959 = !{!7960, !7960, i64 0}
!7960 = !{!"0x1ca68180.w1.b1", !7947, i64 0}
!7961 = !{!7962, !7962, i64 0}
!7962 = !{!"0x1ca6c380.w1.b0", !7963, i64 0}
!7963 = !{!"0x1ca6c380.w2.b0", !7964, i64 0}
!7964 = !{!"0x1ca6c380.w4.b0", !7965, i64 0}
!7965 = !{!"0x1ca6c380.w8.b0", !7966, i64 0}
!7966 = !{!"0x1ca6c380.w16.b0", !7967, i64 0}
!7967 = !{!"0x1ca6c380.w32.b0", !7968, i64 0}
!7968 = !{!"0x1ca6c380.w64.b0", !7969, i64 0}
!7969 = !{!"0x1ca6c380.w128.b0", !7970, i64 0}
!7970 = !{!"0x1ca6c380.w256.b0", !7971, i64 0}
!7971 = !{!"0x1ca6c380.w512.b0", !7972, i64 0}
!7972 = !{!"0x1ca6c380.w1024.b0", !7973, i64 0}
!7973 = !{!"int64", !7974, i64 0}
!7974 = !{!"0x1ca6c380", !8, i64 0}
!7975 = !{!7976, !7976, i64 0}
!7976 = !{!"0x1ca6c380.w1.b1", !7963, i64 0}
!7977 = !{!7978, !7978, i64 0}
!7978 = !{!"0x1ca6c380.w1.b2", !7979, i64 0}
!7979 = !{!"0x1ca6c380.w2.b2", !7964, i64 0}
!7980 = !{!7981, !7981, i64 0}
!7981 = !{!"0x1ca6c380.w1.b3", !7979, i64 0}
!7982 = !{!7983, !7983, i64 0}
!7983 = !{!"0x1ca6c380.w1.b4", !7984, i64 0}
!7984 = !{!"0x1ca6c380.w2.b4", !7985, i64 0}
!7985 = !{!"0x1ca6c380.w4.b4", !7965, i64 0}
!7986 = !{!7987, !7987, i64 0}
!7987 = !{!"0x1ca6c940.w8.b0", !7988, i64 0}
!7988 = !{!"0x1ca6c940.w16.b0", !7989, i64 0}
!7989 = !{!"0x1ca6c940.w32.b0", !7990, i64 0}
!7990 = !{!"0x1ca6c940.w64.b0", !7991, i64 0}
!7991 = !{!"0x1ca6c940.w128.b0", !7992, i64 0}
!7992 = !{!"0x1ca6c940.w256.b0", !7993, i64 0}
!7993 = !{!"0x1ca6c940.w512.b0", !7994, i64 0}
!7994 = !{!"0x1ca6c940.w1024.b0", !7995, i64 0}
!7995 = !{!"int64", !7996, i64 0}
!7996 = !{!"0x1ca6c940", !8, i64 0}
!7997 = !{!7998, !7998, i64 0}
!7998 = !{!"0x1ca6c940.w1.b0", !7999, i64 0}
!7999 = !{!"0x1ca6c940.w2.b0", !8000, i64 0}
!8000 = !{!"0x1ca6c940.w4.b0", !7987, i64 0}
!8001 = !{!8002, !8002, i64 0}
!8002 = !{!"0x1ca6cb90.w1.b0", !8003, i64 0}
!8003 = !{!"0x1ca6cb90.w2.b0", !8004, i64 0}
!8004 = !{!"0x1ca6cb90.w4.b0", !8005, i64 0}
!8005 = !{!"0x1ca6cb90.w8.b0", !8006, i64 0}
!8006 = !{!"0x1ca6cb90.w16.b0", !8007, i64 0}
!8007 = !{!"0x1ca6cb90.w32.b0", !8008, i64 0}
!8008 = !{!"0x1ca6cb90.w64.b0", !8009, i64 0}
!8009 = !{!"0x1ca6cb90.w128.b0", !8010, i64 0}
!8010 = !{!"0x1ca6cb90.w256.b0", !8011, i64 0}
!8011 = !{!"0x1ca6cb90.w512.b0", !8012, i64 0}
!8012 = !{!"0x1ca6cb90.w1024.b0", !8013, i64 0}
!8013 = !{!"int64", !8014, i64 0}
!8014 = !{!"0x1ca6cb90", !8, i64 0}
!8015 = !{!8016, !8016, i64 0}
!8016 = !{!"0x1ca6cb90.w1.b1", !8003, i64 0}
!8017 = !{!8018, !8018, i64 0}
!8018 = !{!"0x1ca6cb90.w1.b2", !8019, i64 0}
!8019 = !{!"0x1ca6cb90.w2.b2", !8004, i64 0}
!8020 = !{!8021, !8021, i64 0}
!8021 = !{!"0x1ca6cb90.w1.b3", !8019, i64 0}
!8022 = !{!8023, !8023, i64 0}
!8023 = !{!"0x1ca6cb90.w1.b4", !8024, i64 0}
!8024 = !{!"0x1ca6cb90.w2.b4", !8025, i64 0}
!8025 = !{!"0x1ca6cb90.w4.b4", !8005, i64 0}
!8026 = !{!8027, !8027, i64 0}
!8027 = !{!"0x1ca6c5b0.w8.b0", !8028, i64 0}
!8028 = !{!"0x1ca6c5b0.w16.b0", !8029, i64 0}
!8029 = !{!"0x1ca6c5b0.w32.b0", !8030, i64 0}
!8030 = !{!"0x1ca6c5b0.w64.b0", !8031, i64 0}
!8031 = !{!"0x1ca6c5b0.w128.b0", !8032, i64 0}
!8032 = !{!"0x1ca6c5b0.w256.b0", !8033, i64 0}
!8033 = !{!"0x1ca6c5b0.w512.b0", !8034, i64 0}
!8034 = !{!"0x1ca6c5b0.w1024.b0", !8035, i64 0}
!8035 = !{!"int64", !8036, i64 0}
!8036 = !{!"0x1ca6c5b0", !8, i64 0}
!8037 = !{!8038, !8038, i64 0}
!8038 = !{!"0x1ca6c5b0.w1.b0", !8039, i64 0}
!8039 = !{!"0x1ca6c5b0.w2.b0", !8040, i64 0}
!8040 = !{!"0x1ca6c5b0.w4.b0", !8027, i64 0}
!8041 = !{!8042, !8042, i64 0}
!8042 = !{!"float32", !8043, i64 0}
!8043 = !{!"0x1ca67340", !8, i64 0}
!8044 = !{!8045, !8045, i64 0}
!8045 = !{!"float32", !8046, i64 0}
!8046 = !{!"0x1ca67850", !8, i64 0}
!8047 = !{!8048, !8048, i64 0}
!8048 = !{!"0x140b82a0.w1.b0", !8049, i64 0}
!8049 = !{!"0x140b82a0.w2.b0", !8050, i64 0}
!8050 = !{!"0x140b82a0.w4.b0", !8051, i64 0}
!8051 = !{!"0x140b82a0.w8.b0", !8052, i64 0}
!8052 = !{!"0x140b82a0.w16.b0", !8053, i64 0}
!8053 = !{!"0x140b82a0.w32.b0", !8054, i64 0}
!8054 = !{!"0x140b82a0.w64.b0", !8055, i64 0}
!8055 = !{!"0x140b82a0.w128.b0", !8056, i64 0}
!8056 = !{!"0x140b82a0.w256.b0", !8057, i64 0}
!8057 = !{!"0x140b82a0.w512.b0", !8058, i64 0}
!8058 = !{!"0x140b82a0.w1024.b0", !8059, i64 0}
!8059 = !{!"int32", !8060, i64 0}
!8060 = !{!"0x140b82a0", !8, i64 0}
!8061 = !{!8062, !8062, i64 0}
!8062 = !{!"0x140b82a0.w1.b2", !8063, i64 0}
!8063 = !{!"0x140b82a0.w2.b2", !8050, i64 0}
!8064 = !{!8065, !8065, i64 0}
!8065 = !{!"0x140b82a0.w1.b3", !8063, i64 0}
!8066 = !{!8067, !8067, i64 0}
!8067 = !{!"0x140b82a0.w1.b4", !8068, i64 0}
!8068 = !{!"0x140b82a0.w2.b4", !8069, i64 0}
!8069 = !{!"0x140b82a0.w4.b4", !8051, i64 0}
!8070 = !{!8071, !8071, i64 0}
!8071 = !{!"0x140b82a0.w1.b1", !8049, i64 0}
!8072 = !{!8073, !8073, i64 0}
!8073 = !{!"0x140be2a0.w1.b0", !8074, i64 0}
!8074 = !{!"0x140be2a0.w2.b0", !8075, i64 0}
!8075 = !{!"0x140be2a0.w4.b0", !8076, i64 0}
!8076 = !{!"0x140be2a0.w8.b0", !8077, i64 0}
!8077 = !{!"0x140be2a0.w16.b0", !8078, i64 0}
!8078 = !{!"0x140be2a0.w32.b0", !8079, i64 0}
!8079 = !{!"0x140be2a0.w64.b0", !8080, i64 0}
!8080 = !{!"0x140be2a0.w128.b0", !8081, i64 0}
!8081 = !{!"0x140be2a0.w256.b0", !8082, i64 0}
!8082 = !{!"0x140be2a0.w512.b0", !8083, i64 0}
!8083 = !{!"0x140be2a0.w1024.b0", !8084, i64 0}
!8084 = !{!"int64", !8085, i64 0}
!8085 = !{!"0x140be2a0", !8, i64 0}
!8086 = !{!8087, !8087, i64 0}
!8087 = !{!"0x140be2a0.w1.b1", !8074, i64 0}
!8088 = !{!8089, !8089, i64 0}
!8089 = !{!"0x140be2a0.w1.b2", !8090, i64 0}
!8090 = !{!"0x140be2a0.w2.b2", !8075, i64 0}
!8091 = !{!8092, !8092, i64 0}
!8092 = !{!"0x140be2a0.w1.b3", !8090, i64 0}
!8093 = !{!8094, !8094, i64 0}
!8094 = !{!"0x140be2a0.w1.b4", !8095, i64 0}
!8095 = !{!"0x140be2a0.w2.b4", !8096, i64 0}
!8096 = !{!"0x140be2a0.w4.b4", !8076, i64 0}
!8097 = !{!8098, !8098, i64 0}
!8098 = !{!"0x140bd290.w8.b0", !8099, i64 0}
!8099 = !{!"0x140bd290.w16.b0", !8100, i64 0}
!8100 = !{!"0x140bd290.w32.b0", !8101, i64 0}
!8101 = !{!"0x140bd290.w64.b0", !8102, i64 0}
!8102 = !{!"0x140bd290.w128.b0", !8103, i64 0}
!8103 = !{!"0x140bd290.w256.b0", !8104, i64 0}
!8104 = !{!"0x140bd290.w512.b0", !8105, i64 0}
!8105 = !{!"0x140bd290.w1024.b0", !8106, i64 0}
!8106 = !{!"int64", !8107, i64 0}
!8107 = !{!"0x140bd290", !8, i64 0}
!8108 = !{!8109, !8109, i64 0}
!8109 = !{!"0x140bd290.w1.b0", !8110, i64 0}
!8110 = !{!"0x140bd290.w2.b0", !8111, i64 0}
!8111 = !{!"0x140bd290.w4.b0", !8098, i64 0}
!8112 = !{!8113, !8113, i64 0}
!8113 = !{!"0x140bd4e0.w1.b0", !8114, i64 0}
!8114 = !{!"0x140bd4e0.w2.b0", !8115, i64 0}
!8115 = !{!"0x140bd4e0.w4.b0", !8116, i64 0}
!8116 = !{!"0x140bd4e0.w8.b0", !8117, i64 0}
!8117 = !{!"0x140bd4e0.w16.b0", !8118, i64 0}
!8118 = !{!"0x140bd4e0.w32.b0", !8119, i64 0}
!8119 = !{!"0x140bd4e0.w64.b0", !8120, i64 0}
!8120 = !{!"0x140bd4e0.w128.b0", !8121, i64 0}
!8121 = !{!"0x140bd4e0.w256.b0", !8122, i64 0}
!8122 = !{!"0x140bd4e0.w512.b0", !8123, i64 0}
!8123 = !{!"0x140bd4e0.w1024.b0", !8124, i64 0}
!8124 = !{!"int64", !8125, i64 0}
!8125 = !{!"0x140bd4e0", !8, i64 0}
!8126 = !{!8127, !8127, i64 0}
!8127 = !{!"0x140bd4e0.w1.b1", !8114, i64 0}
!8128 = !{!8129, !8129, i64 0}
!8129 = !{!"0x140bd4e0.w1.b2", !8130, i64 0}
!8130 = !{!"0x140bd4e0.w2.b2", !8115, i64 0}
!8131 = !{!8132, !8132, i64 0}
!8132 = !{!"0x140bd4e0.w1.b3", !8130, i64 0}
!8133 = !{!8134, !8134, i64 0}
!8134 = !{!"0x140bd4e0.w1.b4", !8135, i64 0}
!8135 = !{!"0x140bd4e0.w2.b4", !8136, i64 0}
!8136 = !{!"0x140bd4e0.w4.b4", !8116, i64 0}
!8137 = !{!8138, !8138, i64 0}
!8138 = !{!"0x140bd4e0.w1.b5", !8135, i64 0}
!8139 = !{!8140, !8140, i64 0}
!8140 = !{!"0x140be4d0.w8.b0", !8141, i64 0}
!8141 = !{!"0x140be4d0.w16.b0", !8142, i64 0}
!8142 = !{!"0x140be4d0.w32.b0", !8143, i64 0}
!8143 = !{!"0x140be4d0.w64.b0", !8144, i64 0}
!8144 = !{!"0x140be4d0.w128.b0", !8145, i64 0}
!8145 = !{!"0x140be4d0.w256.b0", !8146, i64 0}
!8146 = !{!"0x140be4d0.w512.b0", !8147, i64 0}
!8147 = !{!"0x140be4d0.w1024.b0", !8148, i64 0}
!8148 = !{!"int64", !8149, i64 0}
!8149 = !{!"0x140be4d0", !8, i64 0}
!8150 = !{!8151, !8151, i64 0}
!8151 = !{!"0x140be4d0.w1.b1", !8152, i64 0}
!8152 = !{!"0x140be4d0.w2.b0", !8153, i64 0}
!8153 = !{!"0x140be4d0.w4.b0", !8140, i64 0}
!8154 = !{!8155, !8155, i64 0}
!8155 = !{!"0x140be4d0.w1.b0", !8152, i64 0}
!8156 = !{!8157, !8157, i64 0}
!8157 = !{!"0x140c06b0.w1.b0", !8158, i64 0}
!8158 = !{!"0x140c06b0.w2.b0", !8159, i64 0}
!8159 = !{!"0x140c06b0.w4.b0", !8160, i64 0}
!8160 = !{!"0x140c06b0.w8.b0", !8161, i64 0}
!8161 = !{!"0x140c06b0.w16.b0", !8162, i64 0}
!8162 = !{!"0x140c06b0.w32.b0", !8163, i64 0}
!8163 = !{!"0x140c06b0.w64.b0", !8164, i64 0}
!8164 = !{!"0x140c06b0.w128.b0", !8165, i64 0}
!8165 = !{!"0x140c06b0.w256.b0", !8166, i64 0}
!8166 = !{!"0x140c06b0.w512.b0", !8167, i64 0}
!8167 = !{!"0x140c06b0.w1024.b0", !8168, i64 0}
!8168 = !{!"int64", !8169, i64 0}
!8169 = !{!"0x140c06b0", !8, i64 0}
!8170 = !{!8171, !8171, i64 0}
!8171 = !{!"0x140c06b0.w1.b1", !8158, i64 0}
!8172 = !{!8173, !8173, i64 0}
!8173 = !{!"0x140c06b0.w1.b2", !8174, i64 0}
!8174 = !{!"0x140c06b0.w2.b2", !8159, i64 0}
!8175 = !{!8176, !8176, i64 0}
!8176 = !{!"0x140c06b0.w1.b3", !8174, i64 0}
!8177 = !{!8178, !8178, i64 0}
!8178 = !{!"0x140c06b0.w1.b4", !8179, i64 0}
!8179 = !{!"0x140c06b0.w2.b4", !8180, i64 0}
!8180 = !{!"0x140c06b0.w4.b4", !8160, i64 0}
!8181 = !{!8182, !8182, i64 0}
!8182 = !{!"0x140c1dd0.w8.b0", !8183, i64 0}
!8183 = !{!"0x140c1dd0.w16.b0", !8184, i64 0}
!8184 = !{!"0x140c1dd0.w32.b0", !8185, i64 0}
!8185 = !{!"0x140c1dd0.w64.b0", !8186, i64 0}
!8186 = !{!"0x140c1dd0.w128.b0", !8187, i64 0}
!8187 = !{!"0x140c1dd0.w256.b0", !8188, i64 0}
!8188 = !{!"0x140c1dd0.w512.b0", !8189, i64 0}
!8189 = !{!"0x140c1dd0.w1024.b0", !8190, i64 0}
!8190 = !{!"int64", !8191, i64 0}
!8191 = !{!"0x140c1dd0", !8, i64 0}
!8192 = !{!8193, !8193, i64 0}
!8193 = !{!"0x140c1dd0.w1.b0", !8194, i64 0}
!8194 = !{!"0x140c1dd0.w2.b0", !8195, i64 0}
!8195 = !{!"0x140c1dd0.w4.b0", !8182, i64 0}
!8196 = !{!8197, !8197, i64 0}
!8197 = !{!"0x140c3230.w1.b0", !8198, i64 0}
!8198 = !{!"0x140c3230.w2.b0", !8199, i64 0}
!8199 = !{!"0x140c3230.w4.b0", !8200, i64 0}
!8200 = !{!"0x140c3230.w8.b0", !8201, i64 0}
!8201 = !{!"0x140c3230.w16.b0", !8202, i64 0}
!8202 = !{!"0x140c3230.w32.b0", !8203, i64 0}
!8203 = !{!"0x140c3230.w64.b0", !8204, i64 0}
!8204 = !{!"0x140c3230.w128.b0", !8205, i64 0}
!8205 = !{!"0x140c3230.w256.b0", !8206, i64 0}
!8206 = !{!"0x140c3230.w512.b0", !8207, i64 0}
!8207 = !{!"0x140c3230.w1024.b0", !8208, i64 0}
!8208 = !{!"int64", !8209, i64 0}
!8209 = !{!"0x140c3230", !8, i64 0}
!8210 = !{!8211, !8211, i64 0}
!8211 = !{!"0x140c3230.w1.b1", !8198, i64 0}
!8212 = !{!8213, !8213, i64 0}
!8213 = !{!"0x140c3230.w1.b2", !8214, i64 0}
!8214 = !{!"0x140c3230.w2.b2", !8199, i64 0}
!8215 = !{!8216, !8216, i64 0}
!8216 = !{!"0x140c3230.w1.b3", !8214, i64 0}
!8217 = !{!8218, !8218, i64 0}
!8218 = !{!"0x140c3230.w1.b4", !8219, i64 0}
!8219 = !{!"0x140c3230.w2.b4", !8220, i64 0}
!8220 = !{!"0x140c3230.w4.b4", !8200, i64 0}
!8221 = !{!8222, !8222, i64 0}
!8222 = !{!"0x140c3280.w8.b0", !8223, i64 0}
!8223 = !{!"0x140c3280.w16.b0", !8224, i64 0}
!8224 = !{!"0x140c3280.w32.b0", !8225, i64 0}
!8225 = !{!"0x140c3280.w64.b0", !8226, i64 0}
!8226 = !{!"0x140c3280.w128.b0", !8227, i64 0}
!8227 = !{!"0x140c3280.w256.b0", !8228, i64 0}
!8228 = !{!"0x140c3280.w512.b0", !8229, i64 0}
!8229 = !{!"0x140c3280.w1024.b0", !8230, i64 0}
!8230 = !{!"int64", !8231, i64 0}
!8231 = !{!"0x140c3280", !8, i64 0}
!8232 = !{!8233, !8233, i64 0}
!8233 = !{!"0x140c3280.w1.b0", !8234, i64 0}
!8234 = !{!"0x140c3280.w2.b0", !8235, i64 0}
!8235 = !{!"0x140c3280.w4.b0", !8222, i64 0}
!8236 = !{!8237, !8237, i64 0}
!8237 = !{!"0x140c4690.w1.b0", !8238, i64 0}
!8238 = !{!"0x140c4690.w2.b0", !8239, i64 0}
!8239 = !{!"0x140c4690.w4.b0", !8240, i64 0}
!8240 = !{!"0x140c4690.w8.b0", !8241, i64 0}
!8241 = !{!"0x140c4690.w16.b0", !8242, i64 0}
!8242 = !{!"0x140c4690.w32.b0", !8243, i64 0}
!8243 = !{!"0x140c4690.w64.b0", !8244, i64 0}
!8244 = !{!"0x140c4690.w128.b0", !8245, i64 0}
!8245 = !{!"0x140c4690.w256.b0", !8246, i64 0}
!8246 = !{!"0x140c4690.w512.b0", !8247, i64 0}
!8247 = !{!"0x140c4690.w1024.b0", !8248, i64 0}
!8248 = !{!"int64", !8249, i64 0}
!8249 = !{!"0x140c4690", !8, i64 0}
!8250 = !{!8251, !8251, i64 0}
!8251 = !{!"0x140c4690.w1.b1", !8238, i64 0}
!8252 = !{!8253, !8253, i64 0}
!8253 = !{!"0x140c4690.w1.b2", !8254, i64 0}
!8254 = !{!"0x140c4690.w2.b2", !8239, i64 0}
!8255 = !{!8256, !8256, i64 0}
!8256 = !{!"0x140c4690.w1.b3", !8254, i64 0}
!8257 = !{!8258, !8258, i64 0}
!8258 = !{!"0x140c4690.w1.b4", !8259, i64 0}
!8259 = !{!"0x140c4690.w2.b4", !8260, i64 0}
!8260 = !{!"0x140c4690.w4.b4", !8240, i64 0}
!8261 = !{!8262, !8262, i64 0}
!8262 = !{!"0x140c5e00.w8.b0", !8263, i64 0}
!8263 = !{!"0x140c5e00.w16.b0", !8264, i64 0}
!8264 = !{!"0x140c5e00.w32.b0", !8265, i64 0}
!8265 = !{!"0x140c5e00.w64.b0", !8266, i64 0}
!8266 = !{!"0x140c5e00.w128.b0", !8267, i64 0}
!8267 = !{!"0x140c5e00.w256.b0", !8268, i64 0}
!8268 = !{!"0x140c5e00.w512.b0", !8269, i64 0}
!8269 = !{!"0x140c5e00.w1024.b0", !8270, i64 0}
!8270 = !{!"int64", !8271, i64 0}
!8271 = !{!"0x140c5e00", !8, i64 0}
!8272 = !{!8273, !8273, i64 0}
!8273 = !{!"0x140c5e00.w1.b0", !8274, i64 0}
!8274 = !{!"0x140c5e00.w2.b0", !8275, i64 0}
!8275 = !{!"0x140c5e00.w4.b0", !8262, i64 0}
!8276 = !{!8277, !8277, i64 0}
!8277 = !{!"float32", !8278, i64 0}
!8278 = !{!"0x140b7530", !8, i64 0}
!8279 = !{!8280, !8280, i64 0}
!8280 = !{!"float32", !8281, i64 0}
!8281 = !{!"0x140b7720", !8, i64 0}
!8282 = !{!8283, !8283, i64 0}
!8283 = !{!"float32", !8284, i64 0}
!8284 = !{!"0x140b7180", !8, i64 0}
!8285 = !{!8286, !8286, i64 0}
!8286 = !{!"float32", !8287, i64 0}
!8287 = !{!"0x140b7130", !8, i64 0}
!8288 = !{!8289, !8289, i64 0}
!8289 = !{!"float32", !8290, i64 0}
!8290 = !{!"0x140b0ce0", !8, i64 0}
!8291 = !{!8292, !8292, i64 0}
!8292 = !{!"float32", !8293, i64 0}
!8293 = !{!"0x140b3030", !8, i64 0}
!8294 = !{!8295, !8295, i64 0}
!8295 = !{!"0x7a79af0.w1.b0", !8296, i64 0}
!8296 = !{!"0x7a79af0.w2.b0", !8297, i64 0}
!8297 = !{!"0x7a79af0.w4.b0", !8298, i64 0}
!8298 = !{!"0x7a79af0.w8.b0", !8299, i64 0}
!8299 = !{!"0x7a79af0.w16.b0", !8300, i64 0}
!8300 = !{!"0x7a79af0.w32.b0", !8301, i64 0}
!8301 = !{!"0x7a79af0.w64.b0", !8302, i64 0}
!8302 = !{!"0x7a79af0.w128.b0", !8303, i64 0}
!8303 = !{!"0x7a79af0.w256.b0", !8304, i64 0}
!8304 = !{!"0x7a79af0.w512.b0", !8305, i64 0}
!8305 = !{!"0x7a79af0.w1024.b0", !8306, i64 0}
!8306 = !{!"int32", !8307, i64 0}
!8307 = !{!"0x7a79af0", !8, i64 0}
!8308 = !{!8309, !8309, i64 0}
!8309 = !{!"0x7a79af0.w1.b2", !8310, i64 0}
!8310 = !{!"0x7a79af0.w2.b2", !8297, i64 0}
!8311 = !{!8312, !8312, i64 0}
!8312 = !{!"0x7a79af0.w1.b3", !8310, i64 0}
!8313 = !{!8314, !8314, i64 0}
!8314 = !{!"0x7a79af0.w1.b4", !8315, i64 0}
!8315 = !{!"0x7a79af0.w2.b4", !8316, i64 0}
!8316 = !{!"0x7a79af0.w4.b4", !8298, i64 0}
!8317 = !{!8318, !8318, i64 0}
!8318 = !{!"0x7a79af0.w1.b1", !8296, i64 0}
!8319 = !{!8320, !8320, i64 0}
!8320 = !{!"0x7a7aee0.w1.b0", !8321, i64 0}
!8321 = !{!"0x7a7aee0.w2.b0", !8322, i64 0}
!8322 = !{!"0x7a7aee0.w4.b0", !8323, i64 0}
!8323 = !{!"0x7a7aee0.w8.b0", !8324, i64 0}
!8324 = !{!"0x7a7aee0.w16.b0", !8325, i64 0}
!8325 = !{!"0x7a7aee0.w32.b0", !8326, i64 0}
!8326 = !{!"0x7a7aee0.w64.b0", !8327, i64 0}
!8327 = !{!"0x7a7aee0.w128.b0", !8328, i64 0}
!8328 = !{!"0x7a7aee0.w256.b0", !8329, i64 0}
!8329 = !{!"0x7a7aee0.w512.b0", !8330, i64 0}
!8330 = !{!"0x7a7aee0.w1024.b0", !8331, i64 0}
!8331 = !{!"int64", !8332, i64 0}
!8332 = !{!"0x7a7aee0", !8, i64 0}
!8333 = !{!8334, !8334, i64 0}
!8334 = !{!"0x7a7aee0.w1.b1", !8321, i64 0}
!8335 = !{!8336, !8336, i64 0}
!8336 = !{!"0x7a7aee0.w1.b2", !8337, i64 0}
!8337 = !{!"0x7a7aee0.w2.b2", !8322, i64 0}
!8338 = !{!8339, !8339, i64 0}
!8339 = !{!"0x7a7aee0.w1.b3", !8337, i64 0}
!8340 = !{!8341, !8341, i64 0}
!8341 = !{!"0x7a7aee0.w1.b4", !8342, i64 0}
!8342 = !{!"0x7a7aee0.w2.b4", !8343, i64 0}
!8343 = !{!"0x7a7aee0.w4.b4", !8323, i64 0}
!8344 = !{!8345, !8345, i64 0}
!8345 = !{!"0x7a74380.w8.b0", !8346, i64 0}
!8346 = !{!"0x7a74380.w16.b0", !8347, i64 0}
!8347 = !{!"0x7a74380.w32.b0", !8348, i64 0}
!8348 = !{!"0x7a74380.w64.b0", !8349, i64 0}
!8349 = !{!"0x7a74380.w128.b0", !8350, i64 0}
!8350 = !{!"0x7a74380.w256.b0", !8351, i64 0}
!8351 = !{!"0x7a74380.w512.b0", !8352, i64 0}
!8352 = !{!"0x7a74380.w1024.b0", !8353, i64 0}
!8353 = !{!"int64", !8354, i64 0}
!8354 = !{!"0x7a74380", !8, i64 0}
!8355 = !{!8356, !8356, i64 0}
!8356 = !{!"0x7a74380.w1.b0", !8357, i64 0}
!8357 = !{!"0x7a74380.w2.b0", !8358, i64 0}
!8358 = !{!"0x7a74380.w4.b0", !8345, i64 0}
!8359 = !{!8360, !8360, i64 0}
!8360 = !{!"0x7a7a740.w1.b0", !8361, i64 0}
!8361 = !{!"0x7a7a740.w2.b0", !8362, i64 0}
!8362 = !{!"0x7a7a740.w4.b0", !8363, i64 0}
!8363 = !{!"0x7a7a740.w8.b0", !8364, i64 0}
!8364 = !{!"0x7a7a740.w16.b0", !8365, i64 0}
!8365 = !{!"0x7a7a740.w32.b0", !8366, i64 0}
!8366 = !{!"0x7a7a740.w64.b0", !8367, i64 0}
!8367 = !{!"0x7a7a740.w128.b0", !8368, i64 0}
!8368 = !{!"0x7a7a740.w256.b0", !8369, i64 0}
!8369 = !{!"0x7a7a740.w512.b0", !8370, i64 0}
!8370 = !{!"0x7a7a740.w1024.b0", !8371, i64 0}
!8371 = !{!"int64", !8372, i64 0}
!8372 = !{!"0x7a7a740", !8, i64 0}
!8373 = !{!8374, !8374, i64 0}
!8374 = !{!"0x7a7a740.w1.b1", !8361, i64 0}
!8375 = !{!8376, !8376, i64 0}
!8376 = !{!"0x7a7a740.w1.b2", !8377, i64 0}
!8377 = !{!"0x7a7a740.w2.b2", !8362, i64 0}
!8378 = !{!8379, !8379, i64 0}
!8379 = !{!"0x7a7a740.w1.b3", !8377, i64 0}
!8380 = !{!8381, !8381, i64 0}
!8381 = !{!"0x7a7a740.w1.b4", !8382, i64 0}
!8382 = !{!"0x7a7a740.w2.b4", !8383, i64 0}
!8383 = !{!"0x7a7a740.w4.b4", !8363, i64 0}
!8384 = !{!8385, !8385, i64 0}
!8385 = !{!"0x7a7a740.w1.b5", !8382, i64 0}
!8386 = !{!8387, !8387, i64 0}
!8387 = !{!"0x7a7b1a0.w8.b0", !8388, i64 0}
!8388 = !{!"0x7a7b1a0.w16.b0", !8389, i64 0}
!8389 = !{!"0x7a7b1a0.w32.b0", !8390, i64 0}
!8390 = !{!"0x7a7b1a0.w64.b0", !8391, i64 0}
!8391 = !{!"0x7a7b1a0.w128.b0", !8392, i64 0}
!8392 = !{!"0x7a7b1a0.w256.b0", !8393, i64 0}
!8393 = !{!"0x7a7b1a0.w512.b0", !8394, i64 0}
!8394 = !{!"0x7a7b1a0.w1024.b0", !8395, i64 0}
!8395 = !{!"int64", !8396, i64 0}
!8396 = !{!"0x7a7b1a0", !8, i64 0}
!8397 = !{!8398, !8398, i64 0}
!8398 = !{!"0x7a7b1a0.w1.b1", !8399, i64 0}
!8399 = !{!"0x7a7b1a0.w2.b0", !8400, i64 0}
!8400 = !{!"0x7a7b1a0.w4.b0", !8387, i64 0}
!8401 = !{!8402, !8402, i64 0}
!8402 = !{!"0x7a7b1a0.w1.b0", !8399, i64 0}
!8403 = !{!8404, !8404, i64 0}
!8404 = !{!"0x7a7c7e0.w1.b0", !8405, i64 0}
!8405 = !{!"0x7a7c7e0.w2.b0", !8406, i64 0}
!8406 = !{!"0x7a7c7e0.w4.b0", !8407, i64 0}
!8407 = !{!"0x7a7c7e0.w8.b0", !8408, i64 0}
!8408 = !{!"0x7a7c7e0.w16.b0", !8409, i64 0}
!8409 = !{!"0x7a7c7e0.w32.b0", !8410, i64 0}
!8410 = !{!"0x7a7c7e0.w64.b0", !8411, i64 0}
!8411 = !{!"0x7a7c7e0.w128.b0", !8412, i64 0}
!8412 = !{!"0x7a7c7e0.w256.b0", !8413, i64 0}
!8413 = !{!"0x7a7c7e0.w512.b0", !8414, i64 0}
!8414 = !{!"0x7a7c7e0.w1024.b0", !8415, i64 0}
!8415 = !{!"int64", !8416, i64 0}
!8416 = !{!"0x7a7c7e0", !8, i64 0}
!8417 = !{!8418, !8418, i64 0}
!8418 = !{!"0x7a7c7e0.w1.b1", !8405, i64 0}
!8419 = !{!8420, !8420, i64 0}
!8420 = !{!"0x7a7c7e0.w1.b2", !8421, i64 0}
!8421 = !{!"0x7a7c7e0.w2.b2", !8406, i64 0}
!8422 = !{!8423, !8423, i64 0}
!8423 = !{!"0x7a7c7e0.w1.b3", !8421, i64 0}
!8424 = !{!8425, !8425, i64 0}
!8425 = !{!"0x7a7c7e0.w1.b4", !8426, i64 0}
!8426 = !{!"0x7a7c7e0.w2.b4", !8427, i64 0}
!8427 = !{!"0x7a7c7e0.w4.b4", !8407, i64 0}
!8428 = !{!8429, !8429, i64 0}
!8429 = !{!"0x7a7df80.w8.b0", !8430, i64 0}
!8430 = !{!"0x7a7df80.w16.b0", !8431, i64 0}
!8431 = !{!"0x7a7df80.w32.b0", !8432, i64 0}
!8432 = !{!"0x7a7df80.w64.b0", !8433, i64 0}
!8433 = !{!"0x7a7df80.w128.b0", !8434, i64 0}
!8434 = !{!"0x7a7df80.w256.b0", !8435, i64 0}
!8435 = !{!"0x7a7df80.w512.b0", !8436, i64 0}
!8436 = !{!"0x7a7df80.w1024.b0", !8437, i64 0}
!8437 = !{!"int64", !8438, i64 0}
!8438 = !{!"0x7a7df80", !8, i64 0}
!8439 = !{!8440, !8440, i64 0}
!8440 = !{!"0x7a7df80.w1.b0", !8441, i64 0}
!8441 = !{!"0x7a7df80.w2.b0", !8442, i64 0}
!8442 = !{!"0x7a7df80.w4.b0", !8429, i64 0}
!8443 = !{!8444, !8444, i64 0}
!8444 = !{!"0x7a7f3e0.w1.b0", !8445, i64 0}
!8445 = !{!"0x7a7f3e0.w2.b0", !8446, i64 0}
!8446 = !{!"0x7a7f3e0.w4.b0", !8447, i64 0}
!8447 = !{!"0x7a7f3e0.w8.b0", !8448, i64 0}
!8448 = !{!"0x7a7f3e0.w16.b0", !8449, i64 0}
!8449 = !{!"0x7a7f3e0.w32.b0", !8450, i64 0}
!8450 = !{!"0x7a7f3e0.w64.b0", !8451, i64 0}
!8451 = !{!"0x7a7f3e0.w128.b0", !8452, i64 0}
!8452 = !{!"0x7a7f3e0.w256.b0", !8453, i64 0}
!8453 = !{!"0x7a7f3e0.w512.b0", !8454, i64 0}
!8454 = !{!"0x7a7f3e0.w1024.b0", !8455, i64 0}
!8455 = !{!"int64", !8456, i64 0}
!8456 = !{!"0x7a7f3e0", !8, i64 0}
!8457 = !{!8458, !8458, i64 0}
!8458 = !{!"0x7a7f3e0.w1.b1", !8445, i64 0}
!8459 = !{!8460, !8460, i64 0}
!8460 = !{!"0x7a7f3e0.w1.b2", !8461, i64 0}
!8461 = !{!"0x7a7f3e0.w2.b2", !8446, i64 0}
!8462 = !{!8463, !8463, i64 0}
!8463 = !{!"0x7a7f3e0.w1.b3", !8461, i64 0}
!8464 = !{!8465, !8465, i64 0}
!8465 = !{!"0x7a7f3e0.w1.b4", !8466, i64 0}
!8466 = !{!"0x7a7f3e0.w2.b4", !8467, i64 0}
!8467 = !{!"0x7a7f3e0.w4.b4", !8447, i64 0}
!8468 = !{!8469, !8469, i64 0}
!8469 = !{!"0x7a7f430.w8.b0", !8470, i64 0}
!8470 = !{!"0x7a7f430.w16.b0", !8471, i64 0}
!8471 = !{!"0x7a7f430.w32.b0", !8472, i64 0}
!8472 = !{!"0x7a7f430.w64.b0", !8473, i64 0}
!8473 = !{!"0x7a7f430.w128.b0", !8474, i64 0}
!8474 = !{!"0x7a7f430.w256.b0", !8475, i64 0}
!8475 = !{!"0x7a7f430.w512.b0", !8476, i64 0}
!8476 = !{!"0x7a7f430.w1024.b0", !8477, i64 0}
!8477 = !{!"int64", !8478, i64 0}
!8478 = !{!"0x7a7f430", !8, i64 0}
!8479 = !{!8480, !8480, i64 0}
!8480 = !{!"0x7a7f430.w1.b0", !8481, i64 0}
!8481 = !{!"0x7a7f430.w2.b0", !8482, i64 0}
!8482 = !{!"0x7a7f430.w4.b0", !8469, i64 0}
!8483 = !{!8484, !8484, i64 0}
!8484 = !{!"0x7a80840.w1.b0", !8485, i64 0}
!8485 = !{!"0x7a80840.w2.b0", !8486, i64 0}
!8486 = !{!"0x7a80840.w4.b0", !8487, i64 0}
!8487 = !{!"0x7a80840.w8.b0", !8488, i64 0}
!8488 = !{!"0x7a80840.w16.b0", !8489, i64 0}
!8489 = !{!"0x7a80840.w32.b0", !8490, i64 0}
!8490 = !{!"0x7a80840.w64.b0", !8491, i64 0}
!8491 = !{!"0x7a80840.w128.b0", !8492, i64 0}
!8492 = !{!"0x7a80840.w256.b0", !8493, i64 0}
!8493 = !{!"0x7a80840.w512.b0", !8494, i64 0}
!8494 = !{!"0x7a80840.w1024.b0", !8495, i64 0}
!8495 = !{!"int64", !8496, i64 0}
!8496 = !{!"0x7a80840", !8, i64 0}
!8497 = !{!8498, !8498, i64 0}
!8498 = !{!"0x7a80840.w1.b1", !8485, i64 0}
!8499 = !{!8500, !8500, i64 0}
!8500 = !{!"0x7a80840.w1.b2", !8501, i64 0}
!8501 = !{!"0x7a80840.w2.b2", !8486, i64 0}
!8502 = !{!8503, !8503, i64 0}
!8503 = !{!"0x7a80840.w1.b3", !8501, i64 0}
!8504 = !{!8505, !8505, i64 0}
!8505 = !{!"0x7a80840.w1.b4", !8506, i64 0}
!8506 = !{!"0x7a80840.w2.b4", !8507, i64 0}
!8507 = !{!"0x7a80840.w4.b4", !8487, i64 0}
!8508 = !{!8509, !8509, i64 0}
!8509 = !{!"0x7a81fb0.w8.b0", !8510, i64 0}
!8510 = !{!"0x7a81fb0.w16.b0", !8511, i64 0}
!8511 = !{!"0x7a81fb0.w32.b0", !8512, i64 0}
!8512 = !{!"0x7a81fb0.w64.b0", !8513, i64 0}
!8513 = !{!"0x7a81fb0.w128.b0", !8514, i64 0}
!8514 = !{!"0x7a81fb0.w256.b0", !8515, i64 0}
!8515 = !{!"0x7a81fb0.w512.b0", !8516, i64 0}
!8516 = !{!"0x7a81fb0.w1024.b0", !8517, i64 0}
!8517 = !{!"int64", !8518, i64 0}
!8518 = !{!"0x7a81fb0", !8, i64 0}
!8519 = !{!8520, !8520, i64 0}
!8520 = !{!"0x7a81fb0.w1.b0", !8521, i64 0}
!8521 = !{!"0x7a81fb0.w2.b0", !8522, i64 0}
!8522 = !{!"0x7a81fb0.w4.b0", !8509, i64 0}
!8523 = !{!8524, !8524, i64 0}
!8524 = !{!"float32", !8525, i64 0}
!8525 = !{!"0x7a71e30", !8, i64 0}
!8526 = !{!8527, !8527, i64 0}
!8527 = !{!"float32", !8528, i64 0}
!8528 = !{!"0x7a71050", !8, i64 0}
!8529 = !{!8530, !8530, i64 0}
!8530 = !{!"float32", !8531, i64 0}
!8531 = !{!"0x7a72280", !8, i64 0}
!8532 = !{!8533, !8533, i64 0}
!8533 = !{!"float32", !8534, i64 0}
!8534 = !{!"0x7a72470", !8, i64 0}
!8535 = !{!8536, !8536, i64 0}
!8536 = !{!"float32", !8537, i64 0}
!8537 = !{!"0x1ca749d0", !8, i64 0}
!8538 = !{!8539, !8539, i64 0}
!8539 = !{!"float32", !8540, i64 0}
!8540 = !{!"0x1ca71ab0", !8, i64 0}
!8541 = !{!8542, !8542, i64 0}
!8542 = !{!"0x7936dc0.w1.b0", !8543, i64 0}
!8543 = !{!"0x7936dc0.w2.b0", !8544, i64 0}
!8544 = !{!"0x7936dc0.w4.b0", !8545, i64 0}
!8545 = !{!"0x7936dc0.w8.b0", !8546, i64 0}
!8546 = !{!"0x7936dc0.w16.b0", !8547, i64 0}
!8547 = !{!"0x7936dc0.w32.b0", !8548, i64 0}
!8548 = !{!"0x7936dc0.w64.b0", !8549, i64 0}
!8549 = !{!"0x7936dc0.w128.b0", !8550, i64 0}
!8550 = !{!"0x7936dc0.w256.b0", !8551, i64 0}
!8551 = !{!"0x7936dc0.w512.b0", !8552, i64 0}
!8552 = !{!"0x7936dc0.w1024.b0", !8553, i64 0}
!8553 = !{!"int32", !8554, i64 0}
!8554 = !{!"0x7936dc0", !8, i64 0}
!8555 = !{!8556, !8556, i64 0}
!8556 = !{!"0x7936dc0.w1.b2", !8557, i64 0}
!8557 = !{!"0x7936dc0.w2.b2", !8544, i64 0}
!8558 = !{!8559, !8559, i64 0}
!8559 = !{!"0x7936dc0.w1.b3", !8557, i64 0}
!8560 = !{!8561, !8561, i64 0}
!8561 = !{!"0x7936dc0.w1.b4", !8562, i64 0}
!8562 = !{!"0x7936dc0.w2.b4", !8563, i64 0}
!8563 = !{!"0x7936dc0.w4.b4", !8545, i64 0}
!8564 = !{!8565, !8565, i64 0}
!8565 = !{!"0x7936dc0.w1.b1", !8543, i64 0}
!8566 = !{!8567, !8567, i64 0}
!8567 = !{!"0x7948610.w1.b0", !8568, i64 0}
!8568 = !{!"0x7948610.w2.b0", !8569, i64 0}
!8569 = !{!"0x7948610.w4.b0", !8570, i64 0}
!8570 = !{!"0x7948610.w8.b0", !8571, i64 0}
!8571 = !{!"0x7948610.w16.b0", !8572, i64 0}
!8572 = !{!"0x7948610.w32.b0", !8573, i64 0}
!8573 = !{!"0x7948610.w64.b0", !8574, i64 0}
!8574 = !{!"0x7948610.w128.b0", !8575, i64 0}
!8575 = !{!"0x7948610.w256.b0", !8576, i64 0}
!8576 = !{!"0x7948610.w512.b0", !8577, i64 0}
!8577 = !{!"0x7948610.w1024.b0", !8578, i64 0}
!8578 = !{!"int64", !8579, i64 0}
!8579 = !{!"0x7948610", !8, i64 0}
!8580 = !{!8581, !8581, i64 0}
!8581 = !{!"0x7948610.w1.b1", !8568, i64 0}
!8582 = !{!8583, !8583, i64 0}
!8583 = !{!"0x7948610.w1.b2", !8584, i64 0}
!8584 = !{!"0x7948610.w2.b2", !8569, i64 0}
!8585 = !{!8586, !8586, i64 0}
!8586 = !{!"0x7948610.w1.b3", !8584, i64 0}
!8587 = !{!8588, !8588, i64 0}
!8588 = !{!"0x7948610.w1.b4", !8589, i64 0}
!8589 = !{!"0x7948610.w2.b4", !8590, i64 0}
!8590 = !{!"0x7948610.w4.b4", !8570, i64 0}
!8591 = !{!8592, !8592, i64 0}
!8592 = !{!"0x7948920.w8.b0", !8593, i64 0}
!8593 = !{!"0x7948920.w16.b0", !8594, i64 0}
!8594 = !{!"0x7948920.w32.b0", !8595, i64 0}
!8595 = !{!"0x7948920.w64.b0", !8596, i64 0}
!8596 = !{!"0x7948920.w128.b0", !8597, i64 0}
!8597 = !{!"0x7948920.w256.b0", !8598, i64 0}
!8598 = !{!"0x7948920.w512.b0", !8599, i64 0}
!8599 = !{!"0x7948920.w1024.b0", !8600, i64 0}
!8600 = !{!"int64", !8601, i64 0}
!8601 = !{!"0x7948920", !8, i64 0}
!8602 = !{!8603, !8603, i64 0}
!8603 = !{!"0x7948920.w1.b0", !8604, i64 0}
!8604 = !{!"0x7948920.w2.b0", !8605, i64 0}
!8605 = !{!"0x7948920.w4.b0", !8592, i64 0}
!8606 = !{!8607, !8607, i64 0}
!8607 = !{!"0x79489c0.w1.b0", !8608, i64 0}
!8608 = !{!"0x79489c0.w2.b0", !8609, i64 0}
!8609 = !{!"0x79489c0.w4.b0", !8610, i64 0}
!8610 = !{!"0x79489c0.w8.b0", !8611, i64 0}
!8611 = !{!"0x79489c0.w16.b0", !8612, i64 0}
!8612 = !{!"0x79489c0.w32.b0", !8613, i64 0}
!8613 = !{!"0x79489c0.w64.b0", !8614, i64 0}
!8614 = !{!"0x79489c0.w128.b0", !8615, i64 0}
!8615 = !{!"0x79489c0.w256.b0", !8616, i64 0}
!8616 = !{!"0x79489c0.w512.b0", !8617, i64 0}
!8617 = !{!"0x79489c0.w1024.b0", !8618, i64 0}
!8618 = !{!"int64", !8619, i64 0}
!8619 = !{!"0x79489c0", !8, i64 0}
!8620 = !{!8621, !8621, i64 0}
!8621 = !{!"0x79489c0.w1.b1", !8608, i64 0}
!8622 = !{!8623, !8623, i64 0}
!8623 = !{!"0x79489c0.w1.b2", !8624, i64 0}
!8624 = !{!"0x79489c0.w2.b2", !8609, i64 0}
!8625 = !{!8626, !8626, i64 0}
!8626 = !{!"0x79489c0.w1.b3", !8624, i64 0}
!8627 = !{!8628, !8628, i64 0}
!8628 = !{!"0x79489c0.w1.b4", !8629, i64 0}
!8629 = !{!"0x79489c0.w2.b4", !8630, i64 0}
!8630 = !{!"0x79489c0.w4.b4", !8610, i64 0}
!8631 = !{!8632, !8632, i64 0}
!8632 = !{!"0x79489c0.w1.b5", !8629, i64 0}
!8633 = !{!8634, !8634, i64 0}
!8634 = !{!"0x79486c0.w8.b0", !8635, i64 0}
!8635 = !{!"0x79486c0.w16.b0", !8636, i64 0}
!8636 = !{!"0x79486c0.w32.b0", !8637, i64 0}
!8637 = !{!"0x79486c0.w64.b0", !8638, i64 0}
!8638 = !{!"0x79486c0.w128.b0", !8639, i64 0}
!8639 = !{!"0x79486c0.w256.b0", !8640, i64 0}
!8640 = !{!"0x79486c0.w512.b0", !8641, i64 0}
!8641 = !{!"0x79486c0.w1024.b0", !8642, i64 0}
!8642 = !{!"int64", !8643, i64 0}
!8643 = !{!"0x79486c0", !8, i64 0}
!8644 = !{!8645, !8645, i64 0}
!8645 = !{!"0x79486c0.w1.b1", !8646, i64 0}
!8646 = !{!"0x79486c0.w2.b0", !8647, i64 0}
!8647 = !{!"0x79486c0.w4.b0", !8634, i64 0}
!8648 = !{!8649, !8649, i64 0}
!8649 = !{!"0x79486c0.w1.b0", !8646, i64 0}
!8650 = !{!8651, !8651, i64 0}
!8651 = !{!"0x7948fb0.w1.b0", !8652, i64 0}
!8652 = !{!"0x7948fb0.w2.b0", !8653, i64 0}
!8653 = !{!"0x7948fb0.w4.b0", !8654, i64 0}
!8654 = !{!"0x7948fb0.w8.b0", !8655, i64 0}
!8655 = !{!"0x7948fb0.w16.b0", !8656, i64 0}
!8656 = !{!"0x7948fb0.w32.b0", !8657, i64 0}
!8657 = !{!"0x7948fb0.w64.b0", !8658, i64 0}
!8658 = !{!"0x7948fb0.w128.b0", !8659, i64 0}
!8659 = !{!"0x7948fb0.w256.b0", !8660, i64 0}
!8660 = !{!"0x7948fb0.w512.b0", !8661, i64 0}
!8661 = !{!"0x7948fb0.w1024.b0", !8662, i64 0}
!8662 = !{!"int64", !8663, i64 0}
!8663 = !{!"0x7948fb0", !8, i64 0}
!8664 = !{!8665, !8665, i64 0}
!8665 = !{!"0x7948fb0.w1.b1", !8652, i64 0}
!8666 = !{!8667, !8667, i64 0}
!8667 = !{!"0x7948fb0.w1.b2", !8668, i64 0}
!8668 = !{!"0x7948fb0.w2.b2", !8653, i64 0}
!8669 = !{!8670, !8670, i64 0}
!8670 = !{!"0x7948fb0.w1.b3", !8668, i64 0}
!8671 = !{!8672, !8672, i64 0}
!8672 = !{!"0x7948fb0.w1.b4", !8673, i64 0}
!8673 = !{!"0x7948fb0.w2.b4", !8674, i64 0}
!8674 = !{!"0x7948fb0.w4.b4", !8654, i64 0}
!8675 = !{!8676, !8676, i64 0}
!8676 = !{!"0x794a010.w8.b0", !8677, i64 0}
!8677 = !{!"0x794a010.w16.b0", !8678, i64 0}
!8678 = !{!"0x794a010.w32.b0", !8679, i64 0}
!8679 = !{!"0x794a010.w64.b0", !8680, i64 0}
!8680 = !{!"0x794a010.w128.b0", !8681, i64 0}
!8681 = !{!"0x794a010.w256.b0", !8682, i64 0}
!8682 = !{!"0x794a010.w512.b0", !8683, i64 0}
!8683 = !{!"0x794a010.w1024.b0", !8684, i64 0}
!8684 = !{!"int64", !8685, i64 0}
!8685 = !{!"0x794a010", !8, i64 0}
!8686 = !{!8687, !8687, i64 0}
!8687 = !{!"0x794a010.w1.b0", !8688, i64 0}
!8688 = !{!"0x794a010.w2.b0", !8689, i64 0}
!8689 = !{!"0x794a010.w4.b0", !8676, i64 0}
!8690 = !{!8691, !8691, i64 0}
!8691 = !{!"0x794b270.w1.b0", !8692, i64 0}
!8692 = !{!"0x794b270.w2.b0", !8693, i64 0}
!8693 = !{!"0x794b270.w4.b0", !8694, i64 0}
!8694 = !{!"0x794b270.w8.b0", !8695, i64 0}
!8695 = !{!"0x794b270.w16.b0", !8696, i64 0}
!8696 = !{!"0x794b270.w32.b0", !8697, i64 0}
!8697 = !{!"0x794b270.w64.b0", !8698, i64 0}
!8698 = !{!"0x794b270.w128.b0", !8699, i64 0}
!8699 = !{!"0x794b270.w256.b0", !8700, i64 0}
!8700 = !{!"0x794b270.w512.b0", !8701, i64 0}
!8701 = !{!"0x794b270.w1024.b0", !8702, i64 0}
!8702 = !{!"int64", !8703, i64 0}
!8703 = !{!"0x794b270", !8, i64 0}
!8704 = !{!8705, !8705, i64 0}
!8705 = !{!"0x794b270.w1.b1", !8692, i64 0}
!8706 = !{!8707, !8707, i64 0}
!8707 = !{!"0x794b270.w1.b2", !8708, i64 0}
!8708 = !{!"0x794b270.w2.b2", !8693, i64 0}
!8709 = !{!8710, !8710, i64 0}
!8710 = !{!"0x794b270.w1.b3", !8708, i64 0}
!8711 = !{!8712, !8712, i64 0}
!8712 = !{!"0x794b270.w1.b4", !8713, i64 0}
!8713 = !{!"0x794b270.w2.b4", !8714, i64 0}
!8714 = !{!"0x794b270.w4.b4", !8694, i64 0}
!8715 = !{!8716, !8716, i64 0}
!8716 = !{!"0x794b2c0.w8.b0", !8717, i64 0}
!8717 = !{!"0x794b2c0.w16.b0", !8718, i64 0}
!8718 = !{!"0x794b2c0.w32.b0", !8719, i64 0}
!8719 = !{!"0x794b2c0.w64.b0", !8720, i64 0}
!8720 = !{!"0x794b2c0.w128.b0", !8721, i64 0}
!8721 = !{!"0x794b2c0.w256.b0", !8722, i64 0}
!8722 = !{!"0x794b2c0.w512.b0", !8723, i64 0}
!8723 = !{!"0x794b2c0.w1024.b0", !8724, i64 0}
!8724 = !{!"int64", !8725, i64 0}
!8725 = !{!"0x794b2c0", !8, i64 0}
!8726 = !{!8727, !8727, i64 0}
!8727 = !{!"0x794b2c0.w1.b0", !8728, i64 0}
!8728 = !{!"0x794b2c0.w2.b0", !8729, i64 0}
!8729 = !{!"0x794b2c0.w4.b0", !8716, i64 0}
!8730 = !{!8731, !8731, i64 0}
!8731 = !{!"0x79de9f0.w1.b0", !8732, i64 0}
!8732 = !{!"0x79de9f0.w2.b0", !8733, i64 0}
!8733 = !{!"0x79de9f0.w4.b0", !8734, i64 0}
!8734 = !{!"0x79de9f0.w8.b0", !8735, i64 0}
!8735 = !{!"0x79de9f0.w16.b0", !8736, i64 0}
!8736 = !{!"0x79de9f0.w32.b0", !8737, i64 0}
!8737 = !{!"0x79de9f0.w64.b0", !8738, i64 0}
!8738 = !{!"0x79de9f0.w128.b0", !8739, i64 0}
!8739 = !{!"0x79de9f0.w256.b0", !8740, i64 0}
!8740 = !{!"0x79de9f0.w512.b0", !8741, i64 0}
!8741 = !{!"0x79de9f0.w1024.b0", !8742, i64 0}
!8742 = !{!"int64", !8743, i64 0}
!8743 = !{!"0x79de9f0", !8, i64 0}
!8744 = !{!8745, !8745, i64 0}
!8745 = !{!"0x79de9f0.w1.b1", !8732, i64 0}
!8746 = !{!8747, !8747, i64 0}
!8747 = !{!"0x79de9f0.w1.b2", !8748, i64 0}
!8748 = !{!"0x79de9f0.w2.b2", !8733, i64 0}
!8749 = !{!8750, !8750, i64 0}
!8750 = !{!"0x79de9f0.w1.b3", !8748, i64 0}
!8751 = !{!8752, !8752, i64 0}
!8752 = !{!"0x79de9f0.w1.b4", !8753, i64 0}
!8753 = !{!"0x79de9f0.w2.b4", !8754, i64 0}
!8754 = !{!"0x79de9f0.w4.b4", !8734, i64 0}
!8755 = !{!8756, !8756, i64 0}
!8756 = !{!"0x79debf0.w8.b0", !8757, i64 0}
!8757 = !{!"0x79debf0.w16.b0", !8758, i64 0}
!8758 = !{!"0x79debf0.w32.b0", !8759, i64 0}
!8759 = !{!"0x79debf0.w64.b0", !8760, i64 0}
!8760 = !{!"0x79debf0.w128.b0", !8761, i64 0}
!8761 = !{!"0x79debf0.w256.b0", !8762, i64 0}
!8762 = !{!"0x79debf0.w512.b0", !8763, i64 0}
!8763 = !{!"0x79debf0.w1024.b0", !8764, i64 0}
!8764 = !{!"int64", !8765, i64 0}
!8765 = !{!"0x79debf0", !8, i64 0}
!8766 = !{!8767, !8767, i64 0}
!8767 = !{!"0x79debf0.w1.b0", !8768, i64 0}
!8768 = !{!"0x79debf0.w2.b0", !8769, i64 0}
!8769 = !{!"0x79debf0.w4.b0", !8756, i64 0}
!8770 = !{!8771, !8771, i64 0}
!8771 = !{!"float32", !8772, i64 0}
!8772 = !{!"0x7936aa0", !8, i64 0}
!8773 = !{!8774, !8774, i64 0}
!8774 = !{!"float32", !8775, i64 0}
!8775 = !{!"0x7936f60", !8, i64 0}
!8776 = !{!8777, !8777, i64 0}
!8777 = !{!"float32", !8778, i64 0}
!8778 = !{!"0x7933bc0", !8, i64 0}
!8779 = !{!8780, !8780, i64 0}
!8780 = !{!"float32", !8781, i64 0}
!8781 = !{!"0x79320e0", !8, i64 0}
!8782 = !{!8783, !8783, i64 0}
!8783 = !{!"float32", !8784, i64 0}
!8784 = !{!"0x7936970", !8, i64 0}
!8785 = !{!8786, !8786, i64 0}
!8786 = !{!"float32", !8787, i64 0}
!8787 = !{!"0x7936660", !8, i64 0}
!8788 = !{!8789, !8789, i64 0}
!8789 = !{!"0x1ca3fda0.w1.b0", !8790, i64 0}
!8790 = !{!"0x1ca3fda0.w2.b0", !8791, i64 0}
!8791 = !{!"0x1ca3fda0.w4.b0", !8792, i64 0}
!8792 = !{!"0x1ca3fda0.w8.b0", !8793, i64 0}
!8793 = !{!"0x1ca3fda0.w16.b0", !8794, i64 0}
!8794 = !{!"0x1ca3fda0.w32.b0", !8795, i64 0}
!8795 = !{!"0x1ca3fda0.w64.b0", !8796, i64 0}
!8796 = !{!"0x1ca3fda0.w128.b0", !8797, i64 0}
!8797 = !{!"0x1ca3fda0.w256.b0", !8798, i64 0}
!8798 = !{!"0x1ca3fda0.w512.b0", !8799, i64 0}
!8799 = !{!"0x1ca3fda0.w1024.b0", !8800, i64 0}
!8800 = !{!"int32", !8801, i64 0}
!8801 = !{!"0x1ca3fda0", !8, i64 0}
!8802 = !{!8803, !8803, i64 0}
!8803 = !{!"0x1ca3fda0.w1.b1", !8790, i64 0}
!8804 = !{!8805, !8805, i64 0}
!8805 = !{!"0x1ca40c90.w1.b0", !8806, i64 0}
!8806 = !{!"0x1ca40c90.w2.b0", !8807, i64 0}
!8807 = !{!"0x1ca40c90.w4.b0", !8808, i64 0}
!8808 = !{!"0x1ca40c90.w8.b0", !8809, i64 0}
!8809 = !{!"0x1ca40c90.w16.b0", !8810, i64 0}
!8810 = !{!"0x1ca40c90.w32.b0", !8811, i64 0}
!8811 = !{!"0x1ca40c90.w64.b0", !8812, i64 0}
!8812 = !{!"0x1ca40c90.w128.b0", !8813, i64 0}
!8813 = !{!"0x1ca40c90.w256.b0", !8814, i64 0}
!8814 = !{!"0x1ca40c90.w512.b0", !8815, i64 0}
!8815 = !{!"0x1ca40c90.w1024.b0", !8816, i64 0}
!8816 = !{!"int64", !8817, i64 0}
!8817 = !{!"0x1ca40c90", !8, i64 0}
!8818 = !{!8819, !8819, i64 0}
!8819 = !{!"0x1ca40c90.w1.b1", !8806, i64 0}
!8820 = !{!8821, !8821, i64 0}
!8821 = !{!"0x1ca40c90.w1.b2", !8822, i64 0}
!8822 = !{!"0x1ca40c90.w2.b2", !8807, i64 0}
!8823 = !{!8824, !8824, i64 0}
!8824 = !{!"0x1ca40c90.w1.b3", !8822, i64 0}
!8825 = !{!8826, !8826, i64 0}
!8826 = !{!"0x1ca411f0.w4.b0", !8827, i64 0}
!8827 = !{!"0x1ca411f0.w8.b0", !8828, i64 0}
!8828 = !{!"0x1ca411f0.w16.b0", !8829, i64 0}
!8829 = !{!"0x1ca411f0.w32.b0", !8830, i64 0}
!8830 = !{!"0x1ca411f0.w64.b0", !8831, i64 0}
!8831 = !{!"0x1ca411f0.w128.b0", !8832, i64 0}
!8832 = !{!"0x1ca411f0.w256.b0", !8833, i64 0}
!8833 = !{!"0x1ca411f0.w512.b0", !8834, i64 0}
!8834 = !{!"0x1ca411f0.w1024.b0", !8835, i64 0}
!8835 = !{!"int64", !8836, i64 0}
!8836 = !{!"0x1ca411f0", !8, i64 0}
!8837 = !{!8838, !8838, i64 0}
!8838 = !{!"0x1ca41440.w1.b0", !8839, i64 0}
!8839 = !{!"0x1ca41440.w2.b0", !8840, i64 0}
!8840 = !{!"0x1ca41440.w4.b0", !8841, i64 0}
!8841 = !{!"0x1ca41440.w8.b0", !8842, i64 0}
!8842 = !{!"0x1ca41440.w16.b0", !8843, i64 0}
!8843 = !{!"0x1ca41440.w32.b0", !8844, i64 0}
!8844 = !{!"0x1ca41440.w64.b0", !8845, i64 0}
!8845 = !{!"0x1ca41440.w128.b0", !8846, i64 0}
!8846 = !{!"0x1ca41440.w256.b0", !8847, i64 0}
!8847 = !{!"0x1ca41440.w512.b0", !8848, i64 0}
!8848 = !{!"0x1ca41440.w1024.b0", !8849, i64 0}
!8849 = !{!"int64", !8850, i64 0}
!8850 = !{!"0x1ca41440", !8, i64 0}
!8851 = !{!8852, !8852, i64 0}
!8852 = !{!"0x1ca41440.w1.b1", !8839, i64 0}
!8853 = !{!8854, !8854, i64 0}
!8854 = !{!"0x1ca41440.w1.b2", !8855, i64 0}
!8855 = !{!"0x1ca41440.w2.b2", !8840, i64 0}
!8856 = !{!8857, !8857, i64 0}
!8857 = !{!"0x1ca41440.w1.b3", !8855, i64 0}
!8858 = !{!8859, !8859, i64 0}
!8859 = !{!"0x1ca41440.w1.b4", !8860, i64 0}
!8860 = !{!"0x1ca41440.w2.b4", !8861, i64 0}
!8861 = !{!"0x1ca41440.w4.b4", !8841, i64 0}
!8862 = !{!8863, !8863, i64 0}
!8863 = !{!"0x1ca413f0.w8.b0", !8864, i64 0}
!8864 = !{!"0x1ca413f0.w16.b0", !8865, i64 0}
!8865 = !{!"0x1ca413f0.w32.b0", !8866, i64 0}
!8866 = !{!"0x1ca413f0.w64.b0", !8867, i64 0}
!8867 = !{!"0x1ca413f0.w128.b0", !8868, i64 0}
!8868 = !{!"0x1ca413f0.w256.b0", !8869, i64 0}
!8869 = !{!"0x1ca413f0.w512.b0", !8870, i64 0}
!8870 = !{!"0x1ca413f0.w1024.b0", !8871, i64 0}
!8871 = !{!"int64", !8872, i64 0}
!8872 = !{!"0x1ca413f0", !8, i64 0}
!8873 = !{!8874, !8874, i64 0}
!8874 = !{!"0x1ca413f0.w1.b0", !8875, i64 0}
!8875 = !{!"0x1ca413f0.w2.b0", !8876, i64 0}
!8876 = !{!"0x1ca413f0.w4.b0", !8863, i64 0}
!8877 = !{!8878, !8878, i64 0}
!8878 = !{!"float32", !8879, i64 0}
!8879 = !{!"0x1ca3c000", !8, i64 0}
!8880 = !{!8881, !8881, i64 0}
!8881 = !{!"float32", !8882, i64 0}
!8882 = !{!"0x1ae17d30", !8, i64 0}
!8883 = !{!8884, !8884, i64 0}
!8884 = !{!"0x7823d10.w1.b0", !8885, i64 0}
!8885 = !{!"0x7823d10.w2.b0", !8886, i64 0}
!8886 = !{!"0x7823d10.w4.b0", !8887, i64 0}
!8887 = !{!"0x7823d10.w8.b0", !8888, i64 0}
!8888 = !{!"0x7823d10.w16.b0", !8889, i64 0}
!8889 = !{!"0x7823d10.w32.b0", !8890, i64 0}
!8890 = !{!"0x7823d10.w64.b0", !8891, i64 0}
!8891 = !{!"0x7823d10.w128.b0", !8892, i64 0}
!8892 = !{!"0x7823d10.w256.b0", !8893, i64 0}
!8893 = !{!"0x7823d10.w512.b0", !8894, i64 0}
!8894 = !{!"0x7823d10.w1024.b0", !8895, i64 0}
!8895 = !{!"int32", !8896, i64 0}
!8896 = !{!"0x7823d10", !8, i64 0}
!8897 = !{!8898, !8898, i64 0}
!8898 = !{!"0x7823d10.w1.b2", !8899, i64 0}
!8899 = !{!"0x7823d10.w2.b2", !8886, i64 0}
!8900 = !{!8901, !8901, i64 0}
!8901 = !{!"0x7823d10.w1.b3", !8899, i64 0}
!8902 = !{!8903, !8903, i64 0}
!8903 = !{!"0x7823d10.w1.b4", !8904, i64 0}
!8904 = !{!"0x7823d10.w2.b4", !8905, i64 0}
!8905 = !{!"0x7823d10.w4.b4", !8887, i64 0}
!8906 = !{!8907, !8907, i64 0}
!8907 = !{!"0x7823d10.w1.b1", !8885, i64 0}
!8908 = !{!8909, !8909, i64 0}
!8909 = !{!"0x7824e90.w1.b0", !8910, i64 0}
!8910 = !{!"0x7824e90.w2.b0", !8911, i64 0}
!8911 = !{!"0x7824e90.w4.b0", !8912, i64 0}
!8912 = !{!"0x7824e90.w8.b0", !8913, i64 0}
!8913 = !{!"0x7824e90.w16.b0", !8914, i64 0}
!8914 = !{!"0x7824e90.w32.b0", !8915, i64 0}
!8915 = !{!"0x7824e90.w64.b0", !8916, i64 0}
!8916 = !{!"0x7824e90.w128.b0", !8917, i64 0}
!8917 = !{!"0x7824e90.w256.b0", !8918, i64 0}
!8918 = !{!"0x7824e90.w512.b0", !8919, i64 0}
!8919 = !{!"0x7824e90.w1024.b0", !8920, i64 0}
!8920 = !{!"int64", !8921, i64 0}
!8921 = !{!"0x7824e90", !8, i64 0}
!8922 = !{!8923, !8923, i64 0}
!8923 = !{!"0x7824e90.w1.b1", !8910, i64 0}
!8924 = !{!8925, !8925, i64 0}
!8925 = !{!"0x7824e90.w1.b2", !8926, i64 0}
!8926 = !{!"0x7824e90.w2.b2", !8911, i64 0}
!8927 = !{!8928, !8928, i64 0}
!8928 = !{!"0x7824e90.w1.b3", !8926, i64 0}
!8929 = !{!8930, !8930, i64 0}
!8930 = !{!"0x7824e90.w1.b4", !8931, i64 0}
!8931 = !{!"0x7824e90.w2.b4", !8932, i64 0}
!8932 = !{!"0x7824e90.w4.b4", !8912, i64 0}
!8933 = !{!8934, !8934, i64 0}
!8934 = !{!"0x78251a0.w8.b0", !8935, i64 0}
!8935 = !{!"0x78251a0.w16.b0", !8936, i64 0}
!8936 = !{!"0x78251a0.w32.b0", !8937, i64 0}
!8937 = !{!"0x78251a0.w64.b0", !8938, i64 0}
!8938 = !{!"0x78251a0.w128.b0", !8939, i64 0}
!8939 = !{!"0x78251a0.w256.b0", !8940, i64 0}
!8940 = !{!"0x78251a0.w512.b0", !8941, i64 0}
!8941 = !{!"0x78251a0.w1024.b0", !8942, i64 0}
!8942 = !{!"int64", !8943, i64 0}
!8943 = !{!"0x78251a0", !8, i64 0}
!8944 = !{!8945, !8945, i64 0}
!8945 = !{!"0x78251a0.w1.b0", !8946, i64 0}
!8946 = !{!"0x78251a0.w2.b0", !8947, i64 0}
!8947 = !{!"0x78251a0.w4.b0", !8934, i64 0}
!8948 = !{!8949, !8949, i64 0}
!8949 = !{!"0x7825240.w1.b0", !8950, i64 0}
!8950 = !{!"0x7825240.w2.b0", !8951, i64 0}
!8951 = !{!"0x7825240.w4.b0", !8952, i64 0}
!8952 = !{!"0x7825240.w8.b0", !8953, i64 0}
!8953 = !{!"0x7825240.w16.b0", !8954, i64 0}
!8954 = !{!"0x7825240.w32.b0", !8955, i64 0}
!8955 = !{!"0x7825240.w64.b0", !8956, i64 0}
!8956 = !{!"0x7825240.w128.b0", !8957, i64 0}
!8957 = !{!"0x7825240.w256.b0", !8958, i64 0}
!8958 = !{!"0x7825240.w512.b0", !8959, i64 0}
!8959 = !{!"0x7825240.w1024.b0", !8960, i64 0}
!8960 = !{!"int64", !8961, i64 0}
!8961 = !{!"0x7825240", !8, i64 0}
!8962 = !{!8963, !8963, i64 0}
!8963 = !{!"0x7825240.w1.b1", !8950, i64 0}
!8964 = !{!8965, !8965, i64 0}
!8965 = !{!"0x7825240.w1.b2", !8966, i64 0}
!8966 = !{!"0x7825240.w2.b2", !8951, i64 0}
!8967 = !{!8968, !8968, i64 0}
!8968 = !{!"0x7825240.w1.b3", !8966, i64 0}
!8969 = !{!8970, !8970, i64 0}
!8970 = !{!"0x7825240.w1.b4", !8971, i64 0}
!8971 = !{!"0x7825240.w2.b4", !8972, i64 0}
!8972 = !{!"0x7825240.w4.b4", !8952, i64 0}
!8973 = !{!8974, !8974, i64 0}
!8974 = !{!"0x7825240.w1.b5", !8971, i64 0}
!8975 = !{!8976, !8976, i64 0}
!8976 = !{!"0x7824f40.w8.b0", !8977, i64 0}
!8977 = !{!"0x7824f40.w16.b0", !8978, i64 0}
!8978 = !{!"0x7824f40.w32.b0", !8979, i64 0}
!8979 = !{!"0x7824f40.w64.b0", !8980, i64 0}
!8980 = !{!"0x7824f40.w128.b0", !8981, i64 0}
!8981 = !{!"0x7824f40.w256.b0", !8982, i64 0}
!8982 = !{!"0x7824f40.w512.b0", !8983, i64 0}
!8983 = !{!"0x7824f40.w1024.b0", !8984, i64 0}
!8984 = !{!"int64", !8985, i64 0}
!8985 = !{!"0x7824f40", !8, i64 0}
!8986 = !{!8987, !8987, i64 0}
!8987 = !{!"0x7824f40.w1.b1", !8988, i64 0}
!8988 = !{!"0x7824f40.w2.b0", !8989, i64 0}
!8989 = !{!"0x7824f40.w4.b0", !8976, i64 0}
!8990 = !{!8991, !8991, i64 0}
!8991 = !{!"0x7824f40.w1.b0", !8988, i64 0}
!8992 = !{!8993, !8993, i64 0}
!8993 = !{!"0x7825b40.w1.b0", !8994, i64 0}
!8994 = !{!"0x7825b40.w2.b0", !8995, i64 0}
!8995 = !{!"0x7825b40.w4.b0", !8996, i64 0}
!8996 = !{!"0x7825b40.w8.b0", !8997, i64 0}
!8997 = !{!"0x7825b40.w16.b0", !8998, i64 0}
!8998 = !{!"0x7825b40.w32.b0", !8999, i64 0}
!8999 = !{!"0x7825b40.w64.b0", !9000, i64 0}
!9000 = !{!"0x7825b40.w128.b0", !9001, i64 0}
!9001 = !{!"0x7825b40.w256.b0", !9002, i64 0}
!9002 = !{!"0x7825b40.w512.b0", !9003, i64 0}
!9003 = !{!"0x7825b40.w1024.b0", !9004, i64 0}
!9004 = !{!"int64", !9005, i64 0}
!9005 = !{!"0x7825b40", !8, i64 0}
!9006 = !{!9007, !9007, i64 0}
!9007 = !{!"0x7825b40.w1.b1", !8994, i64 0}
!9008 = !{!9009, !9009, i64 0}
!9009 = !{!"0x7825b40.w1.b2", !9010, i64 0}
!9010 = !{!"0x7825b40.w2.b2", !8995, i64 0}
!9011 = !{!9012, !9012, i64 0}
!9012 = !{!"0x7825b40.w1.b3", !9010, i64 0}
!9013 = !{!9014, !9014, i64 0}
!9014 = !{!"0x7825b40.w1.b4", !9015, i64 0}
!9015 = !{!"0x7825b40.w2.b4", !9016, i64 0}
!9016 = !{!"0x7825b40.w4.b4", !8996, i64 0}
!9017 = !{!9018, !9018, i64 0}
!9018 = !{!"0x7826810.w8.b0", !9019, i64 0}
!9019 = !{!"0x7826810.w16.b0", !9020, i64 0}
!9020 = !{!"0x7826810.w32.b0", !9021, i64 0}
!9021 = !{!"0x7826810.w64.b0", !9022, i64 0}
!9022 = !{!"0x7826810.w128.b0", !9023, i64 0}
!9023 = !{!"0x7826810.w256.b0", !9024, i64 0}
!9024 = !{!"0x7826810.w512.b0", !9025, i64 0}
!9025 = !{!"0x7826810.w1024.b0", !9026, i64 0}
!9026 = !{!"int64", !9027, i64 0}
!9027 = !{!"0x7826810", !8, i64 0}
!9028 = !{!9029, !9029, i64 0}
!9029 = !{!"0x7826810.w1.b0", !9030, i64 0}
!9030 = !{!"0x7826810.w2.b0", !9031, i64 0}
!9031 = !{!"0x7826810.w4.b0", !9018, i64 0}
!9032 = !{!9033, !9033, i64 0}
!9033 = !{!"0x7827a70.w1.b0", !9034, i64 0}
!9034 = !{!"0x7827a70.w2.b0", !9035, i64 0}
!9035 = !{!"0x7827a70.w4.b0", !9036, i64 0}
!9036 = !{!"0x7827a70.w8.b0", !9037, i64 0}
!9037 = !{!"0x7827a70.w16.b0", !9038, i64 0}
!9038 = !{!"0x7827a70.w32.b0", !9039, i64 0}
!9039 = !{!"0x7827a70.w64.b0", !9040, i64 0}
!9040 = !{!"0x7827a70.w128.b0", !9041, i64 0}
!9041 = !{!"0x7827a70.w256.b0", !9042, i64 0}
!9042 = !{!"0x7827a70.w512.b0", !9043, i64 0}
!9043 = !{!"0x7827a70.w1024.b0", !9044, i64 0}
!9044 = !{!"int64", !9045, i64 0}
!9045 = !{!"0x7827a70", !8, i64 0}
!9046 = !{!9047, !9047, i64 0}
!9047 = !{!"0x7827a70.w1.b1", !9034, i64 0}
!9048 = !{!9049, !9049, i64 0}
!9049 = !{!"0x7827a70.w1.b2", !9050, i64 0}
!9050 = !{!"0x7827a70.w2.b2", !9035, i64 0}
!9051 = !{!9052, !9052, i64 0}
!9052 = !{!"0x7827a70.w1.b3", !9050, i64 0}
!9053 = !{!9054, !9054, i64 0}
!9054 = !{!"0x7827a70.w1.b4", !9055, i64 0}
!9055 = !{!"0x7827a70.w2.b4", !9056, i64 0}
!9056 = !{!"0x7827a70.w4.b4", !9036, i64 0}
!9057 = !{!9058, !9058, i64 0}
!9058 = !{!"0x7827ac0.w8.b0", !9059, i64 0}
!9059 = !{!"0x7827ac0.w16.b0", !9060, i64 0}
!9060 = !{!"0x7827ac0.w32.b0", !9061, i64 0}
!9061 = !{!"0x7827ac0.w64.b0", !9062, i64 0}
!9062 = !{!"0x7827ac0.w128.b0", !9063, i64 0}
!9063 = !{!"0x7827ac0.w256.b0", !9064, i64 0}
!9064 = !{!"0x7827ac0.w512.b0", !9065, i64 0}
!9065 = !{!"0x7827ac0.w1024.b0", !9066, i64 0}
!9066 = !{!"int64", !9067, i64 0}
!9067 = !{!"0x7827ac0", !8, i64 0}
!9068 = !{!9069, !9069, i64 0}
!9069 = !{!"0x7827ac0.w1.b0", !9070, i64 0}
!9070 = !{!"0x7827ac0.w2.b0", !9071, i64 0}
!9071 = !{!"0x7827ac0.w4.b0", !9058, i64 0}
!9072 = !{!9073, !9073, i64 0}
!9073 = !{!"0x7828940.w1.b0", !9074, i64 0}
!9074 = !{!"0x7828940.w2.b0", !9075, i64 0}
!9075 = !{!"0x7828940.w4.b0", !9076, i64 0}
!9076 = !{!"0x7828940.w8.b0", !9077, i64 0}
!9077 = !{!"0x7828940.w16.b0", !9078, i64 0}
!9078 = !{!"0x7828940.w32.b0", !9079, i64 0}
!9079 = !{!"0x7828940.w64.b0", !9080, i64 0}
!9080 = !{!"0x7828940.w128.b0", !9081, i64 0}
!9081 = !{!"0x7828940.w256.b0", !9082, i64 0}
!9082 = !{!"0x7828940.w512.b0", !9083, i64 0}
!9083 = !{!"0x7828940.w1024.b0", !9084, i64 0}
!9084 = !{!"int64", !9085, i64 0}
!9085 = !{!"0x7828940", !8, i64 0}
!9086 = !{!9087, !9087, i64 0}
!9087 = !{!"0x7828940.w1.b1", !9074, i64 0}
!9088 = !{!9089, !9089, i64 0}
!9089 = !{!"0x7828940.w1.b2", !9090, i64 0}
!9090 = !{!"0x7828940.w2.b2", !9075, i64 0}
!9091 = !{!9092, !9092, i64 0}
!9092 = !{!"0x7828940.w1.b3", !9090, i64 0}
!9093 = !{!9094, !9094, i64 0}
!9094 = !{!"0x7828940.w1.b4", !9095, i64 0}
!9095 = !{!"0x7828940.w2.b4", !9096, i64 0}
!9096 = !{!"0x7828940.w4.b4", !9076, i64 0}
!9097 = !{!9098, !9098, i64 0}
!9098 = !{!"0x7829dc0.w8.b0", !9099, i64 0}
!9099 = !{!"0x7829dc0.w16.b0", !9100, i64 0}
!9100 = !{!"0x7829dc0.w32.b0", !9101, i64 0}
!9101 = !{!"0x7829dc0.w64.b0", !9102, i64 0}
!9102 = !{!"0x7829dc0.w128.b0", !9103, i64 0}
!9103 = !{!"0x7829dc0.w256.b0", !9104, i64 0}
!9104 = !{!"0x7829dc0.w512.b0", !9105, i64 0}
!9105 = !{!"0x7829dc0.w1024.b0", !9106, i64 0}
!9106 = !{!"int64", !9107, i64 0}
!9107 = !{!"0x7829dc0", !8, i64 0}
!9108 = !{!9109, !9109, i64 0}
!9109 = !{!"0x7829dc0.w1.b0", !9110, i64 0}
!9110 = !{!"0x7829dc0.w2.b0", !9111, i64 0}
!9111 = !{!"0x7829dc0.w4.b0", !9098, i64 0}
!9112 = !{!9113, !9113, i64 0}
!9113 = !{!"float32", !9114, i64 0}
!9114 = !{!"0x780d7c0", !8, i64 0}
!9115 = !{!9116, !9116, i64 0}
!9116 = !{!"float32", !9117, i64 0}
!9117 = !{!"0x78125e0", !8, i64 0}
!9118 = !{!9119, !9119, i64 0}
!9119 = !{!"float32", !9120, i64 0}
!9120 = !{!"0x7811b70", !8, i64 0}
!9121 = !{!9122, !9122, i64 0}
!9122 = !{!"float32", !9123, i64 0}
!9123 = !{!"0x780ae50", !8, i64 0}
!9124 = !{!9125, !9125, i64 0}
!9125 = !{!"float32", !9126, i64 0}
!9126 = !{!"0x7812120", !8, i64 0}
!9127 = !{!9128, !9128, i64 0}
!9128 = !{!"float32", !9129, i64 0}
!9129 = !{!"0x7811ef0", !8, i64 0}
!9130 = !{!9131, !9131, i64 0}
!9131 = !{!"float32", !9132, i64 0}
!9132 = !{!"0x7811bc0", !8, i64 0}
!9133 = !{!9134, !9134, i64 0}
!9134 = !{!"0x7812170.w32.b0", !9135, i64 0}
!9135 = !{!"0x7812170.w64.b0", !9136, i64 0}
!9136 = !{!"0x7812170.w128.b0", !9137, i64 0}
!9137 = !{!"0x7812170.w256.b0", !9138, i64 0}
!9138 = !{!"0x7812170.w512.b0", !9139, i64 0}
!9139 = !{!"0x7812170.w1024.b0", !9140, i64 0}
!9140 = !{!"float32", !9141, i64 0}
!9141 = !{!"0x7812170", !8, i64 0}
